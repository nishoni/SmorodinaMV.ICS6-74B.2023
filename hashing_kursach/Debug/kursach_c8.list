
kursach_c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdb0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  0800cec0  0800cec0  0001cec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d65c  0800d65c  00020460  2**0
                  CONTENTS
  4 .ARM          00000000  0800d65c  0800d65c  00020460  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d65c  0800d65c  00020460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d65c  0800d65c  0001d65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d660  0800d660  0001d660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000460  20000000  0800d664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000460  0800dac4  00020460  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  0800dac4  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009af3  00000000  00000000  00020489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb7  00000000  00000000  00029f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0002be38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002c690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001888f  00000000  00000000  0002ce00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b2e7  00000000  00000000  0004568f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008431d  00000000  00000000  00050976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4c93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a4  00000000  00000000  000d4ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000460 	.word	0x20000460
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cea8 	.word	0x0800cea8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000464 	.word	0x20000464
 800014c:	0800cea8 	.word	0x0800cea8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <do_algorithm>:
 *  Created on: Nov 28, 2023
 *      Author: Pizza Delivery
 */
#include "algorithm_interface.h"

void do_algorithm(int8_t* data, int algorithm_id) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b0b0      	sub	sp, #192	; 0xc0
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	// hashing data with chosen algorithm
	state = 2;
 8000be2:	4bb5      	ldr	r3, [pc, #724]	; (8000eb8 <do_algorithm+0x2e0>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	601a      	str	r2, [r3, #0]
	lcd_clear();
 8000be8:	f000 fba6 	bl	8001338 <lcd_clear>
	lcd_init();
 8000bec:	f000 fa44 	bl	8001078 <lcd_init>
	switch (algorithm_id) {
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d019      	beq.n	8000c2a <do_algorithm+0x52>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	dc1e      	bgt.n	8000c3a <do_algorithm+0x62>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <do_algorithm+0x32>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d008      	beq.n	8000c1a <do_algorithm+0x42>
 8000c08:	e017      	b.n	8000c3a <do_algorithm+0x62>
		case 0:
			lcd_init();
 8000c0a:	f000 fa35 	bl	8001078 <lcd_init>
			lcd_puts(0, 0, (int8_t*)"You chose sha256");
 8000c0e:	4aab      	ldr	r2, [pc, #684]	; (8000ebc <do_algorithm+0x2e4>)
 8000c10:	2100      	movs	r1, #0
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 fb3e 	bl	8001294 <lcd_puts>
			break;
 8000c18:	e01f      	b.n	8000c5a <do_algorithm+0x82>
		case 1:
			lcd_init();
 8000c1a:	f000 fa2d 	bl	8001078 <lcd_init>
			lcd_puts(0, 0, (int8_t*)"You chose md5");
 8000c1e:	4aa8      	ldr	r2, [pc, #672]	; (8000ec0 <do_algorithm+0x2e8>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 fb36 	bl	8001294 <lcd_puts>
			break;
 8000c28:	e017      	b.n	8000c5a <do_algorithm+0x82>
		case 2:
			lcd_init();
 8000c2a:	f000 fa25 	bl	8001078 <lcd_init>
			lcd_puts(0, 0, (int8_t*)"You chose crc16");
 8000c2e:	4aa5      	ldr	r2, [pc, #660]	; (8000ec4 <do_algorithm+0x2ec>)
 8000c30:	2100      	movs	r1, #0
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 fb2e 	bl	8001294 <lcd_puts>
			break;
 8000c38:	e00f      	b.n	8000c5a <do_algorithm+0x82>
		default:
			lcd_init();
 8000c3a:	f000 fa1d 	bl	8001078 <lcd_init>
			int8_t *error_msg = "Unexpected algorithm chosen";
 8000c3e:	4ba2      	ldr	r3, [pc, #648]	; (8000ec8 <do_algorithm+0x2f0>)
 8000c40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			lcd_puts(0, 0, (int8_t*) error_msg);
 8000c44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 fb22 	bl	8001294 <lcd_puts>
			HAL_Delay(1000);
 8000c50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c54:	f005 fe54 	bl	8006900 <HAL_Delay>
			break;
 8000c58:	bf00      	nop
	}

	HAL_Delay(1000);
 8000c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c5e:	f005 fe4f 	bl	8006900 <HAL_Delay>
	int8_t *result;
	char *output;
	int j = 0, i = 0, k = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	lcd_init();
 8000c74:	f000 fa00 	bl	8001078 <lcd_init>
	HAL_UART_Transmit_IT(&huart2, (int8_t*)"\r\n\r\nYour data:\r\n", 15);
 8000c78:	220f      	movs	r2, #15
 8000c7a:	4994      	ldr	r1, [pc, #592]	; (8000ecc <do_algorithm+0x2f4>)
 8000c7c:	4894      	ldr	r0, [pc, #592]	; (8000ed0 <do_algorithm+0x2f8>)
 8000c7e:	f006 fec9 	bl	8007a14 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8000c82:	2064      	movs	r0, #100	; 0x64
 8000c84:	f005 fe3c 	bl	8006900 <HAL_Delay>
	HAL_UART_Transmit_IT(&huart2, (int8_t*)data, strlen(data));
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff fa61 	bl	8000150 <strlen>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	461a      	mov	r2, r3
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	488e      	ldr	r0, [pc, #568]	; (8000ed0 <do_algorithm+0x2f8>)
 8000c98:	f006 febc 	bl	8007a14 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart2, (int8_t*)"\r\n", 2);
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	498d      	ldr	r1, [pc, #564]	; (8000ed4 <do_algorithm+0x2fc>)
 8000ca0:	488b      	ldr	r0, [pc, #556]	; (8000ed0 <do_algorithm+0x2f8>)
 8000ca2:	f006 feb7 	bl	8007a14 <HAL_UART_Transmit_IT>
	switch (algorithm_id) {
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	f000 8127 	beq.w	8000efc <do_algorithm+0x324>
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	f300 8171 	bgt.w	8000f98 <do_algorithm+0x3c0>
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d004      	beq.n	8000cc6 <do_algorithm+0xee>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	f000 8092 	beq.w	8000de8 <do_algorithm+0x210>
 8000cc4:	e168      	b.n	8000f98 <do_algorithm+0x3c0>
			case 0:
				// sha256

				lcd_clear();
 8000cc6:	f000 fb37 	bl	8001338 <lcd_clear>
				lcd_init();
 8000cca:	f000 f9d5 	bl	8001078 <lcd_init>
				lcd_puts(0, 0, (uint8_t*)"Starting sha256");
 8000cce:	4a82      	ldr	r2, [pc, #520]	; (8000ed8 <do_algorithm+0x300>)
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f000 fade 	bl	8001294 <lcd_puts>
				sha256_context foo;
				unsigned char hash[32];

				sha256_init(&foo);
 8000cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 ff4f 	bl	8001b80 <sha256_init>
				sha256_update(&foo, data, strlen(data));
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fa34 	bl	8000150 <strlen>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f005 facf 	bl	8006294 <sha256_update>
				sha256_finish(&foo, hash);
 8000cf6:	f107 020c 	add.w	r2, r7, #12
 8000cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f005 fb2f 	bl	8006364 <sha256_finish>

				HAL_Delay(1000);
 8000d06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0a:	f005 fdf9 	bl	8006900 <HAL_Delay>
				lcd_clear();
 8000d0e:	f000 fb13 	bl	8001338 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Result of sha256:");
 8000d12:	4a72      	ldr	r2, [pc, #456]	; (8000edc <do_algorithm+0x304>)
 8000d14:	2100      	movs	r1, #0
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 fabc 	bl	8001294 <lcd_puts>
				HAL_UART_Transmit_IT(&huart2, (int8_t*)"\r\nResult of sha256:\r\n", 24);
 8000d1c:	2218      	movs	r2, #24
 8000d1e:	4970      	ldr	r1, [pc, #448]	; (8000ee0 <do_algorithm+0x308>)
 8000d20:	486b      	ldr	r0, [pc, #428]	; (8000ed0 <do_algorithm+0x2f8>)
 8000d22:	f006 fe77 	bl	8007a14 <HAL_UART_Transmit_IT>
				HAL_Delay(500);
 8000d26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d2a:	f005 fde9 	bl	8006900 <HAL_Delay>

				lcd_clear();
 8000d2e:	f000 fb03 	bl	8001338 <lcd_clear>
				while (k < 32) {
 8000d32:	e045      	b.n	8000dc0 <do_algorithm+0x1e8>
					if (k == 16) {
 8000d34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d38:	2b10      	cmp	r3, #16
 8000d3a:	d110      	bne.n	8000d5e <do_algorithm+0x186>
						HAL_Delay(2000);
 8000d3c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d40:	f005 fdde 	bl	8006900 <HAL_Delay>
						lcd_clear();
 8000d44:	f000 faf8 	bl	8001338 <lcd_clear>
						i = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						j = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
						HAL_UART_Transmit_IT(&huart2, (int8_t*)"\r\n", 2);
 8000d54:	2202      	movs	r2, #2
 8000d56:	495f      	ldr	r1, [pc, #380]	; (8000ed4 <do_algorithm+0x2fc>)
 8000d58:	485d      	ldr	r0, [pc, #372]	; (8000ed0 <do_algorithm+0x2f8>)
 8000d5a:	f006 fe5b 	bl	8007a14 <HAL_UART_Transmit_IT>
					}
					sprintf(output, "%02x", hash[k]);
 8000d5e:	f107 020c 	add.w	r2, r7, #12
 8000d62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d66:	4413      	add	r3, r2
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	495d      	ldr	r1, [pc, #372]	; (8000ee4 <do_algorithm+0x30c>)
 8000d6e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000d72:	f008 fbf7 	bl	8009564 <siprintf>
					if (i == 16) {
 8000d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000d7a:	2b10      	cmp	r3, #16
 8000d7c:	d105      	bne.n	8000d8a <do_algorithm+0x1b2>
						i = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						j = 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					}
					lcd_puts(j, i, (uint8_t*)output);
 8000d8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000d8e:	b25b      	sxtb	r3, r3
 8000d90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000d94:	b251      	sxtb	r1, r2
 8000d96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 fa7a 	bl	8001294 <lcd_puts>
					HAL_UART_Transmit_IT(&huart2, (int8_t*)output, 2);
 8000da0:	2202      	movs	r2, #2
 8000da2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000da6:	484a      	ldr	r0, [pc, #296]	; (8000ed0 <do_algorithm+0x2f8>)
 8000da8:	f006 fe34 	bl	8007a14 <HAL_UART_Transmit_IT>
					++k;
 8000dac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000db0:	3301      	adds	r3, #1
 8000db2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					i += 2;
 8000db6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000dba:	3302      	adds	r3, #2
 8000dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
				while (k < 32) {
 8000dc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000dc4:	2b1f      	cmp	r3, #31
 8000dc6:	ddb5      	ble.n	8000d34 <do_algorithm+0x15c>
				}

				HAL_Delay(1000);
 8000dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dcc:	f005 fd98 	bl	8006900 <HAL_Delay>
				lcd_clear();
 8000dd0:	f000 fab2 	bl	8001338 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Finished sha256");
 8000dd4:	4a44      	ldr	r2, [pc, #272]	; (8000ee8 <do_algorithm+0x310>)
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f000 fa5b 	bl	8001294 <lcd_puts>
				HAL_Delay(1000);
 8000dde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de2:	f005 fd8d 	bl	8006900 <HAL_Delay>
				break;
 8000de6:	e0e7      	b.n	8000fb8 <do_algorithm+0x3e0>
			case 1:
				// md5
				lcd_clear();
 8000de8:	f000 faa6 	bl	8001338 <lcd_clear>
				lcd_init();
 8000dec:	f000 f944 	bl	8001078 <lcd_init>
				lcd_puts(0, 0, (uint8_t*)"Starting md5");
 8000df0:	4a3e      	ldr	r2, [pc, #248]	; (8000eec <do_algorithm+0x314>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 fa4d 	bl	8001294 <lcd_puts>
				uint8_t md5_result[16];
				md5String(data, md5_result);
 8000dfa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dfe:	4619      	mov	r1, r3
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 fe97 	bl	8001b34 <md5String>

				HAL_Delay(1000);
 8000e06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0a:	f005 fd79 	bl	8006900 <HAL_Delay>
				lcd_clear();
 8000e0e:	f000 fa93 	bl	8001338 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Result of md5:");
 8000e12:	4a37      	ldr	r2, [pc, #220]	; (8000ef0 <do_algorithm+0x318>)
 8000e14:	2100      	movs	r1, #0
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 fa3c 	bl	8001294 <lcd_puts>
				HAL_UART_Transmit_IT(&huart2, (int8_t*)"\r\nResult of md5:\r\n", 20);
 8000e1c:	2214      	movs	r2, #20
 8000e1e:	4935      	ldr	r1, [pc, #212]	; (8000ef4 <do_algorithm+0x31c>)
 8000e20:	482b      	ldr	r0, [pc, #172]	; (8000ed0 <do_algorithm+0x2f8>)
 8000e22:	f006 fdf7 	bl	8007a14 <HAL_UART_Transmit_IT>
				HAL_Delay(500);
 8000e26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e2a:	f005 fd69 	bl	8006900 <HAL_Delay>

				lcd_clear();
 8000e2e:	f000 fa83 	bl	8001338 <lcd_clear>

				while (k < 16) {
 8000e32:	e030      	b.n	8000e96 <do_algorithm+0x2be>
					sprintf((char*)output, "%02x", md5_result[k]);
 8000e34:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000e38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e3c:	4413      	add	r3, r2
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4928      	ldr	r1, [pc, #160]	; (8000ee4 <do_algorithm+0x30c>)
 8000e44:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000e48:	f008 fb8c 	bl	8009564 <siprintf>
					if (i == 16) {
 8000e4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000e50:	2b10      	cmp	r3, #16
 8000e52:	d105      	bne.n	8000e60 <do_algorithm+0x288>
						i = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						j = 1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					}

					lcd_puts(j, i, (uint8_t*)output);
 8000e60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000e64:	b25b      	sxtb	r3, r3
 8000e66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000e6a:	b251      	sxtb	r1, r2
 8000e6c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fa0f 	bl	8001294 <lcd_puts>
					HAL_UART_Transmit_IT(&huart2, (int8_t*)output, 2);
 8000e76:	2202      	movs	r2, #2
 8000e78:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000e7c:	4814      	ldr	r0, [pc, #80]	; (8000ed0 <do_algorithm+0x2f8>)
 8000e7e:	f006 fdc9 	bl	8007a14 <HAL_UART_Transmit_IT>
					k++;
 8000e82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e86:	3301      	adds	r3, #1
 8000e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					i += 2;
 8000e8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000e90:	3302      	adds	r3, #2
 8000e92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
				while (k < 16) {
 8000e96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e9a:	2b0f      	cmp	r3, #15
 8000e9c:	ddca      	ble.n	8000e34 <do_algorithm+0x25c>
				}

				HAL_Delay(1000);
 8000e9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea2:	f005 fd2d 	bl	8006900 <HAL_Delay>
				lcd_clear();
 8000ea6:	f000 fa47 	bl	8001338 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Finished md5");
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <do_algorithm+0x320>)
 8000eac:	2100      	movs	r1, #0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f9f0 	bl	8001294 <lcd_puts>
				break;
 8000eb4:	e080      	b.n	8000fb8 <do_algorithm+0x3e0>
 8000eb6:	bf00      	nop
 8000eb8:	2000050c 	.word	0x2000050c
 8000ebc:	0800cec0 	.word	0x0800cec0
 8000ec0:	0800ced4 	.word	0x0800ced4
 8000ec4:	0800cee4 	.word	0x0800cee4
 8000ec8:	0800cef4 	.word	0x0800cef4
 8000ecc:	0800cf10 	.word	0x0800cf10
 8000ed0:	200004c4 	.word	0x200004c4
 8000ed4:	0800cf24 	.word	0x0800cf24
 8000ed8:	0800cf28 	.word	0x0800cf28
 8000edc:	0800cf38 	.word	0x0800cf38
 8000ee0:	0800cf4c 	.word	0x0800cf4c
 8000ee4:	0800cf64 	.word	0x0800cf64
 8000ee8:	0800cf6c 	.word	0x0800cf6c
 8000eec:	0800cf7c 	.word	0x0800cf7c
 8000ef0:	0800cf8c 	.word	0x0800cf8c
 8000ef4:	0800cf9c 	.word	0x0800cf9c
 8000ef8:	0800cfb0 	.word	0x0800cfb0
			case 2:
				// crc16

				lcd_clear();
 8000efc:	f000 fa1c 	bl	8001338 <lcd_clear>
				lcd_init();
 8000f00:	f000 f8ba 	bl	8001078 <lcd_init>
				lcd_puts(0, 0, (uint8_t*)"Starting crc16");
 8000f04:	4a35      	ldr	r2, [pc, #212]	; (8000fdc <do_algorithm+0x404>)
 8000f06:	2100      	movs	r1, #0
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f000 f9c3 	bl	8001294 <lcd_puts>
				result = crc16(data, strlen(data));
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff f91e 	bl	8000150 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	4619      	mov	r1, r3
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f870 	bl	8001000 <crc16>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

				HAL_Delay(1000);
 8000f26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f2a:	f005 fce9 	bl	8006900 <HAL_Delay>
				lcd_clear();
 8000f2e:	f000 fa03 	bl	8001338 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Result of crc16:");
 8000f32:	4a2b      	ldr	r2, [pc, #172]	; (8000fe0 <do_algorithm+0x408>)
 8000f34:	2100      	movs	r1, #0
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f9ac 	bl	8001294 <lcd_puts>
				HAL_UART_Transmit_IT(&huart2, (int8_t*)"\r\nResult of crc16:\r\n", 23);
 8000f3c:	2217      	movs	r2, #23
 8000f3e:	4929      	ldr	r1, [pc, #164]	; (8000fe4 <do_algorithm+0x40c>)
 8000f40:	4829      	ldr	r0, [pc, #164]	; (8000fe8 <do_algorithm+0x410>)
 8000f42:	f006 fd67 	bl	8007a14 <HAL_UART_Transmit_IT>
				HAL_Delay(500);
 8000f46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f4a:	f005 fcd9 	bl	8006900 <HAL_Delay>

				sprintf(output, "%hX", result);
 8000f4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000f52:	4926      	ldr	r1, [pc, #152]	; (8000fec <do_algorithm+0x414>)
 8000f54:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000f58:	f008 fb04 	bl	8009564 <siprintf>
				HAL_Delay(1000);
 8000f5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f60:	f005 fcce 	bl	8006900 <HAL_Delay>
				lcd_clear();
 8000f64:	f000 f9e8 	bl	8001338 <lcd_clear>
				lcd_puts(0, 0, output);
 8000f68:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 f990 	bl	8001294 <lcd_puts>
				HAL_UART_Transmit_IT(&huart2, (int8_t*)output, 4);
 8000f74:	2204      	movs	r2, #4
 8000f76:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000f7a:	481b      	ldr	r0, [pc, #108]	; (8000fe8 <do_algorithm+0x410>)
 8000f7c:	f006 fd4a 	bl	8007a14 <HAL_UART_Transmit_IT>

				HAL_Delay(1000);
 8000f80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f84:	f005 fcbc 	bl	8006900 <HAL_Delay>
				lcd_clear();
 8000f88:	f000 f9d6 	bl	8001338 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Finished crc16");
 8000f8c:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <do_algorithm+0x418>)
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2000      	movs	r0, #0
 8000f92:	f000 f97f 	bl	8001294 <lcd_puts>
				break;
 8000f96:	e00f      	b.n	8000fb8 <do_algorithm+0x3e0>
			default:
				lcd_init();
 8000f98:	f000 f86e 	bl	8001078 <lcd_init>
				int8_t *error_msg = "Unexpected error in algorithms\r\n";
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <do_algorithm+0x41c>)
 8000f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				lcd_puts(0, 0, (int8_t*) error_msg);
 8000fa2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f000 f973 	bl	8001294 <lcd_puts>
				HAL_Delay(1000);
 8000fae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb2:	f005 fca5 	bl	8006900 <HAL_Delay>
				break;
 8000fb6:	bf00      	nop
		}
	HAL_UART_Transmit_IT(&huart2, (int8_t*)"\r\n\r\n", 4);
 8000fb8:	2204      	movs	r2, #4
 8000fba:	490f      	ldr	r1, [pc, #60]	; (8000ff8 <do_algorithm+0x420>)
 8000fbc:	480a      	ldr	r0, [pc, #40]	; (8000fe8 <do_algorithm+0x410>)
 8000fbe:	f006 fd29 	bl	8007a14 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc6:	f005 fc9b 	bl	8006900 <HAL_Delay>
	state = 0;
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <do_algorithm+0x424>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	lcd_clear();
 8000fd0:	f000 f9b2 	bl	8001338 <lcd_clear>
}
 8000fd4:	bf00      	nop
 8000fd6:	37c0      	adds	r7, #192	; 0xc0
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	0800cfc0 	.word	0x0800cfc0
 8000fe0:	0800cfd0 	.word	0x0800cfd0
 8000fe4:	0800cfe4 	.word	0x0800cfe4
 8000fe8:	200004c4 	.word	0x200004c4
 8000fec:	0800cffc 	.word	0x0800cffc
 8000ff0:	0800d000 	.word	0x0800d000
 8000ff4:	0800d010 	.word	0x0800d010
 8000ff8:	0800d034 	.word	0x0800d034
 8000ffc:	2000050c 	.word	0x2000050c

08001000 <crc16>:
  Check : 0x29B1 ("123456789")
  MaxLen: 4095 байт (32767 бит) - обнаружение
    одинарных, двойных, тройных и всех нечетных ошибок
*/
unsigned short crc16(unsigned char *data, unsigned short len)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 800100c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001010:	81fb      	strh	r3, [r7, #14]
    unsigned char i;

    while (len--)
 8001012:	e025      	b.n	8001060 <crc16+0x60>
    {
        crc ^= *data++ << 8;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b21a      	sxth	r2, r3
 8001020:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001024:	4053      	eors	r3, r2
 8001026:	b21b      	sxth	r3, r3
 8001028:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 800102a:	2300      	movs	r3, #0
 800102c:	737b      	strb	r3, [r7, #13]
 800102e:	e014      	b.n	800105a <crc16+0x5a>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 8001030:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001034:	2b00      	cmp	r3, #0
 8001036:	da09      	bge.n	800104c <crc16+0x4c>
 8001038:	89fb      	ldrh	r3, [r7, #14]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	b21b      	sxth	r3, r3
 800103e:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8001042:	f083 0301 	eor.w	r3, r3, #1
 8001046:	b21b      	sxth	r3, r3
 8001048:	b29b      	uxth	r3, r3
 800104a:	e002      	b.n	8001052 <crc16+0x52>
 800104c:	89fb      	ldrh	r3, [r7, #14]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	b29b      	uxth	r3, r3
 8001052:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	3301      	adds	r3, #1
 8001058:	737b      	strb	r3, [r7, #13]
 800105a:	7b7b      	ldrb	r3, [r7, #13]
 800105c:	2b07      	cmp	r3, #7
 800105e:	d9e7      	bls.n	8001030 <crc16+0x30>
    while (len--)
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	1e5a      	subs	r2, r3, #1
 8001064:	807a      	strh	r2, [r7, #2]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1d4      	bne.n	8001014 <crc16+0x14>
    }
    return crc;
 800106a:	89fb      	ldrh	r3, [r7, #14]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
	...

08001078 <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 800107c:	201e      	movs	r0, #30
 800107e:	f005 fc3f 	bl	8006900 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001088:	481c      	ldr	r0, [pc, #112]	; (80010fc <lcd_init+0x84>)
 800108a:	f005 ffb8 	bl	8006ffe <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001094:	4819      	ldr	r0, [pc, #100]	; (80010fc <lcd_init+0x84>)
 8001096:	f005 ffb2 	bl	8006ffe <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a0:	4816      	ldr	r0, [pc, #88]	; (80010fc <lcd_init+0x84>)
 80010a2:	f005 ffac 	bl	8006ffe <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ac:	4813      	ldr	r0, [pc, #76]	; (80010fc <lcd_init+0x84>)
 80010ae:	f005 ffa6 	bl	8006ffe <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010b8:	4810      	ldr	r0, [pc, #64]	; (80010fc <lcd_init+0x84>)
 80010ba:	f005 ffa0 	bl	8006ffe <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <lcd_init+0x84>)
 80010c6:	f005 ff9a 	bl	8006ffe <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d0:	480a      	ldr	r0, [pc, #40]	; (80010fc <lcd_init+0x84>)
 80010d2:	f005 ff94 	bl	8006ffe <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 80010d6:	2128      	movs	r1, #40	; 0x28
 80010d8:	2000      	movs	r0, #0
 80010da:	f000 f811 	bl	8001100 <lcd_write>
	lcd_write(0,0x0c);
 80010de:	210c      	movs	r1, #12
 80010e0:	2000      	movs	r0, #0
 80010e2:	f000 f80d 	bl	8001100 <lcd_write>
	lcd_write(0,0x06);
 80010e6:	2106      	movs	r1, #6
 80010e8:	2000      	movs	r0, #0
 80010ea:	f000 f809 	bl	8001100 <lcd_write>
	lcd_write(0,0x01);
 80010ee:	2101      	movs	r1, #1
 80010f0:	2000      	movs	r0, #0
 80010f2:	f000 f805 	bl	8001100 <lcd_write>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40010c00 	.word	0x40010c00

08001100 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(int8_t type, int8_t data)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	460a      	mov	r2, r1
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(2);
 8001110:	2002      	movs	r0, #2
 8001112:	f005 fbf5 	bl	8006900 <HAL_Delay>
	if(type)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d006      	beq.n	800112c <lcd_write+0x2c>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 800111e:	2201      	movs	r2, #1
 8001120:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001124:	485a      	ldr	r0, [pc, #360]	; (8001290 <lcd_write+0x190>)
 8001126:	f005 ff6a 	bl	8006ffe <HAL_GPIO_WritePin>
 800112a:	e005      	b.n	8001138 <lcd_write+0x38>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001132:	4857      	ldr	r0, [pc, #348]	; (8001290 <lcd_write+0x190>)
 8001134:	f005 ff63 	bl	8006ffe <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 8001138:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800113c:	2b00      	cmp	r3, #0
 800113e:	da06      	bge.n	800114e <lcd_write+0x4e>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8001140:	2201      	movs	r2, #1
 8001142:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001146:	4852      	ldr	r0, [pc, #328]	; (8001290 <lcd_write+0x190>)
 8001148:	f005 ff59 	bl	8006ffe <HAL_GPIO_WritePin>
 800114c:	e005      	b.n	800115a <lcd_write+0x5a>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001154:	484e      	ldr	r0, [pc, #312]	; (8001290 <lcd_write+0x190>)
 8001156:	f005 ff52 	bl	8006ffe <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <lcd_write+0x72>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800116a:	4849      	ldr	r0, [pc, #292]	; (8001290 <lcd_write+0x190>)
 800116c:	f005 ff47 	bl	8006ffe <HAL_GPIO_WritePin>
 8001170:	e005      	b.n	800117e <lcd_write+0x7e>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001178:	4845      	ldr	r0, [pc, #276]	; (8001290 <lcd_write+0x190>)
 800117a:	f005 ff40 	bl	8006ffe <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 800117e:	79bb      	ldrb	r3, [r7, #6]
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <lcd_write+0x96>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118e:	4840      	ldr	r0, [pc, #256]	; (8001290 <lcd_write+0x190>)
 8001190:	f005 ff35 	bl	8006ffe <HAL_GPIO_WritePin>
 8001194:	e005      	b.n	80011a2 <lcd_write+0xa2>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800119c:	483c      	ldr	r0, [pc, #240]	; (8001290 <lcd_write+0x190>)
 800119e:	f005 ff2e 	bl	8006ffe <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d006      	beq.n	80011ba <lcd_write+0xba>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b2:	4837      	ldr	r0, [pc, #220]	; (8001290 <lcd_write+0x190>)
 80011b4:	f005 ff23 	bl	8006ffe <HAL_GPIO_WritePin>
 80011b8:	e005      	b.n	80011c6 <lcd_write+0xc6>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c0:	4833      	ldr	r0, [pc, #204]	; (8001290 <lcd_write+0x190>)
 80011c2:	f005 ff1c 	bl	8006ffe <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011cc:	4830      	ldr	r0, [pc, #192]	; (8001290 <lcd_write+0x190>)
 80011ce:	f005 ff16 	bl	8006ffe <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d8:	482d      	ldr	r0, [pc, #180]	; (8001290 <lcd_write+0x190>)
 80011da:	f005 ff10 	bl	8006ffe <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <lcd_write+0xf6>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ee:	4828      	ldr	r0, [pc, #160]	; (8001290 <lcd_write+0x190>)
 80011f0:	f005 ff05 	bl	8006ffe <HAL_GPIO_WritePin>
 80011f4:	e005      	b.n	8001202 <lcd_write+0x102>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fc:	4824      	ldr	r0, [pc, #144]	; (8001290 <lcd_write+0x190>)
 80011fe:	f005 fefe 	bl	8006ffe <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <lcd_write+0x11a>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001212:	481f      	ldr	r0, [pc, #124]	; (8001290 <lcd_write+0x190>)
 8001214:	f005 fef3 	bl	8006ffe <HAL_GPIO_WritePin>
 8001218:	e005      	b.n	8001226 <lcd_write+0x126>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001220:	481b      	ldr	r0, [pc, #108]	; (8001290 <lcd_write+0x190>)
 8001222:	f005 feec 	bl	8006ffe <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d006      	beq.n	800123e <lcd_write+0x13e>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8001230:	2201      	movs	r2, #1
 8001232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001236:	4816      	ldr	r0, [pc, #88]	; (8001290 <lcd_write+0x190>)
 8001238:	f005 fee1 	bl	8006ffe <HAL_GPIO_WritePin>
 800123c:	e005      	b.n	800124a <lcd_write+0x14a>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001244:	4812      	ldr	r0, [pc, #72]	; (8001290 <lcd_write+0x190>)
 8001246:	f005 feda 	bl	8006ffe <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 800124a:	79bb      	ldrb	r3, [r7, #6]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d006      	beq.n	8001262 <lcd_write+0x162>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <lcd_write+0x190>)
 800125c:	f005 fecf 	bl	8006ffe <HAL_GPIO_WritePin>
 8001260:	e005      	b.n	800126e <lcd_write+0x16e>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001268:	4809      	ldr	r0, [pc, #36]	; (8001290 <lcd_write+0x190>)
 800126a:	f005 fec8 	bl	8006ffe <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001274:	4806      	ldr	r0, [pc, #24]	; (8001290 <lcd_write+0x190>)
 8001276:	f005 fec2 	bl	8006ffe <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <lcd_write+0x190>)
 8001282:	f005 febc 	bl	8006ffe <HAL_GPIO_WritePin>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40010c00 	.word	0x40010c00

08001294 <lcd_puts>:

void lcd_puts(int8_t x, int8_t y, int8_t *string)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	603a      	str	r2, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
 80012a0:	460b      	mov	r3, r1
 80012a2:	71bb      	strb	r3, [r7, #6]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d83a      	bhi.n	8001322 <lcd_puts+0x8e>
 80012ac:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <lcd_puts+0x20>)
 80012ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b2:	bf00      	nop
 80012b4:	080012c5 	.word	0x080012c5
 80012b8:	080012d7 	.word	0x080012d7
 80012bc:	080012e9 	.word	0x080012e9
 80012c0:	080012fb 	.word	0x080012fb
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 80012c4:	79bb      	ldrb	r3, [r7, #6]
 80012c6:	3b80      	subs	r3, #128	; 0x80
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	4619      	mov	r1, r3
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff ff16 	bl	8001100 <lcd_write>
			break;
 80012d4:	e01a      	b.n	800130c <lcd_puts+0x78>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	3b40      	subs	r3, #64	; 0x40
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	b25b      	sxtb	r3, r3
 80012de:	4619      	mov	r1, r3
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff ff0d 	bl	8001100 <lcd_write>
			break;
 80012e6:	e011      	b.n	800130c <lcd_puts+0x78>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	3b70      	subs	r3, #112	; 0x70
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	4619      	mov	r1, r3
 80012f2:	2000      	movs	r0, #0
 80012f4:	f7ff ff04 	bl	8001100 <lcd_write>
			break;
 80012f8:	e008      	b.n	800130c <lcd_puts+0x78>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	3b30      	subs	r3, #48	; 0x30
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	b25b      	sxtb	r3, r3
 8001302:	4619      	mov	r1, r3
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff fefb 	bl	8001100 <lcd_write>
			break;
 800130a:	bf00      	nop
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 800130c:	e009      	b.n	8001322 <lcd_puts+0x8e>
	{
		lcd_write(1,*string);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	f993 3000 	ldrsb.w	r3, [r3]
 8001314:	4619      	mov	r1, r3
 8001316:	2001      	movs	r0, #1
 8001318:	f7ff fef2 	bl	8001100 <lcd_write>
		string++;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	603b      	str	r3, [r7, #0]
	while(*string)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f993 3000 	ldrsb.w	r3, [r3]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f0      	bne.n	800130e <lcd_puts+0x7a>
	}
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop

08001338 <lcd_clear>:
void lcd_clear(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 800133c:	2101      	movs	r1, #1
 800133e:	2000      	movs	r0, #0
 8001340:	f7ff fede 	bl	8001100 <lcd_write>
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <chosen_algorithm>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int8_t* chosen_algorithm(int id) {
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	switch (id) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d00d      	beq.n	8001372 <chosen_algorithm+0x2a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b02      	cmp	r3, #2
 800135a:	dc0c      	bgt.n	8001376 <chosen_algorithm+0x2e>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <chosen_algorithm+0x22>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d002      	beq.n	800136e <chosen_algorithm+0x26>
 8001368:	e005      	b.n	8001376 <chosen_algorithm+0x2e>
		case 0:
			return "sha256";
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <chosen_algorithm+0x3c>)
 800136c:	e004      	b.n	8001378 <chosen_algorithm+0x30>
		case 1:
			return "md5";
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <chosen_algorithm+0x40>)
 8001370:	e002      	b.n	8001378 <chosen_algorithm+0x30>
		case 2:
			return "crc16";
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <chosen_algorithm+0x44>)
 8001374:	e000      	b.n	8001378 <chosen_algorithm+0x30>
		default:
			return "Invalid algorithm";
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <chosen_algorithm+0x48>)
			break;
	}
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	0800d03c 	.word	0x0800d03c
 8001388:	0800d044 	.word	0x0800d044
 800138c:	0800d048 	.word	0x0800d048
 8001390:	0800d050 	.word	0x0800d050

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139a:	f005 fa4f 	bl	800683c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139e:	f000 f8cb 	bl	8001538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a2:	f000 f959 	bl	8001658 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013a6:	f000 f92d 	bl	8001604 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80013aa:	f000 f901 	bl	80015b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

//  HAL_UART_Transmit_IT(&huart1, "hi", 2);
  HAL_Delay(1000);
 80013ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b2:	f005 faa5 	bl	8006900 <HAL_Delay>
  int8_t *output, *data = NULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  int alg_id = 0, not_asked_for_input = 1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	2301      	movs	r3, #1
 80013c0:	607b      	str	r3, [r7, #4]
  lcd_init();
 80013c2:	f7ff fe59 	bl	8001078 <lcd_init>

    /* USER CODE BEGIN 3 */
	  /* scrolling through algorithms
	  			ids: 0 - sha, 1 - md, 2 - crc
	  	  */
	  if (state == 0) {
 80013c6:	4b56      	ldr	r3, [pc, #344]	; (8001520 <main+0x18c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d141      	bne.n	8001452 <main+0xbe>
		  if (not_asked_for_input == 1) {
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d10d      	bne.n	80013f0 <main+0x5c>
			  lcd_puts(0, 0, "Input data");
 80013d4:	4a53      	ldr	r2, [pc, #332]	; (8001524 <main+0x190>)
 80013d6:	2100      	movs	r1, #0
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff ff5b 	bl	8001294 <lcd_puts>
			  not_asked_for_input = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
			  data = (int8_t*)calloc(1000, sizeof(int8_t));
 80013e2:	2101      	movs	r1, #1
 80013e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013e8:	f007 f8f6 	bl	80085d8 <calloc>
 80013ec:	4603      	mov	r3, r0
 80013ee:	60fb      	str	r3, [r7, #12]
		  }

		  // Input place
		  switch (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_14)) {
 80013f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f4:	484c      	ldr	r0, [pc, #304]	; (8001528 <main+0x194>)
 80013f6:	f005 fdeb 	bl	8006fd0 <HAL_GPIO_ReadPin>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <main+0x72>
 8001400:	2b01      	cmp	r3, #1
 8001402:	d008      	beq.n	8001416 <main+0x82>
 8001404:	e00d      	b.n	8001422 <main+0x8e>
		  	  case 0: // computer
		  		HAL_UART_Receive(&huart2, (int8_t*)data, 1000, 3000);
 8001406:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800140a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800140e:	68f9      	ldr	r1, [r7, #12]
 8001410:	4846      	ldr	r0, [pc, #280]	; (800152c <main+0x198>)
 8001412:	f006 fa6d 	bl	80078f0 <HAL_UART_Receive>
		  	  case 1: // phone
		  		HAL_UART_Receive_IT(&huart1, (int8_t*)data, 1000);
 8001416:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800141a:	68f9      	ldr	r1, [r7, #12]
 800141c:	4844      	ldr	r0, [pc, #272]	; (8001530 <main+0x19c>)
 800141e:	f006 fb2e 	bl	8007a7e <HAL_UART_Receive_IT>
		  }


		  if (data && strlen(data) != 0) {
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0ce      	beq.n	80013c6 <main+0x32>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0ca      	beq.n	80013c6 <main+0x32>
			  lcd_clear();
 8001430:	f7ff ff82 	bl	8001338 <lcd_clear>
			  lcd_puts(0, 0, data);
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	2100      	movs	r1, #0
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff ff2b 	bl	8001294 <lcd_puts>
			  HAL_Delay(1000);
 800143e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001442:	f005 fa5d 	bl	8006900 <HAL_Delay>
			  lcd_clear();
 8001446:	f7ff ff77 	bl	8001338 <lcd_clear>
			  state = 1;
 800144a:	4b35      	ldr	r3, [pc, #212]	; (8001520 <main+0x18c>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e7b9      	b.n	80013c6 <main+0x32>
		  }
	  } else if (state == 1) {
 8001452:	4b33      	ldr	r3, [pc, #204]	; (8001520 <main+0x18c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d153      	bne.n	8001502 <main+0x16e>
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1) {
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	4832      	ldr	r0, [pc, #200]	; (8001528 <main+0x194>)
 800145e:	f005 fdb7 	bl	8006fd0 <HAL_GPIO_ReadPin>
 8001462:	4603      	mov	r3, r0
 8001464:	2b01      	cmp	r3, #1
 8001466:	d10b      	bne.n	8001480 <main+0xec>
			  if (alg_id < 2) {
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	2b01      	cmp	r3, #1
 800146c:	dc03      	bgt.n	8001476 <main+0xe2>
				  alg_id++;
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	3301      	adds	r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	e001      	b.n	800147a <main+0xe6>
			  } else {
				  alg_id = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
			  }
			  lcd_clear();
 800147a:	f7ff ff5d 	bl	8001338 <lcd_clear>
 800147e:	e02e      	b.n	80014de <main+0x14a>
		  } else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) {
 8001480:	2140      	movs	r1, #64	; 0x40
 8001482:	4829      	ldr	r0, [pc, #164]	; (8001528 <main+0x194>)
 8001484:	f005 fda4 	bl	8006fd0 <HAL_GPIO_ReadPin>
 8001488:	4603      	mov	r3, r0
 800148a:	2b01      	cmp	r3, #1
 800148c:	d10b      	bne.n	80014a6 <main+0x112>
			  if (alg_id > 0) {
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	dd03      	ble.n	800149c <main+0x108>
				  alg_id--;
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	3b01      	subs	r3, #1
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	e001      	b.n	80014a0 <main+0x10c>
			  } else {
				alg_id = 2;
 800149c:	2302      	movs	r3, #2
 800149e:	60bb      	str	r3, [r7, #8]
			  }
			  lcd_clear();
 80014a0:	f7ff ff4a 	bl	8001338 <lcd_clear>
 80014a4:	e01b      	b.n	80014de <main+0x14a>
		  } else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1) {
 80014a6:	2120      	movs	r1, #32
 80014a8:	481f      	ldr	r0, [pc, #124]	; (8001528 <main+0x194>)
 80014aa:	f005 fd91 	bl	8006fd0 <HAL_GPIO_ReadPin>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d114      	bne.n	80014de <main+0x14a>
			  lcd_clear();
 80014b4:	f7ff ff40 	bl	8001338 <lcd_clear>
			  output = chosen_algorithm(alg_id);
 80014b8:	68b8      	ldr	r0, [r7, #8]
 80014ba:	f7ff ff45 	bl	8001348 <chosen_algorithm>
 80014be:	6038      	str	r0, [r7, #0]
			  lcd_puts(0, 0, (int8_t*) output);
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	2100      	movs	r1, #0
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff fee5 	bl	8001294 <lcd_puts>
			  lcd_clear();
 80014ca:	f7ff ff35 	bl	8001338 <lcd_clear>
			  do_algorithm(data, alg_id);
 80014ce:	68b9      	ldr	r1, [r7, #8]
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff fb81 	bl	8000bd8 <do_algorithm>
			  not_asked_for_input = 1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	607b      	str	r3, [r7, #4]
			  data = NULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
		  }

		  if (state != 0) {
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <main+0x18c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f43f af6f 	beq.w	80013c6 <main+0x32>
			  output = chosen_algorithm(alg_id);
 80014e8:	68b8      	ldr	r0, [r7, #8]
 80014ea:	f7ff ff2d 	bl	8001348 <chosen_algorithm>
 80014ee:	6038      	str	r0, [r7, #0]
			  lcd_puts(0, 0, (int8_t*) output);
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	2100      	movs	r1, #0
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff fecd 	bl	8001294 <lcd_puts>
			  HAL_Delay(200);
 80014fa:	20c8      	movs	r0, #200	; 0xc8
 80014fc:	f005 fa00 	bl	8006900 <HAL_Delay>
 8001500:	e761      	b.n	80013c6 <main+0x32>
		  }
	  } else if (state != 2) {
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <main+0x18c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b02      	cmp	r3, #2
 8001508:	f43f af5d 	beq.w	80013c6 <main+0x32>
		  lcd_clear();
 800150c:	f7ff ff14 	bl	8001338 <lcd_clear>
		  lcd_init();
 8001510:	f7ff fdb2 	bl	8001078 <lcd_init>
		  lcd_puts(0, 0, "Unexpected state");
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <main+0x1a0>)
 8001516:	2100      	movs	r1, #0
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff febb 	bl	8001294 <lcd_puts>
	  if (state == 0) {
 800151e:	e752      	b.n	80013c6 <main+0x32>
 8001520:	2000050c 	.word	0x2000050c
 8001524:	0800d064 	.word	0x0800d064
 8001528:	40010800 	.word	0x40010800
 800152c:	200004c4 	.word	0x200004c4
 8001530:	2000047c 	.word	0x2000047c
 8001534:	0800d070 	.word	0x0800d070

08001538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b090      	sub	sp, #64	; 0x40
 800153c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153e:	f107 0318 	add.w	r3, r7, #24
 8001542:	2228      	movs	r2, #40	; 0x28
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f007 f892 	bl	8008670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800155e:	2301      	movs	r3, #1
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001562:	2310      	movs	r3, #16
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001566:	2300      	movs	r3, #0
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156a:	f107 0318 	add.w	r3, r7, #24
 800156e:	4618      	mov	r0, r3
 8001570:	f005 fd5e 	bl	8007030 <HAL_RCC_OscConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800157a:	f000 f8c3 	bl	8001704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800157e:	230f      	movs	r3, #15
 8001580:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f005 ffcc 	bl	8007534 <HAL_RCC_ClockConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015a2:	f000 f8af 	bl	8001704 <Error_Handler>
  }
}
 80015a6:	bf00      	nop
 80015a8:	3740      	adds	r7, #64	; 0x40
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <MX_USART1_UART_Init+0x50>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_USART1_UART_Init+0x4c>)
 80015e8:	f006 f932 	bl	8007850 <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015f2:	f000 f887 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2000047c 	.word	0x2000047c
 8001600:	40013800 	.word	0x40013800

08001604 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <MX_USART2_UART_Init+0x50>)
 800160c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800162a:	220c      	movs	r2, #12
 800162c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800163c:	f006 f908 	bl	8007850 <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001646:	f000 f85d 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200004c4 	.word	0x200004c4
 8001654:	40004400 	.word	0x40004400

08001658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <MX_GPIO_Init+0xa0>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a21      	ldr	r2, [pc, #132]	; (80016f8 <MX_GPIO_Init+0xa0>)
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <MX_GPIO_Init+0xa0>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_GPIO_Init+0xa0>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <MX_GPIO_Init+0xa0>)
 800168a:	f043 0308 	orr.w	r3, r3, #8
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <MX_GPIO_Init+0xa0>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80016a2:	4816      	ldr	r0, [pc, #88]	; (80016fc <MX_GPIO_Init+0xa4>)
 80016a4:	f005 fcab 	bl	8006ffe <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016ae:	4814      	ldr	r0, [pc, #80]	; (8001700 <MX_GPIO_Init+0xa8>)
 80016b0:	f005 fca5 	bl	8006ffe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80016b4:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80016b8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2302      	movs	r3, #2
 80016c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4619      	mov	r1, r3
 80016cc:	480b      	ldr	r0, [pc, #44]	; (80016fc <MX_GPIO_Init+0xa4>)
 80016ce:	f005 fafb 	bl	8006cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2302      	movs	r3, #2
 80016e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	4619      	mov	r1, r3
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_GPIO_Init+0xa8>)
 80016ec:	f005 faec 	bl	8006cc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010c00 	.word	0x40010c00
 8001700:	40010800 	.word	0x40010800

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001708:	b672      	cpsid	i
}
 800170a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800170c:	e7fe      	b.n	800170c <Error_Handler+0x8>

0800170e <rotateLeft>:
#define I(X, Y, Z) (Y ^ (X | ~Z))

/*
 * Rotates a 32-bit word left by n bits
 */
uint32_t rotateLeft(uint32_t x, uint32_t n){
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
    return (x << n) | (x >> (32 - n));
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	f1c3 0320 	rsb	r3, r3, #32
 8001720:	fa62 f303 	ror.w	r3, r2, r3
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
	...

08001730 <md5Init>:


/*
 * Initialize a context
 */
void md5Init(MD5Context *ctx){
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
    ctx->size = (uint64_t)0;
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	e9c1 2300 	strd	r2, r3, [r1]

    ctx->buffer[0] = (uint32_t)A;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a07      	ldr	r2, [pc, #28]	; (8001768 <md5Init+0x38>)
 800174a:	609a      	str	r2, [r3, #8]
    ctx->buffer[1] = (uint32_t)B;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a07      	ldr	r2, [pc, #28]	; (800176c <md5Init+0x3c>)
 8001750:	60da      	str	r2, [r3, #12]
    ctx->buffer[2] = (uint32_t)C;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a06      	ldr	r2, [pc, #24]	; (8001770 <md5Init+0x40>)
 8001756:	611a      	str	r2, [r3, #16]
    ctx->buffer[3] = (uint32_t)D;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a06      	ldr	r2, [pc, #24]	; (8001774 <md5Init+0x44>)
 800175c:	615a      	str	r2, [r3, #20]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	67452301 	.word	0x67452301
 800176c:	efcdab89 	.word	0xefcdab89
 8001770:	98badcfe 	.word	0x98badcfe
 8001774:	10325476 	.word	0x10325476

08001778 <md5Update>:
 * Add some amount of input to the context
 *
 * If the input fills out a block of 512 bits, apply the algorithm (md5Step)
 * and save the result in the buffer. Also updates the overall size.
 */
void md5Update(MD5Context *ctx, uint8_t *input_buffer, size_t input_len){
 8001778:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800177c:	b098      	sub	sp, #96	; 0x60
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
    uint32_t input[16];
    unsigned int offset = ctx->size % 64;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	4613      	mov	r3, r2
 800178e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001792:	65fb      	str	r3, [r7, #92]	; 0x5c
    ctx->size += (uint64_t)input_len;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	2000      	movs	r0, #0
 800179e:	460c      	mov	r4, r1
 80017a0:	4605      	mov	r5, r0
 80017a2:	eb12 0804 	adds.w	r8, r2, r4
 80017a6:	eb43 0905 	adc.w	r9, r3, r5
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	e9c3 8900 	strd	r8, r9, [r3]

    // Copy each byte in input_buffer into the next space in our context input
    for(unsigned int i = 0; i < input_len; ++i){
 80017b0:	2300      	movs	r3, #0
 80017b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80017b4:	e048      	b.n	8001848 <md5Update+0xd0>
        ctx->input[offset++] = (uint8_t)*(input_buffer + i);
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017ba:	441a      	add	r2, r3
 80017bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017be:	1c59      	adds	r1, r3, #1
 80017c0:	65f9      	str	r1, [r7, #92]	; 0x5c
 80017c2:	7811      	ldrb	r1, [r2, #0]
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	460a      	mov	r2, r1
 80017ca:	761a      	strb	r2, [r3, #24]

        // If we've filled our context input, copy it into our local array input
        // then reset the offset to 0 and fill in a new buffer.
        // Every time we fill out a chunk, we run it through the algorithm
        // to enable some back and forth between cpu and i/o
        if(offset % 64 == 0){
 80017cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d135      	bne.n	8001842 <md5Update+0xca>
            for(unsigned int j = 0; j < 16; ++j){
 80017d6:	2300      	movs	r3, #0
 80017d8:	657b      	str	r3, [r7, #84]	; 0x54
 80017da:	e025      	b.n	8001828 <md5Update+0xb0>
                // Convert to little-endian
                // The local variable `input` our 512-bit chunk separated into 32-bit words
                // we can use in calculations
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 80017dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	3303      	adds	r3, #3
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4413      	add	r3, r2
 80017e6:	7e1b      	ldrb	r3, [r3, #24]
 80017e8:	061a      	lsls	r2, r3, #24
                           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 80017ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	3302      	adds	r3, #2
 80017f0:	68f9      	ldr	r1, [r7, #12]
 80017f2:	440b      	add	r3, r1
 80017f4:	7e1b      	ldrb	r3, [r3, #24]
 80017f6:	041b      	lsls	r3, r3, #16
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 80017f8:	431a      	orrs	r2, r3
                           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 80017fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	3301      	adds	r3, #1
 8001800:	68f9      	ldr	r1, [r7, #12]
 8001802:	440b      	add	r3, r1
 8001804:	7e1b      	ldrb	r3, [r3, #24]
 8001806:	021b      	lsls	r3, r3, #8
                           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8001808:	4313      	orrs	r3, r2
                           (uint32_t)(ctx->input[(j * 4)]);
 800180a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800180c:	0092      	lsls	r2, r2, #2
 800180e:	68f9      	ldr	r1, [r7, #12]
 8001810:	440a      	add	r2, r1
 8001812:	7e12      	ldrb	r2, [r2, #24]
                           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8001814:	431a      	orrs	r2, r3
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8001816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	3360      	adds	r3, #96	; 0x60
 800181c:	443b      	add	r3, r7
 800181e:	f843 2c4c 	str.w	r2, [r3, #-76]
            for(unsigned int j = 0; j < 16; ++j){
 8001822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001824:	3301      	adds	r3, #1
 8001826:	657b      	str	r3, [r7, #84]	; 0x54
 8001828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800182a:	2b0f      	cmp	r3, #15
 800182c:	d9d6      	bls.n	80017dc <md5Update+0x64>
            }
            md5Step(ctx->buffer, input);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3308      	adds	r3, #8
 8001832:	f107 0214 	add.w	r2, r7, #20
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f8d1 	bl	80019e0 <md5Step>
            offset = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(unsigned int i = 0; i < input_len; ++i){
 8001842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001844:	3301      	adds	r3, #1
 8001846:	65bb      	str	r3, [r7, #88]	; 0x58
 8001848:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	d3b2      	bcc.n	80017b6 <md5Update+0x3e>
        }
    }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3760      	adds	r7, #96	; 0x60
 8001856:	46bd      	mov	sp, r7
 8001858:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800185c <md5Finalize>:

/*
 * Pad the current input to get to 448 bytes, append the size in bits to the very end,
 * and save the result of the final iteration into digest.
 */
void md5Finalize(MD5Context *ctx){
 800185c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001860:	b096      	sub	sp, #88	; 0x58
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
    uint32_t input[16];
    unsigned int offset = ctx->size % 64;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	4613      	mov	r3, r2
 800186e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001872:	64fb      	str	r3, [r7, #76]	; 0x4c
    unsigned int padding_length = offset < 56 ? 56 - offset : (56 + 64) - offset;
 8001874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001876:	2b37      	cmp	r3, #55	; 0x37
 8001878:	d803      	bhi.n	8001882 <md5Finalize+0x26>
 800187a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800187c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8001880:	e002      	b.n	8001888 <md5Finalize+0x2c>
 8001882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001884:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8001888:	64bb      	str	r3, [r7, #72]	; 0x48

    // Fill in the padding and undo the changes to size that resulted from the update
    md5Update(ctx, PADDING, padding_length);
 800188a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800188c:	4953      	ldr	r1, [pc, #332]	; (80019dc <md5Finalize+0x180>)
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ff72 	bl	8001778 <md5Update>
    ctx->size -= (uint64_t)padding_length;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800189c:	2000      	movs	r0, #0
 800189e:	460c      	mov	r4, r1
 80018a0:	4605      	mov	r5, r0
 80018a2:	ebb2 0804 	subs.w	r8, r2, r4
 80018a6:	eb63 0905 	sbc.w	r9, r3, r5
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	e9c3 8900 	strd	r8, r9, [r3]

    // Do a final update (internal to this function)
    // Last two 32-bit words are the two halves of the size (converted from bytes to bits)
    for(unsigned int j = 0; j < 14; ++j){
 80018b0:	2300      	movs	r3, #0
 80018b2:	657b      	str	r3, [r7, #84]	; 0x54
 80018b4:	e025      	b.n	8001902 <md5Finalize+0xa6>
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 80018b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	3303      	adds	r3, #3
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	7e1b      	ldrb	r3, [r3, #24]
 80018c2:	061a      	lsls	r2, r3, #24
                   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 80018c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	440b      	add	r3, r1
 80018ce:	7e1b      	ldrb	r3, [r3, #24]
 80018d0:	041b      	lsls	r3, r3, #16
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 80018d2:	431a      	orrs	r2, r3
                   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 80018d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	3301      	adds	r3, #1
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	440b      	add	r3, r1
 80018de:	7e1b      	ldrb	r3, [r3, #24]
 80018e0:	021b      	lsls	r3, r3, #8
                   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 80018e2:	4313      	orrs	r3, r2
                   (uint32_t)(ctx->input[(j * 4)]);
 80018e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80018e6:	0092      	lsls	r2, r2, #2
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	440a      	add	r2, r1
 80018ec:	7e12      	ldrb	r2, [r2, #24]
                   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 80018ee:	431a      	orrs	r2, r3
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 80018f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	3358      	adds	r3, #88	; 0x58
 80018f6:	443b      	add	r3, r7
 80018f8:	f843 2c50 	str.w	r2, [r3, #-80]
    for(unsigned int j = 0; j < 14; ++j){
 80018fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fe:	3301      	adds	r3, #1
 8001900:	657b      	str	r3, [r7, #84]	; 0x54
 8001902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001904:	2b0d      	cmp	r3, #13
 8001906:	d9d6      	bls.n	80018b6 <md5Finalize+0x5a>
    }
    input[14] = (uint32_t)(ctx->size * 8);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	4613      	mov	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	643b      	str	r3, [r7, #64]	; 0x40
    input[15] = (uint32_t)((ctx->size * 8) >> 32);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	e9d3 0100 	ldrd	r0, r1, [r3]
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	00cb      	lsls	r3, r1, #3
 8001924:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001928:	00c2      	lsls	r2, r0, #3
 800192a:	f04f 0000 	mov.w	r0, #0
 800192e:	f04f 0100 	mov.w	r1, #0
 8001932:	0018      	movs	r0, r3
 8001934:	2100      	movs	r1, #0
 8001936:	4603      	mov	r3, r0
 8001938:	647b      	str	r3, [r7, #68]	; 0x44

    md5Step(ctx->buffer, input);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3308      	adds	r3, #8
 800193e:	f107 0208 	add.w	r2, r7, #8
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f000 f84b 	bl	80019e0 <md5Step>

    // Move the result into digest (convert from little-endian)
    for(unsigned int i = 0; i < 4; ++i){
 800194a:	2300      	movs	r3, #0
 800194c:	653b      	str	r3, [r7, #80]	; 0x50
 800194e:	e03c      	b.n	80019ca <md5Finalize+0x16e>
        ctx->digest[(i * 4) + 0] = (uint8_t)((ctx->buffer[i] & 0x000000FF));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001954:	3202      	adds	r2, #2
 8001956:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800195a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	b2d1      	uxtb	r1, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	460a      	mov	r2, r1
 8001966:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        ctx->digest[(i * 4) + 1] = (uint8_t)((ctx->buffer[i] & 0x0000FF00) >>  8);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800196e:	3202      	adds	r2, #2
 8001970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001974:	0a1a      	lsrs	r2, r3, #8
 8001976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	3301      	adds	r3, #1
 800197c:	b2d1      	uxtb	r1, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	460a      	mov	r2, r1
 8001984:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        ctx->digest[(i * 4) + 2] = (uint8_t)((ctx->buffer[i] & 0x00FF0000) >> 16);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800198c:	3202      	adds	r2, #2
 800198e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001992:	0c1a      	lsrs	r2, r3, #16
 8001994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	3302      	adds	r3, #2
 800199a:	b2d1      	uxtb	r1, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	460a      	mov	r2, r1
 80019a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        ctx->digest[(i * 4) + 3] = (uint8_t)((ctx->buffer[i] & 0xFF000000) >> 24);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019aa:	3202      	adds	r2, #2
 80019ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b0:	0e1a      	lsrs	r2, r3, #24
 80019b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	3303      	adds	r3, #3
 80019b8:	b2d1      	uxtb	r1, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	460a      	mov	r2, r1
 80019c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    for(unsigned int i = 0; i < 4; ++i){
 80019c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019c6:	3301      	adds	r3, #1
 80019c8:	653b      	str	r3, [r7, #80]	; 0x50
 80019ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d9bf      	bls.n	8001950 <md5Finalize+0xf4>
    }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3758      	adds	r7, #88	; 0x58
 80019d6:	46bd      	mov	sp, r7
 80019d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019dc:	20000200 	.word	0x20000200

080019e0 <md5Step>:

/*
 * Step on 512 bits of input with the main MD5 algorithm.
 */
void md5Step(uint32_t *buffer, uint32_t *input){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
    uint32_t AA = buffer[0];
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t BB = buffer[1];
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	623b      	str	r3, [r7, #32]
    uint32_t CC = buffer[2];
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61fb      	str	r3, [r7, #28]
    uint32_t DD = buffer[3];
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	61bb      	str	r3, [r7, #24]

    uint32_t E;

    unsigned int j;

    for(unsigned int i = 0; i < 64; ++i){
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e06b      	b.n	8001ae0 <md5Step+0x100>
        switch(i / 16){
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	091b      	lsrs	r3, r3, #4
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d024      	beq.n	8001a5a <md5Step+0x7a>
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d831      	bhi.n	8001a78 <md5Step+0x98>
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <md5Step+0x3e>
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d00c      	beq.n	8001a36 <md5Step+0x56>
 8001a1c:	e02c      	b.n	8001a78 <md5Step+0x98>
            case 0:
                E = F(BB, CC, DD);
 8001a1e:	6a3a      	ldr	r2, [r7, #32]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	401a      	ands	r2, r3
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	400b      	ands	r3, r1
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
                j = i;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	613b      	str	r3, [r7, #16]
                break;
 8001a34:	e02f      	b.n	8001a96 <md5Step+0xb6>
            case 1:
                E = G(BB, CC, DD);
 8001a36:	6a3a      	ldr	r2, [r7, #32]
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	400b      	ands	r3, r1
 8001a44:	4313      	orrs	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]
                j = ((i * 5) + 1) % 16;
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	3301      	adds	r3, #1
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	613b      	str	r3, [r7, #16]
                break;
 8001a58:	e01d      	b.n	8001a96 <md5Step+0xb6>
            case 2:
                E = H(BB, CC, DD);
 8001a5a:	6a3a      	ldr	r2, [r7, #32]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	4053      	eors	r3, r2
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4053      	eors	r3, r2
 8001a64:	617b      	str	r3, [r7, #20]
                j = ((i * 3) + 5) % 16;
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3305      	adds	r3, #5
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	613b      	str	r3, [r7, #16]
                break;
 8001a76:	e00e      	b.n	8001a96 <md5Step+0xb6>
            default:
                E = I(BB, CC, DD);
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	4053      	eors	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]
                j = (i * 7) % 16;
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	613b      	str	r3, [r7, #16]
                break;
 8001a94:	bf00      	nop
        }

        uint32_t temp = DD;
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	60bb      	str	r3, [r7, #8]
        DD = CC;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	61bb      	str	r3, [r7, #24]
        CC = BB;
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	61fb      	str	r3, [r7, #28]
        BB = BB + rotateLeft(AA + E + K[i] + input[j], S[i]);
 8001aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	441a      	add	r2, r3
 8001aa8:	4920      	ldr	r1, [pc, #128]	; (8001b2c <md5Step+0x14c>)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ab0:	441a      	add	r2, r3
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	6839      	ldr	r1, [r7, #0]
 8001ab8:	440b      	add	r3, r1
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	441a      	add	r2, r3
 8001abe:	491c      	ldr	r1, [pc, #112]	; (8001b30 <md5Step+0x150>)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4610      	mov	r0, r2
 8001aca:	f7ff fe20 	bl	800170e <rotateLeft>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	623b      	str	r3, [r7, #32]
        AA = temp;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
    for(unsigned int i = 0; i < 64; ++i){
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3301      	adds	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ae4:	d990      	bls.n	8001a08 <md5Step+0x28>
    }

    buffer[0] += AA;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	441a      	add	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	601a      	str	r2, [r3, #0]
    buffer[1] += BB;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3304      	adds	r3, #4
 8001af6:	6819      	ldr	r1, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3304      	adds	r3, #4
 8001afc:	6a3a      	ldr	r2, [r7, #32]
 8001afe:	440a      	add	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
    buffer[2] += CC;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3308      	adds	r3, #8
 8001b06:	6819      	ldr	r1, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3308      	adds	r3, #8
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	440a      	add	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]
    buffer[3] += DD;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	330c      	adds	r3, #12
 8001b16:	6819      	ldr	r1, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	330c      	adds	r3, #12
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	440a      	add	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
}
 8001b22:	bf00      	nop
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000100 	.word	0x20000100
 8001b30:	20000000 	.word	0x20000000

08001b34 <md5String>:

/*
 * Functions that run the algorithm on the provided input and put the digest into result.
 * result should be able to store 16 bytes.
 */
void md5String(char *input, uint8_t *result){
 8001b34:	b5b0      	push	{r4, r5, r7, lr}
 8001b36:	b09c      	sub	sp, #112	; 0x70
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
    MD5Context ctx;
    md5Init(&ctx);
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fdf4 	bl	8001730 <md5Init>
    md5Update(&ctx, (uint8_t *)input, strlen(input));
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7fe fb01 	bl	8000150 <strlen>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fe0e 	bl	8001778 <md5Update>
    md5Finalize(&ctx);
 8001b5c:	f107 0308 	add.w	r3, r7, #8
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fe7b 	bl	800185c <md5Finalize>

    memcpy(result, ctx.digest, 16);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	461d      	mov	r5, r3
 8001b6a:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b70:	6028      	str	r0, [r5, #0]
 8001b72:	6069      	str	r1, [r5, #4]
 8001b74:	60aa      	str	r2, [r5, #8]
 8001b76:	60eb      	str	r3, [r5, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3770      	adds	r7, #112	; 0x70
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bdb0      	pop	{r4, r5, r7, pc}

08001b80 <sha256_init>:
    (b)[(i) + 2] = (uint8) ( (n) >>  8 );       \
    (b)[(i) + 3] = (uint8) ( (n)       );       \
}

void sha256_init( sha256_context *ctx )
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x6A09E667;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <sha256_init+0x50>)
 8001b98:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xBB67AE85;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <sha256_init+0x54>)
 8001b9e:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x3C6EF372;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <sha256_init+0x58>)
 8001ba4:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0xA54FF53A;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a0c      	ldr	r2, [pc, #48]	; (8001bdc <sha256_init+0x5c>)
 8001baa:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0x510E527F;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a0c      	ldr	r2, [pc, #48]	; (8001be0 <sha256_init+0x60>)
 8001bb0:	619a      	str	r2, [r3, #24]
    ctx->state[5] = 0x9B05688C;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <sha256_init+0x64>)
 8001bb6:	61da      	str	r2, [r3, #28]
    ctx->state[6] = 0x1F83D9AB;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <sha256_init+0x68>)
 8001bbc:	621a      	str	r2, [r3, #32]
    ctx->state[7] = 0x5BE0CD19;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <sha256_init+0x6c>)
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	6a09e667 	.word	0x6a09e667
 8001bd4:	bb67ae85 	.word	0xbb67ae85
 8001bd8:	3c6ef372 	.word	0x3c6ef372
 8001bdc:	a54ff53a 	.word	0xa54ff53a
 8001be0:	510e527f 	.word	0x510e527f
 8001be4:	9b05688c 	.word	0x9b05688c
 8001be8:	1f83d9ab 	.word	0x1f83d9ab
 8001bec:	5be0cd19 	.word	0x5be0cd19

08001bf0 <sha256_process>:

void sha256_process( sha256_context *ctx, uint8 data[64] )
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001bfc:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8001c00:	6018      	str	r0, [r3, #0]
 8001c02:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001c06:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8001c0a:	6019      	str	r1, [r3, #0]
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    for (int i = 0; i < 16; ++i) {
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001c12:	e03f      	b.n	8001c94 <sha256_process+0xa4>
    	GET_UINT32( W[i],  data,  i * 4 );
 8001c14:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001c20:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	061a      	lsls	r2, r3, #24
 8001c2c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	3301      	adds	r3, #1
 8001c34:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8001c38:	f5a1 710e 	sub.w	r1, r1, #568	; 0x238
 8001c3c:	6809      	ldr	r1, [r1, #0]
 8001c3e:	440b      	add	r3, r1
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	041b      	lsls	r3, r3, #16
 8001c44:	431a      	orrs	r2, r3
 8001c46:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8001c52:	f5a1 710e 	sub.w	r1, r1, #568	; 0x238
 8001c56:	6809      	ldr	r1, [r1, #0]
 8001c58:	440b      	add	r3, r1
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8001c64:	0092      	lsls	r2, r2, #2
 8001c66:	3203      	adds	r2, #3
 8001c68:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8001c6c:	f5a1 710e 	sub.w	r1, r1, #568	; 0x238
 8001c70:	6809      	ldr	r1, [r1, #0]
 8001c72:	440a      	add	r2, r1
 8001c74:	7812      	ldrb	r2, [r2, #0]
 8001c76:	ea43 0102 	orr.w	r1, r3, r2
 8001c7a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001c7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c82:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8001c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < 16; ++i) {
 8001c8a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001c94:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001c98:	2b0f      	cmp	r3, #15
 8001c9a:	ddbb      	ble.n	8001c14 <sha256_process+0x24>
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    uint32 buffer_array[] = {0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B,
 8001c9c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001ca0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001ca4:	4af0      	ldr	r2, [pc, #960]	; (8002068 <sha256_process+0x478>)
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	4611      	mov	r1, r2
 8001caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f006 fcd0 	bl	8008654 <memcpy>
						  0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08,
						  0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F,
						  0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
						  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2};

    A = ctx->state[0];
 8001cb4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001cb8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	B = ctx->state[1];
 8001cc4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001cc8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	C = ctx->state[2];
 8001cd4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001cd8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	D = ctx->state[3];
 8001ce4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001ce8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	E = ctx->state[4];
 8001cf4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001cf8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	F = ctx->state[5];
 8001d04:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001d08:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	G = ctx->state[6];
 8001d14:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001d18:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	H = ctx->state[7];
 8001d24:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001d28:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

	P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8001d34:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d38:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001d3c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d40:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001d44:	405a      	eors	r2, r3
 8001d46:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d4a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001d4e:	405a      	eors	r2, r3
 8001d50:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001d54:	441a      	add	r2, r3
 8001d56:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8001d5a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d5e:	4059      	eors	r1, r3
 8001d60:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d64:	4019      	ands	r1, r3
 8001d66:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d6a:	404b      	eors	r3, r1
 8001d6c:	441a      	add	r2, r3
 8001d6e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001d72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	441a      	add	r2, r3
 8001d7a:	4bbc      	ldr	r3, [pc, #752]	; (800206c <sha256_process+0x47c>)
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001d82:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001d86:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001d8a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001d8e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001d92:	405a      	eors	r2, r3
 8001d94:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001d98:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001d9c:	405a      	eors	r2, r3
 8001d9e:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 8001da2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001da6:	4019      	ands	r1, r3
 8001da8:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 8001dac:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001db0:	4318      	orrs	r0, r3
 8001db2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001db6:	4003      	ands	r3, r0
 8001db8:	430b      	orrs	r3, r1
 8001dba:	4413      	add	r3, r2
 8001dbc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001dc0:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8001dc4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001dc8:	4413      	add	r3, r2
 8001dca:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001dce:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8001dd2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 8001ddc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001de0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001de4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001de8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001dec:	405a      	eors	r2, r3
 8001dee:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001df2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001df6:	405a      	eors	r2, r3
 8001df8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001dfc:	441a      	add	r2, r3
 8001dfe:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8001e02:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001e06:	4059      	eors	r1, r3
 8001e08:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001e0c:	4019      	ands	r1, r3
 8001e0e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001e12:	404b      	eors	r3, r1
 8001e14:	441a      	add	r2, r3
 8001e16:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001e1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	441a      	add	r2, r3
 8001e22:	4b93      	ldr	r3, [pc, #588]	; (8002070 <sha256_process+0x480>)
 8001e24:	4413      	add	r3, r2
 8001e26:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001e2a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001e2e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001e32:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001e36:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001e3a:	405a      	eors	r2, r3
 8001e3c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001e40:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001e44:	405a      	eors	r2, r3
 8001e46:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8001e4a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001e4e:	4019      	ands	r1, r3
 8001e50:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8001e54:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001e58:	4318      	orrs	r0, r3
 8001e5a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001e5e:	4003      	ands	r3, r0
 8001e60:	430b      	orrs	r3, r1
 8001e62:	4413      	add	r3, r2
 8001e64:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001e68:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8001e6c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001e70:	4413      	add	r3, r2
 8001e72:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001e76:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8001e7a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001e7e:	4413      	add	r3, r2
 8001e80:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8001e84:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001e88:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001e8c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001e90:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001e94:	405a      	eors	r2, r3
 8001e96:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001e9a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001e9e:	405a      	eors	r2, r3
 8001ea0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001ea4:	441a      	add	r2, r3
 8001ea6:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8001eaa:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001eae:	4059      	eors	r1, r3
 8001eb0:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001eb4:	4019      	ands	r1, r3
 8001eb6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001eba:	404b      	eors	r3, r1
 8001ebc:	441a      	add	r2, r3
 8001ebe:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001ec2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	441a      	add	r2, r3
 8001eca:	4b6a      	ldr	r3, [pc, #424]	; (8002074 <sha256_process+0x484>)
 8001ecc:	4413      	add	r3, r2
 8001ece:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001ed2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001ed6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001eda:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001ede:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001ee2:	405a      	eors	r2, r3
 8001ee4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001ee8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001eec:	405a      	eors	r2, r3
 8001eee:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8001ef2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001ef6:	4019      	ands	r1, r3
 8001ef8:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8001efc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001f00:	4318      	orrs	r0, r3
 8001f02:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001f06:	4003      	ands	r3, r0
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001f10:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001f14:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001f18:	4413      	add	r3, r2
 8001f1a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8001f1e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8001f22:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001f26:	4413      	add	r3, r2
 8001f28:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 8001f2c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001f30:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001f34:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001f38:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001f3c:	405a      	eors	r2, r3
 8001f3e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001f42:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001f46:	405a      	eors	r2, r3
 8001f48:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001f4c:	441a      	add	r2, r3
 8001f4e:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 8001f52:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001f56:	4059      	eors	r1, r3
 8001f58:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001f5c:	4019      	ands	r1, r3
 8001f5e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001f62:	404b      	eors	r3, r1
 8001f64:	441a      	add	r2, r3
 8001f66:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001f6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	441a      	add	r2, r3
 8001f72:	4b41      	ldr	r3, [pc, #260]	; (8002078 <sha256_process+0x488>)
 8001f74:	4413      	add	r3, r2
 8001f76:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001f7a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001f7e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001f82:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001f86:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001f8a:	405a      	eors	r2, r3
 8001f8c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001f90:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001f94:	405a      	eors	r2, r3
 8001f96:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8001f9a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001f9e:	4019      	ands	r1, r3
 8001fa0:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8001fa4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001fa8:	4318      	orrs	r0, r3
 8001faa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001fae:	4003      	ands	r3, r0
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001fb8:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8001fbc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8001fc6:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8001fca:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001fce:	4413      	add	r3, r2
 8001fd0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8001fd4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001fd8:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001fdc:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001fe0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001fe4:	405a      	eors	r2, r3
 8001fe6:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8001fea:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001fee:	405a      	eors	r2, r3
 8001ff0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001ff4:	441a      	add	r2, r3
 8001ff6:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 8001ffa:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001ffe:	4059      	eors	r1, r3
 8002000:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002004:	4019      	ands	r1, r3
 8002006:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800200a:	404b      	eors	r3, r1
 800200c:	441a      	add	r2, r3
 800200e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002012:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	441a      	add	r2, r3
 800201a:	4b18      	ldr	r3, [pc, #96]	; (800207c <sha256_process+0x48c>)
 800201c:	4413      	add	r3, r2
 800201e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002022:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002026:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800202a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800202e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002032:	405a      	eors	r2, r3
 8002034:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002038:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800203c:	405a      	eors	r2, r3
 800203e:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8002042:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002046:	4019      	ands	r1, r3
 8002048:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 800204c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002050:	4318      	orrs	r0, r3
 8002052:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002056:	4003      	ands	r3, r0
 8002058:	430b      	orrs	r3, r1
 800205a:	4413      	add	r3, r2
 800205c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002060:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002064:	e00c      	b.n	8002080 <sha256_process+0x490>
 8002066:	bf00      	nop
 8002068:	0800d084 	.word	0x0800d084
 800206c:	428a2f98 	.word	0x428a2f98
 8002070:	71374491 	.word	0x71374491
 8002074:	b5c0fbcf 	.word	0xb5c0fbcf
 8002078:	e9b5dba5 	.word	0xe9b5dba5
 800207c:	3956c25b 	.word	0x3956c25b
 8002080:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002084:	4413      	add	r3, r2
 8002086:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800208a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800208e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002092:	4413      	add	r3, r2
 8002094:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8002098:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800209c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80020a0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80020a4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80020a8:	405a      	eors	r2, r3
 80020aa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80020ae:	ea4f 6373 	mov.w	r3, r3, ror #25
 80020b2:	405a      	eors	r2, r3
 80020b4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80020b8:	441a      	add	r2, r3
 80020ba:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 80020be:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80020c2:	4059      	eors	r1, r3
 80020c4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80020c8:	4019      	ands	r1, r3
 80020ca:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80020ce:	404b      	eors	r3, r1
 80020d0:	441a      	add	r2, r3
 80020d2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80020d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	441a      	add	r2, r3
 80020de:	4bf9      	ldr	r3, [pc, #996]	; (80024c4 <sha256_process+0x8d4>)
 80020e0:	4413      	add	r3, r2
 80020e2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80020e6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80020ea:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80020ee:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80020f2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80020f6:	405a      	eors	r2, r3
 80020f8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80020fc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002100:	405a      	eors	r2, r3
 8002102:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8002106:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800210a:	4019      	ands	r1, r3
 800210c:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8002110:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002114:	4318      	orrs	r0, r3
 8002116:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800211a:	4003      	ands	r3, r0
 800211c:	430b      	orrs	r3, r1
 800211e:	4413      	add	r3, r2
 8002120:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002124:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8002128:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800212c:	4413      	add	r3, r2
 800212e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002132:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8002136:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800213a:	4413      	add	r3, r2
 800213c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8002140:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002144:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002148:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800214c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002150:	405a      	eors	r2, r3
 8002152:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002156:	ea4f 6373 	mov.w	r3, r3, ror #25
 800215a:	405a      	eors	r2, r3
 800215c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002160:	441a      	add	r2, r3
 8002162:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8002166:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800216a:	4059      	eors	r1, r3
 800216c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002170:	4019      	ands	r1, r3
 8002172:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002176:	404b      	eors	r3, r1
 8002178:	441a      	add	r2, r3
 800217a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800217e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	441a      	add	r2, r3
 8002186:	4bd0      	ldr	r3, [pc, #832]	; (80024c8 <sha256_process+0x8d8>)
 8002188:	4413      	add	r3, r2
 800218a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800218e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002192:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002196:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800219a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800219e:	405a      	eors	r2, r3
 80021a0:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80021a4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80021a8:	405a      	eors	r2, r3
 80021aa:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 80021ae:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80021b2:	4019      	ands	r1, r3
 80021b4:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 80021b8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80021bc:	4318      	orrs	r0, r3
 80021be:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80021c2:	4003      	ands	r3, r0
 80021c4:	430b      	orrs	r3, r1
 80021c6:	4413      	add	r3, r2
 80021c8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80021cc:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80021d0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80021d4:	4413      	add	r3, r2
 80021d6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80021da:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80021de:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80021e2:	4413      	add	r3, r2
 80021e4:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80021e8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80021ec:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80021f0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80021f4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80021f8:	405a      	eors	r2, r3
 80021fa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80021fe:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002202:	405a      	eors	r2, r3
 8002204:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002208:	441a      	add	r2, r3
 800220a:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800220e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002212:	4059      	eors	r1, r3
 8002214:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002218:	4019      	ands	r1, r3
 800221a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800221e:	404b      	eors	r3, r1
 8002220:	441a      	add	r2, r3
 8002222:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	441a      	add	r2, r3
 800222e:	4ba7      	ldr	r3, [pc, #668]	; (80024cc <sha256_process+0x8dc>)
 8002230:	4413      	add	r3, r2
 8002232:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002236:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800223a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800223e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002242:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002246:	405a      	eors	r2, r3
 8002248:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800224c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002250:	405a      	eors	r2, r3
 8002252:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 8002256:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800225a:	4019      	ands	r1, r3
 800225c:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 8002260:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002264:	4318      	orrs	r0, r3
 8002266:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800226a:	4003      	ands	r3, r0
 800226c:	430b      	orrs	r3, r1
 800226e:	4413      	add	r3, r2
 8002270:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002274:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8002278:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800227c:	4413      	add	r3, r2
 800227e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8002282:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8002286:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800228a:	4413      	add	r3, r2
 800228c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8002290:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002294:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002298:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800229c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80022a0:	405a      	eors	r2, r3
 80022a2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80022a6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80022aa:	405a      	eors	r2, r3
 80022ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80022b0:	441a      	add	r2, r3
 80022b2:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80022b6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80022ba:	4059      	eors	r1, r3
 80022bc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80022c0:	4019      	ands	r1, r3
 80022c2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80022c6:	404b      	eors	r3, r1
 80022c8:	441a      	add	r2, r3
 80022ca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80022ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	441a      	add	r2, r3
 80022d6:	4b7e      	ldr	r3, [pc, #504]	; (80024d0 <sha256_process+0x8e0>)
 80022d8:	4413      	add	r3, r2
 80022da:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80022de:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80022e2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80022e6:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80022ea:	ea4f 3373 	mov.w	r3, r3, ror #13
 80022ee:	405a      	eors	r2, r3
 80022f0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80022f4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80022f8:	405a      	eors	r2, r3
 80022fa:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 80022fe:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002302:	4019      	ands	r1, r3
 8002304:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 8002308:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800230c:	4318      	orrs	r0, r3
 800230e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002312:	4003      	ands	r3, r0
 8002314:	430b      	orrs	r3, r1
 8002316:	4413      	add	r3, r2
 8002318:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800231c:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8002320:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002324:	4413      	add	r3, r2
 8002326:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800232a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800232e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002332:	4413      	add	r3, r2
 8002334:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8002338:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800233c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002340:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002344:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002348:	405a      	eors	r2, r3
 800234a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800234e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002352:	405a      	eors	r2, r3
 8002354:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002358:	441a      	add	r2, r3
 800235a:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 800235e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002362:	4059      	eors	r1, r3
 8002364:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002368:	4019      	ands	r1, r3
 800236a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800236e:	404b      	eors	r3, r1
 8002370:	441a      	add	r2, r3
 8002372:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002376:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	441a      	add	r2, r3
 800237e:	4b55      	ldr	r3, [pc, #340]	; (80024d4 <sha256_process+0x8e4>)
 8002380:	4413      	add	r3, r2
 8002382:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002386:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800238a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800238e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002392:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002396:	405a      	eors	r2, r3
 8002398:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800239c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80023a0:	405a      	eors	r2, r3
 80023a2:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80023a6:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80023aa:	4019      	ands	r1, r3
 80023ac:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80023b0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80023b4:	4318      	orrs	r0, r3
 80023b6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80023ba:	4003      	ands	r3, r0
 80023bc:	430b      	orrs	r3, r1
 80023be:	4413      	add	r3, r2
 80023c0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80023c4:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 80023c8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80023cc:	4413      	add	r3, r2
 80023ce:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 80023d2:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80023d6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80023da:	4413      	add	r3, r2
 80023dc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80023e0:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80023e4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80023e8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80023ec:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80023f0:	405a      	eors	r2, r3
 80023f2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80023f6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80023fa:	405a      	eors	r2, r3
 80023fc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002400:	441a      	add	r2, r3
 8002402:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8002406:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800240a:	4059      	eors	r1, r3
 800240c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002410:	4019      	ands	r1, r3
 8002412:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002416:	404b      	eors	r3, r1
 8002418:	441a      	add	r2, r3
 800241a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800241e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	441a      	add	r2, r3
 8002426:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <sha256_process+0x8e8>)
 8002428:	4413      	add	r3, r2
 800242a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800242e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002432:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002436:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800243a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800243e:	405a      	eors	r2, r3
 8002440:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002444:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002448:	405a      	eors	r2, r3
 800244a:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800244e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002452:	4019      	ands	r1, r3
 8002454:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8002458:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800245c:	4318      	orrs	r0, r3
 800245e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002462:	4003      	ands	r3, r0
 8002464:	430b      	orrs	r3, r1
 8002466:	4413      	add	r3, r2
 8002468:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800246c:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8002470:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002474:	4413      	add	r3, r2
 8002476:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800247a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800247e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002482:	4413      	add	r3, r2
 8002484:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8002488:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800248c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002490:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002494:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002498:	405a      	eors	r2, r3
 800249a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800249e:	ea4f 6373 	mov.w	r3, r3, ror #25
 80024a2:	405a      	eors	r2, r3
 80024a4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80024a8:	441a      	add	r2, r3
 80024aa:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 80024ae:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80024b2:	4059      	eors	r1, r3
 80024b4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80024b8:	4019      	ands	r1, r3
 80024ba:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80024be:	404b      	eors	r3, r1
 80024c0:	e00c      	b.n	80024dc <sha256_process+0x8ec>
 80024c2:	bf00      	nop
 80024c4:	59f111f1 	.word	0x59f111f1
 80024c8:	923f82a4 	.word	0x923f82a4
 80024cc:	ab1c5ed5 	.word	0xab1c5ed5
 80024d0:	d807aa98 	.word	0xd807aa98
 80024d4:	12835b01 	.word	0x12835b01
 80024d8:	243185be 	.word	0x243185be
 80024dc:	441a      	add	r2, r3
 80024de:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80024e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	441a      	add	r2, r3
 80024ea:	4bf4      	ldr	r3, [pc, #976]	; (80028bc <sha256_process+0xccc>)
 80024ec:	4413      	add	r3, r2
 80024ee:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80024f2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80024f6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80024fa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80024fe:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002502:	405a      	eors	r2, r3
 8002504:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002508:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800250c:	405a      	eors	r2, r3
 800250e:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8002512:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002516:	4019      	ands	r1, r3
 8002518:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 800251c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002520:	4318      	orrs	r0, r3
 8002522:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002526:	4003      	ands	r3, r0
 8002528:	430b      	orrs	r3, r1
 800252a:	4413      	add	r3, r2
 800252c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002530:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8002534:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002538:	4413      	add	r3, r2
 800253a:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 800253e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8002542:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002546:	4413      	add	r3, r2
 8002548:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 800254c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002550:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002554:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002558:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800255c:	405a      	eors	r2, r3
 800255e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002562:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002566:	405a      	eors	r2, r3
 8002568:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800256c:	441a      	add	r2, r3
 800256e:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 8002572:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002576:	4059      	eors	r1, r3
 8002578:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800257c:	4019      	ands	r1, r3
 800257e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002582:	404b      	eors	r3, r1
 8002584:	441a      	add	r2, r3
 8002586:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800258a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	441a      	add	r2, r3
 8002592:	4bcb      	ldr	r3, [pc, #812]	; (80028c0 <sha256_process+0xcd0>)
 8002594:	4413      	add	r3, r2
 8002596:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800259a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800259e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80025a2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80025a6:	ea4f 3373 	mov.w	r3, r3, ror #13
 80025aa:	405a      	eors	r2, r3
 80025ac:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80025b0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80025b4:	405a      	eors	r2, r3
 80025b6:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 80025ba:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80025be:	4019      	ands	r1, r3
 80025c0:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80025c4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80025c8:	4318      	orrs	r0, r3
 80025ca:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80025ce:	4003      	ands	r3, r0
 80025d0:	430b      	orrs	r3, r1
 80025d2:	4413      	add	r3, r2
 80025d4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80025d8:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80025dc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80025e0:	4413      	add	r3, r2
 80025e2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80025e6:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80025ea:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80025ee:	4413      	add	r3, r2
 80025f0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 80025f4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80025f8:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80025fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002600:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002604:	405a      	eors	r2, r3
 8002606:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800260a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800260e:	405a      	eors	r2, r3
 8002610:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002614:	441a      	add	r2, r3
 8002616:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 800261a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800261e:	4059      	eors	r1, r3
 8002620:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002624:	4019      	ands	r1, r3
 8002626:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800262a:	404b      	eors	r3, r1
 800262c:	441a      	add	r2, r3
 800262e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002638:	441a      	add	r2, r3
 800263a:	4ba2      	ldr	r3, [pc, #648]	; (80028c4 <sha256_process+0xcd4>)
 800263c:	4413      	add	r3, r2
 800263e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002642:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002646:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800264a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800264e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002652:	405a      	eors	r2, r3
 8002654:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002658:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800265c:	405a      	eors	r2, r3
 800265e:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8002662:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002666:	4019      	ands	r1, r3
 8002668:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 800266c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002670:	4318      	orrs	r0, r3
 8002672:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002676:	4003      	ands	r3, r0
 8002678:	430b      	orrs	r3, r1
 800267a:	4413      	add	r3, r2
 800267c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002680:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8002684:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002688:	4413      	add	r3, r2
 800268a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800268e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8002692:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002696:	4413      	add	r3, r2
 8002698:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 800269c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80026a0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80026a4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80026a8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80026ac:	405a      	eors	r2, r3
 80026ae:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80026b2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80026b6:	405a      	eors	r2, r3
 80026b8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80026bc:	441a      	add	r2, r3
 80026be:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80026c2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80026c6:	4059      	eors	r1, r3
 80026c8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80026cc:	4019      	ands	r1, r3
 80026ce:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80026d2:	404b      	eors	r3, r1
 80026d4:	441a      	add	r2, r3
 80026d6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80026da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	441a      	add	r2, r3
 80026e2:	4b79      	ldr	r3, [pc, #484]	; (80028c8 <sha256_process+0xcd8>)
 80026e4:	4413      	add	r3, r2
 80026e6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80026ea:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80026ee:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80026f2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80026f6:	ea4f 3373 	mov.w	r3, r3, ror #13
 80026fa:	405a      	eors	r2, r3
 80026fc:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002700:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002704:	405a      	eors	r2, r3
 8002706:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 800270a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800270e:	4019      	ands	r1, r3
 8002710:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 8002714:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002718:	4318      	orrs	r0, r3
 800271a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800271e:	4003      	ands	r3, r0
 8002720:	430b      	orrs	r3, r1
 8002722:	4413      	add	r3, r2
 8002724:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002728:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800272c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002730:	4413      	add	r3, r2
 8002732:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8002736:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800273a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800273e:	4413      	add	r3, r2
 8002740:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8002744:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002748:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800274c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002750:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002754:	405a      	eors	r2, r3
 8002756:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800275a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800275e:	405a      	eors	r2, r3
 8002760:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002764:	441a      	add	r2, r3
 8002766:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800276a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800276e:	4059      	eors	r1, r3
 8002770:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002774:	4019      	ands	r1, r3
 8002776:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800277a:	404b      	eors	r3, r1
 800277c:	441a      	add	r2, r3
 800277e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002782:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002788:	441a      	add	r2, r3
 800278a:	4b50      	ldr	r3, [pc, #320]	; (80028cc <sha256_process+0xcdc>)
 800278c:	4413      	add	r3, r2
 800278e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002792:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002796:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800279a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800279e:	ea4f 3373 	mov.w	r3, r3, ror #13
 80027a2:	405a      	eors	r2, r3
 80027a4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80027a8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80027ac:	405a      	eors	r2, r3
 80027ae:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 80027b2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80027b6:	4019      	ands	r1, r3
 80027b8:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 80027bc:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80027c0:	4318      	orrs	r0, r3
 80027c2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80027c6:	4003      	ands	r3, r0
 80027c8:	430b      	orrs	r3, r1
 80027ca:	4413      	add	r3, r2
 80027cc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80027d0:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80027d4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80027d8:	4413      	add	r3, r2
 80027da:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80027de:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80027e2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80027e6:	4413      	add	r3, r2
 80027e8:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 80027ec:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80027f0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80027f4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80027f8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80027fc:	405a      	eors	r2, r3
 80027fe:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002802:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002806:	405a      	eors	r2, r3
 8002808:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800280c:	441a      	add	r2, r3
 800280e:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8002812:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002816:	4059      	eors	r1, r3
 8002818:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800281c:	4019      	ands	r1, r3
 800281e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002822:	404b      	eors	r3, r1
 8002824:	441a      	add	r2, r3
 8002826:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800282a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800282e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002830:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002834:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002838:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002842:	4059      	eors	r1, r3
 8002844:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002848:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	0a9b      	lsrs	r3, r3, #10
 8002850:	4059      	eors	r1, r3
 8002852:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002856:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	4419      	add	r1, r3
 800285e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002862:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800286c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002870:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800287a:	4058      	eors	r0, r3
 800287c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002880:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	08db      	lsrs	r3, r3, #3
 8002888:	4043      	eors	r3, r0
 800288a:	4419      	add	r1, r3
 800288c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002890:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4419      	add	r1, r3
 8002898:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800289c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80028a0:	6419      	str	r1, [r3, #64]	; 0x40
 80028a2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80028a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	441a      	add	r2, r3
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <sha256_process+0xce0>)
 80028b0:	4413      	add	r3, r2
 80028b2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80028b6:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80028ba:	e00b      	b.n	80028d4 <sha256_process+0xce4>
 80028bc:	550c7dc3 	.word	0x550c7dc3
 80028c0:	72be5d74 	.word	0x72be5d74
 80028c4:	80deb1fe 	.word	0x80deb1fe
 80028c8:	9bdc06a7 	.word	0x9bdc06a7
 80028cc:	c19bf174 	.word	0xc19bf174
 80028d0:	e49b69c1 	.word	0xe49b69c1
 80028d4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80028d8:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80028dc:	ea4f 3373 	mov.w	r3, r3, ror #13
 80028e0:	405a      	eors	r2, r3
 80028e2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80028e6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80028ea:	405a      	eors	r2, r3
 80028ec:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 80028f0:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80028f4:	4019      	ands	r1, r3
 80028f6:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 80028fa:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80028fe:	4318      	orrs	r0, r3
 8002900:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002904:	4003      	ands	r3, r0
 8002906:	430b      	orrs	r3, r1
 8002908:	4413      	add	r3, r2
 800290a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800290e:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8002912:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002916:	4413      	add	r3, r2
 8002918:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800291c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8002920:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002924:	4413      	add	r3, r2
 8002926:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 800292a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800292e:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002932:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002936:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800293a:	405a      	eors	r2, r3
 800293c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002940:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002944:	405a      	eors	r2, r3
 8002946:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800294a:	441a      	add	r2, r3
 800294c:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8002950:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002954:	4059      	eors	r1, r3
 8002956:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800295a:	4019      	ands	r1, r3
 800295c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002960:	404b      	eors	r3, r1
 8002962:	441a      	add	r2, r3
 8002964:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002968:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002972:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002976:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800297a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297c:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002980:	4059      	eors	r1, r3
 8002982:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002986:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298c:	0a9b      	lsrs	r3, r3, #10
 800298e:	4059      	eors	r1, r3
 8002990:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002994:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	4419      	add	r1, r3
 800299c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80029a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80029aa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80029ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80029b8:	4058      	eors	r0, r3
 80029ba:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80029be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	08db      	lsrs	r3, r3, #3
 80029c6:	4043      	eors	r3, r0
 80029c8:	4419      	add	r1, r3
 80029ca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80029ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4419      	add	r1, r3
 80029d6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80029da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029de:	6459      	str	r1, [r3, #68]	; 0x44
 80029e0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80029e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	441a      	add	r2, r3
 80029ec:	4bec      	ldr	r3, [pc, #944]	; (8002da0 <sha256_process+0x11b0>)
 80029ee:	4413      	add	r3, r2
 80029f0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80029f4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80029f8:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80029fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002a00:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002a04:	405a      	eors	r2, r3
 8002a06:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002a0a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002a0e:	405a      	eors	r2, r3
 8002a10:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8002a14:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002a18:	4019      	ands	r1, r3
 8002a1a:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8002a1e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002a22:	4318      	orrs	r0, r3
 8002a24:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002a28:	4003      	ands	r3, r0
 8002a2a:	430b      	orrs	r3, r1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002a32:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8002a36:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002a40:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8002a44:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002a48:	4413      	add	r3, r2
 8002a4a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8002a4e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002a52:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002a56:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002a5a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002a5e:	405a      	eors	r2, r3
 8002a60:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002a64:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002a68:	405a      	eors	r2, r3
 8002a6a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002a6e:	441a      	add	r2, r3
 8002a70:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8002a74:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002a78:	4059      	eors	r1, r3
 8002a7a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002a7e:	4019      	ands	r1, r3
 8002a80:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002a84:	404b      	eors	r3, r1
 8002a86:	441a      	add	r2, r3
 8002a88:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002a8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002a96:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002a9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002aa4:	4059      	eors	r1, r3
 8002aa6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002aaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	0a9b      	lsrs	r3, r3, #10
 8002ab2:	4059      	eors	r1, r3
 8002ab4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002ab8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	4419      	add	r1, r3
 8002ac0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002ac4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002ace:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002adc:	4058      	eors	r0, r3
 8002ade:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002ae2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	08db      	lsrs	r3, r3, #3
 8002aea:	4043      	eors	r3, r0
 8002aec:	4419      	add	r1, r3
 8002aee:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002af2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4419      	add	r1, r3
 8002afa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002afe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b02:	6499      	str	r1, [r3, #72]	; 0x48
 8002b04:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002b08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0e:	441a      	add	r2, r3
 8002b10:	4ba4      	ldr	r3, [pc, #656]	; (8002da4 <sha256_process+0x11b4>)
 8002b12:	4413      	add	r3, r2
 8002b14:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002b18:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002b1c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002b20:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002b24:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002b28:	405a      	eors	r2, r3
 8002b2a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002b2e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002b32:	405a      	eors	r2, r3
 8002b34:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8002b38:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002b3c:	4019      	ands	r1, r3
 8002b3e:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8002b42:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002b46:	4318      	orrs	r0, r3
 8002b48:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002b4c:	4003      	ands	r3, r0
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	4413      	add	r3, r2
 8002b52:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002b56:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8002b5a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002b5e:	4413      	add	r3, r2
 8002b60:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8002b64:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8002b68:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8002b72:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002b76:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002b7a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002b7e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002b82:	405a      	eors	r2, r3
 8002b84:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002b88:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002b8c:	405a      	eors	r2, r3
 8002b8e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002b92:	441a      	add	r2, r3
 8002b94:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 8002b98:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002b9c:	4059      	eors	r1, r3
 8002b9e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002ba2:	4019      	ands	r1, r3
 8002ba4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002ba8:	404b      	eors	r3, r1
 8002baa:	441a      	add	r2, r3
 8002bac:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002bb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002bba:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002bbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002bc8:	4059      	eors	r1, r3
 8002bca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002bce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	0a9b      	lsrs	r3, r3, #10
 8002bd6:	4059      	eors	r1, r3
 8002bd8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002bdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4419      	add	r1, r3
 8002be4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002be8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002bf2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002bf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002c00:	4058      	eors	r0, r3
 8002c02:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002c06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	08db      	lsrs	r3, r3, #3
 8002c0e:	4043      	eors	r3, r0
 8002c10:	4419      	add	r1, r3
 8002c12:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002c16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4419      	add	r1, r3
 8002c1e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002c22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c26:	64d9      	str	r1, [r3, #76]	; 0x4c
 8002c28:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002c2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	441a      	add	r2, r3
 8002c34:	4b5c      	ldr	r3, [pc, #368]	; (8002da8 <sha256_process+0x11b8>)
 8002c36:	4413      	add	r3, r2
 8002c38:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002c3c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002c40:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002c44:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002c48:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002c4c:	405a      	eors	r2, r3
 8002c4e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002c52:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002c56:	405a      	eors	r2, r3
 8002c58:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8002c5c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002c60:	4019      	ands	r1, r3
 8002c62:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8002c66:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002c6a:	4318      	orrs	r0, r3
 8002c6c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002c70:	4003      	ands	r3, r0
 8002c72:	430b      	orrs	r3, r1
 8002c74:	4413      	add	r3, r2
 8002c76:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002c7a:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8002c7e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002c82:	4413      	add	r3, r2
 8002c84:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8002c88:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8002c8c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002c90:	4413      	add	r3, r2
 8002c92:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8002c96:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002c9a:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002c9e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002ca2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002ca6:	405a      	eors	r2, r3
 8002ca8:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002cac:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002cb0:	405a      	eors	r2, r3
 8002cb2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002cb6:	441a      	add	r2, r3
 8002cb8:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 8002cbc:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002cc0:	4059      	eors	r1, r3
 8002cc2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002cc6:	4019      	ands	r1, r3
 8002cc8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002ccc:	404b      	eors	r3, r1
 8002cce:	441a      	add	r2, r3
 8002cd0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002cd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cda:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002cde:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002ce2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce8:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002cec:	4059      	eors	r1, r3
 8002cee:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002cf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cf8:	0a9b      	lsrs	r3, r3, #10
 8002cfa:	4059      	eors	r1, r3
 8002cfc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002d00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d06:	4419      	add	r1, r3
 8002d08:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002d0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002d16:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002d1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002d24:	4058      	eors	r0, r3
 8002d26:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002d2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	08db      	lsrs	r3, r3, #3
 8002d32:	4043      	eors	r3, r0
 8002d34:	4419      	add	r1, r3
 8002d36:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002d3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	4419      	add	r1, r3
 8002d42:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002d46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d4a:	6519      	str	r1, [r3, #80]	; 0x50
 8002d4c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002d50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d56:	441a      	add	r2, r3
 8002d58:	4b14      	ldr	r3, [pc, #80]	; (8002dac <sha256_process+0x11bc>)
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002d60:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002d64:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002d68:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002d6c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002d70:	405a      	eors	r2, r3
 8002d72:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002d76:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002d7a:	405a      	eors	r2, r3
 8002d7c:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8002d80:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002d84:	4019      	ands	r1, r3
 8002d86:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8002d8a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002d8e:	4318      	orrs	r0, r3
 8002d90:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d94:	4003      	ands	r3, r0
 8002d96:	430b      	orrs	r3, r1
 8002d98:	4413      	add	r3, r2
 8002d9a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002d9e:	e007      	b.n	8002db0 <sha256_process+0x11c0>
 8002da0:	efbe4786 	.word	0xefbe4786
 8002da4:	0fc19dc6 	.word	0x0fc19dc6
 8002da8:	240ca1cc 	.word	0x240ca1cc
 8002dac:	2de92c6f 	.word	0x2de92c6f
 8002db0:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002db4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002db8:	4413      	add	r3, r2
 8002dba:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8002dbe:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8002dc2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8002dcc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002dd0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002dd4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002dd8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002ddc:	405a      	eors	r2, r3
 8002dde:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002de2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002de6:	405a      	eors	r2, r3
 8002de8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002dec:	441a      	add	r2, r3
 8002dee:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 8002df2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002df6:	4059      	eors	r1, r3
 8002df8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002dfc:	4019      	ands	r1, r3
 8002dfe:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002e02:	404b      	eors	r3, r1
 8002e04:	441a      	add	r2, r3
 8002e06:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002e0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e10:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002e14:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002e18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002e22:	4059      	eors	r1, r3
 8002e24:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002e28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	0a9b      	lsrs	r3, r3, #10
 8002e30:	4059      	eors	r1, r3
 8002e32:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002e36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3c:	4419      	add	r1, r3
 8002e3e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002e42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002e4c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002e50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002e5a:	4058      	eors	r0, r3
 8002e5c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002e60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	08db      	lsrs	r3, r3, #3
 8002e68:	4043      	eors	r3, r0
 8002e6a:	4419      	add	r1, r3
 8002e6c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002e70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	4419      	add	r1, r3
 8002e78:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002e7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e80:	6559      	str	r1, [r3, #84]	; 0x54
 8002e82:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002e86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8c:	441a      	add	r2, r3
 8002e8e:	4bed      	ldr	r3, [pc, #948]	; (8003244 <sha256_process+0x1654>)
 8002e90:	4413      	add	r3, r2
 8002e92:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002e96:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002e9a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002e9e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002ea2:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002ea6:	405a      	eors	r2, r3
 8002ea8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002eac:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002eb0:	405a      	eors	r2, r3
 8002eb2:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8002eb6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002eba:	4019      	ands	r1, r3
 8002ebc:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8002ec0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002ec4:	4318      	orrs	r0, r3
 8002ec6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002eca:	4003      	ands	r3, r0
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	4413      	add	r3, r2
 8002ed0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002ed4:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8002ed8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002edc:	4413      	add	r3, r2
 8002ede:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002ee2:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8002ee6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002eea:	4413      	add	r3, r2
 8002eec:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8002ef0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002ef4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002ef8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002efc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002f00:	405a      	eors	r2, r3
 8002f02:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002f06:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002f0a:	405a      	eors	r2, r3
 8002f0c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002f10:	441a      	add	r2, r3
 8002f12:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8002f16:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002f1a:	4059      	eors	r1, r3
 8002f1c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002f20:	4019      	ands	r1, r3
 8002f22:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8002f26:	404b      	eors	r3, r1
 8002f28:	441a      	add	r2, r3
 8002f2a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002f2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f34:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002f38:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002f3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f42:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002f46:	4059      	eors	r1, r3
 8002f48:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002f4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f52:	0a9b      	lsrs	r3, r3, #10
 8002f54:	4059      	eors	r1, r3
 8002f56:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002f5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	4419      	add	r1, r3
 8002f62:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002f66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002f70:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002f74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002f7e:	4058      	eors	r0, r3
 8002f80:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002f84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	08db      	lsrs	r3, r3, #3
 8002f8c:	4043      	eors	r3, r0
 8002f8e:	4419      	add	r1, r3
 8002f90:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	4419      	add	r1, r3
 8002f9c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002fa4:	6599      	str	r1, [r3, #88]	; 0x58
 8002fa6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8002faa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	441a      	add	r2, r3
 8002fb2:	4ba5      	ldr	r3, [pc, #660]	; (8003248 <sha256_process+0x1658>)
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002fba:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002fbe:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002fc2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002fc6:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002fca:	405a      	eors	r2, r3
 8002fcc:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002fd0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002fd4:	405a      	eors	r2, r3
 8002fd6:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 8002fda:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002fde:	4019      	ands	r1, r3
 8002fe0:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 8002fe4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002fe8:	4318      	orrs	r0, r3
 8002fea:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002fee:	4003      	ands	r3, r0
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002ff8:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8002ffc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003000:	4413      	add	r3, r2
 8003002:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8003006:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800300a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800300e:	4413      	add	r3, r2
 8003010:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003014:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003018:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800301c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003020:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003024:	405a      	eors	r2, r3
 8003026:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800302a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800302e:	405a      	eors	r2, r3
 8003030:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003034:	441a      	add	r2, r3
 8003036:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800303a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800303e:	4059      	eors	r1, r3
 8003040:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003044:	4019      	ands	r1, r3
 8003046:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800304a:	404b      	eors	r3, r1
 800304c:	441a      	add	r2, r3
 800304e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003052:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003058:	ea4f 4173 	mov.w	r1, r3, ror #17
 800305c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003060:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800306a:	4059      	eors	r1, r3
 800306c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003070:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003076:	0a9b      	lsrs	r3, r3, #10
 8003078:	4059      	eors	r1, r3
 800307a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800307e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	4419      	add	r1, r3
 8003086:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800308a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003094:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003098:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80030a2:	4058      	eors	r0, r3
 80030a4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80030a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	08db      	lsrs	r3, r3, #3
 80030b0:	4043      	eors	r3, r0
 80030b2:	4419      	add	r1, r3
 80030b4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80030b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	4419      	add	r1, r3
 80030c0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80030c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80030c8:	65d9      	str	r1, [r3, #92]	; 0x5c
 80030ca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80030ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80030d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d4:	441a      	add	r2, r3
 80030d6:	4b5d      	ldr	r3, [pc, #372]	; (800324c <sha256_process+0x165c>)
 80030d8:	4413      	add	r3, r2
 80030da:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80030de:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80030e2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80030e6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80030ea:	ea4f 3373 	mov.w	r3, r3, ror #13
 80030ee:	405a      	eors	r2, r3
 80030f0:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80030f4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80030f8:	405a      	eors	r2, r3
 80030fa:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 80030fe:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003102:	4019      	ands	r1, r3
 8003104:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 8003108:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800310c:	4318      	orrs	r0, r3
 800310e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8003112:	4003      	ands	r3, r0
 8003114:	430b      	orrs	r3, r1
 8003116:	4413      	add	r3, r2
 8003118:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800311c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8003120:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003124:	4413      	add	r3, r2
 8003126:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800312a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800312e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003132:	4413      	add	r3, r2
 8003134:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003138:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800313c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003140:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8003144:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003148:	405a      	eors	r2, r3
 800314a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800314e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003152:	405a      	eors	r2, r3
 8003154:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003158:	441a      	add	r2, r3
 800315a:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 800315e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003162:	4059      	eors	r1, r3
 8003164:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8003168:	4019      	ands	r1, r3
 800316a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800316e:	404b      	eors	r3, r1
 8003170:	441a      	add	r2, r3
 8003172:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003176:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800317a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003180:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003184:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800318e:	4059      	eors	r1, r3
 8003190:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003194:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	0a9b      	lsrs	r3, r3, #10
 800319c:	4059      	eors	r1, r3
 800319e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80031a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80031a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a8:	4419      	add	r1, r3
 80031aa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80031ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80031b8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80031bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80031c6:	4058      	eors	r0, r3
 80031c8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80031cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	08db      	lsrs	r3, r3, #3
 80031d4:	4043      	eors	r3, r0
 80031d6:	4419      	add	r1, r3
 80031d8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80031dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4419      	add	r1, r3
 80031e4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80031e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80031ec:	6619      	str	r1, [r3, #96]	; 0x60
 80031ee:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80031f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80031f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f8:	441a      	add	r2, r3
 80031fa:	4b15      	ldr	r3, [pc, #84]	; (8003250 <sha256_process+0x1660>)
 80031fc:	4413      	add	r3, r2
 80031fe:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003202:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003206:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800320a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800320e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003212:	405a      	eors	r2, r3
 8003214:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003218:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800321c:	405a      	eors	r2, r3
 800321e:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 8003222:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8003226:	4019      	ands	r1, r3
 8003228:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 800322c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8003230:	4318      	orrs	r0, r3
 8003232:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003236:	4003      	ands	r3, r0
 8003238:	430b      	orrs	r3, r1
 800323a:	4413      	add	r3, r2
 800323c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003240:	e008      	b.n	8003254 <sha256_process+0x1664>
 8003242:	bf00      	nop
 8003244:	4a7484aa 	.word	0x4a7484aa
 8003248:	5cb0a9dc 	.word	0x5cb0a9dc
 800324c:	76f988da 	.word	0x76f988da
 8003250:	983e5152 	.word	0x983e5152
 8003254:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8003258:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800325c:	4413      	add	r3, r2
 800325e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8003262:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8003266:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800326a:	4413      	add	r3, r2
 800326c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003270:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8003274:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003278:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800327c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003280:	405a      	eors	r2, r3
 8003282:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8003286:	ea4f 6373 	mov.w	r3, r3, ror #25
 800328a:	405a      	eors	r2, r3
 800328c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003290:	441a      	add	r2, r3
 8003292:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8003296:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800329a:	4059      	eors	r1, r3
 800329c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80032a0:	4019      	ands	r1, r3
 80032a2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80032a6:	404b      	eors	r3, r1
 80032a8:	441a      	add	r2, r3
 80032aa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80032ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	ea4f 4173 	mov.w	r1, r3, ror #17
 80032b8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80032bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80032c6:	4059      	eors	r1, r3
 80032c8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80032cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d2:	0a9b      	lsrs	r3, r3, #10
 80032d4:	4059      	eors	r1, r3
 80032d6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80032da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e0:	4419      	add	r1, r3
 80032e2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80032e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80032f0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80032f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80032fe:	4058      	eors	r0, r3
 8003300:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003304:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	08db      	lsrs	r3, r3, #3
 800330c:	4043      	eors	r3, r0
 800330e:	4419      	add	r1, r3
 8003310:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003314:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	4419      	add	r1, r3
 800331c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003320:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003324:	6659      	str	r1, [r3, #100]	; 0x64
 8003326:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800332a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800332e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003330:	441a      	add	r2, r3
 8003332:	4bed      	ldr	r3, [pc, #948]	; (80036e8 <sha256_process+0x1af8>)
 8003334:	4413      	add	r3, r2
 8003336:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800333a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800333e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003342:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003346:	ea4f 3373 	mov.w	r3, r3, ror #13
 800334a:	405a      	eors	r2, r3
 800334c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003350:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003354:	405a      	eors	r2, r3
 8003356:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 800335a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800335e:	4019      	ands	r1, r3
 8003360:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8003364:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003368:	4318      	orrs	r0, r3
 800336a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800336e:	4003      	ands	r3, r0
 8003370:	430b      	orrs	r3, r1
 8003372:	4413      	add	r3, r2
 8003374:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003378:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 800337c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003380:	4413      	add	r3, r2
 8003382:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8003386:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800338a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800338e:	4413      	add	r3, r2
 8003390:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8003394:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003398:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800339c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80033a0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80033a4:	405a      	eors	r2, r3
 80033a6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80033aa:	ea4f 6373 	mov.w	r3, r3, ror #25
 80033ae:	405a      	eors	r2, r3
 80033b0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80033b4:	441a      	add	r2, r3
 80033b6:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 80033ba:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80033be:	4059      	eors	r1, r3
 80033c0:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80033c4:	4019      	ands	r1, r3
 80033c6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80033ca:	404b      	eors	r3, r1
 80033cc:	441a      	add	r2, r3
 80033ce:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80033d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80033d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d8:	ea4f 4173 	mov.w	r1, r3, ror #17
 80033dc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80033e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80033e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80033ea:	4059      	eors	r1, r3
 80033ec:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80033f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80033f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f6:	0a9b      	lsrs	r3, r3, #10
 80033f8:	4059      	eors	r1, r3
 80033fa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80033fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003404:	4419      	add	r1, r3
 8003406:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800340a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003414:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003418:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003422:	4058      	eors	r0, r3
 8003424:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003428:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	08db      	lsrs	r3, r3, #3
 8003430:	4043      	eors	r3, r0
 8003432:	4419      	add	r1, r3
 8003434:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003438:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	4419      	add	r1, r3
 8003440:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003444:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003448:	6699      	str	r1, [r3, #104]	; 0x68
 800344a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800344e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003454:	441a      	add	r2, r3
 8003456:	4ba5      	ldr	r3, [pc, #660]	; (80036ec <sha256_process+0x1afc>)
 8003458:	4413      	add	r3, r2
 800345a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800345e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003462:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003466:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800346a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800346e:	405a      	eors	r2, r3
 8003470:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003474:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003478:	405a      	eors	r2, r3
 800347a:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800347e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003482:	4019      	ands	r1, r3
 8003484:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8003488:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800348c:	4318      	orrs	r0, r3
 800348e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003492:	4003      	ands	r3, r0
 8003494:	430b      	orrs	r3, r1
 8003496:	4413      	add	r3, r2
 8003498:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800349c:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 80034a0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80034a4:	4413      	add	r3, r2
 80034a6:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80034aa:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80034ae:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80034b2:	4413      	add	r3, r2
 80034b4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80034b8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80034bc:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80034c0:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80034c4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80034c8:	405a      	eors	r2, r3
 80034ca:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80034ce:	ea4f 6373 	mov.w	r3, r3, ror #25
 80034d2:	405a      	eors	r2, r3
 80034d4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80034d8:	441a      	add	r2, r3
 80034da:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 80034de:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80034e2:	4059      	eors	r1, r3
 80034e4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80034e8:	4019      	ands	r1, r3
 80034ea:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80034ee:	404b      	eors	r3, r1
 80034f0:	441a      	add	r2, r3
 80034f2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80034f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80034fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034fc:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003500:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800350a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800350e:	4059      	eors	r1, r3
 8003510:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003514:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800351a:	0a9b      	lsrs	r3, r3, #10
 800351c:	4059      	eors	r1, r3
 800351e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003522:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003528:	4419      	add	r1, r3
 800352a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800352e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003538:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800353c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003546:	4058      	eors	r0, r3
 8003548:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800354c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	08db      	lsrs	r3, r3, #3
 8003554:	4043      	eors	r3, r0
 8003556:	4419      	add	r1, r3
 8003558:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800355c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	4419      	add	r1, r3
 8003564:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003568:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800356c:	66d9      	str	r1, [r3, #108]	; 0x6c
 800356e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003572:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003578:	441a      	add	r2, r3
 800357a:	4b5d      	ldr	r3, [pc, #372]	; (80036f0 <sha256_process+0x1b00>)
 800357c:	4413      	add	r3, r2
 800357e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003582:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003586:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800358a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800358e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003592:	405a      	eors	r2, r3
 8003594:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003598:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800359c:	405a      	eors	r2, r3
 800359e:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80035a2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80035a6:	4019      	ands	r1, r3
 80035a8:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80035ac:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80035b0:	4318      	orrs	r0, r3
 80035b2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80035b6:	4003      	ands	r3, r0
 80035b8:	430b      	orrs	r3, r1
 80035ba:	4413      	add	r3, r2
 80035bc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80035c0:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 80035c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80035c8:	4413      	add	r3, r2
 80035ca:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 80035ce:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80035d2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80035d6:	4413      	add	r3, r2
 80035d8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80035dc:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80035e0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80035e4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80035e8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80035ec:	405a      	eors	r2, r3
 80035ee:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80035f2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80035f6:	405a      	eors	r2, r3
 80035f8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80035fc:	441a      	add	r2, r3
 80035fe:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 8003602:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003606:	4059      	eors	r1, r3
 8003608:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800360c:	4019      	ands	r1, r3
 800360e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003612:	404b      	eors	r3, r1
 8003614:	441a      	add	r2, r3
 8003616:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800361a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800361e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003620:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003624:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003628:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800362c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003632:	4059      	eors	r1, r3
 8003634:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003638:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800363c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800363e:	0a9b      	lsrs	r3, r3, #10
 8003640:	4059      	eors	r1, r3
 8003642:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003646:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800364a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364c:	4419      	add	r1, r3
 800364e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003652:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003658:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800365c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003660:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003666:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800366a:	4058      	eors	r0, r3
 800366c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003670:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003676:	08db      	lsrs	r3, r3, #3
 8003678:	4043      	eors	r3, r0
 800367a:	4419      	add	r1, r3
 800367c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003680:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	4419      	add	r1, r3
 8003688:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800368c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003690:	6719      	str	r1, [r3, #112]	; 0x70
 8003692:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003696:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	441a      	add	r2, r3
 800369e:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <sha256_process+0x1b04>)
 80036a0:	4413      	add	r3, r2
 80036a2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80036a6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80036aa:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80036ae:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80036b2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80036b6:	405a      	eors	r2, r3
 80036b8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80036bc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80036c0:	405a      	eors	r2, r3
 80036c2:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 80036c6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80036ca:	4019      	ands	r1, r3
 80036cc:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80036d0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80036d4:	4318      	orrs	r0, r3
 80036d6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80036da:	4003      	ands	r3, r0
 80036dc:	430b      	orrs	r3, r1
 80036de:	4413      	add	r3, r2
 80036e0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80036e4:	e008      	b.n	80036f8 <sha256_process+0x1b08>
 80036e6:	bf00      	nop
 80036e8:	a831c66d 	.word	0xa831c66d
 80036ec:	b00327c8 	.word	0xb00327c8
 80036f0:	bf597fc7 	.word	0xbf597fc7
 80036f4:	c6e00bf3 	.word	0xc6e00bf3
 80036f8:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80036fc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003700:	4413      	add	r3, r2
 8003702:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8003706:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800370a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800370e:	4413      	add	r3, r2
 8003710:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8003714:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003718:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800371c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003720:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003724:	405a      	eors	r2, r3
 8003726:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800372a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800372e:	405a      	eors	r2, r3
 8003730:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003734:	441a      	add	r2, r3
 8003736:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 800373a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800373e:	4059      	eors	r1, r3
 8003740:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003744:	4019      	ands	r1, r3
 8003746:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800374a:	404b      	eors	r3, r1
 800374c:	441a      	add	r2, r3
 800374e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003752:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003758:	ea4f 4173 	mov.w	r1, r3, ror #17
 800375c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003760:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003766:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800376a:	4059      	eors	r1, r3
 800376c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003770:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003776:	0a9b      	lsrs	r3, r3, #10
 8003778:	4059      	eors	r1, r3
 800377a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800377e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003784:	4419      	add	r1, r3
 8003786:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800378a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003794:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003798:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80037a2:	4058      	eors	r0, r3
 80037a4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80037a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	08db      	lsrs	r3, r3, #3
 80037b0:	4043      	eors	r3, r0
 80037b2:	4419      	add	r1, r3
 80037b4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80037b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80037bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037be:	4419      	add	r1, r3
 80037c0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80037c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80037c8:	6759      	str	r1, [r3, #116]	; 0x74
 80037ca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80037ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80037d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d4:	441a      	add	r2, r3
 80037d6:	4bee      	ldr	r3, [pc, #952]	; (8003b90 <sha256_process+0x1fa0>)
 80037d8:	4413      	add	r3, r2
 80037da:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80037de:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80037e2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80037e6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80037ea:	ea4f 3373 	mov.w	r3, r3, ror #13
 80037ee:	405a      	eors	r2, r3
 80037f0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80037f4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80037f8:	405a      	eors	r2, r3
 80037fa:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 80037fe:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8003802:	4019      	ands	r1, r3
 8003804:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8003808:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800380c:	4318      	orrs	r0, r3
 800380e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003812:	4003      	ands	r3, r0
 8003814:	430b      	orrs	r3, r1
 8003816:	4413      	add	r3, r2
 8003818:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800381c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8003820:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003824:	4413      	add	r3, r2
 8003826:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800382a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800382e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003832:	4413      	add	r3, r2
 8003834:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8003838:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800383c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003840:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003844:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003848:	405a      	eors	r2, r3
 800384a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800384e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003852:	405a      	eors	r2, r3
 8003854:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8003858:	441a      	add	r2, r3
 800385a:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 800385e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003862:	4059      	eors	r1, r3
 8003864:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003868:	4019      	ands	r1, r3
 800386a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800386e:	404b      	eors	r3, r1
 8003870:	441a      	add	r2, r3
 8003872:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003876:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003880:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003884:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800388e:	4059      	eors	r1, r3
 8003890:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003894:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	0a9b      	lsrs	r3, r3, #10
 800389c:	4059      	eors	r1, r3
 800389e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80038a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	4419      	add	r1, r3
 80038aa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80038ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b4:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80038b8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80038bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80038c6:	4058      	eors	r0, r3
 80038c8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80038cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d2:	08db      	lsrs	r3, r3, #3
 80038d4:	4043      	eors	r3, r0
 80038d6:	4419      	add	r1, r3
 80038d8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80038dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	4419      	add	r1, r3
 80038e4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80038e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038ec:	6799      	str	r1, [r3, #120]	; 0x78
 80038ee:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80038f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038f8:	441a      	add	r2, r3
 80038fa:	4ba6      	ldr	r3, [pc, #664]	; (8003b94 <sha256_process+0x1fa4>)
 80038fc:	4413      	add	r3, r2
 80038fe:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003902:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003906:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800390a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800390e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003912:	405a      	eors	r2, r3
 8003914:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003918:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800391c:	405a      	eors	r2, r3
 800391e:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 8003922:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8003926:	4019      	ands	r1, r3
 8003928:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 800392c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8003930:	4318      	orrs	r0, r3
 8003932:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8003936:	4003      	ands	r3, r0
 8003938:	430b      	orrs	r3, r1
 800393a:	4413      	add	r3, r2
 800393c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003940:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8003944:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003948:	4413      	add	r3, r2
 800394a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800394e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8003952:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003956:	4413      	add	r3, r2
 8003958:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800395c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003960:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003964:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003968:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800396c:	405a      	eors	r2, r3
 800396e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003972:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003976:	405a      	eors	r2, r3
 8003978:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800397c:	441a      	add	r2, r3
 800397e:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8003982:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003986:	4059      	eors	r1, r3
 8003988:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800398c:	4019      	ands	r1, r3
 800398e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003992:	404b      	eors	r3, r1
 8003994:	441a      	add	r2, r3
 8003996:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800399a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800399e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a0:	ea4f 4173 	mov.w	r1, r3, ror #17
 80039a4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80039a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ae:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80039b2:	4059      	eors	r1, r3
 80039b4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80039b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039be:	0a9b      	lsrs	r3, r3, #10
 80039c0:	4059      	eors	r1, r3
 80039c2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80039c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039cc:	4419      	add	r1, r3
 80039ce:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80039d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80039dc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80039e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80039ea:	4058      	eors	r0, r3
 80039ec:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80039f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	08db      	lsrs	r3, r3, #3
 80039f8:	4043      	eors	r3, r0
 80039fa:	4419      	add	r1, r3
 80039fc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a06:	4419      	add	r1, r3
 8003a08:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003a0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a10:	67d9      	str	r1, [r3, #124]	; 0x7c
 8003a12:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003a16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a1c:	441a      	add	r2, r3
 8003a1e:	4b5e      	ldr	r3, [pc, #376]	; (8003b98 <sha256_process+0x1fa8>)
 8003a20:	4413      	add	r3, r2
 8003a22:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003a26:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8003a2a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003a2e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8003a32:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003a36:	405a      	eors	r2, r3
 8003a38:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8003a3c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003a40:	405a      	eors	r2, r3
 8003a42:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 8003a46:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003a4a:	4019      	ands	r1, r3
 8003a4c:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 8003a50:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003a54:	4318      	orrs	r0, r3
 8003a56:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8003a5a:	4003      	ands	r3, r0
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	4413      	add	r3, r2
 8003a60:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003a64:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8003a68:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8003a72:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8003a76:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8003a80:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8003a84:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003a88:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8003a8c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003a90:	405a      	eors	r2, r3
 8003a92:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8003a96:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003a9a:	405a      	eors	r2, r3
 8003a9c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003aa0:	441a      	add	r2, r3
 8003aa2:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8003aa6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003aaa:	4059      	eors	r1, r3
 8003aac:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8003ab0:	4019      	ands	r1, r3
 8003ab2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003ab6:	404b      	eors	r3, r1
 8003ab8:	441a      	add	r2, r3
 8003aba:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003abe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac4:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003ac8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003acc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ad2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003ad6:	4059      	eors	r1, r3
 8003ad8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003adc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ae2:	0a9b      	lsrs	r3, r3, #10
 8003ae4:	4059      	eors	r1, r3
 8003ae6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003aea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003af0:	4419      	add	r1, r3
 8003af2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003af6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afc:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003b00:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003b04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003b0e:	4058      	eors	r0, r3
 8003b10:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	08db      	lsrs	r3, r3, #3
 8003b1c:	4043      	eors	r3, r0
 8003b1e:	4419      	add	r1, r3
 8003b20:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003b24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	4419      	add	r1, r3
 8003b2c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003b30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b34:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
 8003b38:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003b3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b44:	441a      	add	r2, r3
 8003b46:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <sha256_process+0x1fac>)
 8003b48:	4413      	add	r3, r2
 8003b4a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003b4e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003b52:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003b56:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003b5a:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003b5e:	405a      	eors	r2, r3
 8003b60:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003b64:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003b68:	405a      	eors	r2, r3
 8003b6a:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 8003b6e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8003b72:	4019      	ands	r1, r3
 8003b74:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 8003b78:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8003b7c:	4318      	orrs	r0, r3
 8003b7e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003b82:	4003      	ands	r3, r0
 8003b84:	430b      	orrs	r3, r1
 8003b86:	4413      	add	r3, r2
 8003b88:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003b8c:	e008      	b.n	8003ba0 <sha256_process+0x1fb0>
 8003b8e:	bf00      	nop
 8003b90:	d5a79147 	.word	0xd5a79147
 8003b94:	06ca6351 	.word	0x06ca6351
 8003b98:	14292967 	.word	0x14292967
 8003b9c:	27b70a85 	.word	0x27b70a85
 8003ba0:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8003ba4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003ba8:	4413      	add	r3, r2
 8003baa:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8003bae:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8003bb2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8003bbc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8003bc0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003bc4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8003bc8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003bcc:	405a      	eors	r2, r3
 8003bce:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8003bd2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003bd6:	405a      	eors	r2, r3
 8003bd8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003bdc:	441a      	add	r2, r3
 8003bde:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8003be2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003be6:	4059      	eors	r1, r3
 8003be8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8003bec:	4019      	ands	r1, r3
 8003bee:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003bf2:	404b      	eors	r3, r1
 8003bf4:	441a      	add	r2, r3
 8003bf6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003bfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003bfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c00:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003c04:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c0e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003c12:	4059      	eors	r1, r3
 8003c14:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c1e:	0a9b      	lsrs	r3, r3, #10
 8003c20:	4059      	eors	r1, r3
 8003c22:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c2c:	4419      	add	r1, r3
 8003c2e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c38:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003c3c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c46:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003c4a:	4058      	eors	r0, r3
 8003c4c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c56:	08db      	lsrs	r3, r3, #3
 8003c58:	4043      	eors	r3, r0
 8003c5a:	4419      	add	r1, r3
 8003c5c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	4419      	add	r1, r3
 8003c68:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c70:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
 8003c74:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c80:	441a      	add	r2, r3
 8003c82:	4bf4      	ldr	r3, [pc, #976]	; (8004054 <sha256_process+0x2464>)
 8003c84:	4413      	add	r3, r2
 8003c86:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003c8a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003c8e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003c92:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003c96:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003c9a:	405a      	eors	r2, r3
 8003c9c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003ca0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003ca4:	405a      	eors	r2, r3
 8003ca6:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8003caa:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003cae:	4019      	ands	r1, r3
 8003cb0:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8003cb4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003cb8:	4318      	orrs	r0, r3
 8003cba:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8003cbe:	4003      	ands	r3, r0
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003cc8:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8003ccc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8003cd6:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8003cda:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003cde:	4413      	add	r3, r2
 8003ce0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8003ce4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003ce8:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003cec:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003cf0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003cf4:	405a      	eors	r2, r3
 8003cf6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003cfa:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003cfe:	405a      	eors	r2, r3
 8003d00:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003d04:	441a      	add	r2, r3
 8003d06:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8003d0a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8003d0e:	4059      	eors	r1, r3
 8003d10:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003d14:	4019      	ands	r1, r3
 8003d16:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8003d1a:	404b      	eors	r3, r1
 8003d1c:	441a      	add	r2, r3
 8003d1e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003d22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2a:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003d2e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003d32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d3a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003d3e:	4059      	eors	r1, r3
 8003d40:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003d44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4c:	0a9b      	lsrs	r3, r3, #10
 8003d4e:	4059      	eors	r1, r3
 8003d50:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003d54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d5a:	4419      	add	r1, r3
 8003d5c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003d60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003d6a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003d6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d74:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003d78:	4058      	eors	r0, r3
 8003d7a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003d7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d84:	08db      	lsrs	r3, r3, #3
 8003d86:	4043      	eors	r3, r0
 8003d88:	4419      	add	r1, r3
 8003d8a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003d8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d94:	4419      	add	r1, r3
 8003d96:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003d9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d9e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 8003da2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003da6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dae:	441a      	add	r2, r3
 8003db0:	4ba9      	ldr	r3, [pc, #676]	; (8004058 <sha256_process+0x2468>)
 8003db2:	4413      	add	r3, r2
 8003db4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003db8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003dbc:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003dc0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003dc4:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003dc8:	405a      	eors	r2, r3
 8003dca:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003dce:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003dd2:	405a      	eors	r2, r3
 8003dd4:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8003dd8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003ddc:	4019      	ands	r1, r3
 8003dde:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8003de2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003de6:	4318      	orrs	r0, r3
 8003de8:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003dec:	4003      	ands	r3, r0
 8003dee:	430b      	orrs	r3, r1
 8003df0:	4413      	add	r3, r2
 8003df2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003df6:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8003dfa:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003dfe:	4413      	add	r3, r2
 8003e00:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8003e04:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8003e08:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8003e12:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8003e16:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003e1a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8003e1e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003e22:	405a      	eors	r2, r3
 8003e24:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8003e28:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003e2c:	405a      	eors	r2, r3
 8003e2e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8003e32:	441a      	add	r2, r3
 8003e34:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 8003e38:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8003e3c:	4059      	eors	r1, r3
 8003e3e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8003e42:	4019      	ands	r1, r3
 8003e44:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8003e48:	404b      	eors	r3, r1
 8003e4a:	441a      	add	r2, r3
 8003e4c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003e50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e58:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003e5c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003e60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e68:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003e6c:	4059      	eors	r1, r3
 8003e6e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003e72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e7a:	0a9b      	lsrs	r3, r3, #10
 8003e7c:	4059      	eors	r1, r3
 8003e7e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003e82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	4419      	add	r1, r3
 8003e8a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003e8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e94:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003e98:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003e9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003ea6:	4058      	eors	r0, r3
 8003ea8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003eac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb2:	08db      	lsrs	r3, r3, #3
 8003eb4:	4043      	eors	r3, r0
 8003eb6:	4419      	add	r1, r3
 8003eb8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003ebc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec2:	4419      	add	r1, r3
 8003ec4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003ec8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ecc:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
 8003ed0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003ed4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003edc:	441a      	add	r2, r3
 8003ede:	4b5f      	ldr	r3, [pc, #380]	; (800405c <sha256_process+0x246c>)
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003ee6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003eea:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003eee:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003ef2:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003ef6:	405a      	eors	r2, r3
 8003ef8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003efc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003f00:	405a      	eors	r2, r3
 8003f02:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8003f06:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003f0a:	4019      	ands	r1, r3
 8003f0c:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8003f10:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8003f14:	4318      	orrs	r0, r3
 8003f16:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8003f1a:	4003      	ands	r3, r0
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	4413      	add	r3, r2
 8003f20:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8003f24:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8003f28:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8003f32:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8003f36:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8003f40:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003f44:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003f48:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003f4c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003f50:	405a      	eors	r2, r3
 8003f52:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003f56:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003f5a:	405a      	eors	r2, r3
 8003f5c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8003f60:	441a      	add	r2, r3
 8003f62:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 8003f66:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003f6a:	4059      	eors	r1, r3
 8003f6c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8003f70:	4019      	ands	r1, r3
 8003f72:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003f76:	404b      	eors	r3, r1
 8003f78:	441a      	add	r2, r3
 8003f7a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003f7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003f8a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003f8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f96:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003f9a:	4059      	eors	r1, r3
 8003f9c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa8:	0a9b      	lsrs	r3, r3, #10
 8003faa:	4059      	eors	r1, r3
 8003fac:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003fb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb6:	4419      	add	r1, r3
 8003fb8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003fbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003fc6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003fca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003fd4:	4058      	eors	r0, r3
 8003fd6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003fda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe0:	08db      	lsrs	r3, r3, #3
 8003fe2:	4043      	eors	r3, r0
 8003fe4:	4419      	add	r1, r3
 8003fe6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003fea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff0:	4419      	add	r1, r3
 8003ff2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003ff6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ffa:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 8003ffe:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004002:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	441a      	add	r2, r3
 800400c:	4b14      	ldr	r3, [pc, #80]	; (8004060 <sha256_process+0x2470>)
 800400e:	4413      	add	r3, r2
 8004010:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004014:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8004018:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800401c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8004020:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004024:	405a      	eors	r2, r3
 8004026:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800402a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800402e:	405a      	eors	r2, r3
 8004030:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8004034:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004038:	4019      	ands	r1, r3
 800403a:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 800403e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004042:	4318      	orrs	r0, r3
 8004044:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004048:	4003      	ands	r3, r0
 800404a:	430b      	orrs	r3, r1
 800404c:	4413      	add	r3, r2
 800404e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004052:	e007      	b.n	8004064 <sha256_process+0x2474>
 8004054:	2e1b2138 	.word	0x2e1b2138
 8004058:	4d2c6dfc 	.word	0x4d2c6dfc
 800405c:	53380d13 	.word	0x53380d13
 8004060:	650a7354 	.word	0x650a7354
 8004064:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8004068:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800406c:	4413      	add	r3, r2
 800406e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004072:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004076:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800407a:	4413      	add	r3, r2
 800407c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004080:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004084:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004088:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800408c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004090:	405a      	eors	r2, r3
 8004092:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004096:	ea4f 6373 	mov.w	r3, r3, ror #25
 800409a:	405a      	eors	r2, r3
 800409c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80040a0:	441a      	add	r2, r3
 80040a2:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 80040a6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80040aa:	4059      	eors	r1, r3
 80040ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80040b0:	4019      	ands	r1, r3
 80040b2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80040b6:	404b      	eors	r3, r1
 80040b8:	441a      	add	r2, r3
 80040ba:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80040be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040c6:	ea4f 4173 	mov.w	r1, r3, ror #17
 80040ca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80040ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80040da:	4059      	eors	r1, r3
 80040dc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80040e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e8:	0a9b      	lsrs	r3, r3, #10
 80040ea:	4059      	eors	r1, r3
 80040ec:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80040f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040f6:	4419      	add	r1, r3
 80040f8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80040fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004106:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800410a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004114:	4058      	eors	r0, r3
 8004116:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800411a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800411e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004120:	08db      	lsrs	r3, r3, #3
 8004122:	4043      	eors	r3, r0
 8004124:	4419      	add	r1, r3
 8004126:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800412a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	4419      	add	r1, r3
 8004132:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004136:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800413a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
 800413e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004142:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414a:	441a      	add	r2, r3
 800414c:	4bf5      	ldr	r3, [pc, #980]	; (8004524 <sha256_process+0x2934>)
 800414e:	4413      	add	r3, r2
 8004150:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004154:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004158:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800415c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004160:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004164:	405a      	eors	r2, r3
 8004166:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800416a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800416e:	405a      	eors	r2, r3
 8004170:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8004174:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8004178:	4019      	ands	r1, r3
 800417a:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 800417e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8004182:	4318      	orrs	r0, r3
 8004184:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004188:	4003      	ands	r3, r0
 800418a:	430b      	orrs	r3, r1
 800418c:	4413      	add	r3, r2
 800418e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004192:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004196:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800419a:	4413      	add	r3, r2
 800419c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80041a0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80041a4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80041a8:	4413      	add	r3, r2
 80041aa:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80041ae:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80041b2:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80041b6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80041ba:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80041be:	405a      	eors	r2, r3
 80041c0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80041c4:	ea4f 6373 	mov.w	r3, r3, ror #25
 80041c8:	405a      	eors	r2, r3
 80041ca:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80041ce:	441a      	add	r2, r3
 80041d0:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80041d4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80041d8:	4059      	eors	r1, r3
 80041da:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80041de:	4019      	ands	r1, r3
 80041e0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80041e4:	404b      	eors	r3, r1
 80041e6:	441a      	add	r2, r3
 80041e8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80041ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f4:	ea4f 4173 	mov.w	r1, r3, ror #17
 80041f8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80041fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004204:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004208:	4059      	eors	r1, r3
 800420a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800420e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004216:	0a9b      	lsrs	r3, r3, #10
 8004218:	4059      	eors	r1, r3
 800421a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800421e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004224:	4419      	add	r1, r3
 8004226:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800422a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800422e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004230:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004234:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004238:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800423c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004242:	4058      	eors	r0, r3
 8004244:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004248:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800424c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424e:	08db      	lsrs	r3, r3, #3
 8004250:	4043      	eors	r3, r0
 8004252:	4419      	add	r1, r3
 8004254:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004258:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425e:	4419      	add	r1, r3
 8004260:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004264:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004268:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 800426c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004270:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004274:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004278:	441a      	add	r2, r3
 800427a:	4bab      	ldr	r3, [pc, #684]	; (8004528 <sha256_process+0x2938>)
 800427c:	4413      	add	r3, r2
 800427e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004282:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8004286:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800428a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800428e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004292:	405a      	eors	r2, r3
 8004294:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8004298:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800429c:	405a      	eors	r2, r3
 800429e:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 80042a2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80042a6:	4019      	ands	r1, r3
 80042a8:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 80042ac:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80042b0:	4318      	orrs	r0, r3
 80042b2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80042b6:	4003      	ands	r3, r0
 80042b8:	430b      	orrs	r3, r1
 80042ba:	4413      	add	r3, r2
 80042bc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80042c0:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80042c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80042c8:	4413      	add	r3, r2
 80042ca:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80042ce:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80042d2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80042d6:	4413      	add	r3, r2
 80042d8:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80042dc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80042e0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80042e4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80042e8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80042ec:	405a      	eors	r2, r3
 80042ee:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80042f2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80042f6:	405a      	eors	r2, r3
 80042f8:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80042fc:	441a      	add	r2, r3
 80042fe:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8004302:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004306:	4059      	eors	r1, r3
 8004308:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800430c:	4019      	ands	r1, r3
 800430e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004312:	404b      	eors	r3, r1
 8004314:	441a      	add	r2, r3
 8004316:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800431a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800431e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004322:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004326:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800432a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800432e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004332:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004336:	4059      	eors	r1, r3
 8004338:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800433c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004344:	0a9b      	lsrs	r3, r3, #10
 8004346:	4059      	eors	r1, r3
 8004348:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800434c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004354:	4419      	add	r1, r3
 8004356:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800435a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800435e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004360:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004364:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004368:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800436c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004372:	4058      	eors	r0, r3
 8004374:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004378:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800437c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800437e:	08db      	lsrs	r3, r3, #3
 8004380:	4043      	eors	r3, r0
 8004382:	4419      	add	r1, r3
 8004384:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004388:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800438c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438e:	4419      	add	r1, r3
 8004390:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004394:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004398:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
 800439c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80043a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043a8:	441a      	add	r2, r3
 80043aa:	4b60      	ldr	r3, [pc, #384]	; (800452c <sha256_process+0x293c>)
 80043ac:	4413      	add	r3, r2
 80043ae:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80043b2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80043b6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80043ba:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80043be:	ea4f 3373 	mov.w	r3, r3, ror #13
 80043c2:	405a      	eors	r2, r3
 80043c4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80043c8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80043cc:	405a      	eors	r2, r3
 80043ce:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 80043d2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80043d6:	4019      	ands	r1, r3
 80043d8:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 80043dc:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80043e0:	4318      	orrs	r0, r3
 80043e2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80043e6:	4003      	ands	r3, r0
 80043e8:	430b      	orrs	r3, r1
 80043ea:	4413      	add	r3, r2
 80043ec:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80043f0:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80043f4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80043f8:	4413      	add	r3, r2
 80043fa:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80043fe:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004402:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004406:	4413      	add	r3, r2
 8004408:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 800440c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8004410:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004414:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8004418:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800441c:	405a      	eors	r2, r3
 800441e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8004422:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004426:	405a      	eors	r2, r3
 8004428:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800442c:	441a      	add	r2, r3
 800442e:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8004432:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004436:	4059      	eors	r1, r3
 8004438:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800443c:	4019      	ands	r1, r3
 800443e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004442:	404b      	eors	r3, r1
 8004444:	441a      	add	r2, r3
 8004446:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800444a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800444e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004452:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004456:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800445a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800445e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004462:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004466:	4059      	eors	r1, r3
 8004468:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800446c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004470:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004474:	0a9b      	lsrs	r3, r3, #10
 8004476:	4059      	eors	r1, r3
 8004478:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800447c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004484:	4419      	add	r1, r3
 8004486:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800448a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800448e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004490:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004494:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800449c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800449e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80044a2:	4058      	eors	r0, r3
 80044a4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80044a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ae:	08db      	lsrs	r3, r3, #3
 80044b0:	4043      	eors	r3, r0
 80044b2:	4419      	add	r1, r3
 80044b4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80044b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044be:	4419      	add	r1, r3
 80044c0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80044c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044c8:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
 80044cc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80044d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044d8:	441a      	add	r2, r3
 80044da:	4b15      	ldr	r3, [pc, #84]	; (8004530 <sha256_process+0x2940>)
 80044dc:	4413      	add	r3, r2
 80044de:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80044e2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80044e6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80044ea:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80044ee:	ea4f 3373 	mov.w	r3, r3, ror #13
 80044f2:	405a      	eors	r2, r3
 80044f4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80044f8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80044fc:	405a      	eors	r2, r3
 80044fe:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 8004502:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8004506:	4019      	ands	r1, r3
 8004508:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 800450c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8004510:	4318      	orrs	r0, r3
 8004512:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8004516:	4003      	ands	r3, r0
 8004518:	430b      	orrs	r3, r1
 800451a:	4413      	add	r3, r2
 800451c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004520:	e008      	b.n	8004534 <sha256_process+0x2944>
 8004522:	bf00      	nop
 8004524:	766a0abb 	.word	0x766a0abb
 8004528:	81c2c92e 	.word	0x81c2c92e
 800452c:	92722c85 	.word	0x92722c85
 8004530:	a2bfe8a1 	.word	0xa2bfe8a1
 8004534:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8004538:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800453c:	4413      	add	r3, r2
 800453e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8004542:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004546:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800454a:	4413      	add	r3, r2
 800454c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004550:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004554:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004558:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800455c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004560:	405a      	eors	r2, r3
 8004562:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004566:	ea4f 6373 	mov.w	r3, r3, ror #25
 800456a:	405a      	eors	r2, r3
 800456c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004570:	441a      	add	r2, r3
 8004572:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8004576:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800457a:	4059      	eors	r1, r3
 800457c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004580:	4019      	ands	r1, r3
 8004582:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004586:	404b      	eors	r3, r1
 8004588:	441a      	add	r2, r3
 800458a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800458e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004592:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004596:	ea4f 4173 	mov.w	r1, r3, ror #17
 800459a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800459e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045a6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80045aa:	4059      	eors	r1, r3
 80045ac:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80045b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045b8:	0a9b      	lsrs	r3, r3, #10
 80045ba:	4059      	eors	r1, r3
 80045bc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80045c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c8:	4419      	add	r1, r3
 80045ca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80045ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d4:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80045d8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80045dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80045e6:	4058      	eors	r0, r3
 80045e8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80045ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045f2:	08db      	lsrs	r3, r3, #3
 80045f4:	4043      	eors	r3, r0
 80045f6:	4419      	add	r1, r3
 80045f8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80045fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004602:	4419      	add	r1, r3
 8004604:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004608:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800460c:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
 8004610:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004614:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004618:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800461c:	441a      	add	r2, r3
 800461e:	4bf6      	ldr	r3, [pc, #984]	; (80049f8 <sha256_process+0x2e08>)
 8004620:	4413      	add	r3, r2
 8004622:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004626:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800462a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800462e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004632:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004636:	405a      	eors	r2, r3
 8004638:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800463c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004640:	405a      	eors	r2, r3
 8004642:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8004646:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800464a:	4019      	ands	r1, r3
 800464c:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8004650:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8004654:	4318      	orrs	r0, r3
 8004656:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800465a:	4003      	ands	r3, r0
 800465c:	430b      	orrs	r3, r1
 800465e:	4413      	add	r3, r2
 8004660:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004664:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8004668:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800466c:	4413      	add	r3, r2
 800466e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8004672:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004676:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800467a:	4413      	add	r3, r2
 800467c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004680:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8004684:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004688:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800468c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004690:	405a      	eors	r2, r3
 8004692:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8004696:	ea4f 6373 	mov.w	r3, r3, ror #25
 800469a:	405a      	eors	r2, r3
 800469c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80046a0:	441a      	add	r2, r3
 80046a2:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 80046a6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80046aa:	4059      	eors	r1, r3
 80046ac:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80046b0:	4019      	ands	r1, r3
 80046b2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80046b6:	404b      	eors	r3, r1
 80046b8:	441a      	add	r2, r3
 80046ba:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046c6:	ea4f 4173 	mov.w	r1, r3, ror #17
 80046ca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046d6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80046da:	4059      	eors	r1, r3
 80046dc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046e8:	0a9b      	lsrs	r3, r3, #10
 80046ea:	4059      	eors	r1, r3
 80046ec:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f8:	4419      	add	r1, r3
 80046fa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80046fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004704:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004708:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800470c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004712:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004716:	4058      	eors	r0, r3
 8004718:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800471c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004722:	08db      	lsrs	r3, r3, #3
 8004724:	4043      	eors	r3, r0
 8004726:	4419      	add	r1, r3
 8004728:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800472c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004732:	4419      	add	r1, r3
 8004734:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004738:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800473c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
 8004740:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004744:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004748:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800474c:	441a      	add	r2, r3
 800474e:	4bab      	ldr	r3, [pc, #684]	; (80049fc <sha256_process+0x2e0c>)
 8004750:	4413      	add	r3, r2
 8004752:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004756:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800475a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800475e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004762:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004766:	405a      	eors	r2, r3
 8004768:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800476c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004770:	405a      	eors	r2, r3
 8004772:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8004776:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800477a:	4019      	ands	r1, r3
 800477c:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8004780:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004784:	4318      	orrs	r0, r3
 8004786:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800478a:	4003      	ands	r3, r0
 800478c:	430b      	orrs	r3, r1
 800478e:	4413      	add	r3, r2
 8004790:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004794:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8004798:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800479c:	4413      	add	r3, r2
 800479e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80047a2:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80047a6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80047aa:	4413      	add	r3, r2
 80047ac:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80047b0:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80047b4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80047b8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80047bc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80047c0:	405a      	eors	r2, r3
 80047c2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80047c6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80047ca:	405a      	eors	r2, r3
 80047cc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80047d0:	441a      	add	r2, r3
 80047d2:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 80047d6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80047da:	4059      	eors	r1, r3
 80047dc:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80047e0:	4019      	ands	r1, r3
 80047e2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80047e6:	404b      	eors	r3, r1
 80047e8:	441a      	add	r2, r3
 80047ea:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80047ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047f6:	ea4f 4173 	mov.w	r1, r3, ror #17
 80047fa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80047fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004802:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004806:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800480a:	4059      	eors	r1, r3
 800480c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004810:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004814:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004818:	0a9b      	lsrs	r3, r3, #10
 800481a:	4059      	eors	r1, r3
 800481c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004820:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004828:	4419      	add	r1, r3
 800482a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800482e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004834:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004838:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800483c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004846:	4058      	eors	r0, r3
 8004848:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800484c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	08db      	lsrs	r3, r3, #3
 8004854:	4043      	eors	r3, r0
 8004856:	4419      	add	r1, r3
 8004858:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800485c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004862:	4419      	add	r1, r3
 8004864:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004868:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800486c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
 8004870:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004874:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004878:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800487c:	441a      	add	r2, r3
 800487e:	4b60      	ldr	r3, [pc, #384]	; (8004a00 <sha256_process+0x2e10>)
 8004880:	4413      	add	r3, r2
 8004882:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004886:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800488a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800488e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004892:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004896:	405a      	eors	r2, r3
 8004898:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800489c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80048a0:	405a      	eors	r2, r3
 80048a2:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80048a6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80048aa:	4019      	ands	r1, r3
 80048ac:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 80048b0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80048b4:	4318      	orrs	r0, r3
 80048b6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80048ba:	4003      	ands	r3, r0
 80048bc:	430b      	orrs	r3, r1
 80048be:	4413      	add	r3, r2
 80048c0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80048c4:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 80048c8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80048cc:	4413      	add	r3, r2
 80048ce:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 80048d2:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80048d6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80048da:	4413      	add	r3, r2
 80048dc:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80048e0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80048e4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80048e8:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80048ec:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80048f0:	405a      	eors	r2, r3
 80048f2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80048f6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80048fa:	405a      	eors	r2, r3
 80048fc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004900:	441a      	add	r2, r3
 8004902:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 8004906:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800490a:	4059      	eors	r1, r3
 800490c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8004910:	4019      	ands	r1, r3
 8004912:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8004916:	404b      	eors	r3, r1
 8004918:	441a      	add	r2, r3
 800491a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800491e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004922:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004926:	ea4f 4173 	mov.w	r1, r3, ror #17
 800492a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800492e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004932:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004936:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800493a:	4059      	eors	r1, r3
 800493c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004940:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004944:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004948:	0a9b      	lsrs	r3, r3, #10
 800494a:	4059      	eors	r1, r3
 800494c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004950:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004958:	4419      	add	r1, r3
 800495a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800495e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004964:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004968:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800496c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004972:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004976:	4058      	eors	r0, r3
 8004978:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800497c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004982:	08db      	lsrs	r3, r3, #3
 8004984:	4043      	eors	r3, r0
 8004986:	4419      	add	r1, r3
 8004988:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800498c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004992:	4419      	add	r1, r3
 8004994:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004998:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800499c:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 80049a0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80049a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049ac:	441a      	add	r2, r3
 80049ae:	4b15      	ldr	r3, [pc, #84]	; (8004a04 <sha256_process+0x2e14>)
 80049b0:	4413      	add	r3, r2
 80049b2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80049b6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80049ba:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80049be:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80049c2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80049c6:	405a      	eors	r2, r3
 80049c8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80049cc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80049d0:	405a      	eors	r2, r3
 80049d2:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 80049d6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80049da:	4019      	ands	r1, r3
 80049dc:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80049e0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80049e4:	4318      	orrs	r0, r3
 80049e6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80049ea:	4003      	ands	r3, r0
 80049ec:	430b      	orrs	r3, r1
 80049ee:	4413      	add	r3, r2
 80049f0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80049f4:	e008      	b.n	8004a08 <sha256_process+0x2e18>
 80049f6:	bf00      	nop
 80049f8:	a81a664b 	.word	0xa81a664b
 80049fc:	c24b8b70 	.word	0xc24b8b70
 8004a00:	c76c51a3 	.word	0xc76c51a3
 8004a04:	d192e819 	.word	0xd192e819
 8004a08:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8004a0c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004a10:	4413      	add	r3, r2
 8004a12:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004a16:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004a1a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004a1e:	4413      	add	r3, r2
 8004a20:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a24:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004a28:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004a2c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004a30:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004a34:	405a      	eors	r2, r3
 8004a36:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004a3a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004a3e:	405a      	eors	r2, r3
 8004a40:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8004a44:	441a      	add	r2, r3
 8004a46:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 8004a4a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8004a4e:	4059      	eors	r1, r3
 8004a50:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004a54:	4019      	ands	r1, r3
 8004a56:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8004a5a:	404b      	eors	r3, r1
 8004a5c:	441a      	add	r2, r3
 8004a5e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004a62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a6a:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004a6e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004a72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a7a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004a7e:	4059      	eors	r1, r3
 8004a80:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004a84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a8c:	0a9b      	lsrs	r3, r3, #10
 8004a8e:	4059      	eors	r1, r3
 8004a90:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004a94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a9c:	4419      	add	r1, r3
 8004a9e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aa8:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004aac:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004ab0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ab6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004aba:	4058      	eors	r0, r3
 8004abc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004ac0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ac6:	08db      	lsrs	r3, r3, #3
 8004ac8:	4043      	eors	r3, r0
 8004aca:	4419      	add	r1, r3
 8004acc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004ad0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad6:	4419      	add	r1, r3
 8004ad8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004adc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ae0:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 8004ae4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004ae8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004aec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004af0:	441a      	add	r2, r3
 8004af2:	4bf9      	ldr	r3, [pc, #996]	; (8004ed8 <sha256_process+0x32e8>)
 8004af4:	4413      	add	r3, r2
 8004af6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004afa:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004afe:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004b02:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004b06:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004b0a:	405a      	eors	r2, r3
 8004b0c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004b10:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004b14:	405a      	eors	r2, r3
 8004b16:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8004b1a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8004b1e:	4019      	ands	r1, r3
 8004b20:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8004b24:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8004b28:	4318      	orrs	r0, r3
 8004b2a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004b2e:	4003      	ands	r3, r0
 8004b30:	430b      	orrs	r3, r1
 8004b32:	4413      	add	r3, r2
 8004b34:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004b38:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8004b3c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004b40:	4413      	add	r3, r2
 8004b42:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8004b46:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004b4a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004b4e:	4413      	add	r3, r2
 8004b50:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004b54:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004b58:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004b5c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004b60:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004b64:	405a      	eors	r2, r3
 8004b66:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004b6a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004b6e:	405a      	eors	r2, r3
 8004b70:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8004b74:	441a      	add	r2, r3
 8004b76:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8004b7a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8004b7e:	4059      	eors	r1, r3
 8004b80:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004b84:	4019      	ands	r1, r3
 8004b86:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8004b8a:	404b      	eors	r3, r1
 8004b8c:	441a      	add	r2, r3
 8004b8e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004b92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b9a:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004b9e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004ba2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ba6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004baa:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004bae:	4059      	eors	r1, r3
 8004bb0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004bb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bbc:	0a9b      	lsrs	r3, r3, #10
 8004bbe:	4059      	eors	r1, r3
 8004bc0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004bc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bcc:	4419      	add	r1, r3
 8004bce:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004bd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bd8:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004bdc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004be0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004be6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004bea:	4058      	eors	r0, r3
 8004bec:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004bf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bf6:	08db      	lsrs	r3, r3, #3
 8004bf8:	4043      	eors	r3, r0
 8004bfa:	4419      	add	r1, r3
 8004bfc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004c00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c06:	4419      	add	r1, r3
 8004c08:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c10:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
 8004c14:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004c18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c20:	441a      	add	r2, r3
 8004c22:	4bae      	ldr	r3, [pc, #696]	; (8004edc <sha256_process+0x32ec>)
 8004c24:	4413      	add	r3, r2
 8004c26:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004c2a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8004c2e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004c32:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8004c36:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004c3a:	405a      	eors	r2, r3
 8004c3c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8004c40:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004c44:	405a      	eors	r2, r3
 8004c46:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 8004c4a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004c4e:	4019      	ands	r1, r3
 8004c50:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 8004c54:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004c58:	4318      	orrs	r0, r3
 8004c5a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8004c5e:	4003      	ands	r3, r0
 8004c60:	430b      	orrs	r3, r1
 8004c62:	4413      	add	r3, r2
 8004c64:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004c68:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8004c6c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004c70:	4413      	add	r3, r2
 8004c72:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8004c76:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004c7a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004c7e:	4413      	add	r3, r2
 8004c80:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004c84:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004c88:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004c8c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004c90:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004c94:	405a      	eors	r2, r3
 8004c96:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004c9a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004c9e:	405a      	eors	r2, r3
 8004ca0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8004ca4:	441a      	add	r2, r3
 8004ca6:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8004caa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004cae:	4059      	eors	r1, r3
 8004cb0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004cb4:	4019      	ands	r1, r3
 8004cb6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004cba:	404b      	eors	r3, r1
 8004cbc:	441a      	add	r2, r3
 8004cbe:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004cc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cca:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004cce:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004cd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cda:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004cde:	4059      	eors	r1, r3
 8004ce0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004ce4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ce8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cec:	0a9b      	lsrs	r3, r3, #10
 8004cee:	4059      	eors	r1, r3
 8004cf0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004cf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004cfc:	4419      	add	r1, r3
 8004cfe:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d0a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004d0e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d1a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004d1e:	4058      	eors	r0, r3
 8004d20:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d2c:	08db      	lsrs	r3, r3, #3
 8004d2e:	4043      	eors	r3, r0
 8004d30:	4419      	add	r1, r3
 8004d32:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d3c:	4419      	add	r1, r3
 8004d3e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d46:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 8004d4a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004d4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004d56:	441a      	add	r2, r3
 8004d58:	4b61      	ldr	r3, [pc, #388]	; (8004ee0 <sha256_process+0x32f0>)
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004d60:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8004d64:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004d68:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8004d6c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004d70:	405a      	eors	r2, r3
 8004d72:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8004d76:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004d7a:	405a      	eors	r2, r3
 8004d7c:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 8004d80:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8004d84:	4019      	ands	r1, r3
 8004d86:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 8004d8a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8004d8e:	4318      	orrs	r0, r3
 8004d90:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004d94:	4003      	ands	r3, r0
 8004d96:	430b      	orrs	r3, r1
 8004d98:	4413      	add	r3, r2
 8004d9a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004d9e:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8004da2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004da6:	4413      	add	r3, r2
 8004da8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8004dac:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004db0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004db4:	4413      	add	r3, r2
 8004db6:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004dba:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8004dbe:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004dc2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8004dc6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004dca:	405a      	eors	r2, r3
 8004dcc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8004dd0:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004dd4:	405a      	eors	r2, r3
 8004dd6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004dda:	441a      	add	r2, r3
 8004ddc:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8004de0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004de4:	4059      	eors	r1, r3
 8004de6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8004dea:	4019      	ands	r1, r3
 8004dec:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004df0:	404b      	eors	r3, r1
 8004df2:	441a      	add	r2, r3
 8004df4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004df8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dfc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004e00:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004e04:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004e08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004e10:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004e14:	4059      	eors	r1, r3
 8004e16:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004e1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e1e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004e22:	0a9b      	lsrs	r3, r3, #10
 8004e24:	4059      	eors	r1, r3
 8004e26:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004e2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e32:	4419      	add	r1, r3
 8004e34:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004e38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e40:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004e44:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004e48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e50:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004e54:	4058      	eors	r0, r3
 8004e56:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004e5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e62:	08db      	lsrs	r3, r3, #3
 8004e64:	4043      	eors	r3, r0
 8004e66:	4419      	add	r1, r3
 8004e68:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004e6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e74:	4419      	add	r1, r3
 8004e76:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004e7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e7e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
 8004e82:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004e86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e8a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e8e:	441a      	add	r2, r3
 8004e90:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <sha256_process+0x32f4>)
 8004e92:	4413      	add	r3, r2
 8004e94:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004e98:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8004e9c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004ea0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8004ea4:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004ea8:	405a      	eors	r2, r3
 8004eaa:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8004eae:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004eb2:	405a      	eors	r2, r3
 8004eb4:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 8004eb8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8004ebc:	4019      	ands	r1, r3
 8004ebe:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 8004ec2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8004ec6:	4318      	orrs	r0, r3
 8004ec8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8004ecc:	4003      	ands	r3, r0
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004ed6:	e007      	b.n	8004ee8 <sha256_process+0x32f8>
 8004ed8:	d6990624 	.word	0xd6990624
 8004edc:	f40e3585 	.word	0xf40e3585
 8004ee0:	106aa070 	.word	0x106aa070
 8004ee4:	19a4c116 	.word	0x19a4c116
 8004ee8:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8004eec:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8004ef6:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004efa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004efe:	4413      	add	r3, r2
 8004f00:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004f04:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004f08:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004f0c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004f10:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004f14:	405a      	eors	r2, r3
 8004f16:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004f1a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004f1e:	405a      	eors	r2, r3
 8004f20:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004f24:	441a      	add	r2, r3
 8004f26:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8004f2a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004f2e:	4059      	eors	r1, r3
 8004f30:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8004f34:	4019      	ands	r1, r3
 8004f36:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004f3a:	404b      	eors	r3, r1
 8004f3c:	441a      	add	r2, r3
 8004f3e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004f42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f4a:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004f4e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004f52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f5a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004f5e:	4059      	eors	r1, r3
 8004f60:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004f64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f68:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f6c:	0a9b      	lsrs	r3, r3, #10
 8004f6e:	4059      	eors	r1, r3
 8004f70:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004f74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f7c:	4419      	add	r1, r3
 8004f7e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004f82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004f8e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004f92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004f9e:	4058      	eors	r0, r3
 8004fa0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004fa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fac:	08db      	lsrs	r3, r3, #3
 8004fae:	4043      	eors	r3, r0
 8004fb0:	4419      	add	r1, r3
 8004fb2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004fb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fbe:	4419      	add	r1, r3
 8004fc0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004fc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fc8:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
 8004fcc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8004fd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fd4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004fd8:	441a      	add	r2, r3
 8004fda:	4bfc      	ldr	r3, [pc, #1008]	; (80053cc <sha256_process+0x37dc>)
 8004fdc:	4413      	add	r3, r2
 8004fde:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004fe2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004fe6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004fea:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004fee:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004ff2:	405a      	eors	r2, r3
 8004ff4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004ff8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004ffc:	405a      	eors	r2, r3
 8004ffe:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8005002:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8005006:	4019      	ands	r1, r3
 8005008:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 800500c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8005010:	4318      	orrs	r0, r3
 8005012:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005016:	4003      	ands	r3, r0
 8005018:	430b      	orrs	r3, r1
 800501a:	4413      	add	r3, r2
 800501c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005020:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8005024:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005028:	4413      	add	r3, r2
 800502a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 800502e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005032:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005036:	4413      	add	r3, r2
 8005038:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 800503c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005040:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005044:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005048:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800504c:	405a      	eors	r2, r3
 800504e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005052:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005056:	405a      	eors	r2, r3
 8005058:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800505c:	441a      	add	r2, r3
 800505e:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8005062:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005066:	4059      	eors	r1, r3
 8005068:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800506c:	4019      	ands	r1, r3
 800506e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005072:	404b      	eors	r3, r1
 8005074:	441a      	add	r2, r3
 8005076:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800507a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800507e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005082:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005086:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800508a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800508e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005092:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005096:	4059      	eors	r1, r3
 8005098:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800509c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80050a4:	0a9b      	lsrs	r3, r3, #10
 80050a6:	4059      	eors	r1, r3
 80050a8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80050ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050b4:	4419      	add	r1, r3
 80050b6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80050ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050c2:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80050c6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80050ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050d2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80050d6:	4058      	eors	r0, r3
 80050d8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80050dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e4:	08db      	lsrs	r3, r3, #3
 80050e6:	4043      	eors	r3, r0
 80050e8:	4419      	add	r1, r3
 80050ea:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80050ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	4419      	add	r1, r3
 80050f8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80050fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005100:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 8005104:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005108:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800510c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005110:	441a      	add	r2, r3
 8005112:	4baf      	ldr	r3, [pc, #700]	; (80053d0 <sha256_process+0x37e0>)
 8005114:	4413      	add	r3, r2
 8005116:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800511a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800511e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005122:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005126:	ea4f 3373 	mov.w	r3, r3, ror #13
 800512a:	405a      	eors	r2, r3
 800512c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005130:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005134:	405a      	eors	r2, r3
 8005136:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800513a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800513e:	4019      	ands	r1, r3
 8005140:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8005144:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005148:	4318      	orrs	r0, r3
 800514a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800514e:	4003      	ands	r3, r0
 8005150:	430b      	orrs	r3, r1
 8005152:	4413      	add	r3, r2
 8005154:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005158:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 800515c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005160:	4413      	add	r3, r2
 8005162:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8005166:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800516a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800516e:	4413      	add	r3, r2
 8005170:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8005174:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005178:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800517c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005180:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005184:	405a      	eors	r2, r3
 8005186:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800518a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800518e:	405a      	eors	r2, r3
 8005190:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005194:	441a      	add	r2, r3
 8005196:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 800519a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800519e:	4059      	eors	r1, r3
 80051a0:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80051a4:	4019      	ands	r1, r3
 80051a6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80051aa:	404b      	eors	r3, r1
 80051ac:	441a      	add	r2, r3
 80051ae:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80051b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80051ba:	ea4f 4173 	mov.w	r1, r3, ror #17
 80051be:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80051c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051c6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80051ca:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80051ce:	4059      	eors	r1, r3
 80051d0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80051d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80051dc:	0a9b      	lsrs	r3, r3, #10
 80051de:	4059      	eors	r1, r3
 80051e0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80051e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051ec:	4419      	add	r1, r3
 80051ee:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80051f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fa:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80051fe:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005202:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800520e:	4058      	eors	r0, r3
 8005210:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005214:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521c:	08db      	lsrs	r3, r3, #3
 800521e:	4043      	eors	r3, r0
 8005220:	4419      	add	r1, r3
 8005222:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800522a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800522e:	4419      	add	r1, r3
 8005230:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005234:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005238:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 800523c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005240:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005244:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005248:	441a      	add	r2, r3
 800524a:	4b62      	ldr	r3, [pc, #392]	; (80053d4 <sha256_process+0x37e4>)
 800524c:	4413      	add	r3, r2
 800524e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005252:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005256:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800525a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800525e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005262:	405a      	eors	r2, r3
 8005264:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005268:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800526c:	405a      	eors	r2, r3
 800526e:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8005272:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005276:	4019      	ands	r1, r3
 8005278:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 800527c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005280:	4318      	orrs	r0, r3
 8005282:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005286:	4003      	ands	r3, r0
 8005288:	430b      	orrs	r3, r1
 800528a:	4413      	add	r3, r2
 800528c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005290:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8005294:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005298:	4413      	add	r3, r2
 800529a:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 800529e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80052a2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80052a6:	4413      	add	r3, r2
 80052a8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 80052ac:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80052b0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80052b4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80052b8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80052bc:	405a      	eors	r2, r3
 80052be:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80052c2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80052c6:	405a      	eors	r2, r3
 80052c8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80052cc:	441a      	add	r2, r3
 80052ce:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 80052d2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80052d6:	4059      	eors	r1, r3
 80052d8:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80052dc:	4019      	ands	r1, r3
 80052de:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80052e2:	404b      	eors	r3, r1
 80052e4:	441a      	add	r2, r3
 80052e6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80052ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052ee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80052f2:	ea4f 4173 	mov.w	r1, r3, ror #17
 80052f6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80052fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005302:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005306:	4059      	eors	r1, r3
 8005308:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800530c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005310:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005314:	0a9b      	lsrs	r3, r3, #10
 8005316:	4059      	eors	r1, r3
 8005318:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800531c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005320:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005324:	4419      	add	r1, r3
 8005326:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800532a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800532e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005332:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005336:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800533a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800533e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005342:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005346:	4058      	eors	r0, r3
 8005348:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800534c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005354:	08db      	lsrs	r3, r3, #3
 8005356:	4043      	eors	r3, r0
 8005358:	4419      	add	r1, r3
 800535a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800535e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005366:	4419      	add	r1, r3
 8005368:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800536c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005370:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
 8005374:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005378:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800537c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005380:	441a      	add	r2, r3
 8005382:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <sha256_process+0x37e8>)
 8005384:	4413      	add	r3, r2
 8005386:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800538a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800538e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005392:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005396:	ea4f 3373 	mov.w	r3, r3, ror #13
 800539a:	405a      	eors	r2, r3
 800539c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80053a0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80053a4:	405a      	eors	r2, r3
 80053a6:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 80053aa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80053ae:	4019      	ands	r1, r3
 80053b0:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 80053b4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80053b8:	4318      	orrs	r0, r3
 80053ba:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80053be:	4003      	ands	r3, r0
 80053c0:	430b      	orrs	r3, r1
 80053c2:	4413      	add	r3, r2
 80053c4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80053c8:	e008      	b.n	80053dc <sha256_process+0x37ec>
 80053ca:	bf00      	nop
 80053cc:	1e376c08 	.word	0x1e376c08
 80053d0:	2748774c 	.word	0x2748774c
 80053d4:	34b0bcb5 	.word	0x34b0bcb5
 80053d8:	391c0cb3 	.word	0x391c0cb3
 80053dc:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80053e0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80053e4:	4413      	add	r3, r2
 80053e6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80053ea:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80053ee:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80053f2:	4413      	add	r3, r2
 80053f4:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 80053f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80053fc:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005400:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005404:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005408:	405a      	eors	r2, r3
 800540a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800540e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005412:	405a      	eors	r2, r3
 8005414:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005418:	441a      	add	r2, r3
 800541a:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 800541e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005422:	4059      	eors	r1, r3
 8005424:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005428:	4019      	ands	r1, r3
 800542a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800542e:	404b      	eors	r3, r1
 8005430:	441a      	add	r2, r3
 8005432:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005436:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800543a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800543e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005442:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005446:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800544a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800544e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005452:	4059      	eors	r1, r3
 8005454:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005458:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800545c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005460:	0a9b      	lsrs	r3, r3, #10
 8005462:	4059      	eors	r1, r3
 8005464:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005468:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800546c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005470:	4419      	add	r1, r3
 8005472:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005476:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800547a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800547e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005482:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005486:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800548a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800548e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005492:	4058      	eors	r0, r3
 8005494:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800549c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054a0:	08db      	lsrs	r3, r3, #3
 80054a2:	4043      	eors	r3, r0
 80054a4:	4419      	add	r1, r3
 80054a6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80054aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054b2:	4419      	add	r1, r3
 80054b4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80054b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054bc:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
 80054c0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80054c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80054cc:	441a      	add	r2, r3
 80054ce:	4bfc      	ldr	r3, [pc, #1008]	; (80058c0 <sha256_process+0x3cd0>)
 80054d0:	4413      	add	r3, r2
 80054d2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80054d6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80054da:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80054de:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80054e2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80054e6:	405a      	eors	r2, r3
 80054e8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80054ec:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80054f0:	405a      	eors	r2, r3
 80054f2:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 80054f6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80054fa:	4019      	ands	r1, r3
 80054fc:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8005500:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005504:	4318      	orrs	r0, r3
 8005506:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800550a:	4003      	ands	r3, r0
 800550c:	430b      	orrs	r3, r1
 800550e:	4413      	add	r3, r2
 8005510:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005514:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005518:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800551c:	4413      	add	r3, r2
 800551e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8005522:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005526:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800552a:	4413      	add	r3, r2
 800552c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8005530:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005534:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005538:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800553c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005540:	405a      	eors	r2, r3
 8005542:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005546:	ea4f 6373 	mov.w	r3, r3, ror #25
 800554a:	405a      	eors	r2, r3
 800554c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005550:	441a      	add	r2, r3
 8005552:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8005556:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800555a:	4059      	eors	r1, r3
 800555c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005560:	4019      	ands	r1, r3
 8005562:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8005566:	404b      	eors	r3, r1
 8005568:	441a      	add	r2, r3
 800556a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800556e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005572:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005576:	ea4f 4173 	mov.w	r1, r3, ror #17
 800557a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800557e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005582:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005586:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800558a:	4059      	eors	r1, r3
 800558c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005590:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005594:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005598:	0a9b      	lsrs	r3, r3, #10
 800559a:	4059      	eors	r1, r3
 800559c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80055a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80055a8:	4419      	add	r1, r3
 80055aa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80055ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055b6:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80055ba:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80055be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055c6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80055ca:	4058      	eors	r0, r3
 80055cc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80055d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055d8:	08db      	lsrs	r3, r3, #3
 80055da:	4043      	eors	r3, r0
 80055dc:	4419      	add	r1, r3
 80055de:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80055e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055ea:	4419      	add	r1, r3
 80055ec:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80055f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055f4:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
 80055f8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80055fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005600:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005604:	441a      	add	r2, r3
 8005606:	4baf      	ldr	r3, [pc, #700]	; (80058c4 <sha256_process+0x3cd4>)
 8005608:	4413      	add	r3, r2
 800560a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800560e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005612:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005616:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800561a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800561e:	405a      	eors	r2, r3
 8005620:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005624:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005628:	405a      	eors	r2, r3
 800562a:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 800562e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005632:	4019      	ands	r1, r3
 8005634:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 8005638:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800563c:	4318      	orrs	r0, r3
 800563e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005642:	4003      	ands	r3, r0
 8005644:	430b      	orrs	r3, r1
 8005646:	4413      	add	r3, r2
 8005648:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800564c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8005650:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005654:	4413      	add	r3, r2
 8005656:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800565a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800565e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005662:	4413      	add	r3, r2
 8005664:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8005668:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800566c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005670:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005674:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005678:	405a      	eors	r2, r3
 800567a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800567e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005682:	405a      	eors	r2, r3
 8005684:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8005688:	441a      	add	r2, r3
 800568a:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800568e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005692:	4059      	eors	r1, r3
 8005694:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005698:	4019      	ands	r1, r3
 800569a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800569e:	404b      	eors	r3, r1
 80056a0:	441a      	add	r2, r3
 80056a2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80056a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80056ae:	ea4f 4173 	mov.w	r1, r3, ror #17
 80056b2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80056b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80056be:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80056c2:	4059      	eors	r1, r3
 80056c4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80056c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80056d0:	0a9b      	lsrs	r3, r3, #10
 80056d2:	4059      	eors	r1, r3
 80056d4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80056d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80056e0:	4419      	add	r1, r3
 80056e2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80056e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056ee:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80056f2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80056f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056fe:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005702:	4058      	eors	r0, r3
 8005704:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005708:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800570c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005710:	08db      	lsrs	r3, r3, #3
 8005712:	4043      	eors	r3, r0
 8005714:	4419      	add	r1, r3
 8005716:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800571a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800571e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005722:	4419      	add	r1, r3
 8005724:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005728:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800572c:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
 8005730:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005734:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005738:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800573c:	441a      	add	r2, r3
 800573e:	4b62      	ldr	r3, [pc, #392]	; (80058c8 <sha256_process+0x3cd8>)
 8005740:	4413      	add	r3, r2
 8005742:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005746:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800574a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800574e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005752:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005756:	405a      	eors	r2, r3
 8005758:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800575c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005760:	405a      	eors	r2, r3
 8005762:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 8005766:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800576a:	4019      	ands	r1, r3
 800576c:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 8005770:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005774:	4318      	orrs	r0, r3
 8005776:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800577a:	4003      	ands	r3, r0
 800577c:	430b      	orrs	r3, r1
 800577e:	4413      	add	r3, r2
 8005780:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005784:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8005788:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800578c:	4413      	add	r3, r2
 800578e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8005792:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005796:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800579a:	4413      	add	r3, r2
 800579c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 80057a0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80057a4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80057a8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80057ac:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80057b0:	405a      	eors	r2, r3
 80057b2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80057b6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80057ba:	405a      	eors	r2, r3
 80057bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80057c0:	441a      	add	r2, r3
 80057c2:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80057c6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80057ca:	4059      	eors	r1, r3
 80057cc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80057d0:	4019      	ands	r1, r3
 80057d2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80057d6:	404b      	eors	r3, r1
 80057d8:	441a      	add	r2, r3
 80057da:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80057de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057e6:	ea4f 4173 	mov.w	r1, r3, ror #17
 80057ea:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80057ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057f6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80057fa:	4059      	eors	r1, r3
 80057fc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005800:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005804:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005808:	0a9b      	lsrs	r3, r3, #10
 800580a:	4059      	eors	r1, r3
 800580c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005810:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005814:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005818:	4419      	add	r1, r3
 800581a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800581e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005822:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005826:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800582a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800582e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005832:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005836:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800583a:	4058      	eors	r0, r3
 800583c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005844:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005848:	08db      	lsrs	r3, r3, #3
 800584a:	4043      	eors	r3, r0
 800584c:	4419      	add	r1, r3
 800584e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005852:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005856:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800585a:	4419      	add	r1, r3
 800585c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005860:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005864:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 8005868:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800586c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005874:	441a      	add	r2, r3
 8005876:	4b15      	ldr	r3, [pc, #84]	; (80058cc <sha256_process+0x3cdc>)
 8005878:	4413      	add	r3, r2
 800587a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800587e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8005882:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005886:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800588a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800588e:	405a      	eors	r2, r3
 8005890:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8005894:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005898:	405a      	eors	r2, r3
 800589a:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 800589e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80058a2:	4019      	ands	r1, r3
 80058a4:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 80058a8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80058ac:	4318      	orrs	r0, r3
 80058ae:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80058b2:	4003      	ands	r3, r0
 80058b4:	430b      	orrs	r3, r1
 80058b6:	4413      	add	r3, r2
 80058b8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80058bc:	e008      	b.n	80058d0 <sha256_process+0x3ce0>
 80058be:	bf00      	nop
 80058c0:	4ed8aa4a 	.word	0x4ed8aa4a
 80058c4:	5b9cca4f 	.word	0x5b9cca4f
 80058c8:	682e6ff3 	.word	0x682e6ff3
 80058cc:	748f82ee 	.word	0x748f82ee
 80058d0:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80058d4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80058d8:	4413      	add	r3, r2
 80058da:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80058de:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80058e2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80058e6:	4413      	add	r3, r2
 80058e8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 80058ec:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80058f0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80058f4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80058f8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80058fc:	405a      	eors	r2, r3
 80058fe:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005902:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005906:	405a      	eors	r2, r3
 8005908:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800590c:	441a      	add	r2, r3
 800590e:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8005912:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005916:	4059      	eors	r1, r3
 8005918:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800591c:	4019      	ands	r1, r3
 800591e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005922:	404b      	eors	r3, r1
 8005924:	441a      	add	r2, r3
 8005926:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800592a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800592e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005932:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005936:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800593a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800593e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005942:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005946:	4059      	eors	r1, r3
 8005948:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800594c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005950:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005954:	0a9b      	lsrs	r3, r3, #10
 8005956:	4059      	eors	r1, r3
 8005958:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800595c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005960:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005964:	4419      	add	r1, r3
 8005966:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800596a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800596e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005972:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005976:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800597a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800597e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005982:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005986:	4058      	eors	r0, r3
 8005988:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800598c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005990:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005994:	08db      	lsrs	r3, r3, #3
 8005996:	4043      	eors	r3, r0
 8005998:	4419      	add	r1, r3
 800599a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800599e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059a6:	4419      	add	r1, r3
 80059a8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80059ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059b0:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 80059b4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80059b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80059c0:	441a      	add	r2, r3
 80059c2:	4bfc      	ldr	r3, [pc, #1008]	; (8005db4 <sha256_process+0x41c4>)
 80059c4:	4413      	add	r3, r2
 80059c6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80059ca:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80059ce:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80059d2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80059d6:	ea4f 3373 	mov.w	r3, r3, ror #13
 80059da:	405a      	eors	r2, r3
 80059dc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80059e0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80059e4:	405a      	eors	r2, r3
 80059e6:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80059ea:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80059ee:	4019      	ands	r1, r3
 80059f0:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80059f4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80059f8:	4318      	orrs	r0, r3
 80059fa:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80059fe:	4003      	ands	r3, r0
 8005a00:	430b      	orrs	r3, r1
 8005a02:	4413      	add	r3, r2
 8005a04:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005a08:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8005a0c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005a10:	4413      	add	r3, r2
 8005a12:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8005a16:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005a1a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005a1e:	4413      	add	r3, r2
 8005a20:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005a24:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005a28:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005a2c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005a30:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005a34:	405a      	eors	r2, r3
 8005a36:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005a3a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005a3e:	405a      	eors	r2, r3
 8005a40:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005a44:	441a      	add	r2, r3
 8005a46:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8005a4a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005a4e:	4059      	eors	r1, r3
 8005a50:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005a54:	4019      	ands	r1, r3
 8005a56:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005a5a:	404b      	eors	r3, r1
 8005a5c:	441a      	add	r2, r3
 8005a5e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005a62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a6a:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005a6e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005a72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a7a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005a7e:	4059      	eors	r1, r3
 8005a80:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005a84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a8c:	0a9b      	lsrs	r3, r3, #10
 8005a8e:	4059      	eors	r1, r3
 8005a90:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005a94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a98:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005a9c:	4419      	add	r1, r3
 8005a9e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aa6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005aaa:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005aae:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005ab2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ab6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005aba:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005abe:	4058      	eors	r0, r3
 8005ac0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005ac4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ac8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005acc:	08db      	lsrs	r3, r3, #3
 8005ace:	4043      	eors	r3, r0
 8005ad0:	4419      	add	r1, r3
 8005ad2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005ad6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ada:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ade:	4419      	add	r1, r3
 8005ae0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005ae4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ae8:	f8c3 10e8 	str.w	r1, [r3, #232]	; 0xe8
 8005aec:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005af0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005af8:	441a      	add	r2, r3
 8005afa:	4baf      	ldr	r3, [pc, #700]	; (8005db8 <sha256_process+0x41c8>)
 8005afc:	4413      	add	r3, r2
 8005afe:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005b02:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005b06:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005b0a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005b0e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005b12:	405a      	eors	r2, r3
 8005b14:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005b18:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005b1c:	405a      	eors	r2, r3
 8005b1e:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8005b22:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005b26:	4019      	ands	r1, r3
 8005b28:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 8005b2c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005b30:	4318      	orrs	r0, r3
 8005b32:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8005b36:	4003      	ands	r3, r0
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005b40:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8005b44:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005b48:	4413      	add	r3, r2
 8005b4a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8005b4e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005b52:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005b56:	4413      	add	r3, r2
 8005b58:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005b5c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005b60:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005b64:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005b68:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005b6c:	405a      	eors	r2, r3
 8005b6e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005b72:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005b76:	405a      	eors	r2, r3
 8005b78:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005b7c:	441a      	add	r2, r3
 8005b7e:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 8005b82:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005b86:	4059      	eors	r1, r3
 8005b88:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005b8c:	4019      	ands	r1, r3
 8005b8e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005b92:	404b      	eors	r3, r1
 8005b94:	441a      	add	r2, r3
 8005b96:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005b9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ba2:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005ba6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005baa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005bb2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005bb6:	4059      	eors	r1, r3
 8005bb8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005bbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005bc4:	0a9b      	lsrs	r3, r3, #10
 8005bc6:	4059      	eors	r1, r3
 8005bc8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005bcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bd0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005bd4:	4419      	add	r1, r3
 8005bd6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005bda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005be2:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005be6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005bea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bf2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005bf6:	4058      	eors	r0, r3
 8005bf8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005bfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c04:	08db      	lsrs	r3, r3, #3
 8005c06:	4043      	eors	r3, r0
 8005c08:	4419      	add	r1, r3
 8005c0a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005c0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c16:	4419      	add	r1, r3
 8005c18:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005c1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c20:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
 8005c24:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005c28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c2c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005c30:	441a      	add	r2, r3
 8005c32:	4b62      	ldr	r3, [pc, #392]	; (8005dbc <sha256_process+0x41cc>)
 8005c34:	4413      	add	r3, r2
 8005c36:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005c3a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005c3e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005c42:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005c46:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005c4a:	405a      	eors	r2, r3
 8005c4c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005c50:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005c54:	405a      	eors	r2, r3
 8005c56:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8005c5a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005c5e:	4019      	ands	r1, r3
 8005c60:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 8005c64:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005c68:	4318      	orrs	r0, r3
 8005c6a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005c6e:	4003      	ands	r3, r0
 8005c70:	430b      	orrs	r3, r1
 8005c72:	4413      	add	r3, r2
 8005c74:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005c78:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8005c7c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005c80:	4413      	add	r3, r2
 8005c82:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8005c86:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005c8a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005c8e:	4413      	add	r3, r2
 8005c90:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005c94:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8005c98:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005c9c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8005ca0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005ca4:	405a      	eors	r2, r3
 8005ca6:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8005caa:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005cae:	405a      	eors	r2, r3
 8005cb0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005cb4:	441a      	add	r2, r3
 8005cb6:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 8005cba:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005cbe:	4059      	eors	r1, r3
 8005cc0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8005cc4:	4019      	ands	r1, r3
 8005cc6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005cca:	404b      	eors	r3, r1
 8005ccc:	441a      	add	r2, r3
 8005cce:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005cd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cda:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005cde:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005ce2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ce6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cea:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005cee:	4059      	eors	r1, r3
 8005cf0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005cf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cfc:	0a9b      	lsrs	r3, r3, #10
 8005cfe:	4059      	eors	r1, r3
 8005d00:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005d04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005d0c:	4419      	add	r1, r3
 8005d0e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005d12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d1a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005d1e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005d22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d2a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005d2e:	4058      	eors	r0, r3
 8005d30:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005d34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d3c:	08db      	lsrs	r3, r3, #3
 8005d3e:	4043      	eors	r3, r0
 8005d40:	4419      	add	r1, r3
 8005d42:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005d46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d4e:	4419      	add	r1, r3
 8005d50:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005d54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d58:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
 8005d5c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005d60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d68:	441a      	add	r2, r3
 8005d6a:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <sha256_process+0x41d0>)
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005d72:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005d76:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005d7a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005d7e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005d82:	405a      	eors	r2, r3
 8005d84:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005d88:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005d8c:	405a      	eors	r2, r3
 8005d8e:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 8005d92:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005d96:	4019      	ands	r1, r3
 8005d98:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 8005d9c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005da0:	4318      	orrs	r0, r3
 8005da2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005da6:	4003      	ands	r3, r0
 8005da8:	430b      	orrs	r3, r1
 8005daa:	4413      	add	r3, r2
 8005dac:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005db0:	e008      	b.n	8005dc4 <sha256_process+0x41d4>
 8005db2:	bf00      	nop
 8005db4:	78a5636f 	.word	0x78a5636f
 8005db8:	84c87814 	.word	0x84c87814
 8005dbc:	8cc70208 	.word	0x8cc70208
 8005dc0:	90befffa 	.word	0x90befffa
 8005dc4:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8005dc8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005dcc:	4413      	add	r3, r2
 8005dce:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8005dd2:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005dd6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005dda:	4413      	add	r3, r2
 8005ddc:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005de0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005de4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005de8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005dec:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005df0:	405a      	eors	r2, r3
 8005df2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005df6:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005dfa:	405a      	eors	r2, r3
 8005dfc:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005e00:	441a      	add	r2, r3
 8005e02:	f8d7 1230 	ldr.w	r1, [r7, #560]	; 0x230
 8005e06:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005e0a:	4059      	eors	r1, r3
 8005e0c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005e10:	4019      	ands	r1, r3
 8005e12:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005e16:	404b      	eors	r3, r1
 8005e18:	441a      	add	r2, r3
 8005e1a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e22:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005e26:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005e2a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e32:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005e36:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005e3a:	4059      	eors	r1, r3
 8005e3c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e44:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005e48:	0a9b      	lsrs	r3, r3, #10
 8005e4a:	4059      	eors	r1, r3
 8005e4c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005e58:	4419      	add	r1, r3
 8005e5a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e62:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005e66:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005e6a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e72:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005e76:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005e7a:	4058      	eors	r0, r3
 8005e7c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005e88:	08db      	lsrs	r3, r3, #3
 8005e8a:	4043      	eors	r3, r0
 8005e8c:	4419      	add	r1, r3
 8005e8e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e9a:	4419      	add	r1, r3
 8005e9c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005ea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ea4:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
 8005ea8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005eac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005eb4:	441a      	add	r2, r3
 8005eb6:	4bee      	ldr	r3, [pc, #952]	; (8006270 <sha256_process+0x4680>)
 8005eb8:	4413      	add	r3, r2
 8005eba:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005ebe:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005ec2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005ec6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005eca:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005ece:	405a      	eors	r2, r3
 8005ed0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8005ed4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005ed8:	405a      	eors	r2, r3
 8005eda:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8005ede:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005ee2:	4019      	ands	r1, r3
 8005ee4:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8005ee8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8005eec:	4318      	orrs	r0, r3
 8005eee:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005ef2:	4003      	ands	r3, r0
 8005ef4:	430b      	orrs	r3, r1
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8005efc:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005f00:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005f04:	4413      	add	r3, r2
 8005f06:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8005f0a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8005f0e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005f12:	4413      	add	r3, r2
 8005f14:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005f18:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005f1c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005f20:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005f24:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005f28:	405a      	eors	r2, r3
 8005f2a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005f2e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005f32:	405a      	eors	r2, r3
 8005f34:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8005f38:	441a      	add	r2, r3
 8005f3a:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8005f3e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8005f42:	4059      	eors	r1, r3
 8005f44:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005f48:	4019      	ands	r1, r3
 8005f4a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8005f4e:	404b      	eors	r3, r1
 8005f50:	441a      	add	r2, r3
 8005f52:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005f56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f5e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005f62:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005f66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f6e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005f72:	4059      	eors	r1, r3
 8005f74:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005f78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f80:	0a9b      	lsrs	r3, r3, #10
 8005f82:	4059      	eors	r1, r3
 8005f84:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005f88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005f90:	4419      	add	r1, r3
 8005f92:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005f96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005f9e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005fa2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005fa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005faa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005fae:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005fb2:	4058      	eors	r0, r3
 8005fb4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fbc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005fc0:	08db      	lsrs	r3, r3, #3
 8005fc2:	4043      	eors	r3, r0
 8005fc4:	4419      	add	r1, r3
 8005fc6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005fca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005fd2:	4419      	add	r1, r3
 8005fd4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005fd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fdc:	f8c3 10f8 	str.w	r1, [r3, #248]	; 0xf8
 8005fe0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005fe4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fe8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005fec:	441a      	add	r2, r3
 8005fee:	4ba1      	ldr	r3, [pc, #644]	; (8006274 <sha256_process+0x4684>)
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005ff6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8005ffa:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005ffe:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8006002:	ea4f 3373 	mov.w	r3, r3, ror #13
 8006006:	405a      	eors	r2, r3
 8006008:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800600c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8006010:	405a      	eors	r2, r3
 8006012:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 8006016:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800601a:	4019      	ands	r1, r3
 800601c:	f8d7 0228 	ldr.w	r0, [r7, #552]	; 0x228
 8006020:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8006024:	4318      	orrs	r0, r3
 8006026:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800602a:	4003      	ands	r3, r0
 800602c:	430b      	orrs	r3, r1
 800602e:	4413      	add	r3, r2
 8006030:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8006034:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8006038:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800603c:	4413      	add	r3, r2
 800603e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8006042:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8006046:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800604a:	4413      	add	r3, r2
 800604c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8006050:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8006054:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8006058:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800605c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006060:	405a      	eors	r2, r3
 8006062:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8006066:	ea4f 6373 	mov.w	r3, r3, ror #25
 800606a:	405a      	eors	r2, r3
 800606c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8006070:	441a      	add	r2, r3
 8006072:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8006076:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800607a:	4059      	eors	r1, r3
 800607c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8006080:	4019      	ands	r1, r3
 8006082:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006086:	404b      	eors	r3, r1
 8006088:	441a      	add	r2, r3
 800608a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800608e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006092:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006096:	ea4f 4173 	mov.w	r1, r3, ror #17
 800609a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800609e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060a6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80060aa:	4059      	eors	r1, r3
 80060ac:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80060b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060b8:	0a9b      	lsrs	r3, r3, #10
 80060ba:	4059      	eors	r1, r3
 80060bc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80060c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060c8:	4419      	add	r1, r3
 80060ca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80060ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80060d6:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80060da:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80060de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80060e6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80060ea:	4058      	eors	r0, r3
 80060ec:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80060f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80060f8:	08db      	lsrs	r3, r3, #3
 80060fa:	4043      	eors	r3, r0
 80060fc:	4419      	add	r1, r3
 80060fe:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006102:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006106:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800610a:	4419      	add	r1, r3
 800610c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006110:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006114:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
 8006118:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800611c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006120:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006124:	441a      	add	r2, r3
 8006126:	4b54      	ldr	r3, [pc, #336]	; (8006278 <sha256_process+0x4688>)
 8006128:	4413      	add	r3, r2
 800612a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800612e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8006132:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8006136:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800613a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800613e:	405a      	eors	r2, r3
 8006140:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8006144:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8006148:	405a      	eors	r2, r3
 800614a:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 800614e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8006152:	4019      	ands	r1, r3
 8006154:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 8006158:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800615c:	4318      	orrs	r0, r3
 800615e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8006162:	4003      	ands	r3, r0
 8006164:	430b      	orrs	r3, r1
 8006166:	4413      	add	r3, r2
 8006168:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800616c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8006170:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8006174:	4413      	add	r3, r2
 8006176:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800617a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800617e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8006182:	4413      	add	r3, r2
 8006184:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

	ctx->state[0] += A;
 8006188:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800618c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8006198:	441a      	add	r2, r3
 800619a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800619e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	609a      	str	r2, [r3, #8]
	ctx->state[1] += B;
 80061a6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80061aa:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80061b6:	441a      	add	r2, r3
 80061b8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80061bc:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60da      	str	r2, [r3, #12]
	ctx->state[2] += C;
 80061c4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80061c8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	691a      	ldr	r2, [r3, #16]
 80061d0:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80061d4:	441a      	add	r2, r3
 80061d6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80061da:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	611a      	str	r2, [r3, #16]
	ctx->state[3] += D;
 80061e2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80061e6:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695a      	ldr	r2, [r3, #20]
 80061ee:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80061f2:	441a      	add	r2, r3
 80061f4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80061f8:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	615a      	str	r2, [r3, #20]
	ctx->state[4] += E;
 8006200:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006204:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	699a      	ldr	r2, [r3, #24]
 800620c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8006210:	441a      	add	r2, r3
 8006212:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006216:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	619a      	str	r2, [r3, #24]
	ctx->state[5] += F;
 800621e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006222:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69da      	ldr	r2, [r3, #28]
 800622a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800622e:	441a      	add	r2, r3
 8006230:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006234:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	61da      	str	r2, [r3, #28]
	ctx->state[6] += G;
 800623c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006240:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6a1a      	ldr	r2, [r3, #32]
 8006248:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800624c:	441a      	add	r2, r3
 800624e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006252:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	621a      	str	r2, [r3, #32]
	ctx->state[7] += H;
 800625a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800625e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006266:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800626a:	441a      	add	r2, r3
 800626c:	e006      	b.n	800627c <sha256_process+0x468c>
 800626e:	bf00      	nop
 8006270:	a4506ceb 	.word	0xa4506ceb
 8006274:	bef9a3f7 	.word	0xbef9a3f7
 8006278:	c67178f2 	.word	0xc67178f2
 800627c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006280:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006288:	bf00      	nop
 800628a:	f507 770e 	add.w	r7, r7, #568	; 0x238
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop

08006294 <sha256_update>:

void sha256_update( sha256_context *ctx, uint8 *input, uint32 length )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
    uint32 left, fill;

    if( ! length ) return;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d059      	beq.n	800635a <sha256_update+0xc6>

    left = ctx->total[0] & 0x3F;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062ae:	617b      	str	r3, [r7, #20]
    fill = 64 - left;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80062b6:	613b      	str	r3, [r7, #16]

    ctx->total[0] += length;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	441a      	add	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < length )
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d904      	bls.n	80062e0 <sha256_update+0x4c>
        ctx->total[1]++;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	605a      	str	r2, [r3, #4]

    if( left && length >= fill )
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d028      	beq.n	8006338 <sha256_update+0xa4>
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d324      	bcc.n	8006338 <sha256_update+0xa4>
    {
        memcpy( (void *) (ctx->buffer + left),
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	4413      	add	r3, r2
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f002 f9a9 	bl	8008654 <memcpy>
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3328      	adds	r3, #40	; 0x28
 8006306:	4619      	mov	r1, r3
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7fb fc71 	bl	8001bf0 <sha256_process>
        length -= fill;
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	607b      	str	r3, [r7, #4]
        input  += fill;
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	4413      	add	r3, r2
 800631c:	60bb      	str	r3, [r7, #8]
        left = 0;
 800631e:	2300      	movs	r3, #0
 8006320:	617b      	str	r3, [r7, #20]
    }

    while( length >= 64 )
 8006322:	e009      	b.n	8006338 <sha256_update+0xa4>
    {
        sha256_process( ctx, input );
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f7fb fc62 	bl	8001bf0 <sha256_process>
        length -= 64;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3b40      	subs	r3, #64	; 0x40
 8006330:	607b      	str	r3, [r7, #4]
        input  += 64;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	3340      	adds	r3, #64	; 0x40
 8006336:	60bb      	str	r3, [r7, #8]
    while( length >= 64 )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b3f      	cmp	r3, #63	; 0x3f
 800633c:	d8f2      	bhi.n	8006324 <sha256_update+0x90>
    }

    if( length )
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00b      	beq.n	800635c <sha256_update+0xc8>
    {
        memcpy( (void *) (ctx->buffer + left),
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	4413      	add	r3, r2
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	4618      	mov	r0, r3
 8006354:	f002 f97e 	bl	8008654 <memcpy>
 8006358:	e000      	b.n	800635c <sha256_update+0xc8>
    if( ! length ) return;
 800635a:	bf00      	nop
                (void *) input, length );
    }
}
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <sha256_finish>:
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	; 0x28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
    uint32 last, padn;
    uint32 high, low;
    uint8 msglen[8];

    high = ( ctx->total[0] >> 29 )
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 800637a:	4313      	orrs	r3, r2
 800637c:	623b      	str	r3, [r7, #32]
    low  = ( ctx->total[0] <<  3 );
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	61fb      	str	r3, [r7, #28]

    PUT_UINT32( high, msglen, 0 );
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	0e1b      	lsrs	r3, r3, #24
 800638a:	b2db      	uxtb	r3, r3
 800638c:	733b      	strb	r3, [r7, #12]
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	0c1b      	lsrs	r3, r3, #16
 8006392:	b2db      	uxtb	r3, r3
 8006394:	737b      	strb	r3, [r7, #13]
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	0a1b      	lsrs	r3, r3, #8
 800639a:	b2db      	uxtb	r3, r3
 800639c:	73bb      	strb	r3, [r7, #14]
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	73fb      	strb	r3, [r7, #15]
    PUT_UINT32( low,  msglen, 4 );
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	0e1b      	lsrs	r3, r3, #24
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	743b      	strb	r3, [r7, #16]
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	0c1b      	lsrs	r3, r3, #16
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	747b      	strb	r3, [r7, #17]
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	0a1b      	lsrs	r3, r3, #8
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	74bb      	strb	r3, [r7, #18]
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	74fb      	strb	r3, [r7, #19]

    last = ctx->total[0] & 0x3F;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063ca:	61bb      	str	r3, [r7, #24]
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	2b37      	cmp	r3, #55	; 0x37
 80063d0:	d803      	bhi.n	80063da <sha256_finish+0x76>
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80063d8:	e002      	b.n	80063e0 <sha256_finish+0x7c>
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80063e0:	617b      	str	r3, [r7, #20]

    sha256_update( ctx, sha256_padding, padn );
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	4925      	ldr	r1, [pc, #148]	; (800647c <sha256_finish+0x118>)
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff ff54 	bl	8006294 <sha256_update>
    sha256_update( ctx, msglen, 8 );
 80063ec:	f107 030c 	add.w	r3, r7, #12
 80063f0:	2208      	movs	r2, #8
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff ff4d 	bl	8006294 <sha256_update>

    for (int i = 0; i < 8; ++i) {
 80063fa:	2300      	movs	r3, #0
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
 80063fe:	e035      	b.n	800646c <sha256_finish+0x108>
    	PUT_UINT32( ctx->state[i], digest,  i * 4 );
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006404:	3202      	adds	r2, #2
 8006406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640a:	0e1a      	lsrs	r2, r3, #24
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4619      	mov	r1, r3
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	440b      	add	r3, r1
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641e:	3202      	adds	r2, #2
 8006420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006424:	0c19      	lsrs	r1, r3, #16
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	3301      	adds	r3, #1
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	4413      	add	r3, r2
 8006430:	b2ca      	uxtb	r2, r1
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006438:	3202      	adds	r2, #2
 800643a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643e:	0a19      	lsrs	r1, r3, #8
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	3302      	adds	r3, #2
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	4413      	add	r3, r2
 800644a:	b2ca      	uxtb	r2, r1
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006452:	3202      	adds	r2, #2
 8006454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	3303      	adds	r3, #3
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	4413      	add	r3, r2
 8006462:	b2ca      	uxtb	r2, r1
 8006464:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; ++i) {
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	3301      	adds	r3, #1
 800646a:	627b      	str	r3, [r7, #36]	; 0x24
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	2b07      	cmp	r3, #7
 8006470:	ddc6      	ble.n	8006400 <sha256_finish+0x9c>
    }
}
 8006472:	bf00      	nop
 8006474:	bf00      	nop
 8006476:	3728      	adds	r7, #40	; 0x28
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	20000240 	.word	0x20000240

08006480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006486:	4b0e      	ldr	r3, [pc, #56]	; (80064c0 <HAL_MspInit+0x40>)
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	4a0d      	ldr	r2, [pc, #52]	; (80064c0 <HAL_MspInit+0x40>)
 800648c:	f043 0301 	orr.w	r3, r3, #1
 8006490:	6193      	str	r3, [r2, #24]
 8006492:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <HAL_MspInit+0x40>)
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	607b      	str	r3, [r7, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800649e:	4b08      	ldr	r3, [pc, #32]	; (80064c0 <HAL_MspInit+0x40>)
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	4a07      	ldr	r2, [pc, #28]	; (80064c0 <HAL_MspInit+0x40>)
 80064a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a8:	61d3      	str	r3, [r2, #28]
 80064aa:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <HAL_MspInit+0x40>)
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b2:	603b      	str	r3, [r7, #0]
 80064b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr
 80064c0:	40021000 	.word	0x40021000

080064c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08a      	sub	sp, #40	; 0x28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064cc:	f107 0318 	add.w	r3, r7, #24
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	605a      	str	r2, [r3, #4]
 80064d6:	609a      	str	r2, [r3, #8]
 80064d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a3f      	ldr	r2, [pc, #252]	; (80065dc <HAL_UART_MspInit+0x118>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d13a      	bne.n	800655a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80064e4:	4b3e      	ldr	r3, [pc, #248]	; (80065e0 <HAL_UART_MspInit+0x11c>)
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	4a3d      	ldr	r2, [pc, #244]	; (80065e0 <HAL_UART_MspInit+0x11c>)
 80064ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064ee:	6193      	str	r3, [r2, #24]
 80064f0:	4b3b      	ldr	r3, [pc, #236]	; (80065e0 <HAL_UART_MspInit+0x11c>)
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064fc:	4b38      	ldr	r3, [pc, #224]	; (80065e0 <HAL_UART_MspInit+0x11c>)
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	4a37      	ldr	r2, [pc, #220]	; (80065e0 <HAL_UART_MspInit+0x11c>)
 8006502:	f043 0304 	orr.w	r3, r3, #4
 8006506:	6193      	str	r3, [r2, #24]
 8006508:	4b35      	ldr	r3, [pc, #212]	; (80065e0 <HAL_UART_MspInit+0x11c>)
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	613b      	str	r3, [r7, #16]
 8006512:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800651a:	2302      	movs	r3, #2
 800651c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800651e:	2303      	movs	r3, #3
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006522:	f107 0318 	add.w	r3, r7, #24
 8006526:	4619      	mov	r1, r3
 8006528:	482e      	ldr	r0, [pc, #184]	; (80065e4 <HAL_UART_MspInit+0x120>)
 800652a:	f000 fbcd 	bl	8006cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800652e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006534:	2300      	movs	r3, #0
 8006536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006538:	2300      	movs	r3, #0
 800653a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800653c:	f107 0318 	add.w	r3, r7, #24
 8006540:	4619      	mov	r1, r3
 8006542:	4828      	ldr	r0, [pc, #160]	; (80065e4 <HAL_UART_MspInit+0x120>)
 8006544:	f000 fbc0 	bl	8006cc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006548:	2200      	movs	r2, #0
 800654a:	2100      	movs	r1, #0
 800654c:	2025      	movs	r0, #37	; 0x25
 800654e:	f000 fad2 	bl	8006af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006552:	2025      	movs	r0, #37	; 0x25
 8006554:	f000 faeb 	bl	8006b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006558:	e03c      	b.n	80065d4 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a22      	ldr	r2, [pc, #136]	; (80065e8 <HAL_UART_MspInit+0x124>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d137      	bne.n	80065d4 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006564:	4b1e      	ldr	r3, [pc, #120]	; (80065e0 <HAL_UART_MspInit+0x11c>)
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	4a1d      	ldr	r2, [pc, #116]	; (80065e0 <HAL_UART_MspInit+0x11c>)
 800656a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800656e:	61d3      	str	r3, [r2, #28]
 8006570:	4b1b      	ldr	r3, [pc, #108]	; (80065e0 <HAL_UART_MspInit+0x11c>)
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800657c:	4b18      	ldr	r3, [pc, #96]	; (80065e0 <HAL_UART_MspInit+0x11c>)
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	4a17      	ldr	r2, [pc, #92]	; (80065e0 <HAL_UART_MspInit+0x11c>)
 8006582:	f043 0304 	orr.w	r3, r3, #4
 8006586:	6193      	str	r3, [r2, #24]
 8006588:	4b15      	ldr	r3, [pc, #84]	; (80065e0 <HAL_UART_MspInit+0x11c>)
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	60bb      	str	r3, [r7, #8]
 8006592:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006594:	2304      	movs	r3, #4
 8006596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006598:	2302      	movs	r3, #2
 800659a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800659c:	2303      	movs	r3, #3
 800659e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065a0:	f107 0318 	add.w	r3, r7, #24
 80065a4:	4619      	mov	r1, r3
 80065a6:	480f      	ldr	r0, [pc, #60]	; (80065e4 <HAL_UART_MspInit+0x120>)
 80065a8:	f000 fb8e 	bl	8006cc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80065ac:	2308      	movs	r3, #8
 80065ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80065b0:	2300      	movs	r3, #0
 80065b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065b4:	2300      	movs	r3, #0
 80065b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065b8:	f107 0318 	add.w	r3, r7, #24
 80065bc:	4619      	mov	r1, r3
 80065be:	4809      	ldr	r0, [pc, #36]	; (80065e4 <HAL_UART_MspInit+0x120>)
 80065c0:	f000 fb82 	bl	8006cc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80065c4:	2200      	movs	r2, #0
 80065c6:	2100      	movs	r1, #0
 80065c8:	2026      	movs	r0, #38	; 0x26
 80065ca:	f000 fa94 	bl	8006af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80065ce:	2026      	movs	r0, #38	; 0x26
 80065d0:	f000 faad 	bl	8006b2e <HAL_NVIC_EnableIRQ>
}
 80065d4:	bf00      	nop
 80065d6:	3728      	adds	r7, #40	; 0x28
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	40013800 	.word	0x40013800
 80065e0:	40021000 	.word	0x40021000
 80065e4:	40010800 	.word	0x40010800
 80065e8:	40004400 	.word	0x40004400

080065ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80065f0:	e7fe      	b.n	80065f0 <NMI_Handler+0x4>

080065f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065f2:	b480      	push	{r7}
 80065f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065f6:	e7fe      	b.n	80065f6 <HardFault_Handler+0x4>

080065f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065fc:	e7fe      	b.n	80065fc <MemManage_Handler+0x4>

080065fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065fe:	b480      	push	{r7}
 8006600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006602:	e7fe      	b.n	8006602 <BusFault_Handler+0x4>

08006604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006608:	e7fe      	b.n	8006608 <UsageFault_Handler+0x4>

0800660a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800660a:	b480      	push	{r7}
 800660c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800660e:	bf00      	nop
 8006610:	46bd      	mov	sp, r7
 8006612:	bc80      	pop	{r7}
 8006614:	4770      	bx	lr

08006616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006616:	b480      	push	{r7}
 8006618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800661a:	bf00      	nop
 800661c:	46bd      	mov	sp, r7
 800661e:	bc80      	pop	{r7}
 8006620:	4770      	bx	lr

08006622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006622:	b480      	push	{r7}
 8006624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006626:	bf00      	nop
 8006628:	46bd      	mov	sp, r7
 800662a:	bc80      	pop	{r7}
 800662c:	4770      	bx	lr

0800662e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006632:	f000 f949 	bl	80068c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006636:	bf00      	nop
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006640:	4802      	ldr	r0, [pc, #8]	; (800664c <USART1_IRQHandler+0x10>)
 8006642:	f001 fa41 	bl	8007ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006646:	bf00      	nop
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	2000047c 	.word	0x2000047c

08006650 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006654:	4802      	ldr	r0, [pc, #8]	; (8006660 <USART2_IRQHandler+0x10>)
 8006656:	f001 fa37 	bl	8007ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800665a:	bf00      	nop
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	200004c4 	.word	0x200004c4

08006664 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  return 1;
 8006668:	2301      	movs	r3, #1
}
 800666a:	4618      	mov	r0, r3
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr

08006672 <_kill>:

int _kill(int pid, int sig)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b082      	sub	sp, #8
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800667c:	f001 ffb4 	bl	80085e8 <__errno>
 8006680:	4603      	mov	r3, r0
 8006682:	2216      	movs	r2, #22
 8006684:	601a      	str	r2, [r3, #0]
  return -1;
 8006686:	f04f 33ff 	mov.w	r3, #4294967295
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <_exit>:

void _exit (int status)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b082      	sub	sp, #8
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800669a:	f04f 31ff 	mov.w	r1, #4294967295
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff ffe7 	bl	8006672 <_kill>
  while (1) {}    /* Make sure we hang here */
 80066a4:	e7fe      	b.n	80066a4 <_exit+0x12>

080066a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b086      	sub	sp, #24
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	60f8      	str	r0, [r7, #12]
 80066ae:	60b9      	str	r1, [r7, #8]
 80066b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066b2:	2300      	movs	r3, #0
 80066b4:	617b      	str	r3, [r7, #20]
 80066b6:	e00a      	b.n	80066ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80066b8:	f3af 8000 	nop.w
 80066bc:	4601      	mov	r1, r0
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	60ba      	str	r2, [r7, #8]
 80066c4:	b2ca      	uxtb	r2, r1
 80066c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	3301      	adds	r3, #1
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	dbf0      	blt.n	80066b8 <_read+0x12>
  }

  return len;
 80066d6:	687b      	ldr	r3, [r7, #4]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3718      	adds	r7, #24
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	e009      	b.n	8006706 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	60ba      	str	r2, [r7, #8]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	3301      	adds	r3, #1
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	429a      	cmp	r2, r3
 800670c:	dbf1      	blt.n	80066f2 <_write+0x12>
  }
  return len;
 800670e:	687b      	ldr	r3, [r7, #4]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <_close>:

int _close(int file)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr

0800672e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800673e:	605a      	str	r2, [r3, #4]
  return 0;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr

0800674c <_isatty>:

int _isatty(int file)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006754:	2301      	movs	r3, #1
}
 8006756:	4618      	mov	r0, r3
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr

08006760 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr

08006778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006780:	4a14      	ldr	r2, [pc, #80]	; (80067d4 <_sbrk+0x5c>)
 8006782:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <_sbrk+0x60>)
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800678c:	4b13      	ldr	r3, [pc, #76]	; (80067dc <_sbrk+0x64>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d102      	bne.n	800679a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006794:	4b11      	ldr	r3, [pc, #68]	; (80067dc <_sbrk+0x64>)
 8006796:	4a12      	ldr	r2, [pc, #72]	; (80067e0 <_sbrk+0x68>)
 8006798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800679a:	4b10      	ldr	r3, [pc, #64]	; (80067dc <_sbrk+0x64>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4413      	add	r3, r2
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d207      	bcs.n	80067b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80067a8:	f001 ff1e 	bl	80085e8 <__errno>
 80067ac:	4603      	mov	r3, r0
 80067ae:	220c      	movs	r2, #12
 80067b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80067b2:	f04f 33ff 	mov.w	r3, #4294967295
 80067b6:	e009      	b.n	80067cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80067b8:	4b08      	ldr	r3, [pc, #32]	; (80067dc <_sbrk+0x64>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80067be:	4b07      	ldr	r3, [pc, #28]	; (80067dc <_sbrk+0x64>)
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4413      	add	r3, r2
 80067c6:	4a05      	ldr	r2, [pc, #20]	; (80067dc <_sbrk+0x64>)
 80067c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80067ca:	68fb      	ldr	r3, [r7, #12]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20005000 	.word	0x20005000
 80067d8:	00000400 	.word	0x00000400
 80067dc:	20000510 	.word	0x20000510
 80067e0:	20000528 	.word	0x20000528

080067e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80067e8:	bf00      	nop
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bc80      	pop	{r7}
 80067ee:	4770      	bx	lr

080067f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80067f0:	f7ff fff8 	bl	80067e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80067f4:	480b      	ldr	r0, [pc, #44]	; (8006824 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80067f6:	490c      	ldr	r1, [pc, #48]	; (8006828 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80067f8:	4a0c      	ldr	r2, [pc, #48]	; (800682c <LoopFillZerobss+0x16>)
  movs r3, #0
 80067fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80067fc:	e002      	b.n	8006804 <LoopCopyDataInit>

080067fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80067fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006802:	3304      	adds	r3, #4

08006804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006808:	d3f9      	bcc.n	80067fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800680a:	4a09      	ldr	r2, [pc, #36]	; (8006830 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800680c:	4c09      	ldr	r4, [pc, #36]	; (8006834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800680e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006810:	e001      	b.n	8006816 <LoopFillZerobss>

08006812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006814:	3204      	adds	r2, #4

08006816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006818:	d3fb      	bcc.n	8006812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800681a:	f001 feeb 	bl	80085f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800681e:	f7fa fdb9 	bl	8001394 <main>
  bx lr
 8006822:	4770      	bx	lr
  ldr r0, =_sdata
 8006824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006828:	20000460 	.word	0x20000460
  ldr r2, =_sidata
 800682c:	0800d664 	.word	0x0800d664
  ldr r2, =_sbss
 8006830:	20000460 	.word	0x20000460
  ldr r4, =_ebss
 8006834:	20000528 	.word	0x20000528

08006838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006838:	e7fe      	b.n	8006838 <ADC1_2_IRQHandler>
	...

0800683c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006840:	4b08      	ldr	r3, [pc, #32]	; (8006864 <HAL_Init+0x28>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a07      	ldr	r2, [pc, #28]	; (8006864 <HAL_Init+0x28>)
 8006846:	f043 0310 	orr.w	r3, r3, #16
 800684a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800684c:	2003      	movs	r0, #3
 800684e:	f000 f947 	bl	8006ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006852:	200f      	movs	r0, #15
 8006854:	f000 f808 	bl	8006868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006858:	f7ff fe12 	bl	8006480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	40022000 	.word	0x40022000

08006868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006870:	4b12      	ldr	r3, [pc, #72]	; (80068bc <HAL_InitTick+0x54>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	4b12      	ldr	r3, [pc, #72]	; (80068c0 <HAL_InitTick+0x58>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	4619      	mov	r1, r3
 800687a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800687e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006882:	fbb2 f3f3 	udiv	r3, r2, r3
 8006886:	4618      	mov	r0, r3
 8006888:	f000 f95f 	bl	8006b4a <HAL_SYSTICK_Config>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e00e      	b.n	80068b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b0f      	cmp	r3, #15
 800689a:	d80a      	bhi.n	80068b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800689c:	2200      	movs	r2, #0
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	f000 f927 	bl	8006af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80068a8:	4a06      	ldr	r2, [pc, #24]	; (80068c4 <HAL_InitTick+0x5c>)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	e000      	b.n	80068b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	20000280 	.word	0x20000280
 80068c0:	20000288 	.word	0x20000288
 80068c4:	20000284 	.word	0x20000284

080068c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80068cc:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <HAL_IncTick+0x1c>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <HAL_IncTick+0x20>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4413      	add	r3, r2
 80068d8:	4a03      	ldr	r2, [pc, #12]	; (80068e8 <HAL_IncTick+0x20>)
 80068da:	6013      	str	r3, [r2, #0]
}
 80068dc:	bf00      	nop
 80068de:	46bd      	mov	sp, r7
 80068e0:	bc80      	pop	{r7}
 80068e2:	4770      	bx	lr
 80068e4:	20000288 	.word	0x20000288
 80068e8:	20000514 	.word	0x20000514

080068ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
  return uwTick;
 80068f0:	4b02      	ldr	r3, [pc, #8]	; (80068fc <HAL_GetTick+0x10>)
 80068f2:	681b      	ldr	r3, [r3, #0]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr
 80068fc:	20000514 	.word	0x20000514

08006900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006908:	f7ff fff0 	bl	80068ec <HAL_GetTick>
 800690c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d005      	beq.n	8006926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800691a:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <HAL_Delay+0x44>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4413      	add	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006926:	bf00      	nop
 8006928:	f7ff ffe0 	bl	80068ec <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	429a      	cmp	r2, r3
 8006936:	d8f7      	bhi.n	8006928 <HAL_Delay+0x28>
  {
  }
}
 8006938:	bf00      	nop
 800693a:	bf00      	nop
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000288 	.word	0x20000288

08006948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006958:	4b0c      	ldr	r3, [pc, #48]	; (800698c <__NVIC_SetPriorityGrouping+0x44>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006964:	4013      	ands	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800697a:	4a04      	ldr	r2, [pc, #16]	; (800698c <__NVIC_SetPriorityGrouping+0x44>)
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	60d3      	str	r3, [r2, #12]
}
 8006980:	bf00      	nop
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	e000ed00 	.word	0xe000ed00

08006990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006994:	4b04      	ldr	r3, [pc, #16]	; (80069a8 <__NVIC_GetPriorityGrouping+0x18>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	0a1b      	lsrs	r3, r3, #8
 800699a:	f003 0307 	and.w	r3, r3, #7
}
 800699e:	4618      	mov	r0, r3
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bc80      	pop	{r7}
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	e000ed00 	.word	0xe000ed00

080069ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	4603      	mov	r3, r0
 80069b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	db0b      	blt.n	80069d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	f003 021f 	and.w	r2, r3, #31
 80069c4:	4906      	ldr	r1, [pc, #24]	; (80069e0 <__NVIC_EnableIRQ+0x34>)
 80069c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ca:	095b      	lsrs	r3, r3, #5
 80069cc:	2001      	movs	r0, #1
 80069ce:	fa00 f202 	lsl.w	r2, r0, r2
 80069d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	bc80      	pop	{r7}
 80069de:	4770      	bx	lr
 80069e0:	e000e100 	.word	0xe000e100

080069e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	4603      	mov	r3, r0
 80069ec:	6039      	str	r1, [r7, #0]
 80069ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	db0a      	blt.n	8006a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	490c      	ldr	r1, [pc, #48]	; (8006a30 <__NVIC_SetPriority+0x4c>)
 80069fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a02:	0112      	lsls	r2, r2, #4
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	440b      	add	r3, r1
 8006a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a0c:	e00a      	b.n	8006a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	4908      	ldr	r1, [pc, #32]	; (8006a34 <__NVIC_SetPriority+0x50>)
 8006a14:	79fb      	ldrb	r3, [r7, #7]
 8006a16:	f003 030f 	and.w	r3, r3, #15
 8006a1a:	3b04      	subs	r3, #4
 8006a1c:	0112      	lsls	r2, r2, #4
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	440b      	add	r3, r1
 8006a22:	761a      	strb	r2, [r3, #24]
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bc80      	pop	{r7}
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	e000e100 	.word	0xe000e100
 8006a34:	e000ed00 	.word	0xe000ed00

08006a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b089      	sub	sp, #36	; 0x24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f1c3 0307 	rsb	r3, r3, #7
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	bf28      	it	cs
 8006a56:	2304      	movcs	r3, #4
 8006a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	2b06      	cmp	r3, #6
 8006a60:	d902      	bls.n	8006a68 <NVIC_EncodePriority+0x30>
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	3b03      	subs	r3, #3
 8006a66:	e000      	b.n	8006a6a <NVIC_EncodePriority+0x32>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	fa02 f303 	lsl.w	r3, r2, r3
 8006a76:	43da      	mvns	r2, r3
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	401a      	ands	r2, r3
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a80:	f04f 31ff 	mov.w	r1, #4294967295
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8a:	43d9      	mvns	r1, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a90:	4313      	orrs	r3, r2
         );
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3724      	adds	r7, #36	; 0x24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bc80      	pop	{r7}
 8006a9a:	4770      	bx	lr

08006a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006aac:	d301      	bcc.n	8006ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e00f      	b.n	8006ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ab2:	4a0a      	ldr	r2, [pc, #40]	; (8006adc <SysTick_Config+0x40>)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006aba:	210f      	movs	r1, #15
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac0:	f7ff ff90 	bl	80069e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ac4:	4b05      	ldr	r3, [pc, #20]	; (8006adc <SysTick_Config+0x40>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006aca:	4b04      	ldr	r3, [pc, #16]	; (8006adc <SysTick_Config+0x40>)
 8006acc:	2207      	movs	r2, #7
 8006ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	e000e010 	.word	0xe000e010

08006ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff ff2d 	bl	8006948 <__NVIC_SetPriorityGrouping>
}
 8006aee:	bf00      	nop
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b086      	sub	sp, #24
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	4603      	mov	r3, r0
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	607a      	str	r2, [r7, #4]
 8006b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b08:	f7ff ff42 	bl	8006990 <__NVIC_GetPriorityGrouping>
 8006b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	6978      	ldr	r0, [r7, #20]
 8006b14:	f7ff ff90 	bl	8006a38 <NVIC_EncodePriority>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b1e:	4611      	mov	r1, r2
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7ff ff5f 	bl	80069e4 <__NVIC_SetPriority>
}
 8006b26:	bf00      	nop
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b082      	sub	sp, #8
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	4603      	mov	r3, r0
 8006b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7ff ff35 	bl	80069ac <__NVIC_EnableIRQ>
}
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff ffa2 	bl	8006a9c <SysTick_Config>
 8006b58:	4603      	mov	r3, r0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b085      	sub	sp, #20
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d008      	beq.n	8006b8c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2204      	movs	r2, #4
 8006b7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e020      	b.n	8006bce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 020e 	bic.w	r2, r2, #14
 8006b9a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0201 	bic.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8006bba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bc80      	pop	{r7}
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d005      	beq.n	8006bfc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2204      	movs	r2, #4
 8006bf4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	73fb      	strb	r3, [r7, #15]
 8006bfa:	e051      	b.n	8006ca0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 020e 	bic.w	r2, r2, #14
 8006c0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0201 	bic.w	r2, r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a22      	ldr	r2, [pc, #136]	; (8006cac <HAL_DMA_Abort_IT+0xd4>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d029      	beq.n	8006c7a <HAL_DMA_Abort_IT+0xa2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a21      	ldr	r2, [pc, #132]	; (8006cb0 <HAL_DMA_Abort_IT+0xd8>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d022      	beq.n	8006c76 <HAL_DMA_Abort_IT+0x9e>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a1f      	ldr	r2, [pc, #124]	; (8006cb4 <HAL_DMA_Abort_IT+0xdc>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d01a      	beq.n	8006c70 <HAL_DMA_Abort_IT+0x98>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a1e      	ldr	r2, [pc, #120]	; (8006cb8 <HAL_DMA_Abort_IT+0xe0>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d012      	beq.n	8006c6a <HAL_DMA_Abort_IT+0x92>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1c      	ldr	r2, [pc, #112]	; (8006cbc <HAL_DMA_Abort_IT+0xe4>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00a      	beq.n	8006c64 <HAL_DMA_Abort_IT+0x8c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a1b      	ldr	r2, [pc, #108]	; (8006cc0 <HAL_DMA_Abort_IT+0xe8>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d102      	bne.n	8006c5e <HAL_DMA_Abort_IT+0x86>
 8006c58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006c5c:	e00e      	b.n	8006c7c <HAL_DMA_Abort_IT+0xa4>
 8006c5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c62:	e00b      	b.n	8006c7c <HAL_DMA_Abort_IT+0xa4>
 8006c64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c68:	e008      	b.n	8006c7c <HAL_DMA_Abort_IT+0xa4>
 8006c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c6e:	e005      	b.n	8006c7c <HAL_DMA_Abort_IT+0xa4>
 8006c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c74:	e002      	b.n	8006c7c <HAL_DMA_Abort_IT+0xa4>
 8006c76:	2310      	movs	r3, #16
 8006c78:	e000      	b.n	8006c7c <HAL_DMA_Abort_IT+0xa4>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	4a11      	ldr	r2, [pc, #68]	; (8006cc4 <HAL_DMA_Abort_IT+0xec>)
 8006c7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	4798      	blx	r3
    } 
  }
  return status;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	40020008 	.word	0x40020008
 8006cb0:	4002001c 	.word	0x4002001c
 8006cb4:	40020030 	.word	0x40020030
 8006cb8:	40020044 	.word	0x40020044
 8006cbc:	40020058 	.word	0x40020058
 8006cc0:	4002006c 	.word	0x4002006c
 8006cc4:	40020000 	.word	0x40020000

08006cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b08b      	sub	sp, #44	; 0x2c
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006cda:	e169      	b.n	8006fb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006cdc:	2201      	movs	r2, #1
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	4013      	ands	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	f040 8158 	bne.w	8006faa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	4a9a      	ldr	r2, [pc, #616]	; (8006f68 <HAL_GPIO_Init+0x2a0>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d05e      	beq.n	8006dc2 <HAL_GPIO_Init+0xfa>
 8006d04:	4a98      	ldr	r2, [pc, #608]	; (8006f68 <HAL_GPIO_Init+0x2a0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d875      	bhi.n	8006df6 <HAL_GPIO_Init+0x12e>
 8006d0a:	4a98      	ldr	r2, [pc, #608]	; (8006f6c <HAL_GPIO_Init+0x2a4>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d058      	beq.n	8006dc2 <HAL_GPIO_Init+0xfa>
 8006d10:	4a96      	ldr	r2, [pc, #600]	; (8006f6c <HAL_GPIO_Init+0x2a4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d86f      	bhi.n	8006df6 <HAL_GPIO_Init+0x12e>
 8006d16:	4a96      	ldr	r2, [pc, #600]	; (8006f70 <HAL_GPIO_Init+0x2a8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d052      	beq.n	8006dc2 <HAL_GPIO_Init+0xfa>
 8006d1c:	4a94      	ldr	r2, [pc, #592]	; (8006f70 <HAL_GPIO_Init+0x2a8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d869      	bhi.n	8006df6 <HAL_GPIO_Init+0x12e>
 8006d22:	4a94      	ldr	r2, [pc, #592]	; (8006f74 <HAL_GPIO_Init+0x2ac>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d04c      	beq.n	8006dc2 <HAL_GPIO_Init+0xfa>
 8006d28:	4a92      	ldr	r2, [pc, #584]	; (8006f74 <HAL_GPIO_Init+0x2ac>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d863      	bhi.n	8006df6 <HAL_GPIO_Init+0x12e>
 8006d2e:	4a92      	ldr	r2, [pc, #584]	; (8006f78 <HAL_GPIO_Init+0x2b0>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d046      	beq.n	8006dc2 <HAL_GPIO_Init+0xfa>
 8006d34:	4a90      	ldr	r2, [pc, #576]	; (8006f78 <HAL_GPIO_Init+0x2b0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d85d      	bhi.n	8006df6 <HAL_GPIO_Init+0x12e>
 8006d3a:	2b12      	cmp	r3, #18
 8006d3c:	d82a      	bhi.n	8006d94 <HAL_GPIO_Init+0xcc>
 8006d3e:	2b12      	cmp	r3, #18
 8006d40:	d859      	bhi.n	8006df6 <HAL_GPIO_Init+0x12e>
 8006d42:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <HAL_GPIO_Init+0x80>)
 8006d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d48:	08006dc3 	.word	0x08006dc3
 8006d4c:	08006d9d 	.word	0x08006d9d
 8006d50:	08006daf 	.word	0x08006daf
 8006d54:	08006df1 	.word	0x08006df1
 8006d58:	08006df7 	.word	0x08006df7
 8006d5c:	08006df7 	.word	0x08006df7
 8006d60:	08006df7 	.word	0x08006df7
 8006d64:	08006df7 	.word	0x08006df7
 8006d68:	08006df7 	.word	0x08006df7
 8006d6c:	08006df7 	.word	0x08006df7
 8006d70:	08006df7 	.word	0x08006df7
 8006d74:	08006df7 	.word	0x08006df7
 8006d78:	08006df7 	.word	0x08006df7
 8006d7c:	08006df7 	.word	0x08006df7
 8006d80:	08006df7 	.word	0x08006df7
 8006d84:	08006df7 	.word	0x08006df7
 8006d88:	08006df7 	.word	0x08006df7
 8006d8c:	08006da5 	.word	0x08006da5
 8006d90:	08006db9 	.word	0x08006db9
 8006d94:	4a79      	ldr	r2, [pc, #484]	; (8006f7c <HAL_GPIO_Init+0x2b4>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d013      	beq.n	8006dc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006d9a:	e02c      	b.n	8006df6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	623b      	str	r3, [r7, #32]
          break;
 8006da2:	e029      	b.n	8006df8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	3304      	adds	r3, #4
 8006daa:	623b      	str	r3, [r7, #32]
          break;
 8006dac:	e024      	b.n	8006df8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	3308      	adds	r3, #8
 8006db4:	623b      	str	r3, [r7, #32]
          break;
 8006db6:	e01f      	b.n	8006df8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	330c      	adds	r3, #12
 8006dbe:	623b      	str	r3, [r7, #32]
          break;
 8006dc0:	e01a      	b.n	8006df8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d102      	bne.n	8006dd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006dca:	2304      	movs	r3, #4
 8006dcc:	623b      	str	r3, [r7, #32]
          break;
 8006dce:	e013      	b.n	8006df8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d105      	bne.n	8006de4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006dd8:	2308      	movs	r3, #8
 8006dda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	69fa      	ldr	r2, [r7, #28]
 8006de0:	611a      	str	r2, [r3, #16]
          break;
 8006de2:	e009      	b.n	8006df8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006de4:	2308      	movs	r3, #8
 8006de6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	69fa      	ldr	r2, [r7, #28]
 8006dec:	615a      	str	r2, [r3, #20]
          break;
 8006dee:	e003      	b.n	8006df8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006df0:	2300      	movs	r3, #0
 8006df2:	623b      	str	r3, [r7, #32]
          break;
 8006df4:	e000      	b.n	8006df8 <HAL_GPIO_Init+0x130>
          break;
 8006df6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	2bff      	cmp	r3, #255	; 0xff
 8006dfc:	d801      	bhi.n	8006e02 <HAL_GPIO_Init+0x13a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	e001      	b.n	8006e06 <HAL_GPIO_Init+0x13e>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3304      	adds	r3, #4
 8006e06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	2bff      	cmp	r3, #255	; 0xff
 8006e0c:	d802      	bhi.n	8006e14 <HAL_GPIO_Init+0x14c>
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	e002      	b.n	8006e1a <HAL_GPIO_Init+0x152>
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	3b08      	subs	r3, #8
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	210f      	movs	r1, #15
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	fa01 f303 	lsl.w	r3, r1, r3
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	401a      	ands	r2, r3
 8006e2c:	6a39      	ldr	r1, [r7, #32]
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	fa01 f303 	lsl.w	r3, r1, r3
 8006e34:	431a      	orrs	r2, r3
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 80b1 	beq.w	8006faa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006e48:	4b4d      	ldr	r3, [pc, #308]	; (8006f80 <HAL_GPIO_Init+0x2b8>)
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	4a4c      	ldr	r2, [pc, #304]	; (8006f80 <HAL_GPIO_Init+0x2b8>)
 8006e4e:	f043 0301 	orr.w	r3, r3, #1
 8006e52:	6193      	str	r3, [r2, #24]
 8006e54:	4b4a      	ldr	r3, [pc, #296]	; (8006f80 <HAL_GPIO_Init+0x2b8>)
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	60bb      	str	r3, [r7, #8]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006e60:	4a48      	ldr	r2, [pc, #288]	; (8006f84 <HAL_GPIO_Init+0x2bc>)
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	089b      	lsrs	r3, r3, #2
 8006e66:	3302      	adds	r3, #2
 8006e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	f003 0303 	and.w	r3, r3, #3
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	220f      	movs	r2, #15
 8006e78:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4013      	ands	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a40      	ldr	r2, [pc, #256]	; (8006f88 <HAL_GPIO_Init+0x2c0>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d013      	beq.n	8006eb4 <HAL_GPIO_Init+0x1ec>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a3f      	ldr	r2, [pc, #252]	; (8006f8c <HAL_GPIO_Init+0x2c4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d00d      	beq.n	8006eb0 <HAL_GPIO_Init+0x1e8>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a3e      	ldr	r2, [pc, #248]	; (8006f90 <HAL_GPIO_Init+0x2c8>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d007      	beq.n	8006eac <HAL_GPIO_Init+0x1e4>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a3d      	ldr	r2, [pc, #244]	; (8006f94 <HAL_GPIO_Init+0x2cc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d101      	bne.n	8006ea8 <HAL_GPIO_Init+0x1e0>
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e006      	b.n	8006eb6 <HAL_GPIO_Init+0x1ee>
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	e004      	b.n	8006eb6 <HAL_GPIO_Init+0x1ee>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e002      	b.n	8006eb6 <HAL_GPIO_Init+0x1ee>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e000      	b.n	8006eb6 <HAL_GPIO_Init+0x1ee>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb8:	f002 0203 	and.w	r2, r2, #3
 8006ebc:	0092      	lsls	r2, r2, #2
 8006ebe:	4093      	lsls	r3, r2
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006ec6:	492f      	ldr	r1, [pc, #188]	; (8006f84 <HAL_GPIO_Init+0x2bc>)
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	089b      	lsrs	r3, r3, #2
 8006ecc:	3302      	adds	r3, #2
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d006      	beq.n	8006eee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006ee0:	4b2d      	ldr	r3, [pc, #180]	; (8006f98 <HAL_GPIO_Init+0x2d0>)
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	492c      	ldr	r1, [pc, #176]	; (8006f98 <HAL_GPIO_Init+0x2d0>)
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	608b      	str	r3, [r1, #8]
 8006eec:	e006      	b.n	8006efc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006eee:	4b2a      	ldr	r3, [pc, #168]	; (8006f98 <HAL_GPIO_Init+0x2d0>)
 8006ef0:	689a      	ldr	r2, [r3, #8]
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	4928      	ldr	r1, [pc, #160]	; (8006f98 <HAL_GPIO_Init+0x2d0>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d006      	beq.n	8006f16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006f08:	4b23      	ldr	r3, [pc, #140]	; (8006f98 <HAL_GPIO_Init+0x2d0>)
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	4922      	ldr	r1, [pc, #136]	; (8006f98 <HAL_GPIO_Init+0x2d0>)
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60cb      	str	r3, [r1, #12]
 8006f14:	e006      	b.n	8006f24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006f16:	4b20      	ldr	r3, [pc, #128]	; (8006f98 <HAL_GPIO_Init+0x2d0>)
 8006f18:	68da      	ldr	r2, [r3, #12]
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	491e      	ldr	r1, [pc, #120]	; (8006f98 <HAL_GPIO_Init+0x2d0>)
 8006f20:	4013      	ands	r3, r2
 8006f22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d006      	beq.n	8006f3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006f30:	4b19      	ldr	r3, [pc, #100]	; (8006f98 <HAL_GPIO_Init+0x2d0>)
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	4918      	ldr	r1, [pc, #96]	; (8006f98 <HAL_GPIO_Init+0x2d0>)
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	604b      	str	r3, [r1, #4]
 8006f3c:	e006      	b.n	8006f4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006f3e:	4b16      	ldr	r3, [pc, #88]	; (8006f98 <HAL_GPIO_Init+0x2d0>)
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	43db      	mvns	r3, r3
 8006f46:	4914      	ldr	r1, [pc, #80]	; (8006f98 <HAL_GPIO_Init+0x2d0>)
 8006f48:	4013      	ands	r3, r2
 8006f4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d021      	beq.n	8006f9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006f58:	4b0f      	ldr	r3, [pc, #60]	; (8006f98 <HAL_GPIO_Init+0x2d0>)
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	490e      	ldr	r1, [pc, #56]	; (8006f98 <HAL_GPIO_Init+0x2d0>)
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	600b      	str	r3, [r1, #0]
 8006f64:	e021      	b.n	8006faa <HAL_GPIO_Init+0x2e2>
 8006f66:	bf00      	nop
 8006f68:	10320000 	.word	0x10320000
 8006f6c:	10310000 	.word	0x10310000
 8006f70:	10220000 	.word	0x10220000
 8006f74:	10210000 	.word	0x10210000
 8006f78:	10120000 	.word	0x10120000
 8006f7c:	10110000 	.word	0x10110000
 8006f80:	40021000 	.word	0x40021000
 8006f84:	40010000 	.word	0x40010000
 8006f88:	40010800 	.word	0x40010800
 8006f8c:	40010c00 	.word	0x40010c00
 8006f90:	40011000 	.word	0x40011000
 8006f94:	40011400 	.word	0x40011400
 8006f98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <HAL_GPIO_Init+0x304>)
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	43db      	mvns	r3, r3
 8006fa4:	4909      	ldr	r1, [pc, #36]	; (8006fcc <HAL_GPIO_Init+0x304>)
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	3301      	adds	r3, #1
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f47f ae8e 	bne.w	8006cdc <HAL_GPIO_Init+0x14>
  }
}
 8006fc0:	bf00      	nop
 8006fc2:	bf00      	nop
 8006fc4:	372c      	adds	r7, #44	; 0x2c
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr
 8006fcc:	40010400 	.word	0x40010400

08006fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	887b      	ldrh	r3, [r7, #2]
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	73fb      	strb	r3, [r7, #15]
 8006fec:	e001      	b.n	8006ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr

08006ffe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b083      	sub	sp, #12
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	460b      	mov	r3, r1
 8007008:	807b      	strh	r3, [r7, #2]
 800700a:	4613      	mov	r3, r2
 800700c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800700e:	787b      	ldrb	r3, [r7, #1]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007014:	887a      	ldrh	r2, [r7, #2]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800701a:	e003      	b.n	8007024 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800701c:	887b      	ldrh	r3, [r7, #2]
 800701e:	041a      	lsls	r2, r3, #16
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	611a      	str	r2, [r3, #16]
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	bc80      	pop	{r7}
 800702c:	4770      	bx	lr
	...

08007030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e272      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 8087 	beq.w	800715e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007050:	4b92      	ldr	r3, [pc, #584]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f003 030c 	and.w	r3, r3, #12
 8007058:	2b04      	cmp	r3, #4
 800705a:	d00c      	beq.n	8007076 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800705c:	4b8f      	ldr	r3, [pc, #572]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f003 030c 	and.w	r3, r3, #12
 8007064:	2b08      	cmp	r3, #8
 8007066:	d112      	bne.n	800708e <HAL_RCC_OscConfig+0x5e>
 8007068:	4b8c      	ldr	r3, [pc, #560]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007074:	d10b      	bne.n	800708e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007076:	4b89      	ldr	r3, [pc, #548]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d06c      	beq.n	800715c <HAL_RCC_OscConfig+0x12c>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d168      	bne.n	800715c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e24c      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007096:	d106      	bne.n	80070a6 <HAL_RCC_OscConfig+0x76>
 8007098:	4b80      	ldr	r3, [pc, #512]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a7f      	ldr	r2, [pc, #508]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 800709e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	e02e      	b.n	8007104 <HAL_RCC_OscConfig+0xd4>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10c      	bne.n	80070c8 <HAL_RCC_OscConfig+0x98>
 80070ae:	4b7b      	ldr	r3, [pc, #492]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a7a      	ldr	r2, [pc, #488]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 80070b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	4b78      	ldr	r3, [pc, #480]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a77      	ldr	r2, [pc, #476]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 80070c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	e01d      	b.n	8007104 <HAL_RCC_OscConfig+0xd4>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070d0:	d10c      	bne.n	80070ec <HAL_RCC_OscConfig+0xbc>
 80070d2:	4b72      	ldr	r3, [pc, #456]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a71      	ldr	r2, [pc, #452]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 80070d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	4b6f      	ldr	r3, [pc, #444]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a6e      	ldr	r2, [pc, #440]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 80070e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070e8:	6013      	str	r3, [r2, #0]
 80070ea:	e00b      	b.n	8007104 <HAL_RCC_OscConfig+0xd4>
 80070ec:	4b6b      	ldr	r3, [pc, #428]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a6a      	ldr	r2, [pc, #424]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 80070f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	4b68      	ldr	r3, [pc, #416]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a67      	ldr	r2, [pc, #412]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 80070fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007102:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d013      	beq.n	8007134 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800710c:	f7ff fbee 	bl	80068ec <HAL_GetTick>
 8007110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007112:	e008      	b.n	8007126 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007114:	f7ff fbea 	bl	80068ec <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b64      	cmp	r3, #100	; 0x64
 8007120:	d901      	bls.n	8007126 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e200      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007126:	4b5d      	ldr	r3, [pc, #372]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0f0      	beq.n	8007114 <HAL_RCC_OscConfig+0xe4>
 8007132:	e014      	b.n	800715e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007134:	f7ff fbda 	bl	80068ec <HAL_GetTick>
 8007138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800713c:	f7ff fbd6 	bl	80068ec <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b64      	cmp	r3, #100	; 0x64
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e1ec      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800714e:	4b53      	ldr	r3, [pc, #332]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1f0      	bne.n	800713c <HAL_RCC_OscConfig+0x10c>
 800715a:	e000      	b.n	800715e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800715c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d063      	beq.n	8007232 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800716a:	4b4c      	ldr	r3, [pc, #304]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f003 030c 	and.w	r3, r3, #12
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00b      	beq.n	800718e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007176:	4b49      	ldr	r3, [pc, #292]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f003 030c 	and.w	r3, r3, #12
 800717e:	2b08      	cmp	r3, #8
 8007180:	d11c      	bne.n	80071bc <HAL_RCC_OscConfig+0x18c>
 8007182:	4b46      	ldr	r3, [pc, #280]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d116      	bne.n	80071bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800718e:	4b43      	ldr	r3, [pc, #268]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <HAL_RCC_OscConfig+0x176>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d001      	beq.n	80071a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e1c0      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071a6:	4b3d      	ldr	r3, [pc, #244]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	4939      	ldr	r1, [pc, #228]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071ba:	e03a      	b.n	8007232 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d020      	beq.n	8007206 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071c4:	4b36      	ldr	r3, [pc, #216]	; (80072a0 <HAL_RCC_OscConfig+0x270>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ca:	f7ff fb8f 	bl	80068ec <HAL_GetTick>
 80071ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071d0:	e008      	b.n	80071e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071d2:	f7ff fb8b 	bl	80068ec <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d901      	bls.n	80071e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e1a1      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071e4:	4b2d      	ldr	r3, [pc, #180]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0f0      	beq.n	80071d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f0:	4b2a      	ldr	r3, [pc, #168]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	4927      	ldr	r1, [pc, #156]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 8007200:	4313      	orrs	r3, r2
 8007202:	600b      	str	r3, [r1, #0]
 8007204:	e015      	b.n	8007232 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007206:	4b26      	ldr	r3, [pc, #152]	; (80072a0 <HAL_RCC_OscConfig+0x270>)
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800720c:	f7ff fb6e 	bl	80068ec <HAL_GetTick>
 8007210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007212:	e008      	b.n	8007226 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007214:	f7ff fb6a 	bl	80068ec <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	2b02      	cmp	r3, #2
 8007220:	d901      	bls.n	8007226 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e180      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007226:	4b1d      	ldr	r3, [pc, #116]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1f0      	bne.n	8007214 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	2b00      	cmp	r3, #0
 800723c:	d03a      	beq.n	80072b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d019      	beq.n	800727a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007246:	4b17      	ldr	r3, [pc, #92]	; (80072a4 <HAL_RCC_OscConfig+0x274>)
 8007248:	2201      	movs	r2, #1
 800724a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800724c:	f7ff fb4e 	bl	80068ec <HAL_GetTick>
 8007250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007252:	e008      	b.n	8007266 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007254:	f7ff fb4a 	bl	80068ec <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b02      	cmp	r3, #2
 8007260:	d901      	bls.n	8007266 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e160      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007266:	4b0d      	ldr	r3, [pc, #52]	; (800729c <HAL_RCC_OscConfig+0x26c>)
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0f0      	beq.n	8007254 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007272:	2001      	movs	r0, #1
 8007274:	f000 face 	bl	8007814 <RCC_Delay>
 8007278:	e01c      	b.n	80072b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800727a:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <HAL_RCC_OscConfig+0x274>)
 800727c:	2200      	movs	r2, #0
 800727e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007280:	f7ff fb34 	bl	80068ec <HAL_GetTick>
 8007284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007286:	e00f      	b.n	80072a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007288:	f7ff fb30 	bl	80068ec <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	2b02      	cmp	r3, #2
 8007294:	d908      	bls.n	80072a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e146      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>
 800729a:	bf00      	nop
 800729c:	40021000 	.word	0x40021000
 80072a0:	42420000 	.word	0x42420000
 80072a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072a8:	4b92      	ldr	r3, [pc, #584]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	f003 0302 	and.w	r3, r3, #2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1e9      	bne.n	8007288 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 80a6 	beq.w	800740e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072c2:	2300      	movs	r3, #0
 80072c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072c6:	4b8b      	ldr	r3, [pc, #556]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10d      	bne.n	80072ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072d2:	4b88      	ldr	r3, [pc, #544]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	4a87      	ldr	r2, [pc, #540]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 80072d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072dc:	61d3      	str	r3, [r2, #28]
 80072de:	4b85      	ldr	r3, [pc, #532]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e6:	60bb      	str	r3, [r7, #8]
 80072e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ea:	2301      	movs	r3, #1
 80072ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ee:	4b82      	ldr	r3, [pc, #520]	; (80074f8 <HAL_RCC_OscConfig+0x4c8>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d118      	bne.n	800732c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072fa:	4b7f      	ldr	r3, [pc, #508]	; (80074f8 <HAL_RCC_OscConfig+0x4c8>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a7e      	ldr	r2, [pc, #504]	; (80074f8 <HAL_RCC_OscConfig+0x4c8>)
 8007300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007306:	f7ff faf1 	bl	80068ec <HAL_GetTick>
 800730a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800730c:	e008      	b.n	8007320 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800730e:	f7ff faed 	bl	80068ec <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	2b64      	cmp	r3, #100	; 0x64
 800731a:	d901      	bls.n	8007320 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e103      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007320:	4b75      	ldr	r3, [pc, #468]	; (80074f8 <HAL_RCC_OscConfig+0x4c8>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007328:	2b00      	cmp	r3, #0
 800732a:	d0f0      	beq.n	800730e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d106      	bne.n	8007342 <HAL_RCC_OscConfig+0x312>
 8007334:	4b6f      	ldr	r3, [pc, #444]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	4a6e      	ldr	r2, [pc, #440]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 800733a:	f043 0301 	orr.w	r3, r3, #1
 800733e:	6213      	str	r3, [r2, #32]
 8007340:	e02d      	b.n	800739e <HAL_RCC_OscConfig+0x36e>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10c      	bne.n	8007364 <HAL_RCC_OscConfig+0x334>
 800734a:	4b6a      	ldr	r3, [pc, #424]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	4a69      	ldr	r2, [pc, #420]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 8007350:	f023 0301 	bic.w	r3, r3, #1
 8007354:	6213      	str	r3, [r2, #32]
 8007356:	4b67      	ldr	r3, [pc, #412]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	4a66      	ldr	r2, [pc, #408]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 800735c:	f023 0304 	bic.w	r3, r3, #4
 8007360:	6213      	str	r3, [r2, #32]
 8007362:	e01c      	b.n	800739e <HAL_RCC_OscConfig+0x36e>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	2b05      	cmp	r3, #5
 800736a:	d10c      	bne.n	8007386 <HAL_RCC_OscConfig+0x356>
 800736c:	4b61      	ldr	r3, [pc, #388]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	4a60      	ldr	r2, [pc, #384]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 8007372:	f043 0304 	orr.w	r3, r3, #4
 8007376:	6213      	str	r3, [r2, #32]
 8007378:	4b5e      	ldr	r3, [pc, #376]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	4a5d      	ldr	r2, [pc, #372]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 800737e:	f043 0301 	orr.w	r3, r3, #1
 8007382:	6213      	str	r3, [r2, #32]
 8007384:	e00b      	b.n	800739e <HAL_RCC_OscConfig+0x36e>
 8007386:	4b5b      	ldr	r3, [pc, #364]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	4a5a      	ldr	r2, [pc, #360]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 800738c:	f023 0301 	bic.w	r3, r3, #1
 8007390:	6213      	str	r3, [r2, #32]
 8007392:	4b58      	ldr	r3, [pc, #352]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	4a57      	ldr	r2, [pc, #348]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 8007398:	f023 0304 	bic.w	r3, r3, #4
 800739c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d015      	beq.n	80073d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073a6:	f7ff faa1 	bl	80068ec <HAL_GetTick>
 80073aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073ac:	e00a      	b.n	80073c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ae:	f7ff fa9d 	bl	80068ec <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073bc:	4293      	cmp	r3, r2
 80073be:	d901      	bls.n	80073c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e0b1      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073c4:	4b4b      	ldr	r3, [pc, #300]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0ee      	beq.n	80073ae <HAL_RCC_OscConfig+0x37e>
 80073d0:	e014      	b.n	80073fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073d2:	f7ff fa8b 	bl	80068ec <HAL_GetTick>
 80073d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073d8:	e00a      	b.n	80073f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073da:	f7ff fa87 	bl	80068ec <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d901      	bls.n	80073f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e09b      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073f0:	4b40      	ldr	r3, [pc, #256]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 80073f2:	6a1b      	ldr	r3, [r3, #32]
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1ee      	bne.n	80073da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d105      	bne.n	800740e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007402:	4b3c      	ldr	r3, [pc, #240]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	4a3b      	ldr	r2, [pc, #236]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 8007408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800740c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 8087 	beq.w	8007526 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007418:	4b36      	ldr	r3, [pc, #216]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f003 030c 	and.w	r3, r3, #12
 8007420:	2b08      	cmp	r3, #8
 8007422:	d061      	beq.n	80074e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	2b02      	cmp	r3, #2
 800742a:	d146      	bne.n	80074ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800742c:	4b33      	ldr	r3, [pc, #204]	; (80074fc <HAL_RCC_OscConfig+0x4cc>)
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007432:	f7ff fa5b 	bl	80068ec <HAL_GetTick>
 8007436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007438:	e008      	b.n	800744c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800743a:	f7ff fa57 	bl	80068ec <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d901      	bls.n	800744c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e06d      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800744c:	4b29      	ldr	r3, [pc, #164]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1f0      	bne.n	800743a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a1b      	ldr	r3, [r3, #32]
 800745c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007460:	d108      	bne.n	8007474 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007462:	4b24      	ldr	r3, [pc, #144]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	4921      	ldr	r1, [pc, #132]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 8007470:	4313      	orrs	r3, r2
 8007472:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007474:	4b1f      	ldr	r3, [pc, #124]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a19      	ldr	r1, [r3, #32]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	430b      	orrs	r3, r1
 8007486:	491b      	ldr	r1, [pc, #108]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 8007488:	4313      	orrs	r3, r2
 800748a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800748c:	4b1b      	ldr	r3, [pc, #108]	; (80074fc <HAL_RCC_OscConfig+0x4cc>)
 800748e:	2201      	movs	r2, #1
 8007490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007492:	f7ff fa2b 	bl	80068ec <HAL_GetTick>
 8007496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007498:	e008      	b.n	80074ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800749a:	f7ff fa27 	bl	80068ec <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d901      	bls.n	80074ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e03d      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80074ac:	4b11      	ldr	r3, [pc, #68]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d0f0      	beq.n	800749a <HAL_RCC_OscConfig+0x46a>
 80074b8:	e035      	b.n	8007526 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074ba:	4b10      	ldr	r3, [pc, #64]	; (80074fc <HAL_RCC_OscConfig+0x4cc>)
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074c0:	f7ff fa14 	bl	80068ec <HAL_GetTick>
 80074c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074c6:	e008      	b.n	80074da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074c8:	f7ff fa10 	bl	80068ec <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d901      	bls.n	80074da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e026      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074da:	4b06      	ldr	r3, [pc, #24]	; (80074f4 <HAL_RCC_OscConfig+0x4c4>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1f0      	bne.n	80074c8 <HAL_RCC_OscConfig+0x498>
 80074e6:	e01e      	b.n	8007526 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d107      	bne.n	8007500 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e019      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>
 80074f4:	40021000 	.word	0x40021000
 80074f8:	40007000 	.word	0x40007000
 80074fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007500:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <HAL_RCC_OscConfig+0x500>)
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	429a      	cmp	r2, r3
 8007512:	d106      	bne.n	8007522 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800751e:	429a      	cmp	r2, r3
 8007520:	d001      	beq.n	8007526 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e000      	b.n	8007528 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3718      	adds	r7, #24
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40021000 	.word	0x40021000

08007534 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e0d0      	b.n	80076ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007548:	4b6a      	ldr	r3, [pc, #424]	; (80076f4 <HAL_RCC_ClockConfig+0x1c0>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0307 	and.w	r3, r3, #7
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d910      	bls.n	8007578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007556:	4b67      	ldr	r3, [pc, #412]	; (80076f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f023 0207 	bic.w	r2, r3, #7
 800755e:	4965      	ldr	r1, [pc, #404]	; (80076f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	4313      	orrs	r3, r2
 8007564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007566:	4b63      	ldr	r3, [pc, #396]	; (80076f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0307 	and.w	r3, r3, #7
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	429a      	cmp	r2, r3
 8007572:	d001      	beq.n	8007578 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e0b8      	b.n	80076ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d020      	beq.n	80075c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b00      	cmp	r3, #0
 800758e:	d005      	beq.n	800759c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007590:	4b59      	ldr	r3, [pc, #356]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	4a58      	ldr	r2, [pc, #352]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007596:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800759a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0308 	and.w	r3, r3, #8
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d005      	beq.n	80075b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075a8:	4b53      	ldr	r3, [pc, #332]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	4a52      	ldr	r2, [pc, #328]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 80075ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80075b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075b4:	4b50      	ldr	r3, [pc, #320]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	494d      	ldr	r1, [pc, #308]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d040      	beq.n	8007654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d107      	bne.n	80075ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075da:	4b47      	ldr	r3, [pc, #284]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d115      	bne.n	8007612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e07f      	b.n	80076ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d107      	bne.n	8007602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075f2:	4b41      	ldr	r3, [pc, #260]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d109      	bne.n	8007612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e073      	b.n	80076ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007602:	4b3d      	ldr	r3, [pc, #244]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e06b      	b.n	80076ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007612:	4b39      	ldr	r3, [pc, #228]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f023 0203 	bic.w	r2, r3, #3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	4936      	ldr	r1, [pc, #216]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007620:	4313      	orrs	r3, r2
 8007622:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007624:	f7ff f962 	bl	80068ec <HAL_GetTick>
 8007628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800762a:	e00a      	b.n	8007642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800762c:	f7ff f95e 	bl	80068ec <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	f241 3288 	movw	r2, #5000	; 0x1388
 800763a:	4293      	cmp	r3, r2
 800763c:	d901      	bls.n	8007642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e053      	b.n	80076ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007642:	4b2d      	ldr	r3, [pc, #180]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f003 020c 	and.w	r2, r3, #12
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	429a      	cmp	r2, r3
 8007652:	d1eb      	bne.n	800762c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007654:	4b27      	ldr	r3, [pc, #156]	; (80076f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0307 	and.w	r3, r3, #7
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	429a      	cmp	r2, r3
 8007660:	d210      	bcs.n	8007684 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007662:	4b24      	ldr	r3, [pc, #144]	; (80076f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f023 0207 	bic.w	r2, r3, #7
 800766a:	4922      	ldr	r1, [pc, #136]	; (80076f4 <HAL_RCC_ClockConfig+0x1c0>)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	4313      	orrs	r3, r2
 8007670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007672:	4b20      	ldr	r3, [pc, #128]	; (80076f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	429a      	cmp	r2, r3
 800767e:	d001      	beq.n	8007684 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e032      	b.n	80076ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b00      	cmp	r3, #0
 800768e:	d008      	beq.n	80076a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007690:	4b19      	ldr	r3, [pc, #100]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	4916      	ldr	r1, [pc, #88]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0308 	and.w	r3, r3, #8
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d009      	beq.n	80076c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80076ae:	4b12      	ldr	r3, [pc, #72]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	00db      	lsls	r3, r3, #3
 80076bc:	490e      	ldr	r1, [pc, #56]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80076c2:	f000 f821 	bl	8007708 <HAL_RCC_GetSysClockFreq>
 80076c6:	4602      	mov	r2, r0
 80076c8:	4b0b      	ldr	r3, [pc, #44]	; (80076f8 <HAL_RCC_ClockConfig+0x1c4>)
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	091b      	lsrs	r3, r3, #4
 80076ce:	f003 030f 	and.w	r3, r3, #15
 80076d2:	490a      	ldr	r1, [pc, #40]	; (80076fc <HAL_RCC_ClockConfig+0x1c8>)
 80076d4:	5ccb      	ldrb	r3, [r1, r3]
 80076d6:	fa22 f303 	lsr.w	r3, r2, r3
 80076da:	4a09      	ldr	r2, [pc, #36]	; (8007700 <HAL_RCC_ClockConfig+0x1cc>)
 80076dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80076de:	4b09      	ldr	r3, [pc, #36]	; (8007704 <HAL_RCC_ClockConfig+0x1d0>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff f8c0 	bl	8006868 <HAL_InitTick>

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	40022000 	.word	0x40022000
 80076f8:	40021000 	.word	0x40021000
 80076fc:	0800d184 	.word	0x0800d184
 8007700:	20000280 	.word	0x20000280
 8007704:	20000284 	.word	0x20000284

08007708 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007708:	b480      	push	{r7}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
 8007712:	2300      	movs	r3, #0
 8007714:	60bb      	str	r3, [r7, #8]
 8007716:	2300      	movs	r3, #0
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	2300      	movs	r3, #0
 800771c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007722:	4b1e      	ldr	r3, [pc, #120]	; (800779c <HAL_RCC_GetSysClockFreq+0x94>)
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f003 030c 	and.w	r3, r3, #12
 800772e:	2b04      	cmp	r3, #4
 8007730:	d002      	beq.n	8007738 <HAL_RCC_GetSysClockFreq+0x30>
 8007732:	2b08      	cmp	r3, #8
 8007734:	d003      	beq.n	800773e <HAL_RCC_GetSysClockFreq+0x36>
 8007736:	e027      	b.n	8007788 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007738:	4b19      	ldr	r3, [pc, #100]	; (80077a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800773a:	613b      	str	r3, [r7, #16]
      break;
 800773c:	e027      	b.n	800778e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	0c9b      	lsrs	r3, r3, #18
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	4a17      	ldr	r2, [pc, #92]	; (80077a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007748:	5cd3      	ldrb	r3, [r2, r3]
 800774a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d010      	beq.n	8007778 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007756:	4b11      	ldr	r3, [pc, #68]	; (800779c <HAL_RCC_GetSysClockFreq+0x94>)
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	0c5b      	lsrs	r3, r3, #17
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	4a11      	ldr	r2, [pc, #68]	; (80077a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007762:	5cd3      	ldrb	r3, [r2, r3]
 8007764:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a0d      	ldr	r2, [pc, #52]	; (80077a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800776a:	fb03 f202 	mul.w	r2, r3, r2
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	fbb2 f3f3 	udiv	r3, r2, r3
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	e004      	b.n	8007782 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a0c      	ldr	r2, [pc, #48]	; (80077ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800777c:	fb02 f303 	mul.w	r3, r2, r3
 8007780:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	613b      	str	r3, [r7, #16]
      break;
 8007786:	e002      	b.n	800778e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007788:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800778a:	613b      	str	r3, [r7, #16]
      break;
 800778c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800778e:	693b      	ldr	r3, [r7, #16]
}
 8007790:	4618      	mov	r0, r3
 8007792:	371c      	adds	r7, #28
 8007794:	46bd      	mov	sp, r7
 8007796:	bc80      	pop	{r7}
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	40021000 	.word	0x40021000
 80077a0:	007a1200 	.word	0x007a1200
 80077a4:	0800d19c 	.word	0x0800d19c
 80077a8:	0800d1ac 	.word	0x0800d1ac
 80077ac:	003d0900 	.word	0x003d0900

080077b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077b4:	4b02      	ldr	r3, [pc, #8]	; (80077c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80077b6:	681b      	ldr	r3, [r3, #0]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bc80      	pop	{r7}
 80077be:	4770      	bx	lr
 80077c0:	20000280 	.word	0x20000280

080077c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077c8:	f7ff fff2 	bl	80077b0 <HAL_RCC_GetHCLKFreq>
 80077cc:	4602      	mov	r2, r0
 80077ce:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	0a1b      	lsrs	r3, r3, #8
 80077d4:	f003 0307 	and.w	r3, r3, #7
 80077d8:	4903      	ldr	r1, [pc, #12]	; (80077e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077da:	5ccb      	ldrb	r3, [r1, r3]
 80077dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	40021000 	.word	0x40021000
 80077e8:	0800d194 	.word	0x0800d194

080077ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077f0:	f7ff ffde 	bl	80077b0 <HAL_RCC_GetHCLKFreq>
 80077f4:	4602      	mov	r2, r0
 80077f6:	4b05      	ldr	r3, [pc, #20]	; (800780c <HAL_RCC_GetPCLK2Freq+0x20>)
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	0adb      	lsrs	r3, r3, #11
 80077fc:	f003 0307 	and.w	r3, r3, #7
 8007800:	4903      	ldr	r1, [pc, #12]	; (8007810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007802:	5ccb      	ldrb	r3, [r1, r3]
 8007804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007808:	4618      	mov	r0, r3
 800780a:	bd80      	pop	{r7, pc}
 800780c:	40021000 	.word	0x40021000
 8007810:	0800d194 	.word	0x0800d194

08007814 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800781c:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <RCC_Delay+0x34>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a0a      	ldr	r2, [pc, #40]	; (800784c <RCC_Delay+0x38>)
 8007822:	fba2 2303 	umull	r2, r3, r2, r3
 8007826:	0a5b      	lsrs	r3, r3, #9
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	fb02 f303 	mul.w	r3, r2, r3
 800782e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007830:	bf00      	nop
  }
  while (Delay --);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	1e5a      	subs	r2, r3, #1
 8007836:	60fa      	str	r2, [r7, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1f9      	bne.n	8007830 <RCC_Delay+0x1c>
}
 800783c:	bf00      	nop
 800783e:	bf00      	nop
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	bc80      	pop	{r7}
 8007846:	4770      	bx	lr
 8007848:	20000280 	.word	0x20000280
 800784c:	10624dd3 	.word	0x10624dd3

08007850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e042      	b.n	80078e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d106      	bne.n	800787c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7fe fe24 	bl	80064c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2224      	movs	r2, #36	; 0x24
 8007880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68da      	ldr	r2, [r3, #12]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fe11 	bl	80084bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	691a      	ldr	r2, [r3, #16]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	695a      	ldr	r2, [r3, #20]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2220      	movs	r2, #32
 80078dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08a      	sub	sp, #40	; 0x28
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	603b      	str	r3, [r7, #0]
 80078fc:	4613      	mov	r3, r2
 80078fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b20      	cmp	r3, #32
 800790e:	d17c      	bne.n	8007a0a <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <HAL_UART_Receive+0x2c>
 8007916:	88fb      	ldrh	r3, [r7, #6]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e075      	b.n	8007a0c <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2222      	movs	r2, #34	; 0x22
 800792a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007934:	f7fe ffda 	bl	80068ec <HAL_GetTick>
 8007938:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	88fa      	ldrh	r2, [r7, #6]
 800793e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	88fa      	ldrh	r2, [r7, #6]
 8007944:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794e:	d108      	bne.n	8007962 <HAL_UART_Receive+0x72>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d104      	bne.n	8007962 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8007958:	2300      	movs	r3, #0
 800795a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	61bb      	str	r3, [r7, #24]
 8007960:	e003      	b.n	800796a <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007966:	2300      	movs	r3, #0
 8007968:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800796a:	e043      	b.n	80079f4 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2200      	movs	r2, #0
 8007974:	2120      	movs	r1, #32
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 fb5e 	bl	8008038 <UART_WaitOnFlagUntilTimeout>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e042      	b.n	8007a0c <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10c      	bne.n	80079a6 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	b29b      	uxth	r3, r3
 8007994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007998:	b29a      	uxth	r2, r3
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	3302      	adds	r3, #2
 80079a2:	61bb      	str	r3, [r7, #24]
 80079a4:	e01f      	b.n	80079e6 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ae:	d007      	beq.n	80079c0 <HAL_UART_Receive+0xd0>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <HAL_UART_Receive+0xde>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d106      	bne.n	80079ce <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	701a      	strb	r2, [r3, #0]
 80079cc:	e008      	b.n	80079e0 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	3301      	adds	r3, #1
 80079e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1b6      	bne.n	800796c <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	e000      	b.n	8007a0c <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007a0a:	2302      	movs	r3, #2
  }
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3720      	adds	r7, #32
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b20      	cmp	r3, #32
 8007a2c:	d121      	bne.n	8007a72 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <HAL_UART_Transmit_IT+0x26>
 8007a34:	88fb      	ldrh	r3, [r7, #6]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e01a      	b.n	8007a74 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	88fa      	ldrh	r2, [r7, #6]
 8007a48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	88fa      	ldrh	r2, [r7, #6]
 8007a4e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2221      	movs	r2, #33	; 0x21
 8007a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68da      	ldr	r2, [r3, #12]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a6c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e000      	b.n	8007a74 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007a72:	2302      	movs	r3, #2
  }
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bc80      	pop	{r7}
 8007a7c:	4770      	bx	lr

08007a7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	60b9      	str	r1, [r7, #8]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b20      	cmp	r3, #32
 8007a96:	d112      	bne.n	8007abe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d002      	beq.n	8007aa4 <HAL_UART_Receive_IT+0x26>
 8007a9e:	88fb      	ldrh	r3, [r7, #6]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e00b      	b.n	8007ac0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007aae:	88fb      	ldrh	r3, [r7, #6]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	68b9      	ldr	r1, [r7, #8]
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f000 fb2d 	bl	8008114 <UART_Start_Receive_IT>
 8007aba:	4603      	mov	r3, r0
 8007abc:	e000      	b.n	8007ac0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007abe:	2302      	movs	r3, #2
  }
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b0ba      	sub	sp, #232	; 0xe8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afe:	f003 030f 	and.w	r3, r3, #15
 8007b02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10f      	bne.n	8007b2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b12:	f003 0320 	and.w	r3, r3, #32
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d009      	beq.n	8007b2e <HAL_UART_IRQHandler+0x66>
 8007b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b1e:	f003 0320 	and.w	r3, r3, #32
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fc0a 	bl	8008340 <UART_Receive_IT>
      return;
 8007b2c:	e25b      	b.n	8007fe6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 80de 	beq.w	8007cf4 <HAL_UART_IRQHandler+0x22c>
 8007b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d106      	bne.n	8007b52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 80d1 	beq.w	8007cf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00b      	beq.n	8007b76 <HAL_UART_IRQHandler+0xae>
 8007b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d005      	beq.n	8007b76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b6e:	f043 0201 	orr.w	r2, r3, #1
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00b      	beq.n	8007b9a <HAL_UART_IRQHandler+0xd2>
 8007b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d005      	beq.n	8007b9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b92:	f043 0202 	orr.w	r2, r3, #2
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00b      	beq.n	8007bbe <HAL_UART_IRQHandler+0xf6>
 8007ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d005      	beq.n	8007bbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb6:	f043 0204 	orr.w	r2, r3, #4
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc2:	f003 0308 	and.w	r3, r3, #8
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d011      	beq.n	8007bee <HAL_UART_IRQHandler+0x126>
 8007bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d105      	bne.n	8007be2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d005      	beq.n	8007bee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be6:	f043 0208 	orr.w	r2, r3, #8
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 81f2 	beq.w	8007fdc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bfc:	f003 0320 	and.w	r3, r3, #32
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d008      	beq.n	8007c16 <HAL_UART_IRQHandler+0x14e>
 8007c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c08:	f003 0320 	and.w	r3, r3, #32
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fb95 	bl	8008340 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	bf14      	ite	ne
 8007c24:	2301      	movne	r3, #1
 8007c26:	2300      	moveq	r3, #0
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c32:	f003 0308 	and.w	r3, r3, #8
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d103      	bne.n	8007c42 <HAL_UART_IRQHandler+0x17a>
 8007c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d04f      	beq.n	8007ce2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fa9f 	bl	8008186 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d041      	beq.n	8007cda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3314      	adds	r3, #20
 8007c5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3314      	adds	r3, #20
 8007c7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c92:	e841 2300 	strex	r3, r2, [r1]
 8007c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1d9      	bne.n	8007c56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d013      	beq.n	8007cd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cae:	4a7e      	ldr	r2, [pc, #504]	; (8007ea8 <HAL_UART_IRQHandler+0x3e0>)
 8007cb0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe ff8e 	bl	8006bd8 <HAL_DMA_Abort_IT>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d016      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd0:	e00e      	b.n	8007cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f99c 	bl	8008010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd8:	e00a      	b.n	8007cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f998 	bl	8008010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce0:	e006      	b.n	8007cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f994 	bl	8008010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007cee:	e175      	b.n	8007fdc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cf0:	bf00      	nop
    return;
 8007cf2:	e173      	b.n	8007fdc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	f040 814f 	bne.w	8007f9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d02:	f003 0310 	and.w	r3, r3, #16
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 8148 	beq.w	8007f9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d10:	f003 0310 	and.w	r3, r3, #16
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 8141 	beq.w	8007f9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60bb      	str	r3, [r7, #8]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	60bb      	str	r3, [r7, #8]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	60bb      	str	r3, [r7, #8]
 8007d2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 80b6 	beq.w	8007eac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 8145 	beq.w	8007fe0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	f080 813e 	bcs.w	8007fe0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	2b20      	cmp	r3, #32
 8007d74:	f000 8088 	beq.w	8007e88 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	330c      	adds	r3, #12
 8007d7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d86:	e853 3f00 	ldrex	r3, [r3]
 8007d8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	330c      	adds	r3, #12
 8007da0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007da4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007da8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007db0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007db4:	e841 2300 	strex	r3, r2, [r1]
 8007db8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007dbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1d9      	bne.n	8007d78 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3314      	adds	r3, #20
 8007dca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dce:	e853 3f00 	ldrex	r3, [r3]
 8007dd2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007dd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dd6:	f023 0301 	bic.w	r3, r3, #1
 8007dda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3314      	adds	r3, #20
 8007de4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007de8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007dec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007df0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007dfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1e1      	bne.n	8007dc4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3314      	adds	r3, #20
 8007e06:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e0a:	e853 3f00 	ldrex	r3, [r3]
 8007e0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3314      	adds	r3, #20
 8007e20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e24:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e3      	bne.n	8007e00 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	330c      	adds	r3, #12
 8007e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e58:	f023 0310 	bic.w	r3, r3, #16
 8007e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	330c      	adds	r3, #12
 8007e66:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e6a:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e6c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e72:	e841 2300 	strex	r3, r2, [r1]
 8007e76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e3      	bne.n	8007e46 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe fe6d 	bl	8006b62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f8bf 	bl	8008022 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ea4:	e09c      	b.n	8007fe0 <HAL_UART_IRQHandler+0x518>
 8007ea6:	bf00      	nop
 8007ea8:	0800824b 	.word	0x0800824b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 808e 	beq.w	8007fe4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007ec8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 8089 	beq.w	8007fe4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	330c      	adds	r3, #12
 8007ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	e853 3f00 	ldrex	r3, [r3]
 8007ee0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	330c      	adds	r3, #12
 8007ef2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007ef6:	647a      	str	r2, [r7, #68]	; 0x44
 8007ef8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007efc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007efe:	e841 2300 	strex	r3, r2, [r1]
 8007f02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e3      	bne.n	8007ed2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3314      	adds	r3, #20
 8007f10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	623b      	str	r3, [r7, #32]
   return(result);
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	f023 0301 	bic.w	r3, r3, #1
 8007f20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3314      	adds	r3, #20
 8007f2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f2e:	633a      	str	r2, [r7, #48]	; 0x30
 8007f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e3      	bne.n	8007f0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	330c      	adds	r3, #12
 8007f56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	e853 3f00 	ldrex	r3, [r3]
 8007f5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 0310 	bic.w	r3, r3, #16
 8007f66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	330c      	adds	r3, #12
 8007f70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007f74:	61fa      	str	r2, [r7, #28]
 8007f76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f78:	69b9      	ldr	r1, [r7, #24]
 8007f7a:	69fa      	ldr	r2, [r7, #28]
 8007f7c:	e841 2300 	strex	r3, r2, [r1]
 8007f80:	617b      	str	r3, [r7, #20]
   return(result);
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1e3      	bne.n	8007f50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f844 	bl	8008022 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f9a:	e023      	b.n	8007fe4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d009      	beq.n	8007fbc <HAL_UART_IRQHandler+0x4f4>
 8007fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f95c 	bl	8008272 <UART_Transmit_IT>
    return;
 8007fba:	e014      	b.n	8007fe6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00e      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x51e>
 8007fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d008      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f99b 	bl	8008310 <UART_EndTransmit_IT>
    return;
 8007fda:	e004      	b.n	8007fe6 <HAL_UART_IRQHandler+0x51e>
    return;
 8007fdc:	bf00      	nop
 8007fde:	e002      	b.n	8007fe6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007fe0:	bf00      	nop
 8007fe2:	e000      	b.n	8007fe6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007fe4:	bf00      	nop
  }
}
 8007fe6:	37e8      	adds	r7, #232	; 0xe8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr

08007ffe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	bc80      	pop	{r7}
 800800e:	4770      	bx	lr

08008010 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	bc80      	pop	{r7}
 8008020:	4770      	bx	lr

08008022 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	460b      	mov	r3, r1
 800802c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	bc80      	pop	{r7}
 8008036:	4770      	bx	lr

08008038 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b090      	sub	sp, #64	; 0x40
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	603b      	str	r3, [r7, #0]
 8008044:	4613      	mov	r3, r2
 8008046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008048:	e050      	b.n	80080ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800804a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008050:	d04c      	beq.n	80080ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008054:	2b00      	cmp	r3, #0
 8008056:	d007      	beq.n	8008068 <UART_WaitOnFlagUntilTimeout+0x30>
 8008058:	f7fe fc48 	bl	80068ec <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008064:	429a      	cmp	r2, r3
 8008066:	d241      	bcs.n	80080ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	330c      	adds	r3, #12
 800806e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	e853 3f00 	ldrex	r3, [r3]
 8008076:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800807e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	330c      	adds	r3, #12
 8008086:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008088:	637a      	str	r2, [r7, #52]	; 0x34
 800808a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800808e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008090:	e841 2300 	strex	r3, r2, [r1]
 8008094:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1e5      	bne.n	8008068 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3314      	adds	r3, #20
 80080a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	e853 3f00 	ldrex	r3, [r3]
 80080aa:	613b      	str	r3, [r7, #16]
   return(result);
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	f023 0301 	bic.w	r3, r3, #1
 80080b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3314      	adds	r3, #20
 80080ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080bc:	623a      	str	r2, [r7, #32]
 80080be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c0:	69f9      	ldr	r1, [r7, #28]
 80080c2:	6a3a      	ldr	r2, [r7, #32]
 80080c4:	e841 2300 	strex	r3, r2, [r1]
 80080c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1e5      	bne.n	800809c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2220      	movs	r2, #32
 80080d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2220      	movs	r2, #32
 80080dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e00f      	b.n	800810c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	4013      	ands	r3, r2
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	bf0c      	ite	eq
 80080fc:	2301      	moveq	r3, #1
 80080fe:	2300      	movne	r3, #0
 8008100:	b2db      	uxtb	r3, r3
 8008102:	461a      	mov	r2, r3
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	429a      	cmp	r2, r3
 8008108:	d09f      	beq.n	800804a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3740      	adds	r7, #64	; 0x40
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	4613      	mov	r3, r2
 8008120:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	88fa      	ldrh	r2, [r7, #6]
 800812c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	88fa      	ldrh	r2, [r7, #6]
 8008132:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2222      	movs	r2, #34	; 0x22
 800813e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d007      	beq.n	800815a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008158:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	695a      	ldr	r2, [r3, #20]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f042 0201 	orr.w	r2, r2, #1
 8008168:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68da      	ldr	r2, [r3, #12]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f042 0220 	orr.w	r2, r2, #32
 8008178:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	bc80      	pop	{r7}
 8008184:	4770      	bx	lr

08008186 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008186:	b480      	push	{r7}
 8008188:	b095      	sub	sp, #84	; 0x54
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	330c      	adds	r3, #12
 8008194:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	330c      	adds	r3, #12
 80081ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081ae:	643a      	str	r2, [r7, #64]	; 0x40
 80081b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081b6:	e841 2300 	strex	r3, r2, [r1]
 80081ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1e5      	bne.n	800818e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	3314      	adds	r3, #20
 80081c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ca:	6a3b      	ldr	r3, [r7, #32]
 80081cc:	e853 3f00 	ldrex	r3, [r3]
 80081d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	f023 0301 	bic.w	r3, r3, #1
 80081d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3314      	adds	r3, #20
 80081e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ea:	e841 2300 	strex	r3, r2, [r1]
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1e5      	bne.n	80081c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d119      	bne.n	8008232 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	330c      	adds	r3, #12
 8008204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	e853 3f00 	ldrex	r3, [r3]
 800820c:	60bb      	str	r3, [r7, #8]
   return(result);
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f023 0310 	bic.w	r3, r3, #16
 8008214:	647b      	str	r3, [r7, #68]	; 0x44
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	330c      	adds	r3, #12
 800821c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800821e:	61ba      	str	r2, [r7, #24]
 8008220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008222:	6979      	ldr	r1, [r7, #20]
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	e841 2300 	strex	r3, r2, [r1]
 800822a:	613b      	str	r3, [r7, #16]
   return(result);
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1e5      	bne.n	80081fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2220      	movs	r2, #32
 8008236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008240:	bf00      	nop
 8008242:	3754      	adds	r7, #84	; 0x54
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	4770      	bx	lr

0800824a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f7ff fed3 	bl	8008010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008272:	b480      	push	{r7}
 8008274:	b085      	sub	sp, #20
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b21      	cmp	r3, #33	; 0x21
 8008284:	d13e      	bne.n	8008304 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800828e:	d114      	bne.n	80082ba <UART_Transmit_IT+0x48>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d110      	bne.n	80082ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	1c9a      	adds	r2, r3, #2
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	621a      	str	r2, [r3, #32]
 80082b8:	e008      	b.n	80082cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	1c59      	adds	r1, r3, #1
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	6211      	str	r1, [r2, #32]
 80082c4:	781a      	ldrb	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	3b01      	subs	r3, #1
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	4619      	mov	r1, r3
 80082da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10f      	bne.n	8008300 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68da      	ldr	r2, [r3, #12]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	e000      	b.n	8008306 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008304:	2302      	movs	r3, #2
  }
}
 8008306:	4618      	mov	r0, r3
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	bc80      	pop	{r7}
 800830e:	4770      	bx	lr

08008310 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68da      	ldr	r2, [r3, #12]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008326:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2220      	movs	r2, #32
 800832c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7ff fe5b 	bl	8007fec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08c      	sub	sp, #48	; 0x30
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b22      	cmp	r3, #34	; 0x22
 8008352:	f040 80ae 	bne.w	80084b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800835e:	d117      	bne.n	8008390 <UART_Receive_IT+0x50>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d113      	bne.n	8008390 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008368:	2300      	movs	r3, #0
 800836a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008370:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	b29b      	uxth	r3, r3
 800837a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800837e:	b29a      	uxth	r2, r3
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008388:	1c9a      	adds	r2, r3, #2
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	629a      	str	r2, [r3, #40]	; 0x28
 800838e:	e026      	b.n	80083de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008394:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008396:	2300      	movs	r3, #0
 8008398:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a2:	d007      	beq.n	80083b4 <UART_Receive_IT+0x74>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10a      	bne.n	80083c2 <UART_Receive_IT+0x82>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d106      	bne.n	80083c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083be:	701a      	strb	r2, [r3, #0]
 80083c0:	e008      	b.n	80083d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	3b01      	subs	r3, #1
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	4619      	mov	r1, r3
 80083ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d15d      	bne.n	80084ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68da      	ldr	r2, [r3, #12]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f022 0220 	bic.w	r2, r2, #32
 8008400:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68da      	ldr	r2, [r3, #12]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008410:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	695a      	ldr	r2, [r3, #20]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 0201 	bic.w	r2, r2, #1
 8008420:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2220      	movs	r2, #32
 8008426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008434:	2b01      	cmp	r3, #1
 8008436:	d135      	bne.n	80084a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	330c      	adds	r3, #12
 8008444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	613b      	str	r3, [r7, #16]
   return(result);
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	f023 0310 	bic.w	r3, r3, #16
 8008454:	627b      	str	r3, [r7, #36]	; 0x24
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	330c      	adds	r3, #12
 800845c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800845e:	623a      	str	r2, [r7, #32]
 8008460:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008462:	69f9      	ldr	r1, [r7, #28]
 8008464:	6a3a      	ldr	r2, [r7, #32]
 8008466:	e841 2300 	strex	r3, r2, [r1]
 800846a:	61bb      	str	r3, [r7, #24]
   return(result);
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1e5      	bne.n	800843e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0310 	and.w	r3, r3, #16
 800847c:	2b10      	cmp	r3, #16
 800847e:	d10a      	bne.n	8008496 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff fdc0 	bl	8008022 <HAL_UARTEx_RxEventCallback>
 80084a2:	e002      	b.n	80084aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7ff fdaa 	bl	8007ffe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	e002      	b.n	80084b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	e000      	b.n	80084b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80084b2:	2302      	movs	r3, #2
  }
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3730      	adds	r7, #48	; 0x30
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	689a      	ldr	r2, [r3, #8]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80084f6:	f023 030c 	bic.w	r3, r3, #12
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	6812      	ldr	r2, [r2, #0]
 80084fe:	68b9      	ldr	r1, [r7, #8]
 8008500:	430b      	orrs	r3, r1
 8008502:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	699a      	ldr	r2, [r3, #24]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a2c      	ldr	r2, [pc, #176]	; (80085d0 <UART_SetConfig+0x114>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d103      	bne.n	800852c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008524:	f7ff f962 	bl	80077ec <HAL_RCC_GetPCLK2Freq>
 8008528:	60f8      	str	r0, [r7, #12]
 800852a:	e002      	b.n	8008532 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800852c:	f7ff f94a 	bl	80077c4 <HAL_RCC_GetPCLK1Freq>
 8008530:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	4613      	mov	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	009a      	lsls	r2, r3, #2
 800853c:	441a      	add	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	fbb2 f3f3 	udiv	r3, r2, r3
 8008548:	4a22      	ldr	r2, [pc, #136]	; (80085d4 <UART_SetConfig+0x118>)
 800854a:	fba2 2303 	umull	r2, r3, r2, r3
 800854e:	095b      	lsrs	r3, r3, #5
 8008550:	0119      	lsls	r1, r3, #4
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	4613      	mov	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	009a      	lsls	r2, r3, #2
 800855c:	441a      	add	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	fbb2 f2f3 	udiv	r2, r2, r3
 8008568:	4b1a      	ldr	r3, [pc, #104]	; (80085d4 <UART_SetConfig+0x118>)
 800856a:	fba3 0302 	umull	r0, r3, r3, r2
 800856e:	095b      	lsrs	r3, r3, #5
 8008570:	2064      	movs	r0, #100	; 0x64
 8008572:	fb00 f303 	mul.w	r3, r0, r3
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	011b      	lsls	r3, r3, #4
 800857a:	3332      	adds	r3, #50	; 0x32
 800857c:	4a15      	ldr	r2, [pc, #84]	; (80085d4 <UART_SetConfig+0x118>)
 800857e:	fba2 2303 	umull	r2, r3, r2, r3
 8008582:	095b      	lsrs	r3, r3, #5
 8008584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008588:	4419      	add	r1, r3
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	4613      	mov	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	009a      	lsls	r2, r3, #2
 8008594:	441a      	add	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	fbb2 f2f3 	udiv	r2, r2, r3
 80085a0:	4b0c      	ldr	r3, [pc, #48]	; (80085d4 <UART_SetConfig+0x118>)
 80085a2:	fba3 0302 	umull	r0, r3, r3, r2
 80085a6:	095b      	lsrs	r3, r3, #5
 80085a8:	2064      	movs	r0, #100	; 0x64
 80085aa:	fb00 f303 	mul.w	r3, r0, r3
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	3332      	adds	r3, #50	; 0x32
 80085b4:	4a07      	ldr	r2, [pc, #28]	; (80085d4 <UART_SetConfig+0x118>)
 80085b6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ba:	095b      	lsrs	r3, r3, #5
 80085bc:	f003 020f 	and.w	r2, r3, #15
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	440a      	add	r2, r1
 80085c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80085c8:	bf00      	nop
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	40013800 	.word	0x40013800
 80085d4:	51eb851f 	.word	0x51eb851f

080085d8 <calloc>:
 80085d8:	4b02      	ldr	r3, [pc, #8]	; (80085e4 <calloc+0xc>)
 80085da:	460a      	mov	r2, r1
 80085dc:	4601      	mov	r1, r0
 80085de:	6818      	ldr	r0, [r3, #0]
 80085e0:	f000 b84e 	b.w	8008680 <_calloc_r>
 80085e4:	2000028c 	.word	0x2000028c

080085e8 <__errno>:
 80085e8:	4b01      	ldr	r3, [pc, #4]	; (80085f0 <__errno+0x8>)
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	2000028c 	.word	0x2000028c

080085f4 <__libc_init_array>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	2600      	movs	r6, #0
 80085f8:	4d0c      	ldr	r5, [pc, #48]	; (800862c <__libc_init_array+0x38>)
 80085fa:	4c0d      	ldr	r4, [pc, #52]	; (8008630 <__libc_init_array+0x3c>)
 80085fc:	1b64      	subs	r4, r4, r5
 80085fe:	10a4      	asrs	r4, r4, #2
 8008600:	42a6      	cmp	r6, r4
 8008602:	d109      	bne.n	8008618 <__libc_init_array+0x24>
 8008604:	f004 fc50 	bl	800cea8 <_init>
 8008608:	2600      	movs	r6, #0
 800860a:	4d0a      	ldr	r5, [pc, #40]	; (8008634 <__libc_init_array+0x40>)
 800860c:	4c0a      	ldr	r4, [pc, #40]	; (8008638 <__libc_init_array+0x44>)
 800860e:	1b64      	subs	r4, r4, r5
 8008610:	10a4      	asrs	r4, r4, #2
 8008612:	42a6      	cmp	r6, r4
 8008614:	d105      	bne.n	8008622 <__libc_init_array+0x2e>
 8008616:	bd70      	pop	{r4, r5, r6, pc}
 8008618:	f855 3b04 	ldr.w	r3, [r5], #4
 800861c:	4798      	blx	r3
 800861e:	3601      	adds	r6, #1
 8008620:	e7ee      	b.n	8008600 <__libc_init_array+0xc>
 8008622:	f855 3b04 	ldr.w	r3, [r5], #4
 8008626:	4798      	blx	r3
 8008628:	3601      	adds	r6, #1
 800862a:	e7f2      	b.n	8008612 <__libc_init_array+0x1e>
 800862c:	0800d65c 	.word	0x0800d65c
 8008630:	0800d65c 	.word	0x0800d65c
 8008634:	0800d65c 	.word	0x0800d65c
 8008638:	0800d660 	.word	0x0800d660

0800863c <__retarget_lock_init_recursive>:
 800863c:	4770      	bx	lr

0800863e <__retarget_lock_acquire_recursive>:
 800863e:	4770      	bx	lr

08008640 <__retarget_lock_release_recursive>:
 8008640:	4770      	bx	lr
	...

08008644 <malloc>:
 8008644:	4b02      	ldr	r3, [pc, #8]	; (8008650 <malloc+0xc>)
 8008646:	4601      	mov	r1, r0
 8008648:	6818      	ldr	r0, [r3, #0]
 800864a:	f000 b895 	b.w	8008778 <_malloc_r>
 800864e:	bf00      	nop
 8008650:	2000028c 	.word	0x2000028c

08008654 <memcpy>:
 8008654:	440a      	add	r2, r1
 8008656:	4291      	cmp	r1, r2
 8008658:	f100 33ff 	add.w	r3, r0, #4294967295
 800865c:	d100      	bne.n	8008660 <memcpy+0xc>
 800865e:	4770      	bx	lr
 8008660:	b510      	push	{r4, lr}
 8008662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008666:	4291      	cmp	r1, r2
 8008668:	f803 4f01 	strb.w	r4, [r3, #1]!
 800866c:	d1f9      	bne.n	8008662 <memcpy+0xe>
 800866e:	bd10      	pop	{r4, pc}

08008670 <memset>:
 8008670:	4603      	mov	r3, r0
 8008672:	4402      	add	r2, r0
 8008674:	4293      	cmp	r3, r2
 8008676:	d100      	bne.n	800867a <memset+0xa>
 8008678:	4770      	bx	lr
 800867a:	f803 1b01 	strb.w	r1, [r3], #1
 800867e:	e7f9      	b.n	8008674 <memset+0x4>

08008680 <_calloc_r>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	fba1 5402 	umull	r5, r4, r1, r2
 8008686:	b934      	cbnz	r4, 8008696 <_calloc_r+0x16>
 8008688:	4629      	mov	r1, r5
 800868a:	f000 f875 	bl	8008778 <_malloc_r>
 800868e:	4606      	mov	r6, r0
 8008690:	b928      	cbnz	r0, 800869e <_calloc_r+0x1e>
 8008692:	4630      	mov	r0, r6
 8008694:	bd70      	pop	{r4, r5, r6, pc}
 8008696:	220c      	movs	r2, #12
 8008698:	2600      	movs	r6, #0
 800869a:	6002      	str	r2, [r0, #0]
 800869c:	e7f9      	b.n	8008692 <_calloc_r+0x12>
 800869e:	462a      	mov	r2, r5
 80086a0:	4621      	mov	r1, r4
 80086a2:	f7ff ffe5 	bl	8008670 <memset>
 80086a6:	e7f4      	b.n	8008692 <_calloc_r+0x12>

080086a8 <_free_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	4605      	mov	r5, r0
 80086ac:	2900      	cmp	r1, #0
 80086ae:	d040      	beq.n	8008732 <_free_r+0x8a>
 80086b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086b4:	1f0c      	subs	r4, r1, #4
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	bfb8      	it	lt
 80086ba:	18e4      	addlt	r4, r4, r3
 80086bc:	f003 fa1e 	bl	800bafc <__malloc_lock>
 80086c0:	4a1c      	ldr	r2, [pc, #112]	; (8008734 <_free_r+0x8c>)
 80086c2:	6813      	ldr	r3, [r2, #0]
 80086c4:	b933      	cbnz	r3, 80086d4 <_free_r+0x2c>
 80086c6:	6063      	str	r3, [r4, #4]
 80086c8:	6014      	str	r4, [r2, #0]
 80086ca:	4628      	mov	r0, r5
 80086cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086d0:	f003 ba1a 	b.w	800bb08 <__malloc_unlock>
 80086d4:	42a3      	cmp	r3, r4
 80086d6:	d908      	bls.n	80086ea <_free_r+0x42>
 80086d8:	6820      	ldr	r0, [r4, #0]
 80086da:	1821      	adds	r1, r4, r0
 80086dc:	428b      	cmp	r3, r1
 80086de:	bf01      	itttt	eq
 80086e0:	6819      	ldreq	r1, [r3, #0]
 80086e2:	685b      	ldreq	r3, [r3, #4]
 80086e4:	1809      	addeq	r1, r1, r0
 80086e6:	6021      	streq	r1, [r4, #0]
 80086e8:	e7ed      	b.n	80086c6 <_free_r+0x1e>
 80086ea:	461a      	mov	r2, r3
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	b10b      	cbz	r3, 80086f4 <_free_r+0x4c>
 80086f0:	42a3      	cmp	r3, r4
 80086f2:	d9fa      	bls.n	80086ea <_free_r+0x42>
 80086f4:	6811      	ldr	r1, [r2, #0]
 80086f6:	1850      	adds	r0, r2, r1
 80086f8:	42a0      	cmp	r0, r4
 80086fa:	d10b      	bne.n	8008714 <_free_r+0x6c>
 80086fc:	6820      	ldr	r0, [r4, #0]
 80086fe:	4401      	add	r1, r0
 8008700:	1850      	adds	r0, r2, r1
 8008702:	4283      	cmp	r3, r0
 8008704:	6011      	str	r1, [r2, #0]
 8008706:	d1e0      	bne.n	80086ca <_free_r+0x22>
 8008708:	6818      	ldr	r0, [r3, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	4401      	add	r1, r0
 800870e:	6011      	str	r1, [r2, #0]
 8008710:	6053      	str	r3, [r2, #4]
 8008712:	e7da      	b.n	80086ca <_free_r+0x22>
 8008714:	d902      	bls.n	800871c <_free_r+0x74>
 8008716:	230c      	movs	r3, #12
 8008718:	602b      	str	r3, [r5, #0]
 800871a:	e7d6      	b.n	80086ca <_free_r+0x22>
 800871c:	6820      	ldr	r0, [r4, #0]
 800871e:	1821      	adds	r1, r4, r0
 8008720:	428b      	cmp	r3, r1
 8008722:	bf01      	itttt	eq
 8008724:	6819      	ldreq	r1, [r3, #0]
 8008726:	685b      	ldreq	r3, [r3, #4]
 8008728:	1809      	addeq	r1, r1, r0
 800872a:	6021      	streq	r1, [r4, #0]
 800872c:	6063      	str	r3, [r4, #4]
 800872e:	6054      	str	r4, [r2, #4]
 8008730:	e7cb      	b.n	80086ca <_free_r+0x22>
 8008732:	bd38      	pop	{r3, r4, r5, pc}
 8008734:	2000051c 	.word	0x2000051c

08008738 <sbrk_aligned>:
 8008738:	b570      	push	{r4, r5, r6, lr}
 800873a:	4e0e      	ldr	r6, [pc, #56]	; (8008774 <sbrk_aligned+0x3c>)
 800873c:	460c      	mov	r4, r1
 800873e:	6831      	ldr	r1, [r6, #0]
 8008740:	4605      	mov	r5, r0
 8008742:	b911      	cbnz	r1, 800874a <sbrk_aligned+0x12>
 8008744:	f000 fefa 	bl	800953c <_sbrk_r>
 8008748:	6030      	str	r0, [r6, #0]
 800874a:	4621      	mov	r1, r4
 800874c:	4628      	mov	r0, r5
 800874e:	f000 fef5 	bl	800953c <_sbrk_r>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	d00a      	beq.n	800876c <sbrk_aligned+0x34>
 8008756:	1cc4      	adds	r4, r0, #3
 8008758:	f024 0403 	bic.w	r4, r4, #3
 800875c:	42a0      	cmp	r0, r4
 800875e:	d007      	beq.n	8008770 <sbrk_aligned+0x38>
 8008760:	1a21      	subs	r1, r4, r0
 8008762:	4628      	mov	r0, r5
 8008764:	f000 feea 	bl	800953c <_sbrk_r>
 8008768:	3001      	adds	r0, #1
 800876a:	d101      	bne.n	8008770 <sbrk_aligned+0x38>
 800876c:	f04f 34ff 	mov.w	r4, #4294967295
 8008770:	4620      	mov	r0, r4
 8008772:	bd70      	pop	{r4, r5, r6, pc}
 8008774:	20000520 	.word	0x20000520

08008778 <_malloc_r>:
 8008778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800877c:	1ccd      	adds	r5, r1, #3
 800877e:	f025 0503 	bic.w	r5, r5, #3
 8008782:	3508      	adds	r5, #8
 8008784:	2d0c      	cmp	r5, #12
 8008786:	bf38      	it	cc
 8008788:	250c      	movcc	r5, #12
 800878a:	2d00      	cmp	r5, #0
 800878c:	4607      	mov	r7, r0
 800878e:	db01      	blt.n	8008794 <_malloc_r+0x1c>
 8008790:	42a9      	cmp	r1, r5
 8008792:	d905      	bls.n	80087a0 <_malloc_r+0x28>
 8008794:	230c      	movs	r3, #12
 8008796:	2600      	movs	r6, #0
 8008798:	603b      	str	r3, [r7, #0]
 800879a:	4630      	mov	r0, r6
 800879c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a0:	4e2e      	ldr	r6, [pc, #184]	; (800885c <_malloc_r+0xe4>)
 80087a2:	f003 f9ab 	bl	800bafc <__malloc_lock>
 80087a6:	6833      	ldr	r3, [r6, #0]
 80087a8:	461c      	mov	r4, r3
 80087aa:	bb34      	cbnz	r4, 80087fa <_malloc_r+0x82>
 80087ac:	4629      	mov	r1, r5
 80087ae:	4638      	mov	r0, r7
 80087b0:	f7ff ffc2 	bl	8008738 <sbrk_aligned>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	4604      	mov	r4, r0
 80087b8:	d14d      	bne.n	8008856 <_malloc_r+0xde>
 80087ba:	6834      	ldr	r4, [r6, #0]
 80087bc:	4626      	mov	r6, r4
 80087be:	2e00      	cmp	r6, #0
 80087c0:	d140      	bne.n	8008844 <_malloc_r+0xcc>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	4631      	mov	r1, r6
 80087c6:	4638      	mov	r0, r7
 80087c8:	eb04 0803 	add.w	r8, r4, r3
 80087cc:	f000 feb6 	bl	800953c <_sbrk_r>
 80087d0:	4580      	cmp	r8, r0
 80087d2:	d13a      	bne.n	800884a <_malloc_r+0xd2>
 80087d4:	6821      	ldr	r1, [r4, #0]
 80087d6:	3503      	adds	r5, #3
 80087d8:	1a6d      	subs	r5, r5, r1
 80087da:	f025 0503 	bic.w	r5, r5, #3
 80087de:	3508      	adds	r5, #8
 80087e0:	2d0c      	cmp	r5, #12
 80087e2:	bf38      	it	cc
 80087e4:	250c      	movcc	r5, #12
 80087e6:	4638      	mov	r0, r7
 80087e8:	4629      	mov	r1, r5
 80087ea:	f7ff ffa5 	bl	8008738 <sbrk_aligned>
 80087ee:	3001      	adds	r0, #1
 80087f0:	d02b      	beq.n	800884a <_malloc_r+0xd2>
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	442b      	add	r3, r5
 80087f6:	6023      	str	r3, [r4, #0]
 80087f8:	e00e      	b.n	8008818 <_malloc_r+0xa0>
 80087fa:	6822      	ldr	r2, [r4, #0]
 80087fc:	1b52      	subs	r2, r2, r5
 80087fe:	d41e      	bmi.n	800883e <_malloc_r+0xc6>
 8008800:	2a0b      	cmp	r2, #11
 8008802:	d916      	bls.n	8008832 <_malloc_r+0xba>
 8008804:	1961      	adds	r1, r4, r5
 8008806:	42a3      	cmp	r3, r4
 8008808:	6025      	str	r5, [r4, #0]
 800880a:	bf18      	it	ne
 800880c:	6059      	strne	r1, [r3, #4]
 800880e:	6863      	ldr	r3, [r4, #4]
 8008810:	bf08      	it	eq
 8008812:	6031      	streq	r1, [r6, #0]
 8008814:	5162      	str	r2, [r4, r5]
 8008816:	604b      	str	r3, [r1, #4]
 8008818:	4638      	mov	r0, r7
 800881a:	f104 060b 	add.w	r6, r4, #11
 800881e:	f003 f973 	bl	800bb08 <__malloc_unlock>
 8008822:	f026 0607 	bic.w	r6, r6, #7
 8008826:	1d23      	adds	r3, r4, #4
 8008828:	1af2      	subs	r2, r6, r3
 800882a:	d0b6      	beq.n	800879a <_malloc_r+0x22>
 800882c:	1b9b      	subs	r3, r3, r6
 800882e:	50a3      	str	r3, [r4, r2]
 8008830:	e7b3      	b.n	800879a <_malloc_r+0x22>
 8008832:	6862      	ldr	r2, [r4, #4]
 8008834:	42a3      	cmp	r3, r4
 8008836:	bf0c      	ite	eq
 8008838:	6032      	streq	r2, [r6, #0]
 800883a:	605a      	strne	r2, [r3, #4]
 800883c:	e7ec      	b.n	8008818 <_malloc_r+0xa0>
 800883e:	4623      	mov	r3, r4
 8008840:	6864      	ldr	r4, [r4, #4]
 8008842:	e7b2      	b.n	80087aa <_malloc_r+0x32>
 8008844:	4634      	mov	r4, r6
 8008846:	6876      	ldr	r6, [r6, #4]
 8008848:	e7b9      	b.n	80087be <_malloc_r+0x46>
 800884a:	230c      	movs	r3, #12
 800884c:	4638      	mov	r0, r7
 800884e:	603b      	str	r3, [r7, #0]
 8008850:	f003 f95a 	bl	800bb08 <__malloc_unlock>
 8008854:	e7a1      	b.n	800879a <_malloc_r+0x22>
 8008856:	6025      	str	r5, [r4, #0]
 8008858:	e7de      	b.n	8008818 <_malloc_r+0xa0>
 800885a:	bf00      	nop
 800885c:	2000051c 	.word	0x2000051c

08008860 <__cvt>:
 8008860:	2b00      	cmp	r3, #0
 8008862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008866:	461f      	mov	r7, r3
 8008868:	bfbb      	ittet	lt
 800886a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800886e:	461f      	movlt	r7, r3
 8008870:	2300      	movge	r3, #0
 8008872:	232d      	movlt	r3, #45	; 0x2d
 8008874:	b088      	sub	sp, #32
 8008876:	4614      	mov	r4, r2
 8008878:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800887a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800887c:	7013      	strb	r3, [r2, #0]
 800887e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008880:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008884:	f023 0820 	bic.w	r8, r3, #32
 8008888:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800888c:	d005      	beq.n	800889a <__cvt+0x3a>
 800888e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008892:	d100      	bne.n	8008896 <__cvt+0x36>
 8008894:	3501      	adds	r5, #1
 8008896:	2302      	movs	r3, #2
 8008898:	e000      	b.n	800889c <__cvt+0x3c>
 800889a:	2303      	movs	r3, #3
 800889c:	aa07      	add	r2, sp, #28
 800889e:	9204      	str	r2, [sp, #16]
 80088a0:	aa06      	add	r2, sp, #24
 80088a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80088a6:	e9cd 3500 	strd	r3, r5, [sp]
 80088aa:	4622      	mov	r2, r4
 80088ac:	463b      	mov	r3, r7
 80088ae:	f001 fd93 	bl	800a3d8 <_dtoa_r>
 80088b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80088b6:	4606      	mov	r6, r0
 80088b8:	d102      	bne.n	80088c0 <__cvt+0x60>
 80088ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088bc:	07db      	lsls	r3, r3, #31
 80088be:	d522      	bpl.n	8008906 <__cvt+0xa6>
 80088c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088c4:	eb06 0905 	add.w	r9, r6, r5
 80088c8:	d110      	bne.n	80088ec <__cvt+0x8c>
 80088ca:	7833      	ldrb	r3, [r6, #0]
 80088cc:	2b30      	cmp	r3, #48	; 0x30
 80088ce:	d10a      	bne.n	80088e6 <__cvt+0x86>
 80088d0:	2200      	movs	r2, #0
 80088d2:	2300      	movs	r3, #0
 80088d4:	4620      	mov	r0, r4
 80088d6:	4639      	mov	r1, r7
 80088d8:	f7f8 f866 	bl	80009a8 <__aeabi_dcmpeq>
 80088dc:	b918      	cbnz	r0, 80088e6 <__cvt+0x86>
 80088de:	f1c5 0501 	rsb	r5, r5, #1
 80088e2:	f8ca 5000 	str.w	r5, [sl]
 80088e6:	f8da 3000 	ldr.w	r3, [sl]
 80088ea:	4499      	add	r9, r3
 80088ec:	2200      	movs	r2, #0
 80088ee:	2300      	movs	r3, #0
 80088f0:	4620      	mov	r0, r4
 80088f2:	4639      	mov	r1, r7
 80088f4:	f7f8 f858 	bl	80009a8 <__aeabi_dcmpeq>
 80088f8:	b108      	cbz	r0, 80088fe <__cvt+0x9e>
 80088fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80088fe:	2230      	movs	r2, #48	; 0x30
 8008900:	9b07      	ldr	r3, [sp, #28]
 8008902:	454b      	cmp	r3, r9
 8008904:	d307      	bcc.n	8008916 <__cvt+0xb6>
 8008906:	4630      	mov	r0, r6
 8008908:	9b07      	ldr	r3, [sp, #28]
 800890a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800890c:	1b9b      	subs	r3, r3, r6
 800890e:	6013      	str	r3, [r2, #0]
 8008910:	b008      	add	sp, #32
 8008912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008916:	1c59      	adds	r1, r3, #1
 8008918:	9107      	str	r1, [sp, #28]
 800891a:	701a      	strb	r2, [r3, #0]
 800891c:	e7f0      	b.n	8008900 <__cvt+0xa0>

0800891e <__exponent>:
 800891e:	4603      	mov	r3, r0
 8008920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008922:	2900      	cmp	r1, #0
 8008924:	f803 2b02 	strb.w	r2, [r3], #2
 8008928:	bfb6      	itet	lt
 800892a:	222d      	movlt	r2, #45	; 0x2d
 800892c:	222b      	movge	r2, #43	; 0x2b
 800892e:	4249      	neglt	r1, r1
 8008930:	2909      	cmp	r1, #9
 8008932:	7042      	strb	r2, [r0, #1]
 8008934:	dd2b      	ble.n	800898e <__exponent+0x70>
 8008936:	f10d 0407 	add.w	r4, sp, #7
 800893a:	46a4      	mov	ip, r4
 800893c:	270a      	movs	r7, #10
 800893e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008942:	460a      	mov	r2, r1
 8008944:	46a6      	mov	lr, r4
 8008946:	fb07 1516 	mls	r5, r7, r6, r1
 800894a:	2a63      	cmp	r2, #99	; 0x63
 800894c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008950:	4631      	mov	r1, r6
 8008952:	f104 34ff 	add.w	r4, r4, #4294967295
 8008956:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800895a:	dcf0      	bgt.n	800893e <__exponent+0x20>
 800895c:	3130      	adds	r1, #48	; 0x30
 800895e:	f1ae 0502 	sub.w	r5, lr, #2
 8008962:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008966:	4629      	mov	r1, r5
 8008968:	1c44      	adds	r4, r0, #1
 800896a:	4561      	cmp	r1, ip
 800896c:	d30a      	bcc.n	8008984 <__exponent+0x66>
 800896e:	f10d 0209 	add.w	r2, sp, #9
 8008972:	eba2 020e 	sub.w	r2, r2, lr
 8008976:	4565      	cmp	r5, ip
 8008978:	bf88      	it	hi
 800897a:	2200      	movhi	r2, #0
 800897c:	4413      	add	r3, r2
 800897e:	1a18      	subs	r0, r3, r0
 8008980:	b003      	add	sp, #12
 8008982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008984:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008988:	f804 2f01 	strb.w	r2, [r4, #1]!
 800898c:	e7ed      	b.n	800896a <__exponent+0x4c>
 800898e:	2330      	movs	r3, #48	; 0x30
 8008990:	3130      	adds	r1, #48	; 0x30
 8008992:	7083      	strb	r3, [r0, #2]
 8008994:	70c1      	strb	r1, [r0, #3]
 8008996:	1d03      	adds	r3, r0, #4
 8008998:	e7f1      	b.n	800897e <__exponent+0x60>
	...

0800899c <_printf_float>:
 800899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	b091      	sub	sp, #68	; 0x44
 80089a2:	460c      	mov	r4, r1
 80089a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80089a8:	4616      	mov	r6, r2
 80089aa:	461f      	mov	r7, r3
 80089ac:	4605      	mov	r5, r0
 80089ae:	f003 f81b 	bl	800b9e8 <_localeconv_r>
 80089b2:	6803      	ldr	r3, [r0, #0]
 80089b4:	4618      	mov	r0, r3
 80089b6:	9309      	str	r3, [sp, #36]	; 0x24
 80089b8:	f7f7 fbca 	bl	8000150 <strlen>
 80089bc:	2300      	movs	r3, #0
 80089be:	930e      	str	r3, [sp, #56]	; 0x38
 80089c0:	f8d8 3000 	ldr.w	r3, [r8]
 80089c4:	900a      	str	r0, [sp, #40]	; 0x28
 80089c6:	3307      	adds	r3, #7
 80089c8:	f023 0307 	bic.w	r3, r3, #7
 80089cc:	f103 0208 	add.w	r2, r3, #8
 80089d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80089d4:	f8d4 b000 	ldr.w	fp, [r4]
 80089d8:	f8c8 2000 	str.w	r2, [r8]
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80089e4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80089e8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80089ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80089ee:	f04f 32ff 	mov.w	r2, #4294967295
 80089f2:	4640      	mov	r0, r8
 80089f4:	4b9c      	ldr	r3, [pc, #624]	; (8008c68 <_printf_float+0x2cc>)
 80089f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089f8:	f7f8 f808 	bl	8000a0c <__aeabi_dcmpun>
 80089fc:	bb70      	cbnz	r0, 8008a5c <_printf_float+0xc0>
 80089fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008a02:	4640      	mov	r0, r8
 8008a04:	4b98      	ldr	r3, [pc, #608]	; (8008c68 <_printf_float+0x2cc>)
 8008a06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a08:	f7f7 ffe2 	bl	80009d0 <__aeabi_dcmple>
 8008a0c:	bb30      	cbnz	r0, 8008a5c <_printf_float+0xc0>
 8008a0e:	2200      	movs	r2, #0
 8008a10:	2300      	movs	r3, #0
 8008a12:	4640      	mov	r0, r8
 8008a14:	4651      	mov	r1, sl
 8008a16:	f7f7 ffd1 	bl	80009bc <__aeabi_dcmplt>
 8008a1a:	b110      	cbz	r0, 8008a22 <_printf_float+0x86>
 8008a1c:	232d      	movs	r3, #45	; 0x2d
 8008a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a22:	4b92      	ldr	r3, [pc, #584]	; (8008c6c <_printf_float+0x2d0>)
 8008a24:	4892      	ldr	r0, [pc, #584]	; (8008c70 <_printf_float+0x2d4>)
 8008a26:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008a2a:	bf94      	ite	ls
 8008a2c:	4698      	movls	r8, r3
 8008a2e:	4680      	movhi	r8, r0
 8008a30:	2303      	movs	r3, #3
 8008a32:	f04f 0a00 	mov.w	sl, #0
 8008a36:	6123      	str	r3, [r4, #16]
 8008a38:	f02b 0304 	bic.w	r3, fp, #4
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	4633      	mov	r3, r6
 8008a40:	4621      	mov	r1, r4
 8008a42:	4628      	mov	r0, r5
 8008a44:	9700      	str	r7, [sp, #0]
 8008a46:	aa0f      	add	r2, sp, #60	; 0x3c
 8008a48:	f000 f9d4 	bl	8008df4 <_printf_common>
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	f040 8090 	bne.w	8008b72 <_printf_float+0x1d6>
 8008a52:	f04f 30ff 	mov.w	r0, #4294967295
 8008a56:	b011      	add	sp, #68	; 0x44
 8008a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a5c:	4642      	mov	r2, r8
 8008a5e:	4653      	mov	r3, sl
 8008a60:	4640      	mov	r0, r8
 8008a62:	4651      	mov	r1, sl
 8008a64:	f7f7 ffd2 	bl	8000a0c <__aeabi_dcmpun>
 8008a68:	b148      	cbz	r0, 8008a7e <_printf_float+0xe2>
 8008a6a:	f1ba 0f00 	cmp.w	sl, #0
 8008a6e:	bfb8      	it	lt
 8008a70:	232d      	movlt	r3, #45	; 0x2d
 8008a72:	4880      	ldr	r0, [pc, #512]	; (8008c74 <_printf_float+0x2d8>)
 8008a74:	bfb8      	it	lt
 8008a76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a7a:	4b7f      	ldr	r3, [pc, #508]	; (8008c78 <_printf_float+0x2dc>)
 8008a7c:	e7d3      	b.n	8008a26 <_printf_float+0x8a>
 8008a7e:	6863      	ldr	r3, [r4, #4]
 8008a80:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008a84:	1c5a      	adds	r2, r3, #1
 8008a86:	d142      	bne.n	8008b0e <_printf_float+0x172>
 8008a88:	2306      	movs	r3, #6
 8008a8a:	6063      	str	r3, [r4, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	9206      	str	r2, [sp, #24]
 8008a90:	aa0e      	add	r2, sp, #56	; 0x38
 8008a92:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008a96:	aa0d      	add	r2, sp, #52	; 0x34
 8008a98:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008a9c:	9203      	str	r2, [sp, #12]
 8008a9e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008aa2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008aa6:	6023      	str	r3, [r4, #0]
 8008aa8:	6863      	ldr	r3, [r4, #4]
 8008aaa:	4642      	mov	r2, r8
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	4628      	mov	r0, r5
 8008ab0:	4653      	mov	r3, sl
 8008ab2:	910b      	str	r1, [sp, #44]	; 0x2c
 8008ab4:	f7ff fed4 	bl	8008860 <__cvt>
 8008ab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008aba:	4680      	mov	r8, r0
 8008abc:	2947      	cmp	r1, #71	; 0x47
 8008abe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ac0:	d108      	bne.n	8008ad4 <_printf_float+0x138>
 8008ac2:	1cc8      	adds	r0, r1, #3
 8008ac4:	db02      	blt.n	8008acc <_printf_float+0x130>
 8008ac6:	6863      	ldr	r3, [r4, #4]
 8008ac8:	4299      	cmp	r1, r3
 8008aca:	dd40      	ble.n	8008b4e <_printf_float+0x1b2>
 8008acc:	f1a9 0902 	sub.w	r9, r9, #2
 8008ad0:	fa5f f989 	uxtb.w	r9, r9
 8008ad4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008ad8:	d81f      	bhi.n	8008b1a <_printf_float+0x17e>
 8008ada:	464a      	mov	r2, r9
 8008adc:	3901      	subs	r1, #1
 8008ade:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ae2:	910d      	str	r1, [sp, #52]	; 0x34
 8008ae4:	f7ff ff1b 	bl	800891e <__exponent>
 8008ae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008aea:	4682      	mov	sl, r0
 8008aec:	1813      	adds	r3, r2, r0
 8008aee:	2a01      	cmp	r2, #1
 8008af0:	6123      	str	r3, [r4, #16]
 8008af2:	dc02      	bgt.n	8008afa <_printf_float+0x15e>
 8008af4:	6822      	ldr	r2, [r4, #0]
 8008af6:	07d2      	lsls	r2, r2, #31
 8008af8:	d501      	bpl.n	8008afe <_printf_float+0x162>
 8008afa:	3301      	adds	r3, #1
 8008afc:	6123      	str	r3, [r4, #16]
 8008afe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d09b      	beq.n	8008a3e <_printf_float+0xa2>
 8008b06:	232d      	movs	r3, #45	; 0x2d
 8008b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b0c:	e797      	b.n	8008a3e <_printf_float+0xa2>
 8008b0e:	2947      	cmp	r1, #71	; 0x47
 8008b10:	d1bc      	bne.n	8008a8c <_printf_float+0xf0>
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1ba      	bne.n	8008a8c <_printf_float+0xf0>
 8008b16:	2301      	movs	r3, #1
 8008b18:	e7b7      	b.n	8008a8a <_printf_float+0xee>
 8008b1a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008b1e:	d118      	bne.n	8008b52 <_printf_float+0x1b6>
 8008b20:	2900      	cmp	r1, #0
 8008b22:	6863      	ldr	r3, [r4, #4]
 8008b24:	dd0b      	ble.n	8008b3e <_printf_float+0x1a2>
 8008b26:	6121      	str	r1, [r4, #16]
 8008b28:	b913      	cbnz	r3, 8008b30 <_printf_float+0x194>
 8008b2a:	6822      	ldr	r2, [r4, #0]
 8008b2c:	07d0      	lsls	r0, r2, #31
 8008b2e:	d502      	bpl.n	8008b36 <_printf_float+0x19a>
 8008b30:	3301      	adds	r3, #1
 8008b32:	440b      	add	r3, r1
 8008b34:	6123      	str	r3, [r4, #16]
 8008b36:	f04f 0a00 	mov.w	sl, #0
 8008b3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b3c:	e7df      	b.n	8008afe <_printf_float+0x162>
 8008b3e:	b913      	cbnz	r3, 8008b46 <_printf_float+0x1aa>
 8008b40:	6822      	ldr	r2, [r4, #0]
 8008b42:	07d2      	lsls	r2, r2, #31
 8008b44:	d501      	bpl.n	8008b4a <_printf_float+0x1ae>
 8008b46:	3302      	adds	r3, #2
 8008b48:	e7f4      	b.n	8008b34 <_printf_float+0x198>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e7f2      	b.n	8008b34 <_printf_float+0x198>
 8008b4e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b54:	4299      	cmp	r1, r3
 8008b56:	db05      	blt.n	8008b64 <_printf_float+0x1c8>
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	6121      	str	r1, [r4, #16]
 8008b5c:	07d8      	lsls	r0, r3, #31
 8008b5e:	d5ea      	bpl.n	8008b36 <_printf_float+0x19a>
 8008b60:	1c4b      	adds	r3, r1, #1
 8008b62:	e7e7      	b.n	8008b34 <_printf_float+0x198>
 8008b64:	2900      	cmp	r1, #0
 8008b66:	bfcc      	ite	gt
 8008b68:	2201      	movgt	r2, #1
 8008b6a:	f1c1 0202 	rsble	r2, r1, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	e7e0      	b.n	8008b34 <_printf_float+0x198>
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	055a      	lsls	r2, r3, #21
 8008b76:	d407      	bmi.n	8008b88 <_printf_float+0x1ec>
 8008b78:	6923      	ldr	r3, [r4, #16]
 8008b7a:	4642      	mov	r2, r8
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4628      	mov	r0, r5
 8008b80:	47b8      	blx	r7
 8008b82:	3001      	adds	r0, #1
 8008b84:	d12b      	bne.n	8008bde <_printf_float+0x242>
 8008b86:	e764      	b.n	8008a52 <_printf_float+0xb6>
 8008b88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b8c:	f240 80dd 	bls.w	8008d4a <_printf_float+0x3ae>
 8008b90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b94:	2200      	movs	r2, #0
 8008b96:	2300      	movs	r3, #0
 8008b98:	f7f7 ff06 	bl	80009a8 <__aeabi_dcmpeq>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d033      	beq.n	8008c08 <_printf_float+0x26c>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	4a35      	ldr	r2, [pc, #212]	; (8008c7c <_printf_float+0x2e0>)
 8008ba8:	47b8      	blx	r7
 8008baa:	3001      	adds	r0, #1
 8008bac:	f43f af51 	beq.w	8008a52 <_printf_float+0xb6>
 8008bb0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	db02      	blt.n	8008bbe <_printf_float+0x222>
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	07d8      	lsls	r0, r3, #31
 8008bbc:	d50f      	bpl.n	8008bde <_printf_float+0x242>
 8008bbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	47b8      	blx	r7
 8008bc8:	3001      	adds	r0, #1
 8008bca:	f43f af42 	beq.w	8008a52 <_printf_float+0xb6>
 8008bce:	f04f 0800 	mov.w	r8, #0
 8008bd2:	f104 091a 	add.w	r9, r4, #26
 8008bd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	4543      	cmp	r3, r8
 8008bdc:	dc09      	bgt.n	8008bf2 <_printf_float+0x256>
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	079b      	lsls	r3, r3, #30
 8008be2:	f100 8102 	bmi.w	8008dea <_printf_float+0x44e>
 8008be6:	68e0      	ldr	r0, [r4, #12]
 8008be8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bea:	4298      	cmp	r0, r3
 8008bec:	bfb8      	it	lt
 8008bee:	4618      	movlt	r0, r3
 8008bf0:	e731      	b.n	8008a56 <_printf_float+0xba>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	464a      	mov	r2, r9
 8008bf6:	4631      	mov	r1, r6
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	47b8      	blx	r7
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	f43f af28 	beq.w	8008a52 <_printf_float+0xb6>
 8008c02:	f108 0801 	add.w	r8, r8, #1
 8008c06:	e7e6      	b.n	8008bd6 <_printf_float+0x23a>
 8008c08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	dc38      	bgt.n	8008c80 <_printf_float+0x2e4>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	4631      	mov	r1, r6
 8008c12:	4628      	mov	r0, r5
 8008c14:	4a19      	ldr	r2, [pc, #100]	; (8008c7c <_printf_float+0x2e0>)
 8008c16:	47b8      	blx	r7
 8008c18:	3001      	adds	r0, #1
 8008c1a:	f43f af1a 	beq.w	8008a52 <_printf_float+0xb6>
 8008c1e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c22:	4313      	orrs	r3, r2
 8008c24:	d102      	bne.n	8008c2c <_printf_float+0x290>
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	07d9      	lsls	r1, r3, #31
 8008c2a:	d5d8      	bpl.n	8008bde <_printf_float+0x242>
 8008c2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c30:	4631      	mov	r1, r6
 8008c32:	4628      	mov	r0, r5
 8008c34:	47b8      	blx	r7
 8008c36:	3001      	adds	r0, #1
 8008c38:	f43f af0b 	beq.w	8008a52 <_printf_float+0xb6>
 8008c3c:	f04f 0900 	mov.w	r9, #0
 8008c40:	f104 0a1a 	add.w	sl, r4, #26
 8008c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c46:	425b      	negs	r3, r3
 8008c48:	454b      	cmp	r3, r9
 8008c4a:	dc01      	bgt.n	8008c50 <_printf_float+0x2b4>
 8008c4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c4e:	e794      	b.n	8008b7a <_printf_float+0x1de>
 8008c50:	2301      	movs	r3, #1
 8008c52:	4652      	mov	r2, sl
 8008c54:	4631      	mov	r1, r6
 8008c56:	4628      	mov	r0, r5
 8008c58:	47b8      	blx	r7
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	f43f aef9 	beq.w	8008a52 <_printf_float+0xb6>
 8008c60:	f109 0901 	add.w	r9, r9, #1
 8008c64:	e7ee      	b.n	8008c44 <_printf_float+0x2a8>
 8008c66:	bf00      	nop
 8008c68:	7fefffff 	.word	0x7fefffff
 8008c6c:	0800d1b4 	.word	0x0800d1b4
 8008c70:	0800d1b8 	.word	0x0800d1b8
 8008c74:	0800d1c0 	.word	0x0800d1c0
 8008c78:	0800d1bc 	.word	0x0800d1bc
 8008c7c:	0800d1c4 	.word	0x0800d1c4
 8008c80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c84:	429a      	cmp	r2, r3
 8008c86:	bfa8      	it	ge
 8008c88:	461a      	movge	r2, r3
 8008c8a:	2a00      	cmp	r2, #0
 8008c8c:	4691      	mov	r9, r2
 8008c8e:	dc37      	bgt.n	8008d00 <_printf_float+0x364>
 8008c90:	f04f 0b00 	mov.w	fp, #0
 8008c94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c98:	f104 021a 	add.w	r2, r4, #26
 8008c9c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008ca0:	ebaa 0309 	sub.w	r3, sl, r9
 8008ca4:	455b      	cmp	r3, fp
 8008ca6:	dc33      	bgt.n	8008d10 <_printf_float+0x374>
 8008ca8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008cac:	429a      	cmp	r2, r3
 8008cae:	db3b      	blt.n	8008d28 <_printf_float+0x38c>
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	07da      	lsls	r2, r3, #31
 8008cb4:	d438      	bmi.n	8008d28 <_printf_float+0x38c>
 8008cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cb8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008cba:	eba3 020a 	sub.w	r2, r3, sl
 8008cbe:	eba3 0901 	sub.w	r9, r3, r1
 8008cc2:	4591      	cmp	r9, r2
 8008cc4:	bfa8      	it	ge
 8008cc6:	4691      	movge	r9, r2
 8008cc8:	f1b9 0f00 	cmp.w	r9, #0
 8008ccc:	dc34      	bgt.n	8008d38 <_printf_float+0x39c>
 8008cce:	f04f 0800 	mov.w	r8, #0
 8008cd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cd6:	f104 0a1a 	add.w	sl, r4, #26
 8008cda:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008cde:	1a9b      	subs	r3, r3, r2
 8008ce0:	eba3 0309 	sub.w	r3, r3, r9
 8008ce4:	4543      	cmp	r3, r8
 8008ce6:	f77f af7a 	ble.w	8008bde <_printf_float+0x242>
 8008cea:	2301      	movs	r3, #1
 8008cec:	4652      	mov	r2, sl
 8008cee:	4631      	mov	r1, r6
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	47b8      	blx	r7
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	f43f aeac 	beq.w	8008a52 <_printf_float+0xb6>
 8008cfa:	f108 0801 	add.w	r8, r8, #1
 8008cfe:	e7ec      	b.n	8008cda <_printf_float+0x33e>
 8008d00:	4613      	mov	r3, r2
 8008d02:	4631      	mov	r1, r6
 8008d04:	4642      	mov	r2, r8
 8008d06:	4628      	mov	r0, r5
 8008d08:	47b8      	blx	r7
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	d1c0      	bne.n	8008c90 <_printf_float+0x2f4>
 8008d0e:	e6a0      	b.n	8008a52 <_printf_float+0xb6>
 8008d10:	2301      	movs	r3, #1
 8008d12:	4631      	mov	r1, r6
 8008d14:	4628      	mov	r0, r5
 8008d16:	920b      	str	r2, [sp, #44]	; 0x2c
 8008d18:	47b8      	blx	r7
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	f43f ae99 	beq.w	8008a52 <_printf_float+0xb6>
 8008d20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d22:	f10b 0b01 	add.w	fp, fp, #1
 8008d26:	e7b9      	b.n	8008c9c <_printf_float+0x300>
 8008d28:	4631      	mov	r1, r6
 8008d2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d2e:	4628      	mov	r0, r5
 8008d30:	47b8      	blx	r7
 8008d32:	3001      	adds	r0, #1
 8008d34:	d1bf      	bne.n	8008cb6 <_printf_float+0x31a>
 8008d36:	e68c      	b.n	8008a52 <_printf_float+0xb6>
 8008d38:	464b      	mov	r3, r9
 8008d3a:	4631      	mov	r1, r6
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	eb08 020a 	add.w	r2, r8, sl
 8008d42:	47b8      	blx	r7
 8008d44:	3001      	adds	r0, #1
 8008d46:	d1c2      	bne.n	8008cce <_printf_float+0x332>
 8008d48:	e683      	b.n	8008a52 <_printf_float+0xb6>
 8008d4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d4c:	2a01      	cmp	r2, #1
 8008d4e:	dc01      	bgt.n	8008d54 <_printf_float+0x3b8>
 8008d50:	07db      	lsls	r3, r3, #31
 8008d52:	d537      	bpl.n	8008dc4 <_printf_float+0x428>
 8008d54:	2301      	movs	r3, #1
 8008d56:	4642      	mov	r2, r8
 8008d58:	4631      	mov	r1, r6
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	47b8      	blx	r7
 8008d5e:	3001      	adds	r0, #1
 8008d60:	f43f ae77 	beq.w	8008a52 <_printf_float+0xb6>
 8008d64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d68:	4631      	mov	r1, r6
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	47b8      	blx	r7
 8008d6e:	3001      	adds	r0, #1
 8008d70:	f43f ae6f 	beq.w	8008a52 <_printf_float+0xb6>
 8008d74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f7f7 fe14 	bl	80009a8 <__aeabi_dcmpeq>
 8008d80:	b9d8      	cbnz	r0, 8008dba <_printf_float+0x41e>
 8008d82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d84:	f108 0201 	add.w	r2, r8, #1
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	47b8      	blx	r7
 8008d90:	3001      	adds	r0, #1
 8008d92:	d10e      	bne.n	8008db2 <_printf_float+0x416>
 8008d94:	e65d      	b.n	8008a52 <_printf_float+0xb6>
 8008d96:	2301      	movs	r3, #1
 8008d98:	464a      	mov	r2, r9
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	47b8      	blx	r7
 8008da0:	3001      	adds	r0, #1
 8008da2:	f43f ae56 	beq.w	8008a52 <_printf_float+0xb6>
 8008da6:	f108 0801 	add.w	r8, r8, #1
 8008daa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dac:	3b01      	subs	r3, #1
 8008dae:	4543      	cmp	r3, r8
 8008db0:	dcf1      	bgt.n	8008d96 <_printf_float+0x3fa>
 8008db2:	4653      	mov	r3, sl
 8008db4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008db8:	e6e0      	b.n	8008b7c <_printf_float+0x1e0>
 8008dba:	f04f 0800 	mov.w	r8, #0
 8008dbe:	f104 091a 	add.w	r9, r4, #26
 8008dc2:	e7f2      	b.n	8008daa <_printf_float+0x40e>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	4642      	mov	r2, r8
 8008dc8:	e7df      	b.n	8008d8a <_printf_float+0x3ee>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	464a      	mov	r2, r9
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	47b8      	blx	r7
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	f43f ae3c 	beq.w	8008a52 <_printf_float+0xb6>
 8008dda:	f108 0801 	add.w	r8, r8, #1
 8008dde:	68e3      	ldr	r3, [r4, #12]
 8008de0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008de2:	1a5b      	subs	r3, r3, r1
 8008de4:	4543      	cmp	r3, r8
 8008de6:	dcf0      	bgt.n	8008dca <_printf_float+0x42e>
 8008de8:	e6fd      	b.n	8008be6 <_printf_float+0x24a>
 8008dea:	f04f 0800 	mov.w	r8, #0
 8008dee:	f104 0919 	add.w	r9, r4, #25
 8008df2:	e7f4      	b.n	8008dde <_printf_float+0x442>

08008df4 <_printf_common>:
 8008df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df8:	4616      	mov	r6, r2
 8008dfa:	4699      	mov	r9, r3
 8008dfc:	688a      	ldr	r2, [r1, #8]
 8008dfe:	690b      	ldr	r3, [r1, #16]
 8008e00:	4607      	mov	r7, r0
 8008e02:	4293      	cmp	r3, r2
 8008e04:	bfb8      	it	lt
 8008e06:	4613      	movlt	r3, r2
 8008e08:	6033      	str	r3, [r6, #0]
 8008e0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e0e:	460c      	mov	r4, r1
 8008e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e14:	b10a      	cbz	r2, 8008e1a <_printf_common+0x26>
 8008e16:	3301      	adds	r3, #1
 8008e18:	6033      	str	r3, [r6, #0]
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	0699      	lsls	r1, r3, #26
 8008e1e:	bf42      	ittt	mi
 8008e20:	6833      	ldrmi	r3, [r6, #0]
 8008e22:	3302      	addmi	r3, #2
 8008e24:	6033      	strmi	r3, [r6, #0]
 8008e26:	6825      	ldr	r5, [r4, #0]
 8008e28:	f015 0506 	ands.w	r5, r5, #6
 8008e2c:	d106      	bne.n	8008e3c <_printf_common+0x48>
 8008e2e:	f104 0a19 	add.w	sl, r4, #25
 8008e32:	68e3      	ldr	r3, [r4, #12]
 8008e34:	6832      	ldr	r2, [r6, #0]
 8008e36:	1a9b      	subs	r3, r3, r2
 8008e38:	42ab      	cmp	r3, r5
 8008e3a:	dc28      	bgt.n	8008e8e <_printf_common+0x9a>
 8008e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e40:	1e13      	subs	r3, r2, #0
 8008e42:	6822      	ldr	r2, [r4, #0]
 8008e44:	bf18      	it	ne
 8008e46:	2301      	movne	r3, #1
 8008e48:	0692      	lsls	r2, r2, #26
 8008e4a:	d42d      	bmi.n	8008ea8 <_printf_common+0xb4>
 8008e4c:	4649      	mov	r1, r9
 8008e4e:	4638      	mov	r0, r7
 8008e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e54:	47c0      	blx	r8
 8008e56:	3001      	adds	r0, #1
 8008e58:	d020      	beq.n	8008e9c <_printf_common+0xa8>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	68e5      	ldr	r5, [r4, #12]
 8008e5e:	f003 0306 	and.w	r3, r3, #6
 8008e62:	2b04      	cmp	r3, #4
 8008e64:	bf18      	it	ne
 8008e66:	2500      	movne	r5, #0
 8008e68:	6832      	ldr	r2, [r6, #0]
 8008e6a:	f04f 0600 	mov.w	r6, #0
 8008e6e:	68a3      	ldr	r3, [r4, #8]
 8008e70:	bf08      	it	eq
 8008e72:	1aad      	subeq	r5, r5, r2
 8008e74:	6922      	ldr	r2, [r4, #16]
 8008e76:	bf08      	it	eq
 8008e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	bfc4      	itt	gt
 8008e80:	1a9b      	subgt	r3, r3, r2
 8008e82:	18ed      	addgt	r5, r5, r3
 8008e84:	341a      	adds	r4, #26
 8008e86:	42b5      	cmp	r5, r6
 8008e88:	d11a      	bne.n	8008ec0 <_printf_common+0xcc>
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	e008      	b.n	8008ea0 <_printf_common+0xac>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	4652      	mov	r2, sl
 8008e92:	4649      	mov	r1, r9
 8008e94:	4638      	mov	r0, r7
 8008e96:	47c0      	blx	r8
 8008e98:	3001      	adds	r0, #1
 8008e9a:	d103      	bne.n	8008ea4 <_printf_common+0xb0>
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea4:	3501      	adds	r5, #1
 8008ea6:	e7c4      	b.n	8008e32 <_printf_common+0x3e>
 8008ea8:	2030      	movs	r0, #48	; 0x30
 8008eaa:	18e1      	adds	r1, r4, r3
 8008eac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008eb6:	4422      	add	r2, r4
 8008eb8:	3302      	adds	r3, #2
 8008eba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ebe:	e7c5      	b.n	8008e4c <_printf_common+0x58>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	4622      	mov	r2, r4
 8008ec4:	4649      	mov	r1, r9
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	47c0      	blx	r8
 8008eca:	3001      	adds	r0, #1
 8008ecc:	d0e6      	beq.n	8008e9c <_printf_common+0xa8>
 8008ece:	3601      	adds	r6, #1
 8008ed0:	e7d9      	b.n	8008e86 <_printf_common+0x92>
	...

08008ed4 <_printf_i>:
 8008ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed8:	7e0f      	ldrb	r7, [r1, #24]
 8008eda:	4691      	mov	r9, r2
 8008edc:	2f78      	cmp	r7, #120	; 0x78
 8008ede:	4680      	mov	r8, r0
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	469a      	mov	sl, r3
 8008ee4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ee6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008eea:	d807      	bhi.n	8008efc <_printf_i+0x28>
 8008eec:	2f62      	cmp	r7, #98	; 0x62
 8008eee:	d80a      	bhi.n	8008f06 <_printf_i+0x32>
 8008ef0:	2f00      	cmp	r7, #0
 8008ef2:	f000 80d9 	beq.w	80090a8 <_printf_i+0x1d4>
 8008ef6:	2f58      	cmp	r7, #88	; 0x58
 8008ef8:	f000 80a4 	beq.w	8009044 <_printf_i+0x170>
 8008efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f04:	e03a      	b.n	8008f7c <_printf_i+0xa8>
 8008f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f0a:	2b15      	cmp	r3, #21
 8008f0c:	d8f6      	bhi.n	8008efc <_printf_i+0x28>
 8008f0e:	a101      	add	r1, pc, #4	; (adr r1, 8008f14 <_printf_i+0x40>)
 8008f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f14:	08008f6d 	.word	0x08008f6d
 8008f18:	08008f81 	.word	0x08008f81
 8008f1c:	08008efd 	.word	0x08008efd
 8008f20:	08008efd 	.word	0x08008efd
 8008f24:	08008efd 	.word	0x08008efd
 8008f28:	08008efd 	.word	0x08008efd
 8008f2c:	08008f81 	.word	0x08008f81
 8008f30:	08008efd 	.word	0x08008efd
 8008f34:	08008efd 	.word	0x08008efd
 8008f38:	08008efd 	.word	0x08008efd
 8008f3c:	08008efd 	.word	0x08008efd
 8008f40:	0800908f 	.word	0x0800908f
 8008f44:	08008fb1 	.word	0x08008fb1
 8008f48:	08009071 	.word	0x08009071
 8008f4c:	08008efd 	.word	0x08008efd
 8008f50:	08008efd 	.word	0x08008efd
 8008f54:	080090b1 	.word	0x080090b1
 8008f58:	08008efd 	.word	0x08008efd
 8008f5c:	08008fb1 	.word	0x08008fb1
 8008f60:	08008efd 	.word	0x08008efd
 8008f64:	08008efd 	.word	0x08008efd
 8008f68:	08009079 	.word	0x08009079
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	1d1a      	adds	r2, r3, #4
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	602a      	str	r2, [r5, #0]
 8008f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e0a4      	b.n	80090ca <_printf_i+0x1f6>
 8008f80:	6820      	ldr	r0, [r4, #0]
 8008f82:	6829      	ldr	r1, [r5, #0]
 8008f84:	0606      	lsls	r6, r0, #24
 8008f86:	f101 0304 	add.w	r3, r1, #4
 8008f8a:	d50a      	bpl.n	8008fa2 <_printf_i+0xce>
 8008f8c:	680e      	ldr	r6, [r1, #0]
 8008f8e:	602b      	str	r3, [r5, #0]
 8008f90:	2e00      	cmp	r6, #0
 8008f92:	da03      	bge.n	8008f9c <_printf_i+0xc8>
 8008f94:	232d      	movs	r3, #45	; 0x2d
 8008f96:	4276      	negs	r6, r6
 8008f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f9c:	230a      	movs	r3, #10
 8008f9e:	485e      	ldr	r0, [pc, #376]	; (8009118 <_printf_i+0x244>)
 8008fa0:	e019      	b.n	8008fd6 <_printf_i+0x102>
 8008fa2:	680e      	ldr	r6, [r1, #0]
 8008fa4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fa8:	602b      	str	r3, [r5, #0]
 8008faa:	bf18      	it	ne
 8008fac:	b236      	sxthne	r6, r6
 8008fae:	e7ef      	b.n	8008f90 <_printf_i+0xbc>
 8008fb0:	682b      	ldr	r3, [r5, #0]
 8008fb2:	6820      	ldr	r0, [r4, #0]
 8008fb4:	1d19      	adds	r1, r3, #4
 8008fb6:	6029      	str	r1, [r5, #0]
 8008fb8:	0601      	lsls	r1, r0, #24
 8008fba:	d501      	bpl.n	8008fc0 <_printf_i+0xec>
 8008fbc:	681e      	ldr	r6, [r3, #0]
 8008fbe:	e002      	b.n	8008fc6 <_printf_i+0xf2>
 8008fc0:	0646      	lsls	r6, r0, #25
 8008fc2:	d5fb      	bpl.n	8008fbc <_printf_i+0xe8>
 8008fc4:	881e      	ldrh	r6, [r3, #0]
 8008fc6:	2f6f      	cmp	r7, #111	; 0x6f
 8008fc8:	bf0c      	ite	eq
 8008fca:	2308      	moveq	r3, #8
 8008fcc:	230a      	movne	r3, #10
 8008fce:	4852      	ldr	r0, [pc, #328]	; (8009118 <_printf_i+0x244>)
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fd6:	6865      	ldr	r5, [r4, #4]
 8008fd8:	2d00      	cmp	r5, #0
 8008fda:	bfa8      	it	ge
 8008fdc:	6821      	ldrge	r1, [r4, #0]
 8008fde:	60a5      	str	r5, [r4, #8]
 8008fe0:	bfa4      	itt	ge
 8008fe2:	f021 0104 	bicge.w	r1, r1, #4
 8008fe6:	6021      	strge	r1, [r4, #0]
 8008fe8:	b90e      	cbnz	r6, 8008fee <_printf_i+0x11a>
 8008fea:	2d00      	cmp	r5, #0
 8008fec:	d04d      	beq.n	800908a <_printf_i+0x1b6>
 8008fee:	4615      	mov	r5, r2
 8008ff0:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ff4:	fb03 6711 	mls	r7, r3, r1, r6
 8008ff8:	5dc7      	ldrb	r7, [r0, r7]
 8008ffa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ffe:	4637      	mov	r7, r6
 8009000:	42bb      	cmp	r3, r7
 8009002:	460e      	mov	r6, r1
 8009004:	d9f4      	bls.n	8008ff0 <_printf_i+0x11c>
 8009006:	2b08      	cmp	r3, #8
 8009008:	d10b      	bne.n	8009022 <_printf_i+0x14e>
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	07de      	lsls	r6, r3, #31
 800900e:	d508      	bpl.n	8009022 <_printf_i+0x14e>
 8009010:	6923      	ldr	r3, [r4, #16]
 8009012:	6861      	ldr	r1, [r4, #4]
 8009014:	4299      	cmp	r1, r3
 8009016:	bfde      	ittt	le
 8009018:	2330      	movle	r3, #48	; 0x30
 800901a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800901e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009022:	1b52      	subs	r2, r2, r5
 8009024:	6122      	str	r2, [r4, #16]
 8009026:	464b      	mov	r3, r9
 8009028:	4621      	mov	r1, r4
 800902a:	4640      	mov	r0, r8
 800902c:	f8cd a000 	str.w	sl, [sp]
 8009030:	aa03      	add	r2, sp, #12
 8009032:	f7ff fedf 	bl	8008df4 <_printf_common>
 8009036:	3001      	adds	r0, #1
 8009038:	d14c      	bne.n	80090d4 <_printf_i+0x200>
 800903a:	f04f 30ff 	mov.w	r0, #4294967295
 800903e:	b004      	add	sp, #16
 8009040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009044:	4834      	ldr	r0, [pc, #208]	; (8009118 <_printf_i+0x244>)
 8009046:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800904a:	6829      	ldr	r1, [r5, #0]
 800904c:	6823      	ldr	r3, [r4, #0]
 800904e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009052:	6029      	str	r1, [r5, #0]
 8009054:	061d      	lsls	r5, r3, #24
 8009056:	d514      	bpl.n	8009082 <_printf_i+0x1ae>
 8009058:	07df      	lsls	r7, r3, #31
 800905a:	bf44      	itt	mi
 800905c:	f043 0320 	orrmi.w	r3, r3, #32
 8009060:	6023      	strmi	r3, [r4, #0]
 8009062:	b91e      	cbnz	r6, 800906c <_printf_i+0x198>
 8009064:	6823      	ldr	r3, [r4, #0]
 8009066:	f023 0320 	bic.w	r3, r3, #32
 800906a:	6023      	str	r3, [r4, #0]
 800906c:	2310      	movs	r3, #16
 800906e:	e7af      	b.n	8008fd0 <_printf_i+0xfc>
 8009070:	6823      	ldr	r3, [r4, #0]
 8009072:	f043 0320 	orr.w	r3, r3, #32
 8009076:	6023      	str	r3, [r4, #0]
 8009078:	2378      	movs	r3, #120	; 0x78
 800907a:	4828      	ldr	r0, [pc, #160]	; (800911c <_printf_i+0x248>)
 800907c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009080:	e7e3      	b.n	800904a <_printf_i+0x176>
 8009082:	0659      	lsls	r1, r3, #25
 8009084:	bf48      	it	mi
 8009086:	b2b6      	uxthmi	r6, r6
 8009088:	e7e6      	b.n	8009058 <_printf_i+0x184>
 800908a:	4615      	mov	r5, r2
 800908c:	e7bb      	b.n	8009006 <_printf_i+0x132>
 800908e:	682b      	ldr	r3, [r5, #0]
 8009090:	6826      	ldr	r6, [r4, #0]
 8009092:	1d18      	adds	r0, r3, #4
 8009094:	6961      	ldr	r1, [r4, #20]
 8009096:	6028      	str	r0, [r5, #0]
 8009098:	0635      	lsls	r5, r6, #24
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	d501      	bpl.n	80090a2 <_printf_i+0x1ce>
 800909e:	6019      	str	r1, [r3, #0]
 80090a0:	e002      	b.n	80090a8 <_printf_i+0x1d4>
 80090a2:	0670      	lsls	r0, r6, #25
 80090a4:	d5fb      	bpl.n	800909e <_printf_i+0x1ca>
 80090a6:	8019      	strh	r1, [r3, #0]
 80090a8:	2300      	movs	r3, #0
 80090aa:	4615      	mov	r5, r2
 80090ac:	6123      	str	r3, [r4, #16]
 80090ae:	e7ba      	b.n	8009026 <_printf_i+0x152>
 80090b0:	682b      	ldr	r3, [r5, #0]
 80090b2:	2100      	movs	r1, #0
 80090b4:	1d1a      	adds	r2, r3, #4
 80090b6:	602a      	str	r2, [r5, #0]
 80090b8:	681d      	ldr	r5, [r3, #0]
 80090ba:	6862      	ldr	r2, [r4, #4]
 80090bc:	4628      	mov	r0, r5
 80090be:	f002 fd0f 	bl	800bae0 <memchr>
 80090c2:	b108      	cbz	r0, 80090c8 <_printf_i+0x1f4>
 80090c4:	1b40      	subs	r0, r0, r5
 80090c6:	6060      	str	r0, [r4, #4]
 80090c8:	6863      	ldr	r3, [r4, #4]
 80090ca:	6123      	str	r3, [r4, #16]
 80090cc:	2300      	movs	r3, #0
 80090ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090d2:	e7a8      	b.n	8009026 <_printf_i+0x152>
 80090d4:	462a      	mov	r2, r5
 80090d6:	4649      	mov	r1, r9
 80090d8:	4640      	mov	r0, r8
 80090da:	6923      	ldr	r3, [r4, #16]
 80090dc:	47d0      	blx	sl
 80090de:	3001      	adds	r0, #1
 80090e0:	d0ab      	beq.n	800903a <_printf_i+0x166>
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	079b      	lsls	r3, r3, #30
 80090e6:	d413      	bmi.n	8009110 <_printf_i+0x23c>
 80090e8:	68e0      	ldr	r0, [r4, #12]
 80090ea:	9b03      	ldr	r3, [sp, #12]
 80090ec:	4298      	cmp	r0, r3
 80090ee:	bfb8      	it	lt
 80090f0:	4618      	movlt	r0, r3
 80090f2:	e7a4      	b.n	800903e <_printf_i+0x16a>
 80090f4:	2301      	movs	r3, #1
 80090f6:	4632      	mov	r2, r6
 80090f8:	4649      	mov	r1, r9
 80090fa:	4640      	mov	r0, r8
 80090fc:	47d0      	blx	sl
 80090fe:	3001      	adds	r0, #1
 8009100:	d09b      	beq.n	800903a <_printf_i+0x166>
 8009102:	3501      	adds	r5, #1
 8009104:	68e3      	ldr	r3, [r4, #12]
 8009106:	9903      	ldr	r1, [sp, #12]
 8009108:	1a5b      	subs	r3, r3, r1
 800910a:	42ab      	cmp	r3, r5
 800910c:	dcf2      	bgt.n	80090f4 <_printf_i+0x220>
 800910e:	e7eb      	b.n	80090e8 <_printf_i+0x214>
 8009110:	2500      	movs	r5, #0
 8009112:	f104 0619 	add.w	r6, r4, #25
 8009116:	e7f5      	b.n	8009104 <_printf_i+0x230>
 8009118:	0800d1c6 	.word	0x0800d1c6
 800911c:	0800d1d7 	.word	0x0800d1d7

08009120 <_scanf_float>:
 8009120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	b087      	sub	sp, #28
 8009126:	9303      	str	r3, [sp, #12]
 8009128:	688b      	ldr	r3, [r1, #8]
 800912a:	4617      	mov	r7, r2
 800912c:	1e5a      	subs	r2, r3, #1
 800912e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009132:	bf85      	ittet	hi
 8009134:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009138:	195b      	addhi	r3, r3, r5
 800913a:	2300      	movls	r3, #0
 800913c:	9302      	strhi	r3, [sp, #8]
 800913e:	bf88      	it	hi
 8009140:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009144:	468b      	mov	fp, r1
 8009146:	f04f 0500 	mov.w	r5, #0
 800914a:	bf8c      	ite	hi
 800914c:	608b      	strhi	r3, [r1, #8]
 800914e:	9302      	strls	r3, [sp, #8]
 8009150:	680b      	ldr	r3, [r1, #0]
 8009152:	4680      	mov	r8, r0
 8009154:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009158:	f84b 3b1c 	str.w	r3, [fp], #28
 800915c:	460c      	mov	r4, r1
 800915e:	465e      	mov	r6, fp
 8009160:	46aa      	mov	sl, r5
 8009162:	46a9      	mov	r9, r5
 8009164:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009168:	9501      	str	r5, [sp, #4]
 800916a:	68a2      	ldr	r2, [r4, #8]
 800916c:	b152      	cbz	r2, 8009184 <_scanf_float+0x64>
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	2b4e      	cmp	r3, #78	; 0x4e
 8009174:	d864      	bhi.n	8009240 <_scanf_float+0x120>
 8009176:	2b40      	cmp	r3, #64	; 0x40
 8009178:	d83c      	bhi.n	80091f4 <_scanf_float+0xd4>
 800917a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800917e:	b2c8      	uxtb	r0, r1
 8009180:	280e      	cmp	r0, #14
 8009182:	d93a      	bls.n	80091fa <_scanf_float+0xda>
 8009184:	f1b9 0f00 	cmp.w	r9, #0
 8009188:	d003      	beq.n	8009192 <_scanf_float+0x72>
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009196:	f1ba 0f01 	cmp.w	sl, #1
 800919a:	f200 8113 	bhi.w	80093c4 <_scanf_float+0x2a4>
 800919e:	455e      	cmp	r6, fp
 80091a0:	f200 8105 	bhi.w	80093ae <_scanf_float+0x28e>
 80091a4:	2501      	movs	r5, #1
 80091a6:	4628      	mov	r0, r5
 80091a8:	b007      	add	sp, #28
 80091aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80091b2:	2a0d      	cmp	r2, #13
 80091b4:	d8e6      	bhi.n	8009184 <_scanf_float+0x64>
 80091b6:	a101      	add	r1, pc, #4	; (adr r1, 80091bc <_scanf_float+0x9c>)
 80091b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80091bc:	080092fb 	.word	0x080092fb
 80091c0:	08009185 	.word	0x08009185
 80091c4:	08009185 	.word	0x08009185
 80091c8:	08009185 	.word	0x08009185
 80091cc:	0800935b 	.word	0x0800935b
 80091d0:	08009333 	.word	0x08009333
 80091d4:	08009185 	.word	0x08009185
 80091d8:	08009185 	.word	0x08009185
 80091dc:	08009309 	.word	0x08009309
 80091e0:	08009185 	.word	0x08009185
 80091e4:	08009185 	.word	0x08009185
 80091e8:	08009185 	.word	0x08009185
 80091ec:	08009185 	.word	0x08009185
 80091f0:	080092c1 	.word	0x080092c1
 80091f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80091f8:	e7db      	b.n	80091b2 <_scanf_float+0x92>
 80091fa:	290e      	cmp	r1, #14
 80091fc:	d8c2      	bhi.n	8009184 <_scanf_float+0x64>
 80091fe:	a001      	add	r0, pc, #4	; (adr r0, 8009204 <_scanf_float+0xe4>)
 8009200:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009204:	080092b3 	.word	0x080092b3
 8009208:	08009185 	.word	0x08009185
 800920c:	080092b3 	.word	0x080092b3
 8009210:	08009347 	.word	0x08009347
 8009214:	08009185 	.word	0x08009185
 8009218:	08009261 	.word	0x08009261
 800921c:	0800929d 	.word	0x0800929d
 8009220:	0800929d 	.word	0x0800929d
 8009224:	0800929d 	.word	0x0800929d
 8009228:	0800929d 	.word	0x0800929d
 800922c:	0800929d 	.word	0x0800929d
 8009230:	0800929d 	.word	0x0800929d
 8009234:	0800929d 	.word	0x0800929d
 8009238:	0800929d 	.word	0x0800929d
 800923c:	0800929d 	.word	0x0800929d
 8009240:	2b6e      	cmp	r3, #110	; 0x6e
 8009242:	d809      	bhi.n	8009258 <_scanf_float+0x138>
 8009244:	2b60      	cmp	r3, #96	; 0x60
 8009246:	d8b2      	bhi.n	80091ae <_scanf_float+0x8e>
 8009248:	2b54      	cmp	r3, #84	; 0x54
 800924a:	d077      	beq.n	800933c <_scanf_float+0x21c>
 800924c:	2b59      	cmp	r3, #89	; 0x59
 800924e:	d199      	bne.n	8009184 <_scanf_float+0x64>
 8009250:	2d07      	cmp	r5, #7
 8009252:	d197      	bne.n	8009184 <_scanf_float+0x64>
 8009254:	2508      	movs	r5, #8
 8009256:	e029      	b.n	80092ac <_scanf_float+0x18c>
 8009258:	2b74      	cmp	r3, #116	; 0x74
 800925a:	d06f      	beq.n	800933c <_scanf_float+0x21c>
 800925c:	2b79      	cmp	r3, #121	; 0x79
 800925e:	e7f6      	b.n	800924e <_scanf_float+0x12e>
 8009260:	6821      	ldr	r1, [r4, #0]
 8009262:	05c8      	lsls	r0, r1, #23
 8009264:	d51a      	bpl.n	800929c <_scanf_float+0x17c>
 8009266:	9b02      	ldr	r3, [sp, #8]
 8009268:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800926c:	6021      	str	r1, [r4, #0]
 800926e:	f109 0901 	add.w	r9, r9, #1
 8009272:	b11b      	cbz	r3, 800927c <_scanf_float+0x15c>
 8009274:	3b01      	subs	r3, #1
 8009276:	3201      	adds	r2, #1
 8009278:	9302      	str	r3, [sp, #8]
 800927a:	60a2      	str	r2, [r4, #8]
 800927c:	68a3      	ldr	r3, [r4, #8]
 800927e:	3b01      	subs	r3, #1
 8009280:	60a3      	str	r3, [r4, #8]
 8009282:	6923      	ldr	r3, [r4, #16]
 8009284:	3301      	adds	r3, #1
 8009286:	6123      	str	r3, [r4, #16]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3b01      	subs	r3, #1
 800928c:	2b00      	cmp	r3, #0
 800928e:	607b      	str	r3, [r7, #4]
 8009290:	f340 8084 	ble.w	800939c <_scanf_float+0x27c>
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	3301      	adds	r3, #1
 8009298:	603b      	str	r3, [r7, #0]
 800929a:	e766      	b.n	800916a <_scanf_float+0x4a>
 800929c:	eb1a 0f05 	cmn.w	sl, r5
 80092a0:	f47f af70 	bne.w	8009184 <_scanf_float+0x64>
 80092a4:	6822      	ldr	r2, [r4, #0]
 80092a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80092aa:	6022      	str	r2, [r4, #0]
 80092ac:	f806 3b01 	strb.w	r3, [r6], #1
 80092b0:	e7e4      	b.n	800927c <_scanf_float+0x15c>
 80092b2:	6822      	ldr	r2, [r4, #0]
 80092b4:	0610      	lsls	r0, r2, #24
 80092b6:	f57f af65 	bpl.w	8009184 <_scanf_float+0x64>
 80092ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092be:	e7f4      	b.n	80092aa <_scanf_float+0x18a>
 80092c0:	f1ba 0f00 	cmp.w	sl, #0
 80092c4:	d10e      	bne.n	80092e4 <_scanf_float+0x1c4>
 80092c6:	f1b9 0f00 	cmp.w	r9, #0
 80092ca:	d10e      	bne.n	80092ea <_scanf_float+0x1ca>
 80092cc:	6822      	ldr	r2, [r4, #0]
 80092ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80092d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80092d6:	d108      	bne.n	80092ea <_scanf_float+0x1ca>
 80092d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80092dc:	f04f 0a01 	mov.w	sl, #1
 80092e0:	6022      	str	r2, [r4, #0]
 80092e2:	e7e3      	b.n	80092ac <_scanf_float+0x18c>
 80092e4:	f1ba 0f02 	cmp.w	sl, #2
 80092e8:	d055      	beq.n	8009396 <_scanf_float+0x276>
 80092ea:	2d01      	cmp	r5, #1
 80092ec:	d002      	beq.n	80092f4 <_scanf_float+0x1d4>
 80092ee:	2d04      	cmp	r5, #4
 80092f0:	f47f af48 	bne.w	8009184 <_scanf_float+0x64>
 80092f4:	3501      	adds	r5, #1
 80092f6:	b2ed      	uxtb	r5, r5
 80092f8:	e7d8      	b.n	80092ac <_scanf_float+0x18c>
 80092fa:	f1ba 0f01 	cmp.w	sl, #1
 80092fe:	f47f af41 	bne.w	8009184 <_scanf_float+0x64>
 8009302:	f04f 0a02 	mov.w	sl, #2
 8009306:	e7d1      	b.n	80092ac <_scanf_float+0x18c>
 8009308:	b97d      	cbnz	r5, 800932a <_scanf_float+0x20a>
 800930a:	f1b9 0f00 	cmp.w	r9, #0
 800930e:	f47f af3c 	bne.w	800918a <_scanf_float+0x6a>
 8009312:	6822      	ldr	r2, [r4, #0]
 8009314:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009318:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800931c:	f47f af39 	bne.w	8009192 <_scanf_float+0x72>
 8009320:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009324:	2501      	movs	r5, #1
 8009326:	6022      	str	r2, [r4, #0]
 8009328:	e7c0      	b.n	80092ac <_scanf_float+0x18c>
 800932a:	2d03      	cmp	r5, #3
 800932c:	d0e2      	beq.n	80092f4 <_scanf_float+0x1d4>
 800932e:	2d05      	cmp	r5, #5
 8009330:	e7de      	b.n	80092f0 <_scanf_float+0x1d0>
 8009332:	2d02      	cmp	r5, #2
 8009334:	f47f af26 	bne.w	8009184 <_scanf_float+0x64>
 8009338:	2503      	movs	r5, #3
 800933a:	e7b7      	b.n	80092ac <_scanf_float+0x18c>
 800933c:	2d06      	cmp	r5, #6
 800933e:	f47f af21 	bne.w	8009184 <_scanf_float+0x64>
 8009342:	2507      	movs	r5, #7
 8009344:	e7b2      	b.n	80092ac <_scanf_float+0x18c>
 8009346:	6822      	ldr	r2, [r4, #0]
 8009348:	0591      	lsls	r1, r2, #22
 800934a:	f57f af1b 	bpl.w	8009184 <_scanf_float+0x64>
 800934e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009352:	6022      	str	r2, [r4, #0]
 8009354:	f8cd 9004 	str.w	r9, [sp, #4]
 8009358:	e7a8      	b.n	80092ac <_scanf_float+0x18c>
 800935a:	6822      	ldr	r2, [r4, #0]
 800935c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009360:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009364:	d006      	beq.n	8009374 <_scanf_float+0x254>
 8009366:	0550      	lsls	r0, r2, #21
 8009368:	f57f af0c 	bpl.w	8009184 <_scanf_float+0x64>
 800936c:	f1b9 0f00 	cmp.w	r9, #0
 8009370:	f43f af0f 	beq.w	8009192 <_scanf_float+0x72>
 8009374:	0591      	lsls	r1, r2, #22
 8009376:	bf58      	it	pl
 8009378:	9901      	ldrpl	r1, [sp, #4]
 800937a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800937e:	bf58      	it	pl
 8009380:	eba9 0101 	subpl.w	r1, r9, r1
 8009384:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009388:	f04f 0900 	mov.w	r9, #0
 800938c:	bf58      	it	pl
 800938e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009392:	6022      	str	r2, [r4, #0]
 8009394:	e78a      	b.n	80092ac <_scanf_float+0x18c>
 8009396:	f04f 0a03 	mov.w	sl, #3
 800939a:	e787      	b.n	80092ac <_scanf_float+0x18c>
 800939c:	4639      	mov	r1, r7
 800939e:	4640      	mov	r0, r8
 80093a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80093a4:	4798      	blx	r3
 80093a6:	2800      	cmp	r0, #0
 80093a8:	f43f aedf 	beq.w	800916a <_scanf_float+0x4a>
 80093ac:	e6ea      	b.n	8009184 <_scanf_float+0x64>
 80093ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093b2:	463a      	mov	r2, r7
 80093b4:	4640      	mov	r0, r8
 80093b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093ba:	4798      	blx	r3
 80093bc:	6923      	ldr	r3, [r4, #16]
 80093be:	3b01      	subs	r3, #1
 80093c0:	6123      	str	r3, [r4, #16]
 80093c2:	e6ec      	b.n	800919e <_scanf_float+0x7e>
 80093c4:	1e6b      	subs	r3, r5, #1
 80093c6:	2b06      	cmp	r3, #6
 80093c8:	d825      	bhi.n	8009416 <_scanf_float+0x2f6>
 80093ca:	2d02      	cmp	r5, #2
 80093cc:	d836      	bhi.n	800943c <_scanf_float+0x31c>
 80093ce:	455e      	cmp	r6, fp
 80093d0:	f67f aee8 	bls.w	80091a4 <_scanf_float+0x84>
 80093d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093d8:	463a      	mov	r2, r7
 80093da:	4640      	mov	r0, r8
 80093dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093e0:	4798      	blx	r3
 80093e2:	6923      	ldr	r3, [r4, #16]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	6123      	str	r3, [r4, #16]
 80093e8:	e7f1      	b.n	80093ce <_scanf_float+0x2ae>
 80093ea:	9802      	ldr	r0, [sp, #8]
 80093ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80093f4:	463a      	mov	r2, r7
 80093f6:	9002      	str	r0, [sp, #8]
 80093f8:	4640      	mov	r0, r8
 80093fa:	4798      	blx	r3
 80093fc:	6923      	ldr	r3, [r4, #16]
 80093fe:	3b01      	subs	r3, #1
 8009400:	6123      	str	r3, [r4, #16]
 8009402:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009406:	fa5f fa8a 	uxtb.w	sl, sl
 800940a:	f1ba 0f02 	cmp.w	sl, #2
 800940e:	d1ec      	bne.n	80093ea <_scanf_float+0x2ca>
 8009410:	3d03      	subs	r5, #3
 8009412:	b2ed      	uxtb	r5, r5
 8009414:	1b76      	subs	r6, r6, r5
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	05da      	lsls	r2, r3, #23
 800941a:	d52f      	bpl.n	800947c <_scanf_float+0x35c>
 800941c:	055b      	lsls	r3, r3, #21
 800941e:	d510      	bpl.n	8009442 <_scanf_float+0x322>
 8009420:	455e      	cmp	r6, fp
 8009422:	f67f aebf 	bls.w	80091a4 <_scanf_float+0x84>
 8009426:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800942a:	463a      	mov	r2, r7
 800942c:	4640      	mov	r0, r8
 800942e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009432:	4798      	blx	r3
 8009434:	6923      	ldr	r3, [r4, #16]
 8009436:	3b01      	subs	r3, #1
 8009438:	6123      	str	r3, [r4, #16]
 800943a:	e7f1      	b.n	8009420 <_scanf_float+0x300>
 800943c:	46aa      	mov	sl, r5
 800943e:	9602      	str	r6, [sp, #8]
 8009440:	e7df      	b.n	8009402 <_scanf_float+0x2e2>
 8009442:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009446:	6923      	ldr	r3, [r4, #16]
 8009448:	2965      	cmp	r1, #101	; 0x65
 800944a:	f103 33ff 	add.w	r3, r3, #4294967295
 800944e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009452:	6123      	str	r3, [r4, #16]
 8009454:	d00c      	beq.n	8009470 <_scanf_float+0x350>
 8009456:	2945      	cmp	r1, #69	; 0x45
 8009458:	d00a      	beq.n	8009470 <_scanf_float+0x350>
 800945a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800945e:	463a      	mov	r2, r7
 8009460:	4640      	mov	r0, r8
 8009462:	4798      	blx	r3
 8009464:	6923      	ldr	r3, [r4, #16]
 8009466:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800946a:	3b01      	subs	r3, #1
 800946c:	1eb5      	subs	r5, r6, #2
 800946e:	6123      	str	r3, [r4, #16]
 8009470:	463a      	mov	r2, r7
 8009472:	4640      	mov	r0, r8
 8009474:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009478:	4798      	blx	r3
 800947a:	462e      	mov	r6, r5
 800947c:	6825      	ldr	r5, [r4, #0]
 800947e:	f015 0510 	ands.w	r5, r5, #16
 8009482:	d155      	bne.n	8009530 <_scanf_float+0x410>
 8009484:	7035      	strb	r5, [r6, #0]
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800948c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009490:	d11b      	bne.n	80094ca <_scanf_float+0x3aa>
 8009492:	9b01      	ldr	r3, [sp, #4]
 8009494:	454b      	cmp	r3, r9
 8009496:	eba3 0209 	sub.w	r2, r3, r9
 800949a:	d123      	bne.n	80094e4 <_scanf_float+0x3c4>
 800949c:	2200      	movs	r2, #0
 800949e:	4659      	mov	r1, fp
 80094a0:	4640      	mov	r0, r8
 80094a2:	f000 fe89 	bl	800a1b8 <_strtod_r>
 80094a6:	6822      	ldr	r2, [r4, #0]
 80094a8:	9b03      	ldr	r3, [sp, #12]
 80094aa:	f012 0f02 	tst.w	r2, #2
 80094ae:	4606      	mov	r6, r0
 80094b0:	460f      	mov	r7, r1
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	d021      	beq.n	80094fa <_scanf_float+0x3da>
 80094b6:	1d1a      	adds	r2, r3, #4
 80094b8:	9903      	ldr	r1, [sp, #12]
 80094ba:	600a      	str	r2, [r1, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	e9c3 6700 	strd	r6, r7, [r3]
 80094c2:	68e3      	ldr	r3, [r4, #12]
 80094c4:	3301      	adds	r3, #1
 80094c6:	60e3      	str	r3, [r4, #12]
 80094c8:	e66d      	b.n	80091a6 <_scanf_float+0x86>
 80094ca:	9b04      	ldr	r3, [sp, #16]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0e5      	beq.n	800949c <_scanf_float+0x37c>
 80094d0:	9905      	ldr	r1, [sp, #20]
 80094d2:	230a      	movs	r3, #10
 80094d4:	462a      	mov	r2, r5
 80094d6:	4640      	mov	r0, r8
 80094d8:	3101      	adds	r1, #1
 80094da:	f000 feef 	bl	800a2bc <_strtol_r>
 80094de:	9b04      	ldr	r3, [sp, #16]
 80094e0:	9e05      	ldr	r6, [sp, #20]
 80094e2:	1ac2      	subs	r2, r0, r3
 80094e4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80094e8:	429e      	cmp	r6, r3
 80094ea:	bf28      	it	cs
 80094ec:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80094f0:	4630      	mov	r0, r6
 80094f2:	4910      	ldr	r1, [pc, #64]	; (8009534 <_scanf_float+0x414>)
 80094f4:	f000 f836 	bl	8009564 <siprintf>
 80094f8:	e7d0      	b.n	800949c <_scanf_float+0x37c>
 80094fa:	f012 0f04 	tst.w	r2, #4
 80094fe:	f103 0204 	add.w	r2, r3, #4
 8009502:	d1d9      	bne.n	80094b8 <_scanf_float+0x398>
 8009504:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009508:	f8cc 2000 	str.w	r2, [ip]
 800950c:	f8d3 8000 	ldr.w	r8, [r3]
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	f7f7 fa7a 	bl	8000a0c <__aeabi_dcmpun>
 8009518:	b128      	cbz	r0, 8009526 <_scanf_float+0x406>
 800951a:	4807      	ldr	r0, [pc, #28]	; (8009538 <_scanf_float+0x418>)
 800951c:	f000 f81e 	bl	800955c <nanf>
 8009520:	f8c8 0000 	str.w	r0, [r8]
 8009524:	e7cd      	b.n	80094c2 <_scanf_float+0x3a2>
 8009526:	4630      	mov	r0, r6
 8009528:	4639      	mov	r1, r7
 800952a:	f7f7 facd 	bl	8000ac8 <__aeabi_d2f>
 800952e:	e7f7      	b.n	8009520 <_scanf_float+0x400>
 8009530:	2500      	movs	r5, #0
 8009532:	e638      	b.n	80091a6 <_scanf_float+0x86>
 8009534:	0800d1e8 	.word	0x0800d1e8
 8009538:	0800d658 	.word	0x0800d658

0800953c <_sbrk_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	2300      	movs	r3, #0
 8009540:	4d05      	ldr	r5, [pc, #20]	; (8009558 <_sbrk_r+0x1c>)
 8009542:	4604      	mov	r4, r0
 8009544:	4608      	mov	r0, r1
 8009546:	602b      	str	r3, [r5, #0]
 8009548:	f7fd f916 	bl	8006778 <_sbrk>
 800954c:	1c43      	adds	r3, r0, #1
 800954e:	d102      	bne.n	8009556 <_sbrk_r+0x1a>
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	b103      	cbz	r3, 8009556 <_sbrk_r+0x1a>
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	bd38      	pop	{r3, r4, r5, pc}
 8009558:	20000524 	.word	0x20000524

0800955c <nanf>:
 800955c:	4800      	ldr	r0, [pc, #0]	; (8009560 <nanf+0x4>)
 800955e:	4770      	bx	lr
 8009560:	7fc00000 	.word	0x7fc00000

08009564 <siprintf>:
 8009564:	b40e      	push	{r1, r2, r3}
 8009566:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800956a:	b500      	push	{lr}
 800956c:	b09c      	sub	sp, #112	; 0x70
 800956e:	ab1d      	add	r3, sp, #116	; 0x74
 8009570:	9002      	str	r0, [sp, #8]
 8009572:	9006      	str	r0, [sp, #24]
 8009574:	9107      	str	r1, [sp, #28]
 8009576:	9104      	str	r1, [sp, #16]
 8009578:	4808      	ldr	r0, [pc, #32]	; (800959c <siprintf+0x38>)
 800957a:	4909      	ldr	r1, [pc, #36]	; (80095a0 <siprintf+0x3c>)
 800957c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009580:	9105      	str	r1, [sp, #20]
 8009582:	6800      	ldr	r0, [r0, #0]
 8009584:	a902      	add	r1, sp, #8
 8009586:	9301      	str	r3, [sp, #4]
 8009588:	f002 ffd8 	bl	800c53c <_svfiprintf_r>
 800958c:	2200      	movs	r2, #0
 800958e:	9b02      	ldr	r3, [sp, #8]
 8009590:	701a      	strb	r2, [r3, #0]
 8009592:	b01c      	add	sp, #112	; 0x70
 8009594:	f85d eb04 	ldr.w	lr, [sp], #4
 8009598:	b003      	add	sp, #12
 800959a:	4770      	bx	lr
 800959c:	2000028c 	.word	0x2000028c
 80095a0:	ffff0208 	.word	0xffff0208

080095a4 <sulp>:
 80095a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a8:	460f      	mov	r7, r1
 80095aa:	4690      	mov	r8, r2
 80095ac:	f002 fe22 	bl	800c1f4 <__ulp>
 80095b0:	4604      	mov	r4, r0
 80095b2:	460d      	mov	r5, r1
 80095b4:	f1b8 0f00 	cmp.w	r8, #0
 80095b8:	d011      	beq.n	80095de <sulp+0x3a>
 80095ba:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80095be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	dd0b      	ble.n	80095de <sulp+0x3a>
 80095c6:	2400      	movs	r4, #0
 80095c8:	051b      	lsls	r3, r3, #20
 80095ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80095ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80095d2:	4622      	mov	r2, r4
 80095d4:	462b      	mov	r3, r5
 80095d6:	f7f6 ff7f 	bl	80004d8 <__aeabi_dmul>
 80095da:	4604      	mov	r4, r0
 80095dc:	460d      	mov	r5, r1
 80095de:	4620      	mov	r0, r4
 80095e0:	4629      	mov	r1, r5
 80095e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080095e8 <_strtod_l>:
 80095e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ec:	469b      	mov	fp, r3
 80095ee:	2300      	movs	r3, #0
 80095f0:	b09f      	sub	sp, #124	; 0x7c
 80095f2:	931a      	str	r3, [sp, #104]	; 0x68
 80095f4:	4b9e      	ldr	r3, [pc, #632]	; (8009870 <_strtod_l+0x288>)
 80095f6:	4682      	mov	sl, r0
 80095f8:	681f      	ldr	r7, [r3, #0]
 80095fa:	460e      	mov	r6, r1
 80095fc:	4638      	mov	r0, r7
 80095fe:	9215      	str	r2, [sp, #84]	; 0x54
 8009600:	f7f6 fda6 	bl	8000150 <strlen>
 8009604:	f04f 0800 	mov.w	r8, #0
 8009608:	4604      	mov	r4, r0
 800960a:	f04f 0900 	mov.w	r9, #0
 800960e:	9619      	str	r6, [sp, #100]	; 0x64
 8009610:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009612:	781a      	ldrb	r2, [r3, #0]
 8009614:	2a2b      	cmp	r2, #43	; 0x2b
 8009616:	d04c      	beq.n	80096b2 <_strtod_l+0xca>
 8009618:	d83a      	bhi.n	8009690 <_strtod_l+0xa8>
 800961a:	2a0d      	cmp	r2, #13
 800961c:	d833      	bhi.n	8009686 <_strtod_l+0x9e>
 800961e:	2a08      	cmp	r2, #8
 8009620:	d833      	bhi.n	800968a <_strtod_l+0xa2>
 8009622:	2a00      	cmp	r2, #0
 8009624:	d03d      	beq.n	80096a2 <_strtod_l+0xba>
 8009626:	2300      	movs	r3, #0
 8009628:	930a      	str	r3, [sp, #40]	; 0x28
 800962a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800962c:	782b      	ldrb	r3, [r5, #0]
 800962e:	2b30      	cmp	r3, #48	; 0x30
 8009630:	f040 80aa 	bne.w	8009788 <_strtod_l+0x1a0>
 8009634:	786b      	ldrb	r3, [r5, #1]
 8009636:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800963a:	2b58      	cmp	r3, #88	; 0x58
 800963c:	d166      	bne.n	800970c <_strtod_l+0x124>
 800963e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009640:	4650      	mov	r0, sl
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	ab1a      	add	r3, sp, #104	; 0x68
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	4a8a      	ldr	r2, [pc, #552]	; (8009874 <_strtod_l+0x28c>)
 800964a:	f8cd b008 	str.w	fp, [sp, #8]
 800964e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009650:	a919      	add	r1, sp, #100	; 0x64
 8009652:	f001 fecb 	bl	800b3ec <__gethex>
 8009656:	f010 0607 	ands.w	r6, r0, #7
 800965a:	4604      	mov	r4, r0
 800965c:	d005      	beq.n	800966a <_strtod_l+0x82>
 800965e:	2e06      	cmp	r6, #6
 8009660:	d129      	bne.n	80096b6 <_strtod_l+0xce>
 8009662:	2300      	movs	r3, #0
 8009664:	3501      	adds	r5, #1
 8009666:	9519      	str	r5, [sp, #100]	; 0x64
 8009668:	930a      	str	r3, [sp, #40]	; 0x28
 800966a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800966c:	2b00      	cmp	r3, #0
 800966e:	f040 858a 	bne.w	800a186 <_strtod_l+0xb9e>
 8009672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009674:	b1d3      	cbz	r3, 80096ac <_strtod_l+0xc4>
 8009676:	4642      	mov	r2, r8
 8009678:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800967c:	4610      	mov	r0, r2
 800967e:	4619      	mov	r1, r3
 8009680:	b01f      	add	sp, #124	; 0x7c
 8009682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009686:	2a20      	cmp	r2, #32
 8009688:	d1cd      	bne.n	8009626 <_strtod_l+0x3e>
 800968a:	3301      	adds	r3, #1
 800968c:	9319      	str	r3, [sp, #100]	; 0x64
 800968e:	e7bf      	b.n	8009610 <_strtod_l+0x28>
 8009690:	2a2d      	cmp	r2, #45	; 0x2d
 8009692:	d1c8      	bne.n	8009626 <_strtod_l+0x3e>
 8009694:	2201      	movs	r2, #1
 8009696:	920a      	str	r2, [sp, #40]	; 0x28
 8009698:	1c5a      	adds	r2, r3, #1
 800969a:	9219      	str	r2, [sp, #100]	; 0x64
 800969c:	785b      	ldrb	r3, [r3, #1]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1c3      	bne.n	800962a <_strtod_l+0x42>
 80096a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096a4:	9619      	str	r6, [sp, #100]	; 0x64
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f040 856b 	bne.w	800a182 <_strtod_l+0xb9a>
 80096ac:	4642      	mov	r2, r8
 80096ae:	464b      	mov	r3, r9
 80096b0:	e7e4      	b.n	800967c <_strtod_l+0x94>
 80096b2:	2200      	movs	r2, #0
 80096b4:	e7ef      	b.n	8009696 <_strtod_l+0xae>
 80096b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80096b8:	b13a      	cbz	r2, 80096ca <_strtod_l+0xe2>
 80096ba:	2135      	movs	r1, #53	; 0x35
 80096bc:	a81c      	add	r0, sp, #112	; 0x70
 80096be:	f002 fe9d 	bl	800c3fc <__copybits>
 80096c2:	4650      	mov	r0, sl
 80096c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80096c6:	f002 fa65 	bl	800bb94 <_Bfree>
 80096ca:	3e01      	subs	r6, #1
 80096cc:	2e04      	cmp	r6, #4
 80096ce:	d806      	bhi.n	80096de <_strtod_l+0xf6>
 80096d0:	e8df f006 	tbb	[pc, r6]
 80096d4:	1714030a 	.word	0x1714030a
 80096d8:	0a          	.byte	0x0a
 80096d9:	00          	.byte	0x00
 80096da:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80096de:	0721      	lsls	r1, r4, #28
 80096e0:	d5c3      	bpl.n	800966a <_strtod_l+0x82>
 80096e2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80096e6:	e7c0      	b.n	800966a <_strtod_l+0x82>
 80096e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80096ea:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80096ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80096f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80096f6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80096fa:	e7f0      	b.n	80096de <_strtod_l+0xf6>
 80096fc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009878 <_strtod_l+0x290>
 8009700:	e7ed      	b.n	80096de <_strtod_l+0xf6>
 8009702:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009706:	f04f 38ff 	mov.w	r8, #4294967295
 800970a:	e7e8      	b.n	80096de <_strtod_l+0xf6>
 800970c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800970e:	1c5a      	adds	r2, r3, #1
 8009710:	9219      	str	r2, [sp, #100]	; 0x64
 8009712:	785b      	ldrb	r3, [r3, #1]
 8009714:	2b30      	cmp	r3, #48	; 0x30
 8009716:	d0f9      	beq.n	800970c <_strtod_l+0x124>
 8009718:	2b00      	cmp	r3, #0
 800971a:	d0a6      	beq.n	800966a <_strtod_l+0x82>
 800971c:	2301      	movs	r3, #1
 800971e:	9307      	str	r3, [sp, #28]
 8009720:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009722:	220a      	movs	r2, #10
 8009724:	9308      	str	r3, [sp, #32]
 8009726:	2300      	movs	r3, #0
 8009728:	469b      	mov	fp, r3
 800972a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800972e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009730:	7805      	ldrb	r5, [r0, #0]
 8009732:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009736:	b2d9      	uxtb	r1, r3
 8009738:	2909      	cmp	r1, #9
 800973a:	d927      	bls.n	800978c <_strtod_l+0x1a4>
 800973c:	4622      	mov	r2, r4
 800973e:	4639      	mov	r1, r7
 8009740:	f003 f845 	bl	800c7ce <strncmp>
 8009744:	2800      	cmp	r0, #0
 8009746:	d033      	beq.n	80097b0 <_strtod_l+0x1c8>
 8009748:	2000      	movs	r0, #0
 800974a:	462a      	mov	r2, r5
 800974c:	465c      	mov	r4, fp
 800974e:	4603      	mov	r3, r0
 8009750:	9004      	str	r0, [sp, #16]
 8009752:	2a65      	cmp	r2, #101	; 0x65
 8009754:	d001      	beq.n	800975a <_strtod_l+0x172>
 8009756:	2a45      	cmp	r2, #69	; 0x45
 8009758:	d114      	bne.n	8009784 <_strtod_l+0x19c>
 800975a:	b91c      	cbnz	r4, 8009764 <_strtod_l+0x17c>
 800975c:	9a07      	ldr	r2, [sp, #28]
 800975e:	4302      	orrs	r2, r0
 8009760:	d09f      	beq.n	80096a2 <_strtod_l+0xba>
 8009762:	2400      	movs	r4, #0
 8009764:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009766:	1c72      	adds	r2, r6, #1
 8009768:	9219      	str	r2, [sp, #100]	; 0x64
 800976a:	7872      	ldrb	r2, [r6, #1]
 800976c:	2a2b      	cmp	r2, #43	; 0x2b
 800976e:	d079      	beq.n	8009864 <_strtod_l+0x27c>
 8009770:	2a2d      	cmp	r2, #45	; 0x2d
 8009772:	f000 8083 	beq.w	800987c <_strtod_l+0x294>
 8009776:	2700      	movs	r7, #0
 8009778:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800977c:	2909      	cmp	r1, #9
 800977e:	f240 8083 	bls.w	8009888 <_strtod_l+0x2a0>
 8009782:	9619      	str	r6, [sp, #100]	; 0x64
 8009784:	2500      	movs	r5, #0
 8009786:	e09f      	b.n	80098c8 <_strtod_l+0x2e0>
 8009788:	2300      	movs	r3, #0
 800978a:	e7c8      	b.n	800971e <_strtod_l+0x136>
 800978c:	f1bb 0f08 	cmp.w	fp, #8
 8009790:	bfd5      	itete	le
 8009792:	9906      	ldrle	r1, [sp, #24]
 8009794:	9905      	ldrgt	r1, [sp, #20]
 8009796:	fb02 3301 	mlale	r3, r2, r1, r3
 800979a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800979e:	f100 0001 	add.w	r0, r0, #1
 80097a2:	bfd4      	ite	le
 80097a4:	9306      	strle	r3, [sp, #24]
 80097a6:	9305      	strgt	r3, [sp, #20]
 80097a8:	f10b 0b01 	add.w	fp, fp, #1
 80097ac:	9019      	str	r0, [sp, #100]	; 0x64
 80097ae:	e7be      	b.n	800972e <_strtod_l+0x146>
 80097b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097b2:	191a      	adds	r2, r3, r4
 80097b4:	9219      	str	r2, [sp, #100]	; 0x64
 80097b6:	5d1a      	ldrb	r2, [r3, r4]
 80097b8:	f1bb 0f00 	cmp.w	fp, #0
 80097bc:	d036      	beq.n	800982c <_strtod_l+0x244>
 80097be:	465c      	mov	r4, fp
 80097c0:	9004      	str	r0, [sp, #16]
 80097c2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80097c6:	2b09      	cmp	r3, #9
 80097c8:	d912      	bls.n	80097f0 <_strtod_l+0x208>
 80097ca:	2301      	movs	r3, #1
 80097cc:	e7c1      	b.n	8009752 <_strtod_l+0x16a>
 80097ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097d0:	3001      	adds	r0, #1
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	9219      	str	r2, [sp, #100]	; 0x64
 80097d6:	785a      	ldrb	r2, [r3, #1]
 80097d8:	2a30      	cmp	r2, #48	; 0x30
 80097da:	d0f8      	beq.n	80097ce <_strtod_l+0x1e6>
 80097dc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80097e0:	2b08      	cmp	r3, #8
 80097e2:	f200 84d5 	bhi.w	800a190 <_strtod_l+0xba8>
 80097e6:	9004      	str	r0, [sp, #16]
 80097e8:	2000      	movs	r0, #0
 80097ea:	4604      	mov	r4, r0
 80097ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097ee:	9308      	str	r3, [sp, #32]
 80097f0:	3a30      	subs	r2, #48	; 0x30
 80097f2:	f100 0301 	add.w	r3, r0, #1
 80097f6:	d013      	beq.n	8009820 <_strtod_l+0x238>
 80097f8:	9904      	ldr	r1, [sp, #16]
 80097fa:	1905      	adds	r5, r0, r4
 80097fc:	4419      	add	r1, r3
 80097fe:	9104      	str	r1, [sp, #16]
 8009800:	4623      	mov	r3, r4
 8009802:	210a      	movs	r1, #10
 8009804:	42ab      	cmp	r3, r5
 8009806:	d113      	bne.n	8009830 <_strtod_l+0x248>
 8009808:	1823      	adds	r3, r4, r0
 800980a:	2b08      	cmp	r3, #8
 800980c:	f104 0401 	add.w	r4, r4, #1
 8009810:	4404      	add	r4, r0
 8009812:	dc1b      	bgt.n	800984c <_strtod_l+0x264>
 8009814:	230a      	movs	r3, #10
 8009816:	9906      	ldr	r1, [sp, #24]
 8009818:	fb03 2301 	mla	r3, r3, r1, r2
 800981c:	9306      	str	r3, [sp, #24]
 800981e:	2300      	movs	r3, #0
 8009820:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009822:	4618      	mov	r0, r3
 8009824:	1c51      	adds	r1, r2, #1
 8009826:	9119      	str	r1, [sp, #100]	; 0x64
 8009828:	7852      	ldrb	r2, [r2, #1]
 800982a:	e7ca      	b.n	80097c2 <_strtod_l+0x1da>
 800982c:	4658      	mov	r0, fp
 800982e:	e7d3      	b.n	80097d8 <_strtod_l+0x1f0>
 8009830:	2b08      	cmp	r3, #8
 8009832:	dc04      	bgt.n	800983e <_strtod_l+0x256>
 8009834:	9f06      	ldr	r7, [sp, #24]
 8009836:	434f      	muls	r7, r1
 8009838:	9706      	str	r7, [sp, #24]
 800983a:	3301      	adds	r3, #1
 800983c:	e7e2      	b.n	8009804 <_strtod_l+0x21c>
 800983e:	1c5f      	adds	r7, r3, #1
 8009840:	2f10      	cmp	r7, #16
 8009842:	bfde      	ittt	le
 8009844:	9f05      	ldrle	r7, [sp, #20]
 8009846:	434f      	mulle	r7, r1
 8009848:	9705      	strle	r7, [sp, #20]
 800984a:	e7f6      	b.n	800983a <_strtod_l+0x252>
 800984c:	2c10      	cmp	r4, #16
 800984e:	bfdf      	itttt	le
 8009850:	230a      	movle	r3, #10
 8009852:	9905      	ldrle	r1, [sp, #20]
 8009854:	fb03 2301 	mlale	r3, r3, r1, r2
 8009858:	9305      	strle	r3, [sp, #20]
 800985a:	e7e0      	b.n	800981e <_strtod_l+0x236>
 800985c:	2300      	movs	r3, #0
 800985e:	9304      	str	r3, [sp, #16]
 8009860:	2301      	movs	r3, #1
 8009862:	e77b      	b.n	800975c <_strtod_l+0x174>
 8009864:	2700      	movs	r7, #0
 8009866:	1cb2      	adds	r2, r6, #2
 8009868:	9219      	str	r2, [sp, #100]	; 0x64
 800986a:	78b2      	ldrb	r2, [r6, #2]
 800986c:	e784      	b.n	8009778 <_strtod_l+0x190>
 800986e:	bf00      	nop
 8009870:	0800d49c 	.word	0x0800d49c
 8009874:	0800d1f0 	.word	0x0800d1f0
 8009878:	7ff00000 	.word	0x7ff00000
 800987c:	2701      	movs	r7, #1
 800987e:	e7f2      	b.n	8009866 <_strtod_l+0x27e>
 8009880:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009882:	1c51      	adds	r1, r2, #1
 8009884:	9119      	str	r1, [sp, #100]	; 0x64
 8009886:	7852      	ldrb	r2, [r2, #1]
 8009888:	2a30      	cmp	r2, #48	; 0x30
 800988a:	d0f9      	beq.n	8009880 <_strtod_l+0x298>
 800988c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009890:	2908      	cmp	r1, #8
 8009892:	f63f af77 	bhi.w	8009784 <_strtod_l+0x19c>
 8009896:	f04f 0e0a 	mov.w	lr, #10
 800989a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800989e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80098a0:	9209      	str	r2, [sp, #36]	; 0x24
 80098a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80098a4:	1c51      	adds	r1, r2, #1
 80098a6:	9119      	str	r1, [sp, #100]	; 0x64
 80098a8:	7852      	ldrb	r2, [r2, #1]
 80098aa:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80098ae:	2d09      	cmp	r5, #9
 80098b0:	d935      	bls.n	800991e <_strtod_l+0x336>
 80098b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80098b4:	1b49      	subs	r1, r1, r5
 80098b6:	2908      	cmp	r1, #8
 80098b8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80098bc:	dc02      	bgt.n	80098c4 <_strtod_l+0x2dc>
 80098be:	4565      	cmp	r5, ip
 80098c0:	bfa8      	it	ge
 80098c2:	4665      	movge	r5, ip
 80098c4:	b107      	cbz	r7, 80098c8 <_strtod_l+0x2e0>
 80098c6:	426d      	negs	r5, r5
 80098c8:	2c00      	cmp	r4, #0
 80098ca:	d14c      	bne.n	8009966 <_strtod_l+0x37e>
 80098cc:	9907      	ldr	r1, [sp, #28]
 80098ce:	4301      	orrs	r1, r0
 80098d0:	f47f aecb 	bne.w	800966a <_strtod_l+0x82>
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f47f aee4 	bne.w	80096a2 <_strtod_l+0xba>
 80098da:	2a69      	cmp	r2, #105	; 0x69
 80098dc:	d026      	beq.n	800992c <_strtod_l+0x344>
 80098de:	dc23      	bgt.n	8009928 <_strtod_l+0x340>
 80098e0:	2a49      	cmp	r2, #73	; 0x49
 80098e2:	d023      	beq.n	800992c <_strtod_l+0x344>
 80098e4:	2a4e      	cmp	r2, #78	; 0x4e
 80098e6:	f47f aedc 	bne.w	80096a2 <_strtod_l+0xba>
 80098ea:	499d      	ldr	r1, [pc, #628]	; (8009b60 <_strtod_l+0x578>)
 80098ec:	a819      	add	r0, sp, #100	; 0x64
 80098ee:	f001 ffcb 	bl	800b888 <__match>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	f43f aed5 	beq.w	80096a2 <_strtod_l+0xba>
 80098f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	2b28      	cmp	r3, #40	; 0x28
 80098fe:	d12c      	bne.n	800995a <_strtod_l+0x372>
 8009900:	4998      	ldr	r1, [pc, #608]	; (8009b64 <_strtod_l+0x57c>)
 8009902:	aa1c      	add	r2, sp, #112	; 0x70
 8009904:	a819      	add	r0, sp, #100	; 0x64
 8009906:	f001 ffd3 	bl	800b8b0 <__hexnan>
 800990a:	2805      	cmp	r0, #5
 800990c:	d125      	bne.n	800995a <_strtod_l+0x372>
 800990e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009910:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009914:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009918:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800991c:	e6a5      	b.n	800966a <_strtod_l+0x82>
 800991e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009922:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009926:	e7bc      	b.n	80098a2 <_strtod_l+0x2ba>
 8009928:	2a6e      	cmp	r2, #110	; 0x6e
 800992a:	e7dc      	b.n	80098e6 <_strtod_l+0x2fe>
 800992c:	498e      	ldr	r1, [pc, #568]	; (8009b68 <_strtod_l+0x580>)
 800992e:	a819      	add	r0, sp, #100	; 0x64
 8009930:	f001 ffaa 	bl	800b888 <__match>
 8009934:	2800      	cmp	r0, #0
 8009936:	f43f aeb4 	beq.w	80096a2 <_strtod_l+0xba>
 800993a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800993c:	498b      	ldr	r1, [pc, #556]	; (8009b6c <_strtod_l+0x584>)
 800993e:	3b01      	subs	r3, #1
 8009940:	a819      	add	r0, sp, #100	; 0x64
 8009942:	9319      	str	r3, [sp, #100]	; 0x64
 8009944:	f001 ffa0 	bl	800b888 <__match>
 8009948:	b910      	cbnz	r0, 8009950 <_strtod_l+0x368>
 800994a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800994c:	3301      	adds	r3, #1
 800994e:	9319      	str	r3, [sp, #100]	; 0x64
 8009950:	f04f 0800 	mov.w	r8, #0
 8009954:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009b70 <_strtod_l+0x588>
 8009958:	e687      	b.n	800966a <_strtod_l+0x82>
 800995a:	4886      	ldr	r0, [pc, #536]	; (8009b74 <_strtod_l+0x58c>)
 800995c:	f002 feee 	bl	800c73c <nan>
 8009960:	4680      	mov	r8, r0
 8009962:	4689      	mov	r9, r1
 8009964:	e681      	b.n	800966a <_strtod_l+0x82>
 8009966:	9b04      	ldr	r3, [sp, #16]
 8009968:	f1bb 0f00 	cmp.w	fp, #0
 800996c:	bf08      	it	eq
 800996e:	46a3      	moveq	fp, r4
 8009970:	1aeb      	subs	r3, r5, r3
 8009972:	2c10      	cmp	r4, #16
 8009974:	9806      	ldr	r0, [sp, #24]
 8009976:	4626      	mov	r6, r4
 8009978:	9307      	str	r3, [sp, #28]
 800997a:	bfa8      	it	ge
 800997c:	2610      	movge	r6, #16
 800997e:	f7f6 fd31 	bl	80003e4 <__aeabi_ui2d>
 8009982:	2c09      	cmp	r4, #9
 8009984:	4680      	mov	r8, r0
 8009986:	4689      	mov	r9, r1
 8009988:	dd13      	ble.n	80099b2 <_strtod_l+0x3ca>
 800998a:	4b7b      	ldr	r3, [pc, #492]	; (8009b78 <_strtod_l+0x590>)
 800998c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009990:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009994:	f7f6 fda0 	bl	80004d8 <__aeabi_dmul>
 8009998:	4680      	mov	r8, r0
 800999a:	9805      	ldr	r0, [sp, #20]
 800999c:	4689      	mov	r9, r1
 800999e:	f7f6 fd21 	bl	80003e4 <__aeabi_ui2d>
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	4640      	mov	r0, r8
 80099a8:	4649      	mov	r1, r9
 80099aa:	f7f6 fbdf 	bl	800016c <__adddf3>
 80099ae:	4680      	mov	r8, r0
 80099b0:	4689      	mov	r9, r1
 80099b2:	2c0f      	cmp	r4, #15
 80099b4:	dc36      	bgt.n	8009a24 <_strtod_l+0x43c>
 80099b6:	9b07      	ldr	r3, [sp, #28]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f43f ae56 	beq.w	800966a <_strtod_l+0x82>
 80099be:	dd22      	ble.n	8009a06 <_strtod_l+0x41e>
 80099c0:	2b16      	cmp	r3, #22
 80099c2:	dc09      	bgt.n	80099d8 <_strtod_l+0x3f0>
 80099c4:	496c      	ldr	r1, [pc, #432]	; (8009b78 <_strtod_l+0x590>)
 80099c6:	4642      	mov	r2, r8
 80099c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099cc:	464b      	mov	r3, r9
 80099ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099d2:	f7f6 fd81 	bl	80004d8 <__aeabi_dmul>
 80099d6:	e7c3      	b.n	8009960 <_strtod_l+0x378>
 80099d8:	9a07      	ldr	r2, [sp, #28]
 80099da:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80099de:	4293      	cmp	r3, r2
 80099e0:	db20      	blt.n	8009a24 <_strtod_l+0x43c>
 80099e2:	4d65      	ldr	r5, [pc, #404]	; (8009b78 <_strtod_l+0x590>)
 80099e4:	f1c4 040f 	rsb	r4, r4, #15
 80099e8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80099ec:	4642      	mov	r2, r8
 80099ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099f2:	464b      	mov	r3, r9
 80099f4:	f7f6 fd70 	bl	80004d8 <__aeabi_dmul>
 80099f8:	9b07      	ldr	r3, [sp, #28]
 80099fa:	1b1c      	subs	r4, r3, r4
 80099fc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009a00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a04:	e7e5      	b.n	80099d2 <_strtod_l+0x3ea>
 8009a06:	9b07      	ldr	r3, [sp, #28]
 8009a08:	3316      	adds	r3, #22
 8009a0a:	db0b      	blt.n	8009a24 <_strtod_l+0x43c>
 8009a0c:	9b04      	ldr	r3, [sp, #16]
 8009a0e:	4640      	mov	r0, r8
 8009a10:	1b5d      	subs	r5, r3, r5
 8009a12:	4b59      	ldr	r3, [pc, #356]	; (8009b78 <_strtod_l+0x590>)
 8009a14:	4649      	mov	r1, r9
 8009a16:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009a1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a1e:	f7f6 fe85 	bl	800072c <__aeabi_ddiv>
 8009a22:	e79d      	b.n	8009960 <_strtod_l+0x378>
 8009a24:	9b07      	ldr	r3, [sp, #28]
 8009a26:	1ba6      	subs	r6, r4, r6
 8009a28:	441e      	add	r6, r3
 8009a2a:	2e00      	cmp	r6, #0
 8009a2c:	dd74      	ble.n	8009b18 <_strtod_l+0x530>
 8009a2e:	f016 030f 	ands.w	r3, r6, #15
 8009a32:	d00a      	beq.n	8009a4a <_strtod_l+0x462>
 8009a34:	4950      	ldr	r1, [pc, #320]	; (8009b78 <_strtod_l+0x590>)
 8009a36:	4642      	mov	r2, r8
 8009a38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a40:	464b      	mov	r3, r9
 8009a42:	f7f6 fd49 	bl	80004d8 <__aeabi_dmul>
 8009a46:	4680      	mov	r8, r0
 8009a48:	4689      	mov	r9, r1
 8009a4a:	f036 060f 	bics.w	r6, r6, #15
 8009a4e:	d052      	beq.n	8009af6 <_strtod_l+0x50e>
 8009a50:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009a54:	dd27      	ble.n	8009aa6 <_strtod_l+0x4be>
 8009a56:	f04f 0b00 	mov.w	fp, #0
 8009a5a:	f8cd b010 	str.w	fp, [sp, #16]
 8009a5e:	f8cd b020 	str.w	fp, [sp, #32]
 8009a62:	f8cd b018 	str.w	fp, [sp, #24]
 8009a66:	2322      	movs	r3, #34	; 0x22
 8009a68:	f04f 0800 	mov.w	r8, #0
 8009a6c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009b70 <_strtod_l+0x588>
 8009a70:	f8ca 3000 	str.w	r3, [sl]
 8009a74:	9b08      	ldr	r3, [sp, #32]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f43f adf7 	beq.w	800966a <_strtod_l+0x82>
 8009a7c:	4650      	mov	r0, sl
 8009a7e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009a80:	f002 f888 	bl	800bb94 <_Bfree>
 8009a84:	4650      	mov	r0, sl
 8009a86:	9906      	ldr	r1, [sp, #24]
 8009a88:	f002 f884 	bl	800bb94 <_Bfree>
 8009a8c:	4650      	mov	r0, sl
 8009a8e:	9904      	ldr	r1, [sp, #16]
 8009a90:	f002 f880 	bl	800bb94 <_Bfree>
 8009a94:	4650      	mov	r0, sl
 8009a96:	9908      	ldr	r1, [sp, #32]
 8009a98:	f002 f87c 	bl	800bb94 <_Bfree>
 8009a9c:	4659      	mov	r1, fp
 8009a9e:	4650      	mov	r0, sl
 8009aa0:	f002 f878 	bl	800bb94 <_Bfree>
 8009aa4:	e5e1      	b.n	800966a <_strtod_l+0x82>
 8009aa6:	4b35      	ldr	r3, [pc, #212]	; (8009b7c <_strtod_l+0x594>)
 8009aa8:	4640      	mov	r0, r8
 8009aaa:	9305      	str	r3, [sp, #20]
 8009aac:	2300      	movs	r3, #0
 8009aae:	4649      	mov	r1, r9
 8009ab0:	461f      	mov	r7, r3
 8009ab2:	1136      	asrs	r6, r6, #4
 8009ab4:	2e01      	cmp	r6, #1
 8009ab6:	dc21      	bgt.n	8009afc <_strtod_l+0x514>
 8009ab8:	b10b      	cbz	r3, 8009abe <_strtod_l+0x4d6>
 8009aba:	4680      	mov	r8, r0
 8009abc:	4689      	mov	r9, r1
 8009abe:	4b2f      	ldr	r3, [pc, #188]	; (8009b7c <_strtod_l+0x594>)
 8009ac0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009ac4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009ac8:	4642      	mov	r2, r8
 8009aca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ace:	464b      	mov	r3, r9
 8009ad0:	f7f6 fd02 	bl	80004d8 <__aeabi_dmul>
 8009ad4:	4b26      	ldr	r3, [pc, #152]	; (8009b70 <_strtod_l+0x588>)
 8009ad6:	460a      	mov	r2, r1
 8009ad8:	400b      	ands	r3, r1
 8009ada:	4929      	ldr	r1, [pc, #164]	; (8009b80 <_strtod_l+0x598>)
 8009adc:	4680      	mov	r8, r0
 8009ade:	428b      	cmp	r3, r1
 8009ae0:	d8b9      	bhi.n	8009a56 <_strtod_l+0x46e>
 8009ae2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009ae6:	428b      	cmp	r3, r1
 8009ae8:	bf86      	itte	hi
 8009aea:	f04f 38ff 	movhi.w	r8, #4294967295
 8009aee:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009b84 <_strtod_l+0x59c>
 8009af2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009af6:	2300      	movs	r3, #0
 8009af8:	9305      	str	r3, [sp, #20]
 8009afa:	e07f      	b.n	8009bfc <_strtod_l+0x614>
 8009afc:	07f2      	lsls	r2, r6, #31
 8009afe:	d505      	bpl.n	8009b0c <_strtod_l+0x524>
 8009b00:	9b05      	ldr	r3, [sp, #20]
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	f7f6 fce7 	bl	80004d8 <__aeabi_dmul>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	9a05      	ldr	r2, [sp, #20]
 8009b0e:	3701      	adds	r7, #1
 8009b10:	3208      	adds	r2, #8
 8009b12:	1076      	asrs	r6, r6, #1
 8009b14:	9205      	str	r2, [sp, #20]
 8009b16:	e7cd      	b.n	8009ab4 <_strtod_l+0x4cc>
 8009b18:	d0ed      	beq.n	8009af6 <_strtod_l+0x50e>
 8009b1a:	4276      	negs	r6, r6
 8009b1c:	f016 020f 	ands.w	r2, r6, #15
 8009b20:	d00a      	beq.n	8009b38 <_strtod_l+0x550>
 8009b22:	4b15      	ldr	r3, [pc, #84]	; (8009b78 <_strtod_l+0x590>)
 8009b24:	4640      	mov	r0, r8
 8009b26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b2a:	4649      	mov	r1, r9
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fdfc 	bl	800072c <__aeabi_ddiv>
 8009b34:	4680      	mov	r8, r0
 8009b36:	4689      	mov	r9, r1
 8009b38:	1136      	asrs	r6, r6, #4
 8009b3a:	d0dc      	beq.n	8009af6 <_strtod_l+0x50e>
 8009b3c:	2e1f      	cmp	r6, #31
 8009b3e:	dd23      	ble.n	8009b88 <_strtod_l+0x5a0>
 8009b40:	f04f 0b00 	mov.w	fp, #0
 8009b44:	f8cd b010 	str.w	fp, [sp, #16]
 8009b48:	f8cd b020 	str.w	fp, [sp, #32]
 8009b4c:	f8cd b018 	str.w	fp, [sp, #24]
 8009b50:	2322      	movs	r3, #34	; 0x22
 8009b52:	f04f 0800 	mov.w	r8, #0
 8009b56:	f04f 0900 	mov.w	r9, #0
 8009b5a:	f8ca 3000 	str.w	r3, [sl]
 8009b5e:	e789      	b.n	8009a74 <_strtod_l+0x48c>
 8009b60:	0800d1c1 	.word	0x0800d1c1
 8009b64:	0800d204 	.word	0x0800d204
 8009b68:	0800d1b9 	.word	0x0800d1b9
 8009b6c:	0800d344 	.word	0x0800d344
 8009b70:	7ff00000 	.word	0x7ff00000
 8009b74:	0800d658 	.word	0x0800d658
 8009b78:	0800d538 	.word	0x0800d538
 8009b7c:	0800d510 	.word	0x0800d510
 8009b80:	7ca00000 	.word	0x7ca00000
 8009b84:	7fefffff 	.word	0x7fefffff
 8009b88:	f016 0310 	ands.w	r3, r6, #16
 8009b8c:	bf18      	it	ne
 8009b8e:	236a      	movne	r3, #106	; 0x6a
 8009b90:	4640      	mov	r0, r8
 8009b92:	9305      	str	r3, [sp, #20]
 8009b94:	4649      	mov	r1, r9
 8009b96:	2300      	movs	r3, #0
 8009b98:	4fb0      	ldr	r7, [pc, #704]	; (8009e5c <_strtod_l+0x874>)
 8009b9a:	07f2      	lsls	r2, r6, #31
 8009b9c:	d504      	bpl.n	8009ba8 <_strtod_l+0x5c0>
 8009b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ba2:	f7f6 fc99 	bl	80004d8 <__aeabi_dmul>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	1076      	asrs	r6, r6, #1
 8009baa:	f107 0708 	add.w	r7, r7, #8
 8009bae:	d1f4      	bne.n	8009b9a <_strtod_l+0x5b2>
 8009bb0:	b10b      	cbz	r3, 8009bb6 <_strtod_l+0x5ce>
 8009bb2:	4680      	mov	r8, r0
 8009bb4:	4689      	mov	r9, r1
 8009bb6:	9b05      	ldr	r3, [sp, #20]
 8009bb8:	b1c3      	cbz	r3, 8009bec <_strtod_l+0x604>
 8009bba:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009bbe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	4649      	mov	r1, r9
 8009bc6:	dd11      	ble.n	8009bec <_strtod_l+0x604>
 8009bc8:	2b1f      	cmp	r3, #31
 8009bca:	f340 8127 	ble.w	8009e1c <_strtod_l+0x834>
 8009bce:	2b34      	cmp	r3, #52	; 0x34
 8009bd0:	bfd8      	it	le
 8009bd2:	f04f 33ff 	movle.w	r3, #4294967295
 8009bd6:	f04f 0800 	mov.w	r8, #0
 8009bda:	bfcf      	iteee	gt
 8009bdc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009be0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009be4:	fa03 f202 	lslle.w	r2, r3, r2
 8009be8:	ea02 0901 	andle.w	r9, r2, r1
 8009bec:	2200      	movs	r2, #0
 8009bee:	2300      	movs	r3, #0
 8009bf0:	4640      	mov	r0, r8
 8009bf2:	4649      	mov	r1, r9
 8009bf4:	f7f6 fed8 	bl	80009a8 <__aeabi_dcmpeq>
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	d1a1      	bne.n	8009b40 <_strtod_l+0x558>
 8009bfc:	9b06      	ldr	r3, [sp, #24]
 8009bfe:	465a      	mov	r2, fp
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	4650      	mov	r0, sl
 8009c04:	4623      	mov	r3, r4
 8009c06:	9908      	ldr	r1, [sp, #32]
 8009c08:	f002 f82c 	bl	800bc64 <__s2b>
 8009c0c:	9008      	str	r0, [sp, #32]
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	f43f af21 	beq.w	8009a56 <_strtod_l+0x46e>
 8009c14:	9b04      	ldr	r3, [sp, #16]
 8009c16:	f04f 0b00 	mov.w	fp, #0
 8009c1a:	1b5d      	subs	r5, r3, r5
 8009c1c:	9b07      	ldr	r3, [sp, #28]
 8009c1e:	f8cd b010 	str.w	fp, [sp, #16]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	bfb4      	ite	lt
 8009c26:	462b      	movlt	r3, r5
 8009c28:	2300      	movge	r3, #0
 8009c2a:	930e      	str	r3, [sp, #56]	; 0x38
 8009c2c:	9b07      	ldr	r3, [sp, #28]
 8009c2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c32:	9314      	str	r3, [sp, #80]	; 0x50
 8009c34:	9b08      	ldr	r3, [sp, #32]
 8009c36:	4650      	mov	r0, sl
 8009c38:	6859      	ldr	r1, [r3, #4]
 8009c3a:	f001 ff6b 	bl	800bb14 <_Balloc>
 8009c3e:	9006      	str	r0, [sp, #24]
 8009c40:	2800      	cmp	r0, #0
 8009c42:	f43f af10 	beq.w	8009a66 <_strtod_l+0x47e>
 8009c46:	9b08      	ldr	r3, [sp, #32]
 8009c48:	300c      	adds	r0, #12
 8009c4a:	691a      	ldr	r2, [r3, #16]
 8009c4c:	f103 010c 	add.w	r1, r3, #12
 8009c50:	3202      	adds	r2, #2
 8009c52:	0092      	lsls	r2, r2, #2
 8009c54:	f7fe fcfe 	bl	8008654 <memcpy>
 8009c58:	ab1c      	add	r3, sp, #112	; 0x70
 8009c5a:	9301      	str	r3, [sp, #4]
 8009c5c:	ab1b      	add	r3, sp, #108	; 0x6c
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	4642      	mov	r2, r8
 8009c62:	464b      	mov	r3, r9
 8009c64:	4650      	mov	r0, sl
 8009c66:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009c6a:	f002 fb3d 	bl	800c2e8 <__d2b>
 8009c6e:	901a      	str	r0, [sp, #104]	; 0x68
 8009c70:	2800      	cmp	r0, #0
 8009c72:	f43f aef8 	beq.w	8009a66 <_strtod_l+0x47e>
 8009c76:	2101      	movs	r1, #1
 8009c78:	4650      	mov	r0, sl
 8009c7a:	f002 f88b 	bl	800bd94 <__i2b>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	9004      	str	r0, [sp, #16]
 8009c82:	2800      	cmp	r0, #0
 8009c84:	f43f aeef 	beq.w	8009a66 <_strtod_l+0x47e>
 8009c88:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009c8a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c8c:	2d00      	cmp	r5, #0
 8009c8e:	bfab      	itete	ge
 8009c90:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009c92:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009c94:	18ee      	addge	r6, r5, r3
 8009c96:	1b5c      	sublt	r4, r3, r5
 8009c98:	9b05      	ldr	r3, [sp, #20]
 8009c9a:	bfa8      	it	ge
 8009c9c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009c9e:	eba5 0503 	sub.w	r5, r5, r3
 8009ca2:	4415      	add	r5, r2
 8009ca4:	4b6e      	ldr	r3, [pc, #440]	; (8009e60 <_strtod_l+0x878>)
 8009ca6:	f105 35ff 	add.w	r5, r5, #4294967295
 8009caa:	bfb8      	it	lt
 8009cac:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009cae:	429d      	cmp	r5, r3
 8009cb0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009cb4:	f280 80c4 	bge.w	8009e40 <_strtod_l+0x858>
 8009cb8:	1b5b      	subs	r3, r3, r5
 8009cba:	2b1f      	cmp	r3, #31
 8009cbc:	f04f 0701 	mov.w	r7, #1
 8009cc0:	eba2 0203 	sub.w	r2, r2, r3
 8009cc4:	f300 80b1 	bgt.w	8009e2a <_strtod_l+0x842>
 8009cc8:	2500      	movs	r5, #0
 8009cca:	fa07 f303 	lsl.w	r3, r7, r3
 8009cce:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cd0:	18b7      	adds	r7, r6, r2
 8009cd2:	9b05      	ldr	r3, [sp, #20]
 8009cd4:	42be      	cmp	r6, r7
 8009cd6:	4414      	add	r4, r2
 8009cd8:	441c      	add	r4, r3
 8009cda:	4633      	mov	r3, r6
 8009cdc:	bfa8      	it	ge
 8009cde:	463b      	movge	r3, r7
 8009ce0:	42a3      	cmp	r3, r4
 8009ce2:	bfa8      	it	ge
 8009ce4:	4623      	movge	r3, r4
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	bfc2      	ittt	gt
 8009cea:	1aff      	subgt	r7, r7, r3
 8009cec:	1ae4      	subgt	r4, r4, r3
 8009cee:	1af6      	subgt	r6, r6, r3
 8009cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	dd17      	ble.n	8009d26 <_strtod_l+0x73e>
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	4650      	mov	r0, sl
 8009cfa:	9904      	ldr	r1, [sp, #16]
 8009cfc:	f002 f908 	bl	800bf10 <__pow5mult>
 8009d00:	9004      	str	r0, [sp, #16]
 8009d02:	2800      	cmp	r0, #0
 8009d04:	f43f aeaf 	beq.w	8009a66 <_strtod_l+0x47e>
 8009d08:	4601      	mov	r1, r0
 8009d0a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009d0c:	4650      	mov	r0, sl
 8009d0e:	f002 f857 	bl	800bdc0 <__multiply>
 8009d12:	9009      	str	r0, [sp, #36]	; 0x24
 8009d14:	2800      	cmp	r0, #0
 8009d16:	f43f aea6 	beq.w	8009a66 <_strtod_l+0x47e>
 8009d1a:	4650      	mov	r0, sl
 8009d1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009d1e:	f001 ff39 	bl	800bb94 <_Bfree>
 8009d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d24:	931a      	str	r3, [sp, #104]	; 0x68
 8009d26:	2f00      	cmp	r7, #0
 8009d28:	f300 808e 	bgt.w	8009e48 <_strtod_l+0x860>
 8009d2c:	9b07      	ldr	r3, [sp, #28]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	dd08      	ble.n	8009d44 <_strtod_l+0x75c>
 8009d32:	4650      	mov	r0, sl
 8009d34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d36:	9906      	ldr	r1, [sp, #24]
 8009d38:	f002 f8ea 	bl	800bf10 <__pow5mult>
 8009d3c:	9006      	str	r0, [sp, #24]
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	f43f ae91 	beq.w	8009a66 <_strtod_l+0x47e>
 8009d44:	2c00      	cmp	r4, #0
 8009d46:	dd08      	ble.n	8009d5a <_strtod_l+0x772>
 8009d48:	4622      	mov	r2, r4
 8009d4a:	4650      	mov	r0, sl
 8009d4c:	9906      	ldr	r1, [sp, #24]
 8009d4e:	f002 f939 	bl	800bfc4 <__lshift>
 8009d52:	9006      	str	r0, [sp, #24]
 8009d54:	2800      	cmp	r0, #0
 8009d56:	f43f ae86 	beq.w	8009a66 <_strtod_l+0x47e>
 8009d5a:	2e00      	cmp	r6, #0
 8009d5c:	dd08      	ble.n	8009d70 <_strtod_l+0x788>
 8009d5e:	4632      	mov	r2, r6
 8009d60:	4650      	mov	r0, sl
 8009d62:	9904      	ldr	r1, [sp, #16]
 8009d64:	f002 f92e 	bl	800bfc4 <__lshift>
 8009d68:	9004      	str	r0, [sp, #16]
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	f43f ae7b 	beq.w	8009a66 <_strtod_l+0x47e>
 8009d70:	4650      	mov	r0, sl
 8009d72:	9a06      	ldr	r2, [sp, #24]
 8009d74:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009d76:	f002 f9b1 	bl	800c0dc <__mdiff>
 8009d7a:	4683      	mov	fp, r0
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	f43f ae72 	beq.w	8009a66 <_strtod_l+0x47e>
 8009d82:	2400      	movs	r4, #0
 8009d84:	68c3      	ldr	r3, [r0, #12]
 8009d86:	9904      	ldr	r1, [sp, #16]
 8009d88:	60c4      	str	r4, [r0, #12]
 8009d8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d8c:	f002 f98a 	bl	800c0a4 <__mcmp>
 8009d90:	42a0      	cmp	r0, r4
 8009d92:	da6b      	bge.n	8009e6c <_strtod_l+0x884>
 8009d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d96:	ea53 0308 	orrs.w	r3, r3, r8
 8009d9a:	f040 8091 	bne.w	8009ec0 <_strtod_l+0x8d8>
 8009d9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f040 808c 	bne.w	8009ec0 <_strtod_l+0x8d8>
 8009da8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009dac:	0d1b      	lsrs	r3, r3, #20
 8009dae:	051b      	lsls	r3, r3, #20
 8009db0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009db4:	f240 8084 	bls.w	8009ec0 <_strtod_l+0x8d8>
 8009db8:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009dbc:	b91b      	cbnz	r3, 8009dc6 <_strtod_l+0x7de>
 8009dbe:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	dd7c      	ble.n	8009ec0 <_strtod_l+0x8d8>
 8009dc6:	4659      	mov	r1, fp
 8009dc8:	2201      	movs	r2, #1
 8009dca:	4650      	mov	r0, sl
 8009dcc:	f002 f8fa 	bl	800bfc4 <__lshift>
 8009dd0:	9904      	ldr	r1, [sp, #16]
 8009dd2:	4683      	mov	fp, r0
 8009dd4:	f002 f966 	bl	800c0a4 <__mcmp>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	dd71      	ble.n	8009ec0 <_strtod_l+0x8d8>
 8009ddc:	9905      	ldr	r1, [sp, #20]
 8009dde:	464b      	mov	r3, r9
 8009de0:	4a20      	ldr	r2, [pc, #128]	; (8009e64 <_strtod_l+0x87c>)
 8009de2:	2900      	cmp	r1, #0
 8009de4:	f000 808c 	beq.w	8009f00 <_strtod_l+0x918>
 8009de8:	ea02 0109 	and.w	r1, r2, r9
 8009dec:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009df0:	f300 8086 	bgt.w	8009f00 <_strtod_l+0x918>
 8009df4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009df8:	f77f aeaa 	ble.w	8009b50 <_strtod_l+0x568>
 8009dfc:	4640      	mov	r0, r8
 8009dfe:	4649      	mov	r1, r9
 8009e00:	4b19      	ldr	r3, [pc, #100]	; (8009e68 <_strtod_l+0x880>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	f7f6 fb68 	bl	80004d8 <__aeabi_dmul>
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4303      	orrs	r3, r0
 8009e0c:	bf08      	it	eq
 8009e0e:	2322      	moveq	r3, #34	; 0x22
 8009e10:	4680      	mov	r8, r0
 8009e12:	4689      	mov	r9, r1
 8009e14:	bf08      	it	eq
 8009e16:	f8ca 3000 	streq.w	r3, [sl]
 8009e1a:	e62f      	b.n	8009a7c <_strtod_l+0x494>
 8009e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e20:	fa02 f303 	lsl.w	r3, r2, r3
 8009e24:	ea03 0808 	and.w	r8, r3, r8
 8009e28:	e6e0      	b.n	8009bec <_strtod_l+0x604>
 8009e2a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009e2e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009e32:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009e36:	35e2      	adds	r5, #226	; 0xe2
 8009e38:	fa07 f505 	lsl.w	r5, r7, r5
 8009e3c:	970f      	str	r7, [sp, #60]	; 0x3c
 8009e3e:	e747      	b.n	8009cd0 <_strtod_l+0x6e8>
 8009e40:	2301      	movs	r3, #1
 8009e42:	2500      	movs	r5, #0
 8009e44:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e46:	e743      	b.n	8009cd0 <_strtod_l+0x6e8>
 8009e48:	463a      	mov	r2, r7
 8009e4a:	4650      	mov	r0, sl
 8009e4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009e4e:	f002 f8b9 	bl	800bfc4 <__lshift>
 8009e52:	901a      	str	r0, [sp, #104]	; 0x68
 8009e54:	2800      	cmp	r0, #0
 8009e56:	f47f af69 	bne.w	8009d2c <_strtod_l+0x744>
 8009e5a:	e604      	b.n	8009a66 <_strtod_l+0x47e>
 8009e5c:	0800d218 	.word	0x0800d218
 8009e60:	fffffc02 	.word	0xfffffc02
 8009e64:	7ff00000 	.word	0x7ff00000
 8009e68:	39500000 	.word	0x39500000
 8009e6c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009e70:	d165      	bne.n	8009f3e <_strtod_l+0x956>
 8009e72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e78:	b35a      	cbz	r2, 8009ed2 <_strtod_l+0x8ea>
 8009e7a:	4a99      	ldr	r2, [pc, #612]	; (800a0e0 <_strtod_l+0xaf8>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d12b      	bne.n	8009ed8 <_strtod_l+0x8f0>
 8009e80:	9b05      	ldr	r3, [sp, #20]
 8009e82:	4641      	mov	r1, r8
 8009e84:	b303      	cbz	r3, 8009ec8 <_strtod_l+0x8e0>
 8009e86:	464a      	mov	r2, r9
 8009e88:	4b96      	ldr	r3, [pc, #600]	; (800a0e4 <_strtod_l+0xafc>)
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e90:	f04f 32ff 	mov.w	r2, #4294967295
 8009e94:	d81b      	bhi.n	8009ece <_strtod_l+0x8e6>
 8009e96:	0d1b      	lsrs	r3, r3, #20
 8009e98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea0:	4299      	cmp	r1, r3
 8009ea2:	d119      	bne.n	8009ed8 <_strtod_l+0x8f0>
 8009ea4:	4b90      	ldr	r3, [pc, #576]	; (800a0e8 <_strtod_l+0xb00>)
 8009ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d102      	bne.n	8009eb2 <_strtod_l+0x8ca>
 8009eac:	3101      	adds	r1, #1
 8009eae:	f43f adda 	beq.w	8009a66 <_strtod_l+0x47e>
 8009eb2:	f04f 0800 	mov.w	r8, #0
 8009eb6:	4b8b      	ldr	r3, [pc, #556]	; (800a0e4 <_strtod_l+0xafc>)
 8009eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009eba:	401a      	ands	r2, r3
 8009ebc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009ec0:	9b05      	ldr	r3, [sp, #20]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d19a      	bne.n	8009dfc <_strtod_l+0x814>
 8009ec6:	e5d9      	b.n	8009a7c <_strtod_l+0x494>
 8009ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ecc:	e7e8      	b.n	8009ea0 <_strtod_l+0x8b8>
 8009ece:	4613      	mov	r3, r2
 8009ed0:	e7e6      	b.n	8009ea0 <_strtod_l+0x8b8>
 8009ed2:	ea53 0308 	orrs.w	r3, r3, r8
 8009ed6:	d081      	beq.n	8009ddc <_strtod_l+0x7f4>
 8009ed8:	b1e5      	cbz	r5, 8009f14 <_strtod_l+0x92c>
 8009eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009edc:	421d      	tst	r5, r3
 8009ede:	d0ef      	beq.n	8009ec0 <_strtod_l+0x8d8>
 8009ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ee2:	4640      	mov	r0, r8
 8009ee4:	4649      	mov	r1, r9
 8009ee6:	9a05      	ldr	r2, [sp, #20]
 8009ee8:	b1c3      	cbz	r3, 8009f1c <_strtod_l+0x934>
 8009eea:	f7ff fb5b 	bl	80095a4 <sulp>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ef6:	f7f6 f939 	bl	800016c <__adddf3>
 8009efa:	4680      	mov	r8, r0
 8009efc:	4689      	mov	r9, r1
 8009efe:	e7df      	b.n	8009ec0 <_strtod_l+0x8d8>
 8009f00:	4013      	ands	r3, r2
 8009f02:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009f06:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009f0a:	f04f 38ff 	mov.w	r8, #4294967295
 8009f0e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009f12:	e7d5      	b.n	8009ec0 <_strtod_l+0x8d8>
 8009f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f16:	ea13 0f08 	tst.w	r3, r8
 8009f1a:	e7e0      	b.n	8009ede <_strtod_l+0x8f6>
 8009f1c:	f7ff fb42 	bl	80095a4 <sulp>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f28:	f7f6 f91e 	bl	8000168 <__aeabi_dsub>
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	2300      	movs	r3, #0
 8009f30:	4680      	mov	r8, r0
 8009f32:	4689      	mov	r9, r1
 8009f34:	f7f6 fd38 	bl	80009a8 <__aeabi_dcmpeq>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d0c1      	beq.n	8009ec0 <_strtod_l+0x8d8>
 8009f3c:	e608      	b.n	8009b50 <_strtod_l+0x568>
 8009f3e:	4658      	mov	r0, fp
 8009f40:	9904      	ldr	r1, [sp, #16]
 8009f42:	f002 fa2d 	bl	800c3a0 <__ratio>
 8009f46:	2200      	movs	r2, #0
 8009f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f4c:	4606      	mov	r6, r0
 8009f4e:	460f      	mov	r7, r1
 8009f50:	f7f6 fd3e 	bl	80009d0 <__aeabi_dcmple>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d070      	beq.n	800a03a <_strtod_l+0xa52>
 8009f58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d042      	beq.n	8009fe4 <_strtod_l+0x9fc>
 8009f5e:	2600      	movs	r6, #0
 8009f60:	4f62      	ldr	r7, [pc, #392]	; (800a0ec <_strtod_l+0xb04>)
 8009f62:	4d62      	ldr	r5, [pc, #392]	; (800a0ec <_strtod_l+0xb04>)
 8009f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f6a:	0d1b      	lsrs	r3, r3, #20
 8009f6c:	051b      	lsls	r3, r3, #20
 8009f6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f72:	4b5f      	ldr	r3, [pc, #380]	; (800a0f0 <_strtod_l+0xb08>)
 8009f74:	429a      	cmp	r2, r3
 8009f76:	f040 80c3 	bne.w	800a100 <_strtod_l+0xb18>
 8009f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f7c:	4640      	mov	r0, r8
 8009f7e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009f82:	4649      	mov	r1, r9
 8009f84:	f002 f936 	bl	800c1f4 <__ulp>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	4639      	mov	r1, r7
 8009f90:	f7f6 faa2 	bl	80004d8 <__aeabi_dmul>
 8009f94:	4642      	mov	r2, r8
 8009f96:	464b      	mov	r3, r9
 8009f98:	f7f6 f8e8 	bl	800016c <__adddf3>
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4951      	ldr	r1, [pc, #324]	; (800a0e4 <_strtod_l+0xafc>)
 8009fa0:	4a54      	ldr	r2, [pc, #336]	; (800a0f4 <_strtod_l+0xb0c>)
 8009fa2:	4019      	ands	r1, r3
 8009fa4:	4291      	cmp	r1, r2
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	d95d      	bls.n	800a066 <_strtod_l+0xa7e>
 8009faa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fac:	4b4e      	ldr	r3, [pc, #312]	; (800a0e8 <_strtod_l+0xb00>)
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d103      	bne.n	8009fba <_strtod_l+0x9d2>
 8009fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	f43f ad56 	beq.w	8009a66 <_strtod_l+0x47e>
 8009fba:	f04f 38ff 	mov.w	r8, #4294967295
 8009fbe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a0e8 <_strtod_l+0xb00>
 8009fc2:	4650      	mov	r0, sl
 8009fc4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009fc6:	f001 fde5 	bl	800bb94 <_Bfree>
 8009fca:	4650      	mov	r0, sl
 8009fcc:	9906      	ldr	r1, [sp, #24]
 8009fce:	f001 fde1 	bl	800bb94 <_Bfree>
 8009fd2:	4650      	mov	r0, sl
 8009fd4:	9904      	ldr	r1, [sp, #16]
 8009fd6:	f001 fddd 	bl	800bb94 <_Bfree>
 8009fda:	4659      	mov	r1, fp
 8009fdc:	4650      	mov	r0, sl
 8009fde:	f001 fdd9 	bl	800bb94 <_Bfree>
 8009fe2:	e627      	b.n	8009c34 <_strtod_l+0x64c>
 8009fe4:	f1b8 0f00 	cmp.w	r8, #0
 8009fe8:	d119      	bne.n	800a01e <_strtod_l+0xa36>
 8009fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ff0:	b9e3      	cbnz	r3, 800a02c <_strtod_l+0xa44>
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	4639      	mov	r1, r7
 8009ff8:	4b3c      	ldr	r3, [pc, #240]	; (800a0ec <_strtod_l+0xb04>)
 8009ffa:	f7f6 fcdf 	bl	80009bc <__aeabi_dcmplt>
 8009ffe:	b9c8      	cbnz	r0, 800a034 <_strtod_l+0xa4c>
 800a000:	2200      	movs	r2, #0
 800a002:	4630      	mov	r0, r6
 800a004:	4639      	mov	r1, r7
 800a006:	4b3c      	ldr	r3, [pc, #240]	; (800a0f8 <_strtod_l+0xb10>)
 800a008:	f7f6 fa66 	bl	80004d8 <__aeabi_dmul>
 800a00c:	4604      	mov	r4, r0
 800a00e:	460d      	mov	r5, r1
 800a010:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a014:	9416      	str	r4, [sp, #88]	; 0x58
 800a016:	9317      	str	r3, [sp, #92]	; 0x5c
 800a018:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a01c:	e7a2      	b.n	8009f64 <_strtod_l+0x97c>
 800a01e:	f1b8 0f01 	cmp.w	r8, #1
 800a022:	d103      	bne.n	800a02c <_strtod_l+0xa44>
 800a024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a026:	2b00      	cmp	r3, #0
 800a028:	f43f ad92 	beq.w	8009b50 <_strtod_l+0x568>
 800a02c:	2600      	movs	r6, #0
 800a02e:	2400      	movs	r4, #0
 800a030:	4f32      	ldr	r7, [pc, #200]	; (800a0fc <_strtod_l+0xb14>)
 800a032:	e796      	b.n	8009f62 <_strtod_l+0x97a>
 800a034:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a036:	4d30      	ldr	r5, [pc, #192]	; (800a0f8 <_strtod_l+0xb10>)
 800a038:	e7ea      	b.n	800a010 <_strtod_l+0xa28>
 800a03a:	4b2f      	ldr	r3, [pc, #188]	; (800a0f8 <_strtod_l+0xb10>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	4630      	mov	r0, r6
 800a040:	4639      	mov	r1, r7
 800a042:	f7f6 fa49 	bl	80004d8 <__aeabi_dmul>
 800a046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a048:	4604      	mov	r4, r0
 800a04a:	460d      	mov	r5, r1
 800a04c:	b933      	cbnz	r3, 800a05c <_strtod_l+0xa74>
 800a04e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a052:	9010      	str	r0, [sp, #64]	; 0x40
 800a054:	9311      	str	r3, [sp, #68]	; 0x44
 800a056:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a05a:	e783      	b.n	8009f64 <_strtod_l+0x97c>
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a064:	e7f7      	b.n	800a056 <_strtod_l+0xa6e>
 800a066:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a06a:	9b05      	ldr	r3, [sp, #20]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1a8      	bne.n	8009fc2 <_strtod_l+0x9da>
 800a070:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a074:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a076:	0d1b      	lsrs	r3, r3, #20
 800a078:	051b      	lsls	r3, r3, #20
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d1a1      	bne.n	8009fc2 <_strtod_l+0x9da>
 800a07e:	4620      	mov	r0, r4
 800a080:	4629      	mov	r1, r5
 800a082:	f7f6 fd71 	bl	8000b68 <__aeabi_d2lz>
 800a086:	f7f6 f9f9 	bl	800047c <__aeabi_l2d>
 800a08a:	4602      	mov	r2, r0
 800a08c:	460b      	mov	r3, r1
 800a08e:	4620      	mov	r0, r4
 800a090:	4629      	mov	r1, r5
 800a092:	f7f6 f869 	bl	8000168 <__aeabi_dsub>
 800a096:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a098:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a09c:	ea43 0308 	orr.w	r3, r3, r8
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	460d      	mov	r5, r1
 800a0a6:	d066      	beq.n	800a176 <_strtod_l+0xb8e>
 800a0a8:	a309      	add	r3, pc, #36	; (adr r3, 800a0d0 <_strtod_l+0xae8>)
 800a0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ae:	f7f6 fc85 	bl	80009bc <__aeabi_dcmplt>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	f47f ace2 	bne.w	8009a7c <_strtod_l+0x494>
 800a0b8:	a307      	add	r3, pc, #28	; (adr r3, 800a0d8 <_strtod_l+0xaf0>)
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	4620      	mov	r0, r4
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f7f6 fc99 	bl	80009f8 <__aeabi_dcmpgt>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	f43f af7b 	beq.w	8009fc2 <_strtod_l+0x9da>
 800a0cc:	e4d6      	b.n	8009a7c <_strtod_l+0x494>
 800a0ce:	bf00      	nop
 800a0d0:	94a03595 	.word	0x94a03595
 800a0d4:	3fdfffff 	.word	0x3fdfffff
 800a0d8:	35afe535 	.word	0x35afe535
 800a0dc:	3fe00000 	.word	0x3fe00000
 800a0e0:	000fffff 	.word	0x000fffff
 800a0e4:	7ff00000 	.word	0x7ff00000
 800a0e8:	7fefffff 	.word	0x7fefffff
 800a0ec:	3ff00000 	.word	0x3ff00000
 800a0f0:	7fe00000 	.word	0x7fe00000
 800a0f4:	7c9fffff 	.word	0x7c9fffff
 800a0f8:	3fe00000 	.word	0x3fe00000
 800a0fc:	bff00000 	.word	0xbff00000
 800a100:	9b05      	ldr	r3, [sp, #20]
 800a102:	b313      	cbz	r3, 800a14a <_strtod_l+0xb62>
 800a104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a106:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a10a:	d81e      	bhi.n	800a14a <_strtod_l+0xb62>
 800a10c:	a326      	add	r3, pc, #152	; (adr r3, 800a1a8 <_strtod_l+0xbc0>)
 800a10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a112:	4620      	mov	r0, r4
 800a114:	4629      	mov	r1, r5
 800a116:	f7f6 fc5b 	bl	80009d0 <__aeabi_dcmple>
 800a11a:	b190      	cbz	r0, 800a142 <_strtod_l+0xb5a>
 800a11c:	4629      	mov	r1, r5
 800a11e:	4620      	mov	r0, r4
 800a120:	f7f6 fcb2 	bl	8000a88 <__aeabi_d2uiz>
 800a124:	2801      	cmp	r0, #1
 800a126:	bf38      	it	cc
 800a128:	2001      	movcc	r0, #1
 800a12a:	f7f6 f95b 	bl	80003e4 <__aeabi_ui2d>
 800a12e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a130:	4604      	mov	r4, r0
 800a132:	460d      	mov	r5, r1
 800a134:	b9d3      	cbnz	r3, 800a16c <_strtod_l+0xb84>
 800a136:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a13a:	9012      	str	r0, [sp, #72]	; 0x48
 800a13c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a13e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a142:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a144:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a148:	1a9f      	subs	r7, r3, r2
 800a14a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a14e:	f002 f851 	bl	800c1f4 <__ulp>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	4630      	mov	r0, r6
 800a158:	4639      	mov	r1, r7
 800a15a:	f7f6 f9bd 	bl	80004d8 <__aeabi_dmul>
 800a15e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a162:	f7f6 f803 	bl	800016c <__adddf3>
 800a166:	4680      	mov	r8, r0
 800a168:	4689      	mov	r9, r1
 800a16a:	e77e      	b.n	800a06a <_strtod_l+0xa82>
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a174:	e7e3      	b.n	800a13e <_strtod_l+0xb56>
 800a176:	a30e      	add	r3, pc, #56	; (adr r3, 800a1b0 <_strtod_l+0xbc8>)
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	f7f6 fc1e 	bl	80009bc <__aeabi_dcmplt>
 800a180:	e7a1      	b.n	800a0c6 <_strtod_l+0xade>
 800a182:	2300      	movs	r3, #0
 800a184:	930a      	str	r3, [sp, #40]	; 0x28
 800a186:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a188:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a18a:	6013      	str	r3, [r2, #0]
 800a18c:	f7ff ba71 	b.w	8009672 <_strtod_l+0x8a>
 800a190:	2a65      	cmp	r2, #101	; 0x65
 800a192:	f43f ab63 	beq.w	800985c <_strtod_l+0x274>
 800a196:	2a45      	cmp	r2, #69	; 0x45
 800a198:	f43f ab60 	beq.w	800985c <_strtod_l+0x274>
 800a19c:	2301      	movs	r3, #1
 800a19e:	f7ff bb95 	b.w	80098cc <_strtod_l+0x2e4>
 800a1a2:	bf00      	nop
 800a1a4:	f3af 8000 	nop.w
 800a1a8:	ffc00000 	.word	0xffc00000
 800a1ac:	41dfffff 	.word	0x41dfffff
 800a1b0:	94a03595 	.word	0x94a03595
 800a1b4:	3fcfffff 	.word	0x3fcfffff

0800a1b8 <_strtod_r>:
 800a1b8:	4b01      	ldr	r3, [pc, #4]	; (800a1c0 <_strtod_r+0x8>)
 800a1ba:	f7ff ba15 	b.w	80095e8 <_strtod_l>
 800a1be:	bf00      	nop
 800a1c0:	200002f4 	.word	0x200002f4

0800a1c4 <_strtol_l.constprop.0>:
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ca:	4680      	mov	r8, r0
 800a1cc:	d001      	beq.n	800a1d2 <_strtol_l.constprop.0+0xe>
 800a1ce:	2b24      	cmp	r3, #36	; 0x24
 800a1d0:	d906      	bls.n	800a1e0 <_strtol_l.constprop.0+0x1c>
 800a1d2:	f7fe fa09 	bl	80085e8 <__errno>
 800a1d6:	2316      	movs	r3, #22
 800a1d8:	6003      	str	r3, [r0, #0]
 800a1da:	2000      	movs	r0, #0
 800a1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e0:	460d      	mov	r5, r1
 800a1e2:	4f35      	ldr	r7, [pc, #212]	; (800a2b8 <_strtol_l.constprop.0+0xf4>)
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1ea:	5de6      	ldrb	r6, [r4, r7]
 800a1ec:	f016 0608 	ands.w	r6, r6, #8
 800a1f0:	d1f8      	bne.n	800a1e4 <_strtol_l.constprop.0+0x20>
 800a1f2:	2c2d      	cmp	r4, #45	; 0x2d
 800a1f4:	d12f      	bne.n	800a256 <_strtol_l.constprop.0+0x92>
 800a1f6:	2601      	movs	r6, #1
 800a1f8:	782c      	ldrb	r4, [r5, #0]
 800a1fa:	1c85      	adds	r5, r0, #2
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d057      	beq.n	800a2b0 <_strtol_l.constprop.0+0xec>
 800a200:	2b10      	cmp	r3, #16
 800a202:	d109      	bne.n	800a218 <_strtol_l.constprop.0+0x54>
 800a204:	2c30      	cmp	r4, #48	; 0x30
 800a206:	d107      	bne.n	800a218 <_strtol_l.constprop.0+0x54>
 800a208:	7828      	ldrb	r0, [r5, #0]
 800a20a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a20e:	2858      	cmp	r0, #88	; 0x58
 800a210:	d149      	bne.n	800a2a6 <_strtol_l.constprop.0+0xe2>
 800a212:	2310      	movs	r3, #16
 800a214:	786c      	ldrb	r4, [r5, #1]
 800a216:	3502      	adds	r5, #2
 800a218:	2700      	movs	r7, #0
 800a21a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a21e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a222:	fbbe f9f3 	udiv	r9, lr, r3
 800a226:	4638      	mov	r0, r7
 800a228:	fb03 ea19 	mls	sl, r3, r9, lr
 800a22c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a230:	f1bc 0f09 	cmp.w	ip, #9
 800a234:	d814      	bhi.n	800a260 <_strtol_l.constprop.0+0x9c>
 800a236:	4664      	mov	r4, ip
 800a238:	42a3      	cmp	r3, r4
 800a23a:	dd22      	ble.n	800a282 <_strtol_l.constprop.0+0xbe>
 800a23c:	2f00      	cmp	r7, #0
 800a23e:	db1d      	blt.n	800a27c <_strtol_l.constprop.0+0xb8>
 800a240:	4581      	cmp	r9, r0
 800a242:	d31b      	bcc.n	800a27c <_strtol_l.constprop.0+0xb8>
 800a244:	d101      	bne.n	800a24a <_strtol_l.constprop.0+0x86>
 800a246:	45a2      	cmp	sl, r4
 800a248:	db18      	blt.n	800a27c <_strtol_l.constprop.0+0xb8>
 800a24a:	2701      	movs	r7, #1
 800a24c:	fb00 4003 	mla	r0, r0, r3, r4
 800a250:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a254:	e7ea      	b.n	800a22c <_strtol_l.constprop.0+0x68>
 800a256:	2c2b      	cmp	r4, #43	; 0x2b
 800a258:	bf04      	itt	eq
 800a25a:	782c      	ldrbeq	r4, [r5, #0]
 800a25c:	1c85      	addeq	r5, r0, #2
 800a25e:	e7cd      	b.n	800a1fc <_strtol_l.constprop.0+0x38>
 800a260:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a264:	f1bc 0f19 	cmp.w	ip, #25
 800a268:	d801      	bhi.n	800a26e <_strtol_l.constprop.0+0xaa>
 800a26a:	3c37      	subs	r4, #55	; 0x37
 800a26c:	e7e4      	b.n	800a238 <_strtol_l.constprop.0+0x74>
 800a26e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a272:	f1bc 0f19 	cmp.w	ip, #25
 800a276:	d804      	bhi.n	800a282 <_strtol_l.constprop.0+0xbe>
 800a278:	3c57      	subs	r4, #87	; 0x57
 800a27a:	e7dd      	b.n	800a238 <_strtol_l.constprop.0+0x74>
 800a27c:	f04f 37ff 	mov.w	r7, #4294967295
 800a280:	e7e6      	b.n	800a250 <_strtol_l.constprop.0+0x8c>
 800a282:	2f00      	cmp	r7, #0
 800a284:	da07      	bge.n	800a296 <_strtol_l.constprop.0+0xd2>
 800a286:	2322      	movs	r3, #34	; 0x22
 800a288:	4670      	mov	r0, lr
 800a28a:	f8c8 3000 	str.w	r3, [r8]
 800a28e:	2a00      	cmp	r2, #0
 800a290:	d0a4      	beq.n	800a1dc <_strtol_l.constprop.0+0x18>
 800a292:	1e69      	subs	r1, r5, #1
 800a294:	e005      	b.n	800a2a2 <_strtol_l.constprop.0+0xde>
 800a296:	b106      	cbz	r6, 800a29a <_strtol_l.constprop.0+0xd6>
 800a298:	4240      	negs	r0, r0
 800a29a:	2a00      	cmp	r2, #0
 800a29c:	d09e      	beq.n	800a1dc <_strtol_l.constprop.0+0x18>
 800a29e:	2f00      	cmp	r7, #0
 800a2a0:	d1f7      	bne.n	800a292 <_strtol_l.constprop.0+0xce>
 800a2a2:	6011      	str	r1, [r2, #0]
 800a2a4:	e79a      	b.n	800a1dc <_strtol_l.constprop.0+0x18>
 800a2a6:	2430      	movs	r4, #48	; 0x30
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1b5      	bne.n	800a218 <_strtol_l.constprop.0+0x54>
 800a2ac:	2308      	movs	r3, #8
 800a2ae:	e7b3      	b.n	800a218 <_strtol_l.constprop.0+0x54>
 800a2b0:	2c30      	cmp	r4, #48	; 0x30
 800a2b2:	d0a9      	beq.n	800a208 <_strtol_l.constprop.0+0x44>
 800a2b4:	230a      	movs	r3, #10
 800a2b6:	e7af      	b.n	800a218 <_strtol_l.constprop.0+0x54>
 800a2b8:	0800d241 	.word	0x0800d241

0800a2bc <_strtol_r>:
 800a2bc:	f7ff bf82 	b.w	800a1c4 <_strtol_l.constprop.0>

0800a2c0 <quorem>:
 800a2c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c4:	6903      	ldr	r3, [r0, #16]
 800a2c6:	690c      	ldr	r4, [r1, #16]
 800a2c8:	4607      	mov	r7, r0
 800a2ca:	42a3      	cmp	r3, r4
 800a2cc:	f2c0 8082 	blt.w	800a3d4 <quorem+0x114>
 800a2d0:	3c01      	subs	r4, #1
 800a2d2:	f100 0514 	add.w	r5, r0, #20
 800a2d6:	f101 0814 	add.w	r8, r1, #20
 800a2da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2de:	9301      	str	r3, [sp, #4]
 800a2e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a2e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a2f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a2f8:	d331      	bcc.n	800a35e <quorem+0x9e>
 800a2fa:	f04f 0e00 	mov.w	lr, #0
 800a2fe:	4640      	mov	r0, r8
 800a300:	46ac      	mov	ip, r5
 800a302:	46f2      	mov	sl, lr
 800a304:	f850 2b04 	ldr.w	r2, [r0], #4
 800a308:	b293      	uxth	r3, r2
 800a30a:	fb06 e303 	mla	r3, r6, r3, lr
 800a30e:	0c12      	lsrs	r2, r2, #16
 800a310:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a314:	b29b      	uxth	r3, r3
 800a316:	fb06 e202 	mla	r2, r6, r2, lr
 800a31a:	ebaa 0303 	sub.w	r3, sl, r3
 800a31e:	f8dc a000 	ldr.w	sl, [ip]
 800a322:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a326:	fa1f fa8a 	uxth.w	sl, sl
 800a32a:	4453      	add	r3, sl
 800a32c:	f8dc a000 	ldr.w	sl, [ip]
 800a330:	b292      	uxth	r2, r2
 800a332:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a336:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a340:	4581      	cmp	r9, r0
 800a342:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a346:	f84c 3b04 	str.w	r3, [ip], #4
 800a34a:	d2db      	bcs.n	800a304 <quorem+0x44>
 800a34c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a350:	b92b      	cbnz	r3, 800a35e <quorem+0x9e>
 800a352:	9b01      	ldr	r3, [sp, #4]
 800a354:	3b04      	subs	r3, #4
 800a356:	429d      	cmp	r5, r3
 800a358:	461a      	mov	r2, r3
 800a35a:	d32f      	bcc.n	800a3bc <quorem+0xfc>
 800a35c:	613c      	str	r4, [r7, #16]
 800a35e:	4638      	mov	r0, r7
 800a360:	f001 fea0 	bl	800c0a4 <__mcmp>
 800a364:	2800      	cmp	r0, #0
 800a366:	db25      	blt.n	800a3b4 <quorem+0xf4>
 800a368:	4628      	mov	r0, r5
 800a36a:	f04f 0c00 	mov.w	ip, #0
 800a36e:	3601      	adds	r6, #1
 800a370:	f858 1b04 	ldr.w	r1, [r8], #4
 800a374:	f8d0 e000 	ldr.w	lr, [r0]
 800a378:	b28b      	uxth	r3, r1
 800a37a:	ebac 0303 	sub.w	r3, ip, r3
 800a37e:	fa1f f28e 	uxth.w	r2, lr
 800a382:	4413      	add	r3, r2
 800a384:	0c0a      	lsrs	r2, r1, #16
 800a386:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a38a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a38e:	b29b      	uxth	r3, r3
 800a390:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a394:	45c1      	cmp	r9, r8
 800a396:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a39a:	f840 3b04 	str.w	r3, [r0], #4
 800a39e:	d2e7      	bcs.n	800a370 <quorem+0xb0>
 800a3a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3a8:	b922      	cbnz	r2, 800a3b4 <quorem+0xf4>
 800a3aa:	3b04      	subs	r3, #4
 800a3ac:	429d      	cmp	r5, r3
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	d30a      	bcc.n	800a3c8 <quorem+0x108>
 800a3b2:	613c      	str	r4, [r7, #16]
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	b003      	add	sp, #12
 800a3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3bc:	6812      	ldr	r2, [r2, #0]
 800a3be:	3b04      	subs	r3, #4
 800a3c0:	2a00      	cmp	r2, #0
 800a3c2:	d1cb      	bne.n	800a35c <quorem+0x9c>
 800a3c4:	3c01      	subs	r4, #1
 800a3c6:	e7c6      	b.n	800a356 <quorem+0x96>
 800a3c8:	6812      	ldr	r2, [r2, #0]
 800a3ca:	3b04      	subs	r3, #4
 800a3cc:	2a00      	cmp	r2, #0
 800a3ce:	d1f0      	bne.n	800a3b2 <quorem+0xf2>
 800a3d0:	3c01      	subs	r4, #1
 800a3d2:	e7eb      	b.n	800a3ac <quorem+0xec>
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	e7ee      	b.n	800a3b6 <quorem+0xf6>

0800a3d8 <_dtoa_r>:
 800a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3dc:	4616      	mov	r6, r2
 800a3de:	461f      	mov	r7, r3
 800a3e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a3e2:	b099      	sub	sp, #100	; 0x64
 800a3e4:	4605      	mov	r5, r0
 800a3e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a3ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a3ee:	b974      	cbnz	r4, 800a40e <_dtoa_r+0x36>
 800a3f0:	2010      	movs	r0, #16
 800a3f2:	f7fe f927 	bl	8008644 <malloc>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	6268      	str	r0, [r5, #36]	; 0x24
 800a3fa:	b920      	cbnz	r0, 800a406 <_dtoa_r+0x2e>
 800a3fc:	21ea      	movs	r1, #234	; 0xea
 800a3fe:	4ba8      	ldr	r3, [pc, #672]	; (800a6a0 <_dtoa_r+0x2c8>)
 800a400:	48a8      	ldr	r0, [pc, #672]	; (800a6a4 <_dtoa_r+0x2cc>)
 800a402:	f002 fa17 	bl	800c834 <__assert_func>
 800a406:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a40a:	6004      	str	r4, [r0, #0]
 800a40c:	60c4      	str	r4, [r0, #12]
 800a40e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a410:	6819      	ldr	r1, [r3, #0]
 800a412:	b151      	cbz	r1, 800a42a <_dtoa_r+0x52>
 800a414:	685a      	ldr	r2, [r3, #4]
 800a416:	2301      	movs	r3, #1
 800a418:	4093      	lsls	r3, r2
 800a41a:	604a      	str	r2, [r1, #4]
 800a41c:	608b      	str	r3, [r1, #8]
 800a41e:	4628      	mov	r0, r5
 800a420:	f001 fbb8 	bl	800bb94 <_Bfree>
 800a424:	2200      	movs	r2, #0
 800a426:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a428:	601a      	str	r2, [r3, #0]
 800a42a:	1e3b      	subs	r3, r7, #0
 800a42c:	bfaf      	iteee	ge
 800a42e:	2300      	movge	r3, #0
 800a430:	2201      	movlt	r2, #1
 800a432:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a436:	9305      	strlt	r3, [sp, #20]
 800a438:	bfa8      	it	ge
 800a43a:	f8c8 3000 	strge.w	r3, [r8]
 800a43e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a442:	4b99      	ldr	r3, [pc, #612]	; (800a6a8 <_dtoa_r+0x2d0>)
 800a444:	bfb8      	it	lt
 800a446:	f8c8 2000 	strlt.w	r2, [r8]
 800a44a:	ea33 0309 	bics.w	r3, r3, r9
 800a44e:	d119      	bne.n	800a484 <_dtoa_r+0xac>
 800a450:	f242 730f 	movw	r3, #9999	; 0x270f
 800a454:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a456:	6013      	str	r3, [r2, #0]
 800a458:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a45c:	4333      	orrs	r3, r6
 800a45e:	f000 857f 	beq.w	800af60 <_dtoa_r+0xb88>
 800a462:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a464:	b953      	cbnz	r3, 800a47c <_dtoa_r+0xa4>
 800a466:	4b91      	ldr	r3, [pc, #580]	; (800a6ac <_dtoa_r+0x2d4>)
 800a468:	e022      	b.n	800a4b0 <_dtoa_r+0xd8>
 800a46a:	4b91      	ldr	r3, [pc, #580]	; (800a6b0 <_dtoa_r+0x2d8>)
 800a46c:	9303      	str	r3, [sp, #12]
 800a46e:	3308      	adds	r3, #8
 800a470:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a472:	6013      	str	r3, [r2, #0]
 800a474:	9803      	ldr	r0, [sp, #12]
 800a476:	b019      	add	sp, #100	; 0x64
 800a478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a47c:	4b8b      	ldr	r3, [pc, #556]	; (800a6ac <_dtoa_r+0x2d4>)
 800a47e:	9303      	str	r3, [sp, #12]
 800a480:	3303      	adds	r3, #3
 800a482:	e7f5      	b.n	800a470 <_dtoa_r+0x98>
 800a484:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a488:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a48c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a490:	2200      	movs	r2, #0
 800a492:	2300      	movs	r3, #0
 800a494:	f7f6 fa88 	bl	80009a8 <__aeabi_dcmpeq>
 800a498:	4680      	mov	r8, r0
 800a49a:	b158      	cbz	r0, 800a4b4 <_dtoa_r+0xdc>
 800a49c:	2301      	movs	r3, #1
 800a49e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4a0:	6013      	str	r3, [r2, #0]
 800a4a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 8558 	beq.w	800af5a <_dtoa_r+0xb82>
 800a4aa:	4882      	ldr	r0, [pc, #520]	; (800a6b4 <_dtoa_r+0x2dc>)
 800a4ac:	6018      	str	r0, [r3, #0]
 800a4ae:	1e43      	subs	r3, r0, #1
 800a4b0:	9303      	str	r3, [sp, #12]
 800a4b2:	e7df      	b.n	800a474 <_dtoa_r+0x9c>
 800a4b4:	ab16      	add	r3, sp, #88	; 0x58
 800a4b6:	9301      	str	r3, [sp, #4]
 800a4b8:	ab17      	add	r3, sp, #92	; 0x5c
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	4628      	mov	r0, r5
 800a4be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a4c2:	f001 ff11 	bl	800c2e8 <__d2b>
 800a4c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a4ca:	4683      	mov	fp, r0
 800a4cc:	2c00      	cmp	r4, #0
 800a4ce:	d07f      	beq.n	800a5d0 <_dtoa_r+0x1f8>
 800a4d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a4da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a4e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a4e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	4b72      	ldr	r3, [pc, #456]	; (800a6b8 <_dtoa_r+0x2e0>)
 800a4ee:	f7f5 fe3b 	bl	8000168 <__aeabi_dsub>
 800a4f2:	a365      	add	r3, pc, #404	; (adr r3, 800a688 <_dtoa_r+0x2b0>)
 800a4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f8:	f7f5 ffee 	bl	80004d8 <__aeabi_dmul>
 800a4fc:	a364      	add	r3, pc, #400	; (adr r3, 800a690 <_dtoa_r+0x2b8>)
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	f7f5 fe33 	bl	800016c <__adddf3>
 800a506:	4606      	mov	r6, r0
 800a508:	4620      	mov	r0, r4
 800a50a:	460f      	mov	r7, r1
 800a50c:	f7f5 ff7a 	bl	8000404 <__aeabi_i2d>
 800a510:	a361      	add	r3, pc, #388	; (adr r3, 800a698 <_dtoa_r+0x2c0>)
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	f7f5 ffdf 	bl	80004d8 <__aeabi_dmul>
 800a51a:	4602      	mov	r2, r0
 800a51c:	460b      	mov	r3, r1
 800a51e:	4630      	mov	r0, r6
 800a520:	4639      	mov	r1, r7
 800a522:	f7f5 fe23 	bl	800016c <__adddf3>
 800a526:	4606      	mov	r6, r0
 800a528:	460f      	mov	r7, r1
 800a52a:	f7f6 fa85 	bl	8000a38 <__aeabi_d2iz>
 800a52e:	2200      	movs	r2, #0
 800a530:	4682      	mov	sl, r0
 800a532:	2300      	movs	r3, #0
 800a534:	4630      	mov	r0, r6
 800a536:	4639      	mov	r1, r7
 800a538:	f7f6 fa40 	bl	80009bc <__aeabi_dcmplt>
 800a53c:	b148      	cbz	r0, 800a552 <_dtoa_r+0x17a>
 800a53e:	4650      	mov	r0, sl
 800a540:	f7f5 ff60 	bl	8000404 <__aeabi_i2d>
 800a544:	4632      	mov	r2, r6
 800a546:	463b      	mov	r3, r7
 800a548:	f7f6 fa2e 	bl	80009a8 <__aeabi_dcmpeq>
 800a54c:	b908      	cbnz	r0, 800a552 <_dtoa_r+0x17a>
 800a54e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a552:	f1ba 0f16 	cmp.w	sl, #22
 800a556:	d858      	bhi.n	800a60a <_dtoa_r+0x232>
 800a558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a55c:	4b57      	ldr	r3, [pc, #348]	; (800a6bc <_dtoa_r+0x2e4>)
 800a55e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a566:	f7f6 fa29 	bl	80009bc <__aeabi_dcmplt>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d04f      	beq.n	800a60e <_dtoa_r+0x236>
 800a56e:	2300      	movs	r3, #0
 800a570:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a574:	930f      	str	r3, [sp, #60]	; 0x3c
 800a576:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a578:	1b1c      	subs	r4, r3, r4
 800a57a:	1e63      	subs	r3, r4, #1
 800a57c:	9309      	str	r3, [sp, #36]	; 0x24
 800a57e:	bf49      	itett	mi
 800a580:	f1c4 0301 	rsbmi	r3, r4, #1
 800a584:	2300      	movpl	r3, #0
 800a586:	9306      	strmi	r3, [sp, #24]
 800a588:	2300      	movmi	r3, #0
 800a58a:	bf54      	ite	pl
 800a58c:	9306      	strpl	r3, [sp, #24]
 800a58e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a590:	f1ba 0f00 	cmp.w	sl, #0
 800a594:	db3d      	blt.n	800a612 <_dtoa_r+0x23a>
 800a596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a598:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a59c:	4453      	add	r3, sl
 800a59e:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a5a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5a6:	2b09      	cmp	r3, #9
 800a5a8:	f200 808c 	bhi.w	800a6c4 <_dtoa_r+0x2ec>
 800a5ac:	2b05      	cmp	r3, #5
 800a5ae:	bfc4      	itt	gt
 800a5b0:	3b04      	subgt	r3, #4
 800a5b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a5b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5b6:	bfc8      	it	gt
 800a5b8:	2400      	movgt	r4, #0
 800a5ba:	f1a3 0302 	sub.w	r3, r3, #2
 800a5be:	bfd8      	it	le
 800a5c0:	2401      	movle	r4, #1
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	f200 808a 	bhi.w	800a6dc <_dtoa_r+0x304>
 800a5c8:	e8df f003 	tbb	[pc, r3]
 800a5cc:	5b4d4f2d 	.word	0x5b4d4f2d
 800a5d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a5d4:	441c      	add	r4, r3
 800a5d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a5da:	2b20      	cmp	r3, #32
 800a5dc:	bfc3      	ittte	gt
 800a5de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a5e2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a5e6:	fa09 f303 	lslgt.w	r3, r9, r3
 800a5ea:	f1c3 0320 	rsble	r3, r3, #32
 800a5ee:	bfc6      	itte	gt
 800a5f0:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a5f4:	4318      	orrgt	r0, r3
 800a5f6:	fa06 f003 	lslle.w	r0, r6, r3
 800a5fa:	f7f5 fef3 	bl	80003e4 <__aeabi_ui2d>
 800a5fe:	2301      	movs	r3, #1
 800a600:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a604:	3c01      	subs	r4, #1
 800a606:	9313      	str	r3, [sp, #76]	; 0x4c
 800a608:	e76f      	b.n	800a4ea <_dtoa_r+0x112>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e7b2      	b.n	800a574 <_dtoa_r+0x19c>
 800a60e:	900f      	str	r0, [sp, #60]	; 0x3c
 800a610:	e7b1      	b.n	800a576 <_dtoa_r+0x19e>
 800a612:	9b06      	ldr	r3, [sp, #24]
 800a614:	eba3 030a 	sub.w	r3, r3, sl
 800a618:	9306      	str	r3, [sp, #24]
 800a61a:	f1ca 0300 	rsb	r3, sl, #0
 800a61e:	930a      	str	r3, [sp, #40]	; 0x28
 800a620:	2300      	movs	r3, #0
 800a622:	930e      	str	r3, [sp, #56]	; 0x38
 800a624:	e7be      	b.n	800a5a4 <_dtoa_r+0x1cc>
 800a626:	2300      	movs	r3, #0
 800a628:	930b      	str	r3, [sp, #44]	; 0x2c
 800a62a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	dc58      	bgt.n	800a6e2 <_dtoa_r+0x30a>
 800a630:	f04f 0901 	mov.w	r9, #1
 800a634:	464b      	mov	r3, r9
 800a636:	f8cd 9020 	str.w	r9, [sp, #32]
 800a63a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a63e:	2200      	movs	r2, #0
 800a640:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a642:	6042      	str	r2, [r0, #4]
 800a644:	2204      	movs	r2, #4
 800a646:	f102 0614 	add.w	r6, r2, #20
 800a64a:	429e      	cmp	r6, r3
 800a64c:	6841      	ldr	r1, [r0, #4]
 800a64e:	d94e      	bls.n	800a6ee <_dtoa_r+0x316>
 800a650:	4628      	mov	r0, r5
 800a652:	f001 fa5f 	bl	800bb14 <_Balloc>
 800a656:	9003      	str	r0, [sp, #12]
 800a658:	2800      	cmp	r0, #0
 800a65a:	d14c      	bne.n	800a6f6 <_dtoa_r+0x31e>
 800a65c:	4602      	mov	r2, r0
 800a65e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a662:	4b17      	ldr	r3, [pc, #92]	; (800a6c0 <_dtoa_r+0x2e8>)
 800a664:	e6cc      	b.n	800a400 <_dtoa_r+0x28>
 800a666:	2301      	movs	r3, #1
 800a668:	e7de      	b.n	800a628 <_dtoa_r+0x250>
 800a66a:	2300      	movs	r3, #0
 800a66c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a66e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a670:	eb0a 0903 	add.w	r9, sl, r3
 800a674:	f109 0301 	add.w	r3, r9, #1
 800a678:	2b01      	cmp	r3, #1
 800a67a:	9308      	str	r3, [sp, #32]
 800a67c:	bfb8      	it	lt
 800a67e:	2301      	movlt	r3, #1
 800a680:	e7dd      	b.n	800a63e <_dtoa_r+0x266>
 800a682:	2301      	movs	r3, #1
 800a684:	e7f2      	b.n	800a66c <_dtoa_r+0x294>
 800a686:	bf00      	nop
 800a688:	636f4361 	.word	0x636f4361
 800a68c:	3fd287a7 	.word	0x3fd287a7
 800a690:	8b60c8b3 	.word	0x8b60c8b3
 800a694:	3fc68a28 	.word	0x3fc68a28
 800a698:	509f79fb 	.word	0x509f79fb
 800a69c:	3fd34413 	.word	0x3fd34413
 800a6a0:	0800d34e 	.word	0x0800d34e
 800a6a4:	0800d365 	.word	0x0800d365
 800a6a8:	7ff00000 	.word	0x7ff00000
 800a6ac:	0800d34a 	.word	0x0800d34a
 800a6b0:	0800d341 	.word	0x0800d341
 800a6b4:	0800d1c5 	.word	0x0800d1c5
 800a6b8:	3ff80000 	.word	0x3ff80000
 800a6bc:	0800d538 	.word	0x0800d538
 800a6c0:	0800d3c0 	.word	0x0800d3c0
 800a6c4:	2401      	movs	r4, #1
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a6ca:	9322      	str	r3, [sp, #136]	; 0x88
 800a6cc:	f04f 39ff 	mov.w	r9, #4294967295
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2312      	movs	r3, #18
 800a6d4:	f8cd 9020 	str.w	r9, [sp, #32]
 800a6d8:	9223      	str	r2, [sp, #140]	; 0x8c
 800a6da:	e7b0      	b.n	800a63e <_dtoa_r+0x266>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6e0:	e7f4      	b.n	800a6cc <_dtoa_r+0x2f4>
 800a6e2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a6e6:	464b      	mov	r3, r9
 800a6e8:	f8cd 9020 	str.w	r9, [sp, #32]
 800a6ec:	e7a7      	b.n	800a63e <_dtoa_r+0x266>
 800a6ee:	3101      	adds	r1, #1
 800a6f0:	6041      	str	r1, [r0, #4]
 800a6f2:	0052      	lsls	r2, r2, #1
 800a6f4:	e7a7      	b.n	800a646 <_dtoa_r+0x26e>
 800a6f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a6f8:	9a03      	ldr	r2, [sp, #12]
 800a6fa:	601a      	str	r2, [r3, #0]
 800a6fc:	9b08      	ldr	r3, [sp, #32]
 800a6fe:	2b0e      	cmp	r3, #14
 800a700:	f200 80a8 	bhi.w	800a854 <_dtoa_r+0x47c>
 800a704:	2c00      	cmp	r4, #0
 800a706:	f000 80a5 	beq.w	800a854 <_dtoa_r+0x47c>
 800a70a:	f1ba 0f00 	cmp.w	sl, #0
 800a70e:	dd34      	ble.n	800a77a <_dtoa_r+0x3a2>
 800a710:	4a9a      	ldr	r2, [pc, #616]	; (800a97c <_dtoa_r+0x5a4>)
 800a712:	f00a 030f 	and.w	r3, sl, #15
 800a716:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a71a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a71e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a722:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a726:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a72a:	d016      	beq.n	800a75a <_dtoa_r+0x382>
 800a72c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a730:	4b93      	ldr	r3, [pc, #588]	; (800a980 <_dtoa_r+0x5a8>)
 800a732:	2703      	movs	r7, #3
 800a734:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a738:	f7f5 fff8 	bl	800072c <__aeabi_ddiv>
 800a73c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a740:	f004 040f 	and.w	r4, r4, #15
 800a744:	4e8e      	ldr	r6, [pc, #568]	; (800a980 <_dtoa_r+0x5a8>)
 800a746:	b954      	cbnz	r4, 800a75e <_dtoa_r+0x386>
 800a748:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a74c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a750:	f7f5 ffec 	bl	800072c <__aeabi_ddiv>
 800a754:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a758:	e029      	b.n	800a7ae <_dtoa_r+0x3d6>
 800a75a:	2702      	movs	r7, #2
 800a75c:	e7f2      	b.n	800a744 <_dtoa_r+0x36c>
 800a75e:	07e1      	lsls	r1, r4, #31
 800a760:	d508      	bpl.n	800a774 <_dtoa_r+0x39c>
 800a762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a766:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a76a:	f7f5 feb5 	bl	80004d8 <__aeabi_dmul>
 800a76e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a772:	3701      	adds	r7, #1
 800a774:	1064      	asrs	r4, r4, #1
 800a776:	3608      	adds	r6, #8
 800a778:	e7e5      	b.n	800a746 <_dtoa_r+0x36e>
 800a77a:	f000 80a5 	beq.w	800a8c8 <_dtoa_r+0x4f0>
 800a77e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a782:	f1ca 0400 	rsb	r4, sl, #0
 800a786:	4b7d      	ldr	r3, [pc, #500]	; (800a97c <_dtoa_r+0x5a4>)
 800a788:	f004 020f 	and.w	r2, r4, #15
 800a78c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a794:	f7f5 fea0 	bl	80004d8 <__aeabi_dmul>
 800a798:	2702      	movs	r7, #2
 800a79a:	2300      	movs	r3, #0
 800a79c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7a0:	4e77      	ldr	r6, [pc, #476]	; (800a980 <_dtoa_r+0x5a8>)
 800a7a2:	1124      	asrs	r4, r4, #4
 800a7a4:	2c00      	cmp	r4, #0
 800a7a6:	f040 8084 	bne.w	800a8b2 <_dtoa_r+0x4da>
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1d2      	bne.n	800a754 <_dtoa_r+0x37c>
 800a7ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 808b 	beq.w	800a8cc <_dtoa_r+0x4f4>
 800a7b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a7ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a7be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	4b6f      	ldr	r3, [pc, #444]	; (800a984 <_dtoa_r+0x5ac>)
 800a7c6:	f7f6 f8f9 	bl	80009bc <__aeabi_dcmplt>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d07e      	beq.n	800a8cc <_dtoa_r+0x4f4>
 800a7ce:	9b08      	ldr	r3, [sp, #32]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d07b      	beq.n	800a8cc <_dtoa_r+0x4f4>
 800a7d4:	f1b9 0f00 	cmp.w	r9, #0
 800a7d8:	dd38      	ble.n	800a84c <_dtoa_r+0x474>
 800a7da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a7de:	2200      	movs	r2, #0
 800a7e0:	4b69      	ldr	r3, [pc, #420]	; (800a988 <_dtoa_r+0x5b0>)
 800a7e2:	f7f5 fe79 	bl	80004d8 <__aeabi_dmul>
 800a7e6:	464c      	mov	r4, r9
 800a7e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7ec:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a7f0:	3701      	adds	r7, #1
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	f7f5 fe06 	bl	8000404 <__aeabi_i2d>
 800a7f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7fc:	f7f5 fe6c 	bl	80004d8 <__aeabi_dmul>
 800a800:	2200      	movs	r2, #0
 800a802:	4b62      	ldr	r3, [pc, #392]	; (800a98c <_dtoa_r+0x5b4>)
 800a804:	f7f5 fcb2 	bl	800016c <__adddf3>
 800a808:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a80c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a810:	9611      	str	r6, [sp, #68]	; 0x44
 800a812:	2c00      	cmp	r4, #0
 800a814:	d15d      	bne.n	800a8d2 <_dtoa_r+0x4fa>
 800a816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a81a:	2200      	movs	r2, #0
 800a81c:	4b5c      	ldr	r3, [pc, #368]	; (800a990 <_dtoa_r+0x5b8>)
 800a81e:	f7f5 fca3 	bl	8000168 <__aeabi_dsub>
 800a822:	4602      	mov	r2, r0
 800a824:	460b      	mov	r3, r1
 800a826:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a82a:	4633      	mov	r3, r6
 800a82c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a82e:	f7f6 f8e3 	bl	80009f8 <__aeabi_dcmpgt>
 800a832:	2800      	cmp	r0, #0
 800a834:	f040 829c 	bne.w	800ad70 <_dtoa_r+0x998>
 800a838:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a83c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a83e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a842:	f7f6 f8bb 	bl	80009bc <__aeabi_dcmplt>
 800a846:	2800      	cmp	r0, #0
 800a848:	f040 8290 	bne.w	800ad6c <_dtoa_r+0x994>
 800a84c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a850:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a854:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a856:	2b00      	cmp	r3, #0
 800a858:	f2c0 8152 	blt.w	800ab00 <_dtoa_r+0x728>
 800a85c:	f1ba 0f0e 	cmp.w	sl, #14
 800a860:	f300 814e 	bgt.w	800ab00 <_dtoa_r+0x728>
 800a864:	4b45      	ldr	r3, [pc, #276]	; (800a97c <_dtoa_r+0x5a4>)
 800a866:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a86a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a86e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a872:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a874:	2b00      	cmp	r3, #0
 800a876:	f280 80db 	bge.w	800aa30 <_dtoa_r+0x658>
 800a87a:	9b08      	ldr	r3, [sp, #32]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f300 80d7 	bgt.w	800aa30 <_dtoa_r+0x658>
 800a882:	f040 8272 	bne.w	800ad6a <_dtoa_r+0x992>
 800a886:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a88a:	2200      	movs	r2, #0
 800a88c:	4b40      	ldr	r3, [pc, #256]	; (800a990 <_dtoa_r+0x5b8>)
 800a88e:	f7f5 fe23 	bl	80004d8 <__aeabi_dmul>
 800a892:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a896:	f7f6 f8a5 	bl	80009e4 <__aeabi_dcmpge>
 800a89a:	9c08      	ldr	r4, [sp, #32]
 800a89c:	4626      	mov	r6, r4
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	f040 8248 	bne.w	800ad34 <_dtoa_r+0x95c>
 800a8a4:	2331      	movs	r3, #49	; 0x31
 800a8a6:	9f03      	ldr	r7, [sp, #12]
 800a8a8:	f10a 0a01 	add.w	sl, sl, #1
 800a8ac:	f807 3b01 	strb.w	r3, [r7], #1
 800a8b0:	e244      	b.n	800ad3c <_dtoa_r+0x964>
 800a8b2:	07e2      	lsls	r2, r4, #31
 800a8b4:	d505      	bpl.n	800a8c2 <_dtoa_r+0x4ea>
 800a8b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8ba:	f7f5 fe0d 	bl	80004d8 <__aeabi_dmul>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	3701      	adds	r7, #1
 800a8c2:	1064      	asrs	r4, r4, #1
 800a8c4:	3608      	adds	r6, #8
 800a8c6:	e76d      	b.n	800a7a4 <_dtoa_r+0x3cc>
 800a8c8:	2702      	movs	r7, #2
 800a8ca:	e770      	b.n	800a7ae <_dtoa_r+0x3d6>
 800a8cc:	46d0      	mov	r8, sl
 800a8ce:	9c08      	ldr	r4, [sp, #32]
 800a8d0:	e78f      	b.n	800a7f2 <_dtoa_r+0x41a>
 800a8d2:	9903      	ldr	r1, [sp, #12]
 800a8d4:	4b29      	ldr	r3, [pc, #164]	; (800a97c <_dtoa_r+0x5a4>)
 800a8d6:	4421      	add	r1, r4
 800a8d8:	9112      	str	r1, [sp, #72]	; 0x48
 800a8da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a8e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8e8:	2900      	cmp	r1, #0
 800a8ea:	d055      	beq.n	800a998 <_dtoa_r+0x5c0>
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	4929      	ldr	r1, [pc, #164]	; (800a994 <_dtoa_r+0x5bc>)
 800a8f0:	f7f5 ff1c 	bl	800072c <__aeabi_ddiv>
 800a8f4:	463b      	mov	r3, r7
 800a8f6:	4632      	mov	r2, r6
 800a8f8:	f7f5 fc36 	bl	8000168 <__aeabi_dsub>
 800a8fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a900:	9f03      	ldr	r7, [sp, #12]
 800a902:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a906:	f7f6 f897 	bl	8000a38 <__aeabi_d2iz>
 800a90a:	4604      	mov	r4, r0
 800a90c:	f7f5 fd7a 	bl	8000404 <__aeabi_i2d>
 800a910:	4602      	mov	r2, r0
 800a912:	460b      	mov	r3, r1
 800a914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a918:	f7f5 fc26 	bl	8000168 <__aeabi_dsub>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	3430      	adds	r4, #48	; 0x30
 800a922:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a926:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a92a:	f807 4b01 	strb.w	r4, [r7], #1
 800a92e:	f7f6 f845 	bl	80009bc <__aeabi_dcmplt>
 800a932:	2800      	cmp	r0, #0
 800a934:	d174      	bne.n	800aa20 <_dtoa_r+0x648>
 800a936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a93a:	2000      	movs	r0, #0
 800a93c:	4911      	ldr	r1, [pc, #68]	; (800a984 <_dtoa_r+0x5ac>)
 800a93e:	f7f5 fc13 	bl	8000168 <__aeabi_dsub>
 800a942:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a946:	f7f6 f839 	bl	80009bc <__aeabi_dcmplt>
 800a94a:	2800      	cmp	r0, #0
 800a94c:	f040 80b7 	bne.w	800aabe <_dtoa_r+0x6e6>
 800a950:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a952:	429f      	cmp	r7, r3
 800a954:	f43f af7a 	beq.w	800a84c <_dtoa_r+0x474>
 800a958:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a95c:	2200      	movs	r2, #0
 800a95e:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <_dtoa_r+0x5b0>)
 800a960:	f7f5 fdba 	bl	80004d8 <__aeabi_dmul>
 800a964:	2200      	movs	r2, #0
 800a966:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a96a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a96e:	4b06      	ldr	r3, [pc, #24]	; (800a988 <_dtoa_r+0x5b0>)
 800a970:	f7f5 fdb2 	bl	80004d8 <__aeabi_dmul>
 800a974:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a978:	e7c3      	b.n	800a902 <_dtoa_r+0x52a>
 800a97a:	bf00      	nop
 800a97c:	0800d538 	.word	0x0800d538
 800a980:	0800d510 	.word	0x0800d510
 800a984:	3ff00000 	.word	0x3ff00000
 800a988:	40240000 	.word	0x40240000
 800a98c:	401c0000 	.word	0x401c0000
 800a990:	40140000 	.word	0x40140000
 800a994:	3fe00000 	.word	0x3fe00000
 800a998:	4630      	mov	r0, r6
 800a99a:	4639      	mov	r1, r7
 800a99c:	f7f5 fd9c 	bl	80004d8 <__aeabi_dmul>
 800a9a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9a6:	9c03      	ldr	r4, [sp, #12]
 800a9a8:	9314      	str	r3, [sp, #80]	; 0x50
 800a9aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9ae:	f7f6 f843 	bl	8000a38 <__aeabi_d2iz>
 800a9b2:	9015      	str	r0, [sp, #84]	; 0x54
 800a9b4:	f7f5 fd26 	bl	8000404 <__aeabi_i2d>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9c0:	f7f5 fbd2 	bl	8000168 <__aeabi_dsub>
 800a9c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9c6:	4606      	mov	r6, r0
 800a9c8:	3330      	adds	r3, #48	; 0x30
 800a9ca:	f804 3b01 	strb.w	r3, [r4], #1
 800a9ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9d0:	460f      	mov	r7, r1
 800a9d2:	429c      	cmp	r4, r3
 800a9d4:	f04f 0200 	mov.w	r2, #0
 800a9d8:	d124      	bne.n	800aa24 <_dtoa_r+0x64c>
 800a9da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9de:	4bb0      	ldr	r3, [pc, #704]	; (800aca0 <_dtoa_r+0x8c8>)
 800a9e0:	f7f5 fbc4 	bl	800016c <__adddf3>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	f7f6 f804 	bl	80009f8 <__aeabi_dcmpgt>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d163      	bne.n	800aabc <_dtoa_r+0x6e4>
 800a9f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	49a9      	ldr	r1, [pc, #676]	; (800aca0 <_dtoa_r+0x8c8>)
 800a9fc:	f7f5 fbb4 	bl	8000168 <__aeabi_dsub>
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	4630      	mov	r0, r6
 800aa06:	4639      	mov	r1, r7
 800aa08:	f7f5 ffd8 	bl	80009bc <__aeabi_dcmplt>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	f43f af1d 	beq.w	800a84c <_dtoa_r+0x474>
 800aa12:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aa14:	1e7b      	subs	r3, r7, #1
 800aa16:	9314      	str	r3, [sp, #80]	; 0x50
 800aa18:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800aa1c:	2b30      	cmp	r3, #48	; 0x30
 800aa1e:	d0f8      	beq.n	800aa12 <_dtoa_r+0x63a>
 800aa20:	46c2      	mov	sl, r8
 800aa22:	e03b      	b.n	800aa9c <_dtoa_r+0x6c4>
 800aa24:	4b9f      	ldr	r3, [pc, #636]	; (800aca4 <_dtoa_r+0x8cc>)
 800aa26:	f7f5 fd57 	bl	80004d8 <__aeabi_dmul>
 800aa2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa2e:	e7bc      	b.n	800a9aa <_dtoa_r+0x5d2>
 800aa30:	9f03      	ldr	r7, [sp, #12]
 800aa32:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800aa36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa3a:	4640      	mov	r0, r8
 800aa3c:	4649      	mov	r1, r9
 800aa3e:	f7f5 fe75 	bl	800072c <__aeabi_ddiv>
 800aa42:	f7f5 fff9 	bl	8000a38 <__aeabi_d2iz>
 800aa46:	4604      	mov	r4, r0
 800aa48:	f7f5 fcdc 	bl	8000404 <__aeabi_i2d>
 800aa4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa50:	f7f5 fd42 	bl	80004d8 <__aeabi_dmul>
 800aa54:	4602      	mov	r2, r0
 800aa56:	460b      	mov	r3, r1
 800aa58:	4640      	mov	r0, r8
 800aa5a:	4649      	mov	r1, r9
 800aa5c:	f7f5 fb84 	bl	8000168 <__aeabi_dsub>
 800aa60:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800aa64:	f807 6b01 	strb.w	r6, [r7], #1
 800aa68:	9e03      	ldr	r6, [sp, #12]
 800aa6a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800aa6e:	1bbe      	subs	r6, r7, r6
 800aa70:	45b4      	cmp	ip, r6
 800aa72:	4602      	mov	r2, r0
 800aa74:	460b      	mov	r3, r1
 800aa76:	d136      	bne.n	800aae6 <_dtoa_r+0x70e>
 800aa78:	f7f5 fb78 	bl	800016c <__adddf3>
 800aa7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa80:	4680      	mov	r8, r0
 800aa82:	4689      	mov	r9, r1
 800aa84:	f7f5 ffb8 	bl	80009f8 <__aeabi_dcmpgt>
 800aa88:	bb58      	cbnz	r0, 800aae2 <_dtoa_r+0x70a>
 800aa8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa8e:	4640      	mov	r0, r8
 800aa90:	4649      	mov	r1, r9
 800aa92:	f7f5 ff89 	bl	80009a8 <__aeabi_dcmpeq>
 800aa96:	b108      	cbz	r0, 800aa9c <_dtoa_r+0x6c4>
 800aa98:	07e1      	lsls	r1, r4, #31
 800aa9a:	d422      	bmi.n	800aae2 <_dtoa_r+0x70a>
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	4659      	mov	r1, fp
 800aaa0:	f001 f878 	bl	800bb94 <_Bfree>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	703b      	strb	r3, [r7, #0]
 800aaa8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aaaa:	f10a 0001 	add.w	r0, sl, #1
 800aaae:	6018      	str	r0, [r3, #0]
 800aab0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f43f acde 	beq.w	800a474 <_dtoa_r+0x9c>
 800aab8:	601f      	str	r7, [r3, #0]
 800aaba:	e4db      	b.n	800a474 <_dtoa_r+0x9c>
 800aabc:	4627      	mov	r7, r4
 800aabe:	463b      	mov	r3, r7
 800aac0:	461f      	mov	r7, r3
 800aac2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aac6:	2a39      	cmp	r2, #57	; 0x39
 800aac8:	d107      	bne.n	800aada <_dtoa_r+0x702>
 800aaca:	9a03      	ldr	r2, [sp, #12]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d1f7      	bne.n	800aac0 <_dtoa_r+0x6e8>
 800aad0:	2230      	movs	r2, #48	; 0x30
 800aad2:	9903      	ldr	r1, [sp, #12]
 800aad4:	f108 0801 	add.w	r8, r8, #1
 800aad8:	700a      	strb	r2, [r1, #0]
 800aada:	781a      	ldrb	r2, [r3, #0]
 800aadc:	3201      	adds	r2, #1
 800aade:	701a      	strb	r2, [r3, #0]
 800aae0:	e79e      	b.n	800aa20 <_dtoa_r+0x648>
 800aae2:	46d0      	mov	r8, sl
 800aae4:	e7eb      	b.n	800aabe <_dtoa_r+0x6e6>
 800aae6:	2200      	movs	r2, #0
 800aae8:	4b6e      	ldr	r3, [pc, #440]	; (800aca4 <_dtoa_r+0x8cc>)
 800aaea:	f7f5 fcf5 	bl	80004d8 <__aeabi_dmul>
 800aaee:	2200      	movs	r2, #0
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	4680      	mov	r8, r0
 800aaf4:	4689      	mov	r9, r1
 800aaf6:	f7f5 ff57 	bl	80009a8 <__aeabi_dcmpeq>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d09b      	beq.n	800aa36 <_dtoa_r+0x65e>
 800aafe:	e7cd      	b.n	800aa9c <_dtoa_r+0x6c4>
 800ab00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab02:	2a00      	cmp	r2, #0
 800ab04:	f000 80d0 	beq.w	800aca8 <_dtoa_r+0x8d0>
 800ab08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ab0a:	2a01      	cmp	r2, #1
 800ab0c:	f300 80ae 	bgt.w	800ac6c <_dtoa_r+0x894>
 800ab10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab12:	2a00      	cmp	r2, #0
 800ab14:	f000 80a6 	beq.w	800ac64 <_dtoa_r+0x88c>
 800ab18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab1e:	9f06      	ldr	r7, [sp, #24]
 800ab20:	9a06      	ldr	r2, [sp, #24]
 800ab22:	2101      	movs	r1, #1
 800ab24:	441a      	add	r2, r3
 800ab26:	9206      	str	r2, [sp, #24]
 800ab28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	441a      	add	r2, r3
 800ab2e:	9209      	str	r2, [sp, #36]	; 0x24
 800ab30:	f001 f930 	bl	800bd94 <__i2b>
 800ab34:	4606      	mov	r6, r0
 800ab36:	2f00      	cmp	r7, #0
 800ab38:	dd0c      	ble.n	800ab54 <_dtoa_r+0x77c>
 800ab3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	dd09      	ble.n	800ab54 <_dtoa_r+0x77c>
 800ab40:	42bb      	cmp	r3, r7
 800ab42:	bfa8      	it	ge
 800ab44:	463b      	movge	r3, r7
 800ab46:	9a06      	ldr	r2, [sp, #24]
 800ab48:	1aff      	subs	r7, r7, r3
 800ab4a:	1ad2      	subs	r2, r2, r3
 800ab4c:	9206      	str	r2, [sp, #24]
 800ab4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	9309      	str	r3, [sp, #36]	; 0x24
 800ab54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab56:	b1f3      	cbz	r3, 800ab96 <_dtoa_r+0x7be>
 800ab58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f000 80a8 	beq.w	800acb0 <_dtoa_r+0x8d8>
 800ab60:	2c00      	cmp	r4, #0
 800ab62:	dd10      	ble.n	800ab86 <_dtoa_r+0x7ae>
 800ab64:	4631      	mov	r1, r6
 800ab66:	4622      	mov	r2, r4
 800ab68:	4628      	mov	r0, r5
 800ab6a:	f001 f9d1 	bl	800bf10 <__pow5mult>
 800ab6e:	465a      	mov	r2, fp
 800ab70:	4601      	mov	r1, r0
 800ab72:	4606      	mov	r6, r0
 800ab74:	4628      	mov	r0, r5
 800ab76:	f001 f923 	bl	800bdc0 <__multiply>
 800ab7a:	4680      	mov	r8, r0
 800ab7c:	4659      	mov	r1, fp
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f001 f808 	bl	800bb94 <_Bfree>
 800ab84:	46c3      	mov	fp, r8
 800ab86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab88:	1b1a      	subs	r2, r3, r4
 800ab8a:	d004      	beq.n	800ab96 <_dtoa_r+0x7be>
 800ab8c:	4659      	mov	r1, fp
 800ab8e:	4628      	mov	r0, r5
 800ab90:	f001 f9be 	bl	800bf10 <__pow5mult>
 800ab94:	4683      	mov	fp, r0
 800ab96:	2101      	movs	r1, #1
 800ab98:	4628      	mov	r0, r5
 800ab9a:	f001 f8fb 	bl	800bd94 <__i2b>
 800ab9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aba0:	4604      	mov	r4, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f340 8086 	ble.w	800acb4 <_dtoa_r+0x8dc>
 800aba8:	461a      	mov	r2, r3
 800abaa:	4601      	mov	r1, r0
 800abac:	4628      	mov	r0, r5
 800abae:	f001 f9af 	bl	800bf10 <__pow5mult>
 800abb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abb4:	4604      	mov	r4, r0
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	dd7f      	ble.n	800acba <_dtoa_r+0x8e2>
 800abba:	f04f 0800 	mov.w	r8, #0
 800abbe:	6923      	ldr	r3, [r4, #16]
 800abc0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800abc4:	6918      	ldr	r0, [r3, #16]
 800abc6:	f001 f897 	bl	800bcf8 <__hi0bits>
 800abca:	f1c0 0020 	rsb	r0, r0, #32
 800abce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd0:	4418      	add	r0, r3
 800abd2:	f010 001f 	ands.w	r0, r0, #31
 800abd6:	f000 8092 	beq.w	800acfe <_dtoa_r+0x926>
 800abda:	f1c0 0320 	rsb	r3, r0, #32
 800abde:	2b04      	cmp	r3, #4
 800abe0:	f340 808a 	ble.w	800acf8 <_dtoa_r+0x920>
 800abe4:	f1c0 001c 	rsb	r0, r0, #28
 800abe8:	9b06      	ldr	r3, [sp, #24]
 800abea:	4407      	add	r7, r0
 800abec:	4403      	add	r3, r0
 800abee:	9306      	str	r3, [sp, #24]
 800abf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf2:	4403      	add	r3, r0
 800abf4:	9309      	str	r3, [sp, #36]	; 0x24
 800abf6:	9b06      	ldr	r3, [sp, #24]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	dd05      	ble.n	800ac08 <_dtoa_r+0x830>
 800abfc:	4659      	mov	r1, fp
 800abfe:	461a      	mov	r2, r3
 800ac00:	4628      	mov	r0, r5
 800ac02:	f001 f9df 	bl	800bfc4 <__lshift>
 800ac06:	4683      	mov	fp, r0
 800ac08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	dd05      	ble.n	800ac1a <_dtoa_r+0x842>
 800ac0e:	4621      	mov	r1, r4
 800ac10:	461a      	mov	r2, r3
 800ac12:	4628      	mov	r0, r5
 800ac14:	f001 f9d6 	bl	800bfc4 <__lshift>
 800ac18:	4604      	mov	r4, r0
 800ac1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d070      	beq.n	800ad02 <_dtoa_r+0x92a>
 800ac20:	4621      	mov	r1, r4
 800ac22:	4658      	mov	r0, fp
 800ac24:	f001 fa3e 	bl	800c0a4 <__mcmp>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	da6a      	bge.n	800ad02 <_dtoa_r+0x92a>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	4659      	mov	r1, fp
 800ac30:	220a      	movs	r2, #10
 800ac32:	4628      	mov	r0, r5
 800ac34:	f000 ffd0 	bl	800bbd8 <__multadd>
 800ac38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac3a:	4683      	mov	fp, r0
 800ac3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f000 8194 	beq.w	800af6e <_dtoa_r+0xb96>
 800ac46:	4631      	mov	r1, r6
 800ac48:	2300      	movs	r3, #0
 800ac4a:	220a      	movs	r2, #10
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	f000 ffc3 	bl	800bbd8 <__multadd>
 800ac52:	f1b9 0f00 	cmp.w	r9, #0
 800ac56:	4606      	mov	r6, r0
 800ac58:	f300 8093 	bgt.w	800ad82 <_dtoa_r+0x9aa>
 800ac5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	dc57      	bgt.n	800ad12 <_dtoa_r+0x93a>
 800ac62:	e08e      	b.n	800ad82 <_dtoa_r+0x9aa>
 800ac64:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ac66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac6a:	e757      	b.n	800ab1c <_dtoa_r+0x744>
 800ac6c:	9b08      	ldr	r3, [sp, #32]
 800ac6e:	1e5c      	subs	r4, r3, #1
 800ac70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac72:	42a3      	cmp	r3, r4
 800ac74:	bfb7      	itett	lt
 800ac76:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ac78:	1b1c      	subge	r4, r3, r4
 800ac7a:	1ae2      	sublt	r2, r4, r3
 800ac7c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ac7e:	bfbe      	ittt	lt
 800ac80:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ac82:	189b      	addlt	r3, r3, r2
 800ac84:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ac86:	9b08      	ldr	r3, [sp, #32]
 800ac88:	bfb8      	it	lt
 800ac8a:	2400      	movlt	r4, #0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	bfbb      	ittet	lt
 800ac90:	9b06      	ldrlt	r3, [sp, #24]
 800ac92:	9a08      	ldrlt	r2, [sp, #32]
 800ac94:	9f06      	ldrge	r7, [sp, #24]
 800ac96:	1a9f      	sublt	r7, r3, r2
 800ac98:	bfac      	ite	ge
 800ac9a:	9b08      	ldrge	r3, [sp, #32]
 800ac9c:	2300      	movlt	r3, #0
 800ac9e:	e73f      	b.n	800ab20 <_dtoa_r+0x748>
 800aca0:	3fe00000 	.word	0x3fe00000
 800aca4:	40240000 	.word	0x40240000
 800aca8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800acaa:	9f06      	ldr	r7, [sp, #24]
 800acac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800acae:	e742      	b.n	800ab36 <_dtoa_r+0x75e>
 800acb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acb2:	e76b      	b.n	800ab8c <_dtoa_r+0x7b4>
 800acb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	dc19      	bgt.n	800acee <_dtoa_r+0x916>
 800acba:	9b04      	ldr	r3, [sp, #16]
 800acbc:	b9bb      	cbnz	r3, 800acee <_dtoa_r+0x916>
 800acbe:	9b05      	ldr	r3, [sp, #20]
 800acc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acc4:	b99b      	cbnz	r3, 800acee <_dtoa_r+0x916>
 800acc6:	9b05      	ldr	r3, [sp, #20]
 800acc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800accc:	0d1b      	lsrs	r3, r3, #20
 800acce:	051b      	lsls	r3, r3, #20
 800acd0:	b183      	cbz	r3, 800acf4 <_dtoa_r+0x91c>
 800acd2:	f04f 0801 	mov.w	r8, #1
 800acd6:	9b06      	ldr	r3, [sp, #24]
 800acd8:	3301      	adds	r3, #1
 800acda:	9306      	str	r3, [sp, #24]
 800acdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acde:	3301      	adds	r3, #1
 800ace0:	9309      	str	r3, [sp, #36]	; 0x24
 800ace2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f47f af6a 	bne.w	800abbe <_dtoa_r+0x7e6>
 800acea:	2001      	movs	r0, #1
 800acec:	e76f      	b.n	800abce <_dtoa_r+0x7f6>
 800acee:	f04f 0800 	mov.w	r8, #0
 800acf2:	e7f6      	b.n	800ace2 <_dtoa_r+0x90a>
 800acf4:	4698      	mov	r8, r3
 800acf6:	e7f4      	b.n	800ace2 <_dtoa_r+0x90a>
 800acf8:	f43f af7d 	beq.w	800abf6 <_dtoa_r+0x81e>
 800acfc:	4618      	mov	r0, r3
 800acfe:	301c      	adds	r0, #28
 800ad00:	e772      	b.n	800abe8 <_dtoa_r+0x810>
 800ad02:	9b08      	ldr	r3, [sp, #32]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	dc36      	bgt.n	800ad76 <_dtoa_r+0x99e>
 800ad08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	dd33      	ble.n	800ad76 <_dtoa_r+0x99e>
 800ad0e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad12:	f1b9 0f00 	cmp.w	r9, #0
 800ad16:	d10d      	bne.n	800ad34 <_dtoa_r+0x95c>
 800ad18:	4621      	mov	r1, r4
 800ad1a:	464b      	mov	r3, r9
 800ad1c:	2205      	movs	r2, #5
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f000 ff5a 	bl	800bbd8 <__multadd>
 800ad24:	4601      	mov	r1, r0
 800ad26:	4604      	mov	r4, r0
 800ad28:	4658      	mov	r0, fp
 800ad2a:	f001 f9bb 	bl	800c0a4 <__mcmp>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	f73f adb8 	bgt.w	800a8a4 <_dtoa_r+0x4cc>
 800ad34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad36:	9f03      	ldr	r7, [sp, #12]
 800ad38:	ea6f 0a03 	mvn.w	sl, r3
 800ad3c:	f04f 0800 	mov.w	r8, #0
 800ad40:	4621      	mov	r1, r4
 800ad42:	4628      	mov	r0, r5
 800ad44:	f000 ff26 	bl	800bb94 <_Bfree>
 800ad48:	2e00      	cmp	r6, #0
 800ad4a:	f43f aea7 	beq.w	800aa9c <_dtoa_r+0x6c4>
 800ad4e:	f1b8 0f00 	cmp.w	r8, #0
 800ad52:	d005      	beq.n	800ad60 <_dtoa_r+0x988>
 800ad54:	45b0      	cmp	r8, r6
 800ad56:	d003      	beq.n	800ad60 <_dtoa_r+0x988>
 800ad58:	4641      	mov	r1, r8
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	f000 ff1a 	bl	800bb94 <_Bfree>
 800ad60:	4631      	mov	r1, r6
 800ad62:	4628      	mov	r0, r5
 800ad64:	f000 ff16 	bl	800bb94 <_Bfree>
 800ad68:	e698      	b.n	800aa9c <_dtoa_r+0x6c4>
 800ad6a:	2400      	movs	r4, #0
 800ad6c:	4626      	mov	r6, r4
 800ad6e:	e7e1      	b.n	800ad34 <_dtoa_r+0x95c>
 800ad70:	46c2      	mov	sl, r8
 800ad72:	4626      	mov	r6, r4
 800ad74:	e596      	b.n	800a8a4 <_dtoa_r+0x4cc>
 800ad76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f000 80fd 	beq.w	800af7c <_dtoa_r+0xba4>
 800ad82:	2f00      	cmp	r7, #0
 800ad84:	dd05      	ble.n	800ad92 <_dtoa_r+0x9ba>
 800ad86:	4631      	mov	r1, r6
 800ad88:	463a      	mov	r2, r7
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	f001 f91a 	bl	800bfc4 <__lshift>
 800ad90:	4606      	mov	r6, r0
 800ad92:	f1b8 0f00 	cmp.w	r8, #0
 800ad96:	d05c      	beq.n	800ae52 <_dtoa_r+0xa7a>
 800ad98:	4628      	mov	r0, r5
 800ad9a:	6871      	ldr	r1, [r6, #4]
 800ad9c:	f000 feba 	bl	800bb14 <_Balloc>
 800ada0:	4607      	mov	r7, r0
 800ada2:	b928      	cbnz	r0, 800adb0 <_dtoa_r+0x9d8>
 800ada4:	4602      	mov	r2, r0
 800ada6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800adaa:	4b7f      	ldr	r3, [pc, #508]	; (800afa8 <_dtoa_r+0xbd0>)
 800adac:	f7ff bb28 	b.w	800a400 <_dtoa_r+0x28>
 800adb0:	6932      	ldr	r2, [r6, #16]
 800adb2:	f106 010c 	add.w	r1, r6, #12
 800adb6:	3202      	adds	r2, #2
 800adb8:	0092      	lsls	r2, r2, #2
 800adba:	300c      	adds	r0, #12
 800adbc:	f7fd fc4a 	bl	8008654 <memcpy>
 800adc0:	2201      	movs	r2, #1
 800adc2:	4639      	mov	r1, r7
 800adc4:	4628      	mov	r0, r5
 800adc6:	f001 f8fd 	bl	800bfc4 <__lshift>
 800adca:	46b0      	mov	r8, r6
 800adcc:	4606      	mov	r6, r0
 800adce:	9b03      	ldr	r3, [sp, #12]
 800add0:	3301      	adds	r3, #1
 800add2:	9308      	str	r3, [sp, #32]
 800add4:	9b03      	ldr	r3, [sp, #12]
 800add6:	444b      	add	r3, r9
 800add8:	930a      	str	r3, [sp, #40]	; 0x28
 800adda:	9b04      	ldr	r3, [sp, #16]
 800addc:	f003 0301 	and.w	r3, r3, #1
 800ade0:	9309      	str	r3, [sp, #36]	; 0x24
 800ade2:	9b08      	ldr	r3, [sp, #32]
 800ade4:	4621      	mov	r1, r4
 800ade6:	3b01      	subs	r3, #1
 800ade8:	4658      	mov	r0, fp
 800adea:	9304      	str	r3, [sp, #16]
 800adec:	f7ff fa68 	bl	800a2c0 <quorem>
 800adf0:	4603      	mov	r3, r0
 800adf2:	4641      	mov	r1, r8
 800adf4:	3330      	adds	r3, #48	; 0x30
 800adf6:	9006      	str	r0, [sp, #24]
 800adf8:	4658      	mov	r0, fp
 800adfa:	930b      	str	r3, [sp, #44]	; 0x2c
 800adfc:	f001 f952 	bl	800c0a4 <__mcmp>
 800ae00:	4632      	mov	r2, r6
 800ae02:	4681      	mov	r9, r0
 800ae04:	4621      	mov	r1, r4
 800ae06:	4628      	mov	r0, r5
 800ae08:	f001 f968 	bl	800c0dc <__mdiff>
 800ae0c:	68c2      	ldr	r2, [r0, #12]
 800ae0e:	4607      	mov	r7, r0
 800ae10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae12:	bb02      	cbnz	r2, 800ae56 <_dtoa_r+0xa7e>
 800ae14:	4601      	mov	r1, r0
 800ae16:	4658      	mov	r0, fp
 800ae18:	f001 f944 	bl	800c0a4 <__mcmp>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae20:	4639      	mov	r1, r7
 800ae22:	4628      	mov	r0, r5
 800ae24:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ae28:	f000 feb4 	bl	800bb94 <_Bfree>
 800ae2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae30:	9f08      	ldr	r7, [sp, #32]
 800ae32:	ea43 0102 	orr.w	r1, r3, r2
 800ae36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae38:	430b      	orrs	r3, r1
 800ae3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae3c:	d10d      	bne.n	800ae5a <_dtoa_r+0xa82>
 800ae3e:	2b39      	cmp	r3, #57	; 0x39
 800ae40:	d029      	beq.n	800ae96 <_dtoa_r+0xabe>
 800ae42:	f1b9 0f00 	cmp.w	r9, #0
 800ae46:	dd01      	ble.n	800ae4c <_dtoa_r+0xa74>
 800ae48:	9b06      	ldr	r3, [sp, #24]
 800ae4a:	3331      	adds	r3, #49	; 0x31
 800ae4c:	9a04      	ldr	r2, [sp, #16]
 800ae4e:	7013      	strb	r3, [r2, #0]
 800ae50:	e776      	b.n	800ad40 <_dtoa_r+0x968>
 800ae52:	4630      	mov	r0, r6
 800ae54:	e7b9      	b.n	800adca <_dtoa_r+0x9f2>
 800ae56:	2201      	movs	r2, #1
 800ae58:	e7e2      	b.n	800ae20 <_dtoa_r+0xa48>
 800ae5a:	f1b9 0f00 	cmp.w	r9, #0
 800ae5e:	db06      	blt.n	800ae6e <_dtoa_r+0xa96>
 800ae60:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ae62:	ea41 0909 	orr.w	r9, r1, r9
 800ae66:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae68:	ea59 0101 	orrs.w	r1, r9, r1
 800ae6c:	d120      	bne.n	800aeb0 <_dtoa_r+0xad8>
 800ae6e:	2a00      	cmp	r2, #0
 800ae70:	ddec      	ble.n	800ae4c <_dtoa_r+0xa74>
 800ae72:	4659      	mov	r1, fp
 800ae74:	2201      	movs	r2, #1
 800ae76:	4628      	mov	r0, r5
 800ae78:	9308      	str	r3, [sp, #32]
 800ae7a:	f001 f8a3 	bl	800bfc4 <__lshift>
 800ae7e:	4621      	mov	r1, r4
 800ae80:	4683      	mov	fp, r0
 800ae82:	f001 f90f 	bl	800c0a4 <__mcmp>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	9b08      	ldr	r3, [sp, #32]
 800ae8a:	dc02      	bgt.n	800ae92 <_dtoa_r+0xaba>
 800ae8c:	d1de      	bne.n	800ae4c <_dtoa_r+0xa74>
 800ae8e:	07da      	lsls	r2, r3, #31
 800ae90:	d5dc      	bpl.n	800ae4c <_dtoa_r+0xa74>
 800ae92:	2b39      	cmp	r3, #57	; 0x39
 800ae94:	d1d8      	bne.n	800ae48 <_dtoa_r+0xa70>
 800ae96:	2339      	movs	r3, #57	; 0x39
 800ae98:	9a04      	ldr	r2, [sp, #16]
 800ae9a:	7013      	strb	r3, [r2, #0]
 800ae9c:	463b      	mov	r3, r7
 800ae9e:	461f      	mov	r7, r3
 800aea0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aea4:	3b01      	subs	r3, #1
 800aea6:	2a39      	cmp	r2, #57	; 0x39
 800aea8:	d050      	beq.n	800af4c <_dtoa_r+0xb74>
 800aeaa:	3201      	adds	r2, #1
 800aeac:	701a      	strb	r2, [r3, #0]
 800aeae:	e747      	b.n	800ad40 <_dtoa_r+0x968>
 800aeb0:	2a00      	cmp	r2, #0
 800aeb2:	dd03      	ble.n	800aebc <_dtoa_r+0xae4>
 800aeb4:	2b39      	cmp	r3, #57	; 0x39
 800aeb6:	d0ee      	beq.n	800ae96 <_dtoa_r+0xabe>
 800aeb8:	3301      	adds	r3, #1
 800aeba:	e7c7      	b.n	800ae4c <_dtoa_r+0xa74>
 800aebc:	9a08      	ldr	r2, [sp, #32]
 800aebe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aec0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aec4:	428a      	cmp	r2, r1
 800aec6:	d02a      	beq.n	800af1e <_dtoa_r+0xb46>
 800aec8:	4659      	mov	r1, fp
 800aeca:	2300      	movs	r3, #0
 800aecc:	220a      	movs	r2, #10
 800aece:	4628      	mov	r0, r5
 800aed0:	f000 fe82 	bl	800bbd8 <__multadd>
 800aed4:	45b0      	cmp	r8, r6
 800aed6:	4683      	mov	fp, r0
 800aed8:	f04f 0300 	mov.w	r3, #0
 800aedc:	f04f 020a 	mov.w	r2, #10
 800aee0:	4641      	mov	r1, r8
 800aee2:	4628      	mov	r0, r5
 800aee4:	d107      	bne.n	800aef6 <_dtoa_r+0xb1e>
 800aee6:	f000 fe77 	bl	800bbd8 <__multadd>
 800aeea:	4680      	mov	r8, r0
 800aeec:	4606      	mov	r6, r0
 800aeee:	9b08      	ldr	r3, [sp, #32]
 800aef0:	3301      	adds	r3, #1
 800aef2:	9308      	str	r3, [sp, #32]
 800aef4:	e775      	b.n	800ade2 <_dtoa_r+0xa0a>
 800aef6:	f000 fe6f 	bl	800bbd8 <__multadd>
 800aefa:	4631      	mov	r1, r6
 800aefc:	4680      	mov	r8, r0
 800aefe:	2300      	movs	r3, #0
 800af00:	220a      	movs	r2, #10
 800af02:	4628      	mov	r0, r5
 800af04:	f000 fe68 	bl	800bbd8 <__multadd>
 800af08:	4606      	mov	r6, r0
 800af0a:	e7f0      	b.n	800aeee <_dtoa_r+0xb16>
 800af0c:	f1b9 0f00 	cmp.w	r9, #0
 800af10:	bfcc      	ite	gt
 800af12:	464f      	movgt	r7, r9
 800af14:	2701      	movle	r7, #1
 800af16:	f04f 0800 	mov.w	r8, #0
 800af1a:	9a03      	ldr	r2, [sp, #12]
 800af1c:	4417      	add	r7, r2
 800af1e:	4659      	mov	r1, fp
 800af20:	2201      	movs	r2, #1
 800af22:	4628      	mov	r0, r5
 800af24:	9308      	str	r3, [sp, #32]
 800af26:	f001 f84d 	bl	800bfc4 <__lshift>
 800af2a:	4621      	mov	r1, r4
 800af2c:	4683      	mov	fp, r0
 800af2e:	f001 f8b9 	bl	800c0a4 <__mcmp>
 800af32:	2800      	cmp	r0, #0
 800af34:	dcb2      	bgt.n	800ae9c <_dtoa_r+0xac4>
 800af36:	d102      	bne.n	800af3e <_dtoa_r+0xb66>
 800af38:	9b08      	ldr	r3, [sp, #32]
 800af3a:	07db      	lsls	r3, r3, #31
 800af3c:	d4ae      	bmi.n	800ae9c <_dtoa_r+0xac4>
 800af3e:	463b      	mov	r3, r7
 800af40:	461f      	mov	r7, r3
 800af42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af46:	2a30      	cmp	r2, #48	; 0x30
 800af48:	d0fa      	beq.n	800af40 <_dtoa_r+0xb68>
 800af4a:	e6f9      	b.n	800ad40 <_dtoa_r+0x968>
 800af4c:	9a03      	ldr	r2, [sp, #12]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d1a5      	bne.n	800ae9e <_dtoa_r+0xac6>
 800af52:	2331      	movs	r3, #49	; 0x31
 800af54:	f10a 0a01 	add.w	sl, sl, #1
 800af58:	e779      	b.n	800ae4e <_dtoa_r+0xa76>
 800af5a:	4b14      	ldr	r3, [pc, #80]	; (800afac <_dtoa_r+0xbd4>)
 800af5c:	f7ff baa8 	b.w	800a4b0 <_dtoa_r+0xd8>
 800af60:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af62:	2b00      	cmp	r3, #0
 800af64:	f47f aa81 	bne.w	800a46a <_dtoa_r+0x92>
 800af68:	4b11      	ldr	r3, [pc, #68]	; (800afb0 <_dtoa_r+0xbd8>)
 800af6a:	f7ff baa1 	b.w	800a4b0 <_dtoa_r+0xd8>
 800af6e:	f1b9 0f00 	cmp.w	r9, #0
 800af72:	dc03      	bgt.n	800af7c <_dtoa_r+0xba4>
 800af74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af76:	2b02      	cmp	r3, #2
 800af78:	f73f aecb 	bgt.w	800ad12 <_dtoa_r+0x93a>
 800af7c:	9f03      	ldr	r7, [sp, #12]
 800af7e:	4621      	mov	r1, r4
 800af80:	4658      	mov	r0, fp
 800af82:	f7ff f99d 	bl	800a2c0 <quorem>
 800af86:	9a03      	ldr	r2, [sp, #12]
 800af88:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800af8c:	f807 3b01 	strb.w	r3, [r7], #1
 800af90:	1aba      	subs	r2, r7, r2
 800af92:	4591      	cmp	r9, r2
 800af94:	ddba      	ble.n	800af0c <_dtoa_r+0xb34>
 800af96:	4659      	mov	r1, fp
 800af98:	2300      	movs	r3, #0
 800af9a:	220a      	movs	r2, #10
 800af9c:	4628      	mov	r0, r5
 800af9e:	f000 fe1b 	bl	800bbd8 <__multadd>
 800afa2:	4683      	mov	fp, r0
 800afa4:	e7eb      	b.n	800af7e <_dtoa_r+0xba6>
 800afa6:	bf00      	nop
 800afa8:	0800d3c0 	.word	0x0800d3c0
 800afac:	0800d1c4 	.word	0x0800d1c4
 800afb0:	0800d341 	.word	0x0800d341

0800afb4 <__sflush_r>:
 800afb4:	898a      	ldrh	r2, [r1, #12]
 800afb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb8:	4605      	mov	r5, r0
 800afba:	0710      	lsls	r0, r2, #28
 800afbc:	460c      	mov	r4, r1
 800afbe:	d457      	bmi.n	800b070 <__sflush_r+0xbc>
 800afc0:	684b      	ldr	r3, [r1, #4]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	dc04      	bgt.n	800afd0 <__sflush_r+0x1c>
 800afc6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afc8:	2b00      	cmp	r3, #0
 800afca:	dc01      	bgt.n	800afd0 <__sflush_r+0x1c>
 800afcc:	2000      	movs	r0, #0
 800afce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afd2:	2e00      	cmp	r6, #0
 800afd4:	d0fa      	beq.n	800afcc <__sflush_r+0x18>
 800afd6:	2300      	movs	r3, #0
 800afd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afdc:	682f      	ldr	r7, [r5, #0]
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	d032      	beq.n	800b048 <__sflush_r+0x94>
 800afe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afe4:	89a3      	ldrh	r3, [r4, #12]
 800afe6:	075a      	lsls	r2, r3, #29
 800afe8:	d505      	bpl.n	800aff6 <__sflush_r+0x42>
 800afea:	6863      	ldr	r3, [r4, #4]
 800afec:	1ac0      	subs	r0, r0, r3
 800afee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aff0:	b10b      	cbz	r3, 800aff6 <__sflush_r+0x42>
 800aff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aff4:	1ac0      	subs	r0, r0, r3
 800aff6:	2300      	movs	r3, #0
 800aff8:	4602      	mov	r2, r0
 800affa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800affc:	4628      	mov	r0, r5
 800affe:	6a21      	ldr	r1, [r4, #32]
 800b000:	47b0      	blx	r6
 800b002:	1c43      	adds	r3, r0, #1
 800b004:	89a3      	ldrh	r3, [r4, #12]
 800b006:	d106      	bne.n	800b016 <__sflush_r+0x62>
 800b008:	6829      	ldr	r1, [r5, #0]
 800b00a:	291d      	cmp	r1, #29
 800b00c:	d82c      	bhi.n	800b068 <__sflush_r+0xb4>
 800b00e:	4a29      	ldr	r2, [pc, #164]	; (800b0b4 <__sflush_r+0x100>)
 800b010:	40ca      	lsrs	r2, r1
 800b012:	07d6      	lsls	r6, r2, #31
 800b014:	d528      	bpl.n	800b068 <__sflush_r+0xb4>
 800b016:	2200      	movs	r2, #0
 800b018:	6062      	str	r2, [r4, #4]
 800b01a:	6922      	ldr	r2, [r4, #16]
 800b01c:	04d9      	lsls	r1, r3, #19
 800b01e:	6022      	str	r2, [r4, #0]
 800b020:	d504      	bpl.n	800b02c <__sflush_r+0x78>
 800b022:	1c42      	adds	r2, r0, #1
 800b024:	d101      	bne.n	800b02a <__sflush_r+0x76>
 800b026:	682b      	ldr	r3, [r5, #0]
 800b028:	b903      	cbnz	r3, 800b02c <__sflush_r+0x78>
 800b02a:	6560      	str	r0, [r4, #84]	; 0x54
 800b02c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b02e:	602f      	str	r7, [r5, #0]
 800b030:	2900      	cmp	r1, #0
 800b032:	d0cb      	beq.n	800afcc <__sflush_r+0x18>
 800b034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b038:	4299      	cmp	r1, r3
 800b03a:	d002      	beq.n	800b042 <__sflush_r+0x8e>
 800b03c:	4628      	mov	r0, r5
 800b03e:	f7fd fb33 	bl	80086a8 <_free_r>
 800b042:	2000      	movs	r0, #0
 800b044:	6360      	str	r0, [r4, #52]	; 0x34
 800b046:	e7c2      	b.n	800afce <__sflush_r+0x1a>
 800b048:	6a21      	ldr	r1, [r4, #32]
 800b04a:	2301      	movs	r3, #1
 800b04c:	4628      	mov	r0, r5
 800b04e:	47b0      	blx	r6
 800b050:	1c41      	adds	r1, r0, #1
 800b052:	d1c7      	bne.n	800afe4 <__sflush_r+0x30>
 800b054:	682b      	ldr	r3, [r5, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d0c4      	beq.n	800afe4 <__sflush_r+0x30>
 800b05a:	2b1d      	cmp	r3, #29
 800b05c:	d001      	beq.n	800b062 <__sflush_r+0xae>
 800b05e:	2b16      	cmp	r3, #22
 800b060:	d101      	bne.n	800b066 <__sflush_r+0xb2>
 800b062:	602f      	str	r7, [r5, #0]
 800b064:	e7b2      	b.n	800afcc <__sflush_r+0x18>
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b06c:	81a3      	strh	r3, [r4, #12]
 800b06e:	e7ae      	b.n	800afce <__sflush_r+0x1a>
 800b070:	690f      	ldr	r7, [r1, #16]
 800b072:	2f00      	cmp	r7, #0
 800b074:	d0aa      	beq.n	800afcc <__sflush_r+0x18>
 800b076:	0793      	lsls	r3, r2, #30
 800b078:	bf18      	it	ne
 800b07a:	2300      	movne	r3, #0
 800b07c:	680e      	ldr	r6, [r1, #0]
 800b07e:	bf08      	it	eq
 800b080:	694b      	ldreq	r3, [r1, #20]
 800b082:	1bf6      	subs	r6, r6, r7
 800b084:	600f      	str	r7, [r1, #0]
 800b086:	608b      	str	r3, [r1, #8]
 800b088:	2e00      	cmp	r6, #0
 800b08a:	dd9f      	ble.n	800afcc <__sflush_r+0x18>
 800b08c:	4633      	mov	r3, r6
 800b08e:	463a      	mov	r2, r7
 800b090:	4628      	mov	r0, r5
 800b092:	6a21      	ldr	r1, [r4, #32]
 800b094:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b098:	47e0      	blx	ip
 800b09a:	2800      	cmp	r0, #0
 800b09c:	dc06      	bgt.n	800b0ac <__sflush_r+0xf8>
 800b09e:	89a3      	ldrh	r3, [r4, #12]
 800b0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0a8:	81a3      	strh	r3, [r4, #12]
 800b0aa:	e790      	b.n	800afce <__sflush_r+0x1a>
 800b0ac:	4407      	add	r7, r0
 800b0ae:	1a36      	subs	r6, r6, r0
 800b0b0:	e7ea      	b.n	800b088 <__sflush_r+0xd4>
 800b0b2:	bf00      	nop
 800b0b4:	20400001 	.word	0x20400001

0800b0b8 <_fflush_r>:
 800b0b8:	b538      	push	{r3, r4, r5, lr}
 800b0ba:	690b      	ldr	r3, [r1, #16]
 800b0bc:	4605      	mov	r5, r0
 800b0be:	460c      	mov	r4, r1
 800b0c0:	b913      	cbnz	r3, 800b0c8 <_fflush_r+0x10>
 800b0c2:	2500      	movs	r5, #0
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	bd38      	pop	{r3, r4, r5, pc}
 800b0c8:	b118      	cbz	r0, 800b0d2 <_fflush_r+0x1a>
 800b0ca:	6983      	ldr	r3, [r0, #24]
 800b0cc:	b90b      	cbnz	r3, 800b0d2 <_fflush_r+0x1a>
 800b0ce:	f000 f887 	bl	800b1e0 <__sinit>
 800b0d2:	4b14      	ldr	r3, [pc, #80]	; (800b124 <_fflush_r+0x6c>)
 800b0d4:	429c      	cmp	r4, r3
 800b0d6:	d11b      	bne.n	800b110 <_fflush_r+0x58>
 800b0d8:	686c      	ldr	r4, [r5, #4]
 800b0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d0ef      	beq.n	800b0c2 <_fflush_r+0xa>
 800b0e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0e4:	07d0      	lsls	r0, r2, #31
 800b0e6:	d404      	bmi.n	800b0f2 <_fflush_r+0x3a>
 800b0e8:	0599      	lsls	r1, r3, #22
 800b0ea:	d402      	bmi.n	800b0f2 <_fflush_r+0x3a>
 800b0ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0ee:	f7fd faa6 	bl	800863e <__retarget_lock_acquire_recursive>
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	f7ff ff5d 	bl	800afb4 <__sflush_r>
 800b0fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0fc:	4605      	mov	r5, r0
 800b0fe:	07da      	lsls	r2, r3, #31
 800b100:	d4e0      	bmi.n	800b0c4 <_fflush_r+0xc>
 800b102:	89a3      	ldrh	r3, [r4, #12]
 800b104:	059b      	lsls	r3, r3, #22
 800b106:	d4dd      	bmi.n	800b0c4 <_fflush_r+0xc>
 800b108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b10a:	f7fd fa99 	bl	8008640 <__retarget_lock_release_recursive>
 800b10e:	e7d9      	b.n	800b0c4 <_fflush_r+0xc>
 800b110:	4b05      	ldr	r3, [pc, #20]	; (800b128 <_fflush_r+0x70>)
 800b112:	429c      	cmp	r4, r3
 800b114:	d101      	bne.n	800b11a <_fflush_r+0x62>
 800b116:	68ac      	ldr	r4, [r5, #8]
 800b118:	e7df      	b.n	800b0da <_fflush_r+0x22>
 800b11a:	4b04      	ldr	r3, [pc, #16]	; (800b12c <_fflush_r+0x74>)
 800b11c:	429c      	cmp	r4, r3
 800b11e:	bf08      	it	eq
 800b120:	68ec      	ldreq	r4, [r5, #12]
 800b122:	e7da      	b.n	800b0da <_fflush_r+0x22>
 800b124:	0800d3f4 	.word	0x0800d3f4
 800b128:	0800d414 	.word	0x0800d414
 800b12c:	0800d3d4 	.word	0x0800d3d4

0800b130 <std>:
 800b130:	2300      	movs	r3, #0
 800b132:	b510      	push	{r4, lr}
 800b134:	4604      	mov	r4, r0
 800b136:	e9c0 3300 	strd	r3, r3, [r0]
 800b13a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b13e:	6083      	str	r3, [r0, #8]
 800b140:	8181      	strh	r1, [r0, #12]
 800b142:	6643      	str	r3, [r0, #100]	; 0x64
 800b144:	81c2      	strh	r2, [r0, #14]
 800b146:	6183      	str	r3, [r0, #24]
 800b148:	4619      	mov	r1, r3
 800b14a:	2208      	movs	r2, #8
 800b14c:	305c      	adds	r0, #92	; 0x5c
 800b14e:	f7fd fa8f 	bl	8008670 <memset>
 800b152:	4b05      	ldr	r3, [pc, #20]	; (800b168 <std+0x38>)
 800b154:	6224      	str	r4, [r4, #32]
 800b156:	6263      	str	r3, [r4, #36]	; 0x24
 800b158:	4b04      	ldr	r3, [pc, #16]	; (800b16c <std+0x3c>)
 800b15a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b15c:	4b04      	ldr	r3, [pc, #16]	; (800b170 <std+0x40>)
 800b15e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b160:	4b04      	ldr	r3, [pc, #16]	; (800b174 <std+0x44>)
 800b162:	6323      	str	r3, [r4, #48]	; 0x30
 800b164:	bd10      	pop	{r4, pc}
 800b166:	bf00      	nop
 800b168:	0800c749 	.word	0x0800c749
 800b16c:	0800c76b 	.word	0x0800c76b
 800b170:	0800c7a3 	.word	0x0800c7a3
 800b174:	0800c7c7 	.word	0x0800c7c7

0800b178 <_cleanup_r>:
 800b178:	4901      	ldr	r1, [pc, #4]	; (800b180 <_cleanup_r+0x8>)
 800b17a:	f000 b8af 	b.w	800b2dc <_fwalk_reent>
 800b17e:	bf00      	nop
 800b180:	0800b0b9 	.word	0x0800b0b9

0800b184 <__sfmoreglue>:
 800b184:	2268      	movs	r2, #104	; 0x68
 800b186:	b570      	push	{r4, r5, r6, lr}
 800b188:	1e4d      	subs	r5, r1, #1
 800b18a:	4355      	muls	r5, r2
 800b18c:	460e      	mov	r6, r1
 800b18e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b192:	f7fd faf1 	bl	8008778 <_malloc_r>
 800b196:	4604      	mov	r4, r0
 800b198:	b140      	cbz	r0, 800b1ac <__sfmoreglue+0x28>
 800b19a:	2100      	movs	r1, #0
 800b19c:	e9c0 1600 	strd	r1, r6, [r0]
 800b1a0:	300c      	adds	r0, #12
 800b1a2:	60a0      	str	r0, [r4, #8]
 800b1a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1a8:	f7fd fa62 	bl	8008670 <memset>
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	bd70      	pop	{r4, r5, r6, pc}

0800b1b0 <__sfp_lock_acquire>:
 800b1b0:	4801      	ldr	r0, [pc, #4]	; (800b1b8 <__sfp_lock_acquire+0x8>)
 800b1b2:	f7fd ba44 	b.w	800863e <__retarget_lock_acquire_recursive>
 800b1b6:	bf00      	nop
 800b1b8:	20000519 	.word	0x20000519

0800b1bc <__sfp_lock_release>:
 800b1bc:	4801      	ldr	r0, [pc, #4]	; (800b1c4 <__sfp_lock_release+0x8>)
 800b1be:	f7fd ba3f 	b.w	8008640 <__retarget_lock_release_recursive>
 800b1c2:	bf00      	nop
 800b1c4:	20000519 	.word	0x20000519

0800b1c8 <__sinit_lock_acquire>:
 800b1c8:	4801      	ldr	r0, [pc, #4]	; (800b1d0 <__sinit_lock_acquire+0x8>)
 800b1ca:	f7fd ba38 	b.w	800863e <__retarget_lock_acquire_recursive>
 800b1ce:	bf00      	nop
 800b1d0:	2000051a 	.word	0x2000051a

0800b1d4 <__sinit_lock_release>:
 800b1d4:	4801      	ldr	r0, [pc, #4]	; (800b1dc <__sinit_lock_release+0x8>)
 800b1d6:	f7fd ba33 	b.w	8008640 <__retarget_lock_release_recursive>
 800b1da:	bf00      	nop
 800b1dc:	2000051a 	.word	0x2000051a

0800b1e0 <__sinit>:
 800b1e0:	b510      	push	{r4, lr}
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	f7ff fff0 	bl	800b1c8 <__sinit_lock_acquire>
 800b1e8:	69a3      	ldr	r3, [r4, #24]
 800b1ea:	b11b      	cbz	r3, 800b1f4 <__sinit+0x14>
 800b1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1f0:	f7ff bff0 	b.w	800b1d4 <__sinit_lock_release>
 800b1f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1f8:	6523      	str	r3, [r4, #80]	; 0x50
 800b1fa:	4b13      	ldr	r3, [pc, #76]	; (800b248 <__sinit+0x68>)
 800b1fc:	4a13      	ldr	r2, [pc, #76]	; (800b24c <__sinit+0x6c>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	62a2      	str	r2, [r4, #40]	; 0x28
 800b202:	42a3      	cmp	r3, r4
 800b204:	bf08      	it	eq
 800b206:	2301      	moveq	r3, #1
 800b208:	4620      	mov	r0, r4
 800b20a:	bf08      	it	eq
 800b20c:	61a3      	streq	r3, [r4, #24]
 800b20e:	f000 f81f 	bl	800b250 <__sfp>
 800b212:	6060      	str	r0, [r4, #4]
 800b214:	4620      	mov	r0, r4
 800b216:	f000 f81b 	bl	800b250 <__sfp>
 800b21a:	60a0      	str	r0, [r4, #8]
 800b21c:	4620      	mov	r0, r4
 800b21e:	f000 f817 	bl	800b250 <__sfp>
 800b222:	2200      	movs	r2, #0
 800b224:	2104      	movs	r1, #4
 800b226:	60e0      	str	r0, [r4, #12]
 800b228:	6860      	ldr	r0, [r4, #4]
 800b22a:	f7ff ff81 	bl	800b130 <std>
 800b22e:	2201      	movs	r2, #1
 800b230:	2109      	movs	r1, #9
 800b232:	68a0      	ldr	r0, [r4, #8]
 800b234:	f7ff ff7c 	bl	800b130 <std>
 800b238:	2202      	movs	r2, #2
 800b23a:	2112      	movs	r1, #18
 800b23c:	68e0      	ldr	r0, [r4, #12]
 800b23e:	f7ff ff77 	bl	800b130 <std>
 800b242:	2301      	movs	r3, #1
 800b244:	61a3      	str	r3, [r4, #24]
 800b246:	e7d1      	b.n	800b1ec <__sinit+0xc>
 800b248:	0800d1b0 	.word	0x0800d1b0
 800b24c:	0800b179 	.word	0x0800b179

0800b250 <__sfp>:
 800b250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b252:	4607      	mov	r7, r0
 800b254:	f7ff ffac 	bl	800b1b0 <__sfp_lock_acquire>
 800b258:	4b1e      	ldr	r3, [pc, #120]	; (800b2d4 <__sfp+0x84>)
 800b25a:	681e      	ldr	r6, [r3, #0]
 800b25c:	69b3      	ldr	r3, [r6, #24]
 800b25e:	b913      	cbnz	r3, 800b266 <__sfp+0x16>
 800b260:	4630      	mov	r0, r6
 800b262:	f7ff ffbd 	bl	800b1e0 <__sinit>
 800b266:	3648      	adds	r6, #72	; 0x48
 800b268:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b26c:	3b01      	subs	r3, #1
 800b26e:	d503      	bpl.n	800b278 <__sfp+0x28>
 800b270:	6833      	ldr	r3, [r6, #0]
 800b272:	b30b      	cbz	r3, 800b2b8 <__sfp+0x68>
 800b274:	6836      	ldr	r6, [r6, #0]
 800b276:	e7f7      	b.n	800b268 <__sfp+0x18>
 800b278:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b27c:	b9d5      	cbnz	r5, 800b2b4 <__sfp+0x64>
 800b27e:	4b16      	ldr	r3, [pc, #88]	; (800b2d8 <__sfp+0x88>)
 800b280:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b284:	60e3      	str	r3, [r4, #12]
 800b286:	6665      	str	r5, [r4, #100]	; 0x64
 800b288:	f7fd f9d8 	bl	800863c <__retarget_lock_init_recursive>
 800b28c:	f7ff ff96 	bl	800b1bc <__sfp_lock_release>
 800b290:	2208      	movs	r2, #8
 800b292:	4629      	mov	r1, r5
 800b294:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b298:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b29c:	6025      	str	r5, [r4, #0]
 800b29e:	61a5      	str	r5, [r4, #24]
 800b2a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2a4:	f7fd f9e4 	bl	8008670 <memset>
 800b2a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2b4:	3468      	adds	r4, #104	; 0x68
 800b2b6:	e7d9      	b.n	800b26c <__sfp+0x1c>
 800b2b8:	2104      	movs	r1, #4
 800b2ba:	4638      	mov	r0, r7
 800b2bc:	f7ff ff62 	bl	800b184 <__sfmoreglue>
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	6030      	str	r0, [r6, #0]
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	d1d5      	bne.n	800b274 <__sfp+0x24>
 800b2c8:	f7ff ff78 	bl	800b1bc <__sfp_lock_release>
 800b2cc:	230c      	movs	r3, #12
 800b2ce:	603b      	str	r3, [r7, #0]
 800b2d0:	e7ee      	b.n	800b2b0 <__sfp+0x60>
 800b2d2:	bf00      	nop
 800b2d4:	0800d1b0 	.word	0x0800d1b0
 800b2d8:	ffff0001 	.word	0xffff0001

0800b2dc <_fwalk_reent>:
 800b2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2e0:	4606      	mov	r6, r0
 800b2e2:	4688      	mov	r8, r1
 800b2e4:	2700      	movs	r7, #0
 800b2e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b2ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2ee:	f1b9 0901 	subs.w	r9, r9, #1
 800b2f2:	d505      	bpl.n	800b300 <_fwalk_reent+0x24>
 800b2f4:	6824      	ldr	r4, [r4, #0]
 800b2f6:	2c00      	cmp	r4, #0
 800b2f8:	d1f7      	bne.n	800b2ea <_fwalk_reent+0xe>
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b300:	89ab      	ldrh	r3, [r5, #12]
 800b302:	2b01      	cmp	r3, #1
 800b304:	d907      	bls.n	800b316 <_fwalk_reent+0x3a>
 800b306:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b30a:	3301      	adds	r3, #1
 800b30c:	d003      	beq.n	800b316 <_fwalk_reent+0x3a>
 800b30e:	4629      	mov	r1, r5
 800b310:	4630      	mov	r0, r6
 800b312:	47c0      	blx	r8
 800b314:	4307      	orrs	r7, r0
 800b316:	3568      	adds	r5, #104	; 0x68
 800b318:	e7e9      	b.n	800b2ee <_fwalk_reent+0x12>

0800b31a <rshift>:
 800b31a:	6903      	ldr	r3, [r0, #16]
 800b31c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b320:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b324:	f100 0414 	add.w	r4, r0, #20
 800b328:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b32c:	dd46      	ble.n	800b3bc <rshift+0xa2>
 800b32e:	f011 011f 	ands.w	r1, r1, #31
 800b332:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b336:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b33a:	d10c      	bne.n	800b356 <rshift+0x3c>
 800b33c:	4629      	mov	r1, r5
 800b33e:	f100 0710 	add.w	r7, r0, #16
 800b342:	42b1      	cmp	r1, r6
 800b344:	d335      	bcc.n	800b3b2 <rshift+0x98>
 800b346:	1a9b      	subs	r3, r3, r2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	1eea      	subs	r2, r5, #3
 800b34c:	4296      	cmp	r6, r2
 800b34e:	bf38      	it	cc
 800b350:	2300      	movcc	r3, #0
 800b352:	4423      	add	r3, r4
 800b354:	e015      	b.n	800b382 <rshift+0x68>
 800b356:	46a1      	mov	r9, r4
 800b358:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b35c:	f1c1 0820 	rsb	r8, r1, #32
 800b360:	40cf      	lsrs	r7, r1
 800b362:	f105 0e04 	add.w	lr, r5, #4
 800b366:	4576      	cmp	r6, lr
 800b368:	46f4      	mov	ip, lr
 800b36a:	d816      	bhi.n	800b39a <rshift+0x80>
 800b36c:	1a9a      	subs	r2, r3, r2
 800b36e:	0092      	lsls	r2, r2, #2
 800b370:	3a04      	subs	r2, #4
 800b372:	3501      	adds	r5, #1
 800b374:	42ae      	cmp	r6, r5
 800b376:	bf38      	it	cc
 800b378:	2200      	movcc	r2, #0
 800b37a:	18a3      	adds	r3, r4, r2
 800b37c:	50a7      	str	r7, [r4, r2]
 800b37e:	b107      	cbz	r7, 800b382 <rshift+0x68>
 800b380:	3304      	adds	r3, #4
 800b382:	42a3      	cmp	r3, r4
 800b384:	eba3 0204 	sub.w	r2, r3, r4
 800b388:	bf08      	it	eq
 800b38a:	2300      	moveq	r3, #0
 800b38c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b390:	6102      	str	r2, [r0, #16]
 800b392:	bf08      	it	eq
 800b394:	6143      	streq	r3, [r0, #20]
 800b396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b39a:	f8dc c000 	ldr.w	ip, [ip]
 800b39e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b3a2:	ea4c 0707 	orr.w	r7, ip, r7
 800b3a6:	f849 7b04 	str.w	r7, [r9], #4
 800b3aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b3ae:	40cf      	lsrs	r7, r1
 800b3b0:	e7d9      	b.n	800b366 <rshift+0x4c>
 800b3b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b3b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b3ba:	e7c2      	b.n	800b342 <rshift+0x28>
 800b3bc:	4623      	mov	r3, r4
 800b3be:	e7e0      	b.n	800b382 <rshift+0x68>

0800b3c0 <__hexdig_fun>:
 800b3c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b3c4:	2b09      	cmp	r3, #9
 800b3c6:	d802      	bhi.n	800b3ce <__hexdig_fun+0xe>
 800b3c8:	3820      	subs	r0, #32
 800b3ca:	b2c0      	uxtb	r0, r0
 800b3cc:	4770      	bx	lr
 800b3ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b3d2:	2b05      	cmp	r3, #5
 800b3d4:	d801      	bhi.n	800b3da <__hexdig_fun+0x1a>
 800b3d6:	3847      	subs	r0, #71	; 0x47
 800b3d8:	e7f7      	b.n	800b3ca <__hexdig_fun+0xa>
 800b3da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b3de:	2b05      	cmp	r3, #5
 800b3e0:	d801      	bhi.n	800b3e6 <__hexdig_fun+0x26>
 800b3e2:	3827      	subs	r0, #39	; 0x27
 800b3e4:	e7f1      	b.n	800b3ca <__hexdig_fun+0xa>
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	4770      	bx	lr
	...

0800b3ec <__gethex>:
 800b3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	b08b      	sub	sp, #44	; 0x2c
 800b3f2:	9305      	str	r3, [sp, #20]
 800b3f4:	4bb2      	ldr	r3, [pc, #712]	; (800b6c0 <__gethex+0x2d4>)
 800b3f6:	9002      	str	r0, [sp, #8]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	468b      	mov	fp, r1
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	4690      	mov	r8, r2
 800b400:	9303      	str	r3, [sp, #12]
 800b402:	f7f4 fea5 	bl	8000150 <strlen>
 800b406:	4682      	mov	sl, r0
 800b408:	9b03      	ldr	r3, [sp, #12]
 800b40a:	f8db 2000 	ldr.w	r2, [fp]
 800b40e:	4403      	add	r3, r0
 800b410:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b414:	9306      	str	r3, [sp, #24]
 800b416:	1c93      	adds	r3, r2, #2
 800b418:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b41c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b420:	32fe      	adds	r2, #254	; 0xfe
 800b422:	18d1      	adds	r1, r2, r3
 800b424:	461f      	mov	r7, r3
 800b426:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b42a:	9101      	str	r1, [sp, #4]
 800b42c:	2830      	cmp	r0, #48	; 0x30
 800b42e:	d0f8      	beq.n	800b422 <__gethex+0x36>
 800b430:	f7ff ffc6 	bl	800b3c0 <__hexdig_fun>
 800b434:	4604      	mov	r4, r0
 800b436:	2800      	cmp	r0, #0
 800b438:	d13a      	bne.n	800b4b0 <__gethex+0xc4>
 800b43a:	4652      	mov	r2, sl
 800b43c:	4638      	mov	r0, r7
 800b43e:	9903      	ldr	r1, [sp, #12]
 800b440:	f001 f9c5 	bl	800c7ce <strncmp>
 800b444:	4605      	mov	r5, r0
 800b446:	2800      	cmp	r0, #0
 800b448:	d166      	bne.n	800b518 <__gethex+0x12c>
 800b44a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b44e:	eb07 060a 	add.w	r6, r7, sl
 800b452:	f7ff ffb5 	bl	800b3c0 <__hexdig_fun>
 800b456:	2800      	cmp	r0, #0
 800b458:	d060      	beq.n	800b51c <__gethex+0x130>
 800b45a:	4633      	mov	r3, r6
 800b45c:	7818      	ldrb	r0, [r3, #0]
 800b45e:	461f      	mov	r7, r3
 800b460:	2830      	cmp	r0, #48	; 0x30
 800b462:	f103 0301 	add.w	r3, r3, #1
 800b466:	d0f9      	beq.n	800b45c <__gethex+0x70>
 800b468:	f7ff ffaa 	bl	800b3c0 <__hexdig_fun>
 800b46c:	2301      	movs	r3, #1
 800b46e:	fab0 f480 	clz	r4, r0
 800b472:	4635      	mov	r5, r6
 800b474:	0964      	lsrs	r4, r4, #5
 800b476:	9301      	str	r3, [sp, #4]
 800b478:	463a      	mov	r2, r7
 800b47a:	4616      	mov	r6, r2
 800b47c:	7830      	ldrb	r0, [r6, #0]
 800b47e:	3201      	adds	r2, #1
 800b480:	f7ff ff9e 	bl	800b3c0 <__hexdig_fun>
 800b484:	2800      	cmp	r0, #0
 800b486:	d1f8      	bne.n	800b47a <__gethex+0x8e>
 800b488:	4652      	mov	r2, sl
 800b48a:	4630      	mov	r0, r6
 800b48c:	9903      	ldr	r1, [sp, #12]
 800b48e:	f001 f99e 	bl	800c7ce <strncmp>
 800b492:	b980      	cbnz	r0, 800b4b6 <__gethex+0xca>
 800b494:	b94d      	cbnz	r5, 800b4aa <__gethex+0xbe>
 800b496:	eb06 050a 	add.w	r5, r6, sl
 800b49a:	462a      	mov	r2, r5
 800b49c:	4616      	mov	r6, r2
 800b49e:	7830      	ldrb	r0, [r6, #0]
 800b4a0:	3201      	adds	r2, #1
 800b4a2:	f7ff ff8d 	bl	800b3c0 <__hexdig_fun>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d1f8      	bne.n	800b49c <__gethex+0xb0>
 800b4aa:	1bad      	subs	r5, r5, r6
 800b4ac:	00ad      	lsls	r5, r5, #2
 800b4ae:	e004      	b.n	800b4ba <__gethex+0xce>
 800b4b0:	2400      	movs	r4, #0
 800b4b2:	4625      	mov	r5, r4
 800b4b4:	e7e0      	b.n	800b478 <__gethex+0x8c>
 800b4b6:	2d00      	cmp	r5, #0
 800b4b8:	d1f7      	bne.n	800b4aa <__gethex+0xbe>
 800b4ba:	7833      	ldrb	r3, [r6, #0]
 800b4bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b4c0:	2b50      	cmp	r3, #80	; 0x50
 800b4c2:	d139      	bne.n	800b538 <__gethex+0x14c>
 800b4c4:	7873      	ldrb	r3, [r6, #1]
 800b4c6:	2b2b      	cmp	r3, #43	; 0x2b
 800b4c8:	d02a      	beq.n	800b520 <__gethex+0x134>
 800b4ca:	2b2d      	cmp	r3, #45	; 0x2d
 800b4cc:	d02c      	beq.n	800b528 <__gethex+0x13c>
 800b4ce:	f04f 0900 	mov.w	r9, #0
 800b4d2:	1c71      	adds	r1, r6, #1
 800b4d4:	7808      	ldrb	r0, [r1, #0]
 800b4d6:	f7ff ff73 	bl	800b3c0 <__hexdig_fun>
 800b4da:	1e43      	subs	r3, r0, #1
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b18      	cmp	r3, #24
 800b4e0:	d82a      	bhi.n	800b538 <__gethex+0x14c>
 800b4e2:	f1a0 0210 	sub.w	r2, r0, #16
 800b4e6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4ea:	f7ff ff69 	bl	800b3c0 <__hexdig_fun>
 800b4ee:	1e43      	subs	r3, r0, #1
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	2b18      	cmp	r3, #24
 800b4f4:	d91b      	bls.n	800b52e <__gethex+0x142>
 800b4f6:	f1b9 0f00 	cmp.w	r9, #0
 800b4fa:	d000      	beq.n	800b4fe <__gethex+0x112>
 800b4fc:	4252      	negs	r2, r2
 800b4fe:	4415      	add	r5, r2
 800b500:	f8cb 1000 	str.w	r1, [fp]
 800b504:	b1d4      	cbz	r4, 800b53c <__gethex+0x150>
 800b506:	9b01      	ldr	r3, [sp, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	bf14      	ite	ne
 800b50c:	2700      	movne	r7, #0
 800b50e:	2706      	moveq	r7, #6
 800b510:	4638      	mov	r0, r7
 800b512:	b00b      	add	sp, #44	; 0x2c
 800b514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b518:	463e      	mov	r6, r7
 800b51a:	4625      	mov	r5, r4
 800b51c:	2401      	movs	r4, #1
 800b51e:	e7cc      	b.n	800b4ba <__gethex+0xce>
 800b520:	f04f 0900 	mov.w	r9, #0
 800b524:	1cb1      	adds	r1, r6, #2
 800b526:	e7d5      	b.n	800b4d4 <__gethex+0xe8>
 800b528:	f04f 0901 	mov.w	r9, #1
 800b52c:	e7fa      	b.n	800b524 <__gethex+0x138>
 800b52e:	230a      	movs	r3, #10
 800b530:	fb03 0202 	mla	r2, r3, r2, r0
 800b534:	3a10      	subs	r2, #16
 800b536:	e7d6      	b.n	800b4e6 <__gethex+0xfa>
 800b538:	4631      	mov	r1, r6
 800b53a:	e7e1      	b.n	800b500 <__gethex+0x114>
 800b53c:	4621      	mov	r1, r4
 800b53e:	1bf3      	subs	r3, r6, r7
 800b540:	3b01      	subs	r3, #1
 800b542:	2b07      	cmp	r3, #7
 800b544:	dc0a      	bgt.n	800b55c <__gethex+0x170>
 800b546:	9802      	ldr	r0, [sp, #8]
 800b548:	f000 fae4 	bl	800bb14 <_Balloc>
 800b54c:	4604      	mov	r4, r0
 800b54e:	b940      	cbnz	r0, 800b562 <__gethex+0x176>
 800b550:	4602      	mov	r2, r0
 800b552:	21de      	movs	r1, #222	; 0xde
 800b554:	4b5b      	ldr	r3, [pc, #364]	; (800b6c4 <__gethex+0x2d8>)
 800b556:	485c      	ldr	r0, [pc, #368]	; (800b6c8 <__gethex+0x2dc>)
 800b558:	f001 f96c 	bl	800c834 <__assert_func>
 800b55c:	3101      	adds	r1, #1
 800b55e:	105b      	asrs	r3, r3, #1
 800b560:	e7ef      	b.n	800b542 <__gethex+0x156>
 800b562:	f04f 0b00 	mov.w	fp, #0
 800b566:	f100 0914 	add.w	r9, r0, #20
 800b56a:	f1ca 0301 	rsb	r3, sl, #1
 800b56e:	f8cd 9010 	str.w	r9, [sp, #16]
 800b572:	f8cd b004 	str.w	fp, [sp, #4]
 800b576:	9308      	str	r3, [sp, #32]
 800b578:	42b7      	cmp	r7, r6
 800b57a:	d33f      	bcc.n	800b5fc <__gethex+0x210>
 800b57c:	9f04      	ldr	r7, [sp, #16]
 800b57e:	9b01      	ldr	r3, [sp, #4]
 800b580:	f847 3b04 	str.w	r3, [r7], #4
 800b584:	eba7 0709 	sub.w	r7, r7, r9
 800b588:	10bf      	asrs	r7, r7, #2
 800b58a:	6127      	str	r7, [r4, #16]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f000 fbb3 	bl	800bcf8 <__hi0bits>
 800b592:	017f      	lsls	r7, r7, #5
 800b594:	f8d8 6000 	ldr.w	r6, [r8]
 800b598:	1a3f      	subs	r7, r7, r0
 800b59a:	42b7      	cmp	r7, r6
 800b59c:	dd62      	ble.n	800b664 <__gethex+0x278>
 800b59e:	1bbf      	subs	r7, r7, r6
 800b5a0:	4639      	mov	r1, r7
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f000 ff4d 	bl	800c442 <__any_on>
 800b5a8:	4682      	mov	sl, r0
 800b5aa:	b1a8      	cbz	r0, 800b5d8 <__gethex+0x1ec>
 800b5ac:	f04f 0a01 	mov.w	sl, #1
 800b5b0:	1e7b      	subs	r3, r7, #1
 800b5b2:	1159      	asrs	r1, r3, #5
 800b5b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b5b8:	f003 021f 	and.w	r2, r3, #31
 800b5bc:	fa0a f202 	lsl.w	r2, sl, r2
 800b5c0:	420a      	tst	r2, r1
 800b5c2:	d009      	beq.n	800b5d8 <__gethex+0x1ec>
 800b5c4:	4553      	cmp	r3, sl
 800b5c6:	dd05      	ble.n	800b5d4 <__gethex+0x1e8>
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	1eb9      	subs	r1, r7, #2
 800b5cc:	f000 ff39 	bl	800c442 <__any_on>
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	d144      	bne.n	800b65e <__gethex+0x272>
 800b5d4:	f04f 0a02 	mov.w	sl, #2
 800b5d8:	4639      	mov	r1, r7
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f7ff fe9d 	bl	800b31a <rshift>
 800b5e0:	443d      	add	r5, r7
 800b5e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5e6:	42ab      	cmp	r3, r5
 800b5e8:	da4a      	bge.n	800b680 <__gethex+0x294>
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	9802      	ldr	r0, [sp, #8]
 800b5ee:	f000 fad1 	bl	800bb94 <_Bfree>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5f6:	27a3      	movs	r7, #163	; 0xa3
 800b5f8:	6013      	str	r3, [r2, #0]
 800b5fa:	e789      	b.n	800b510 <__gethex+0x124>
 800b5fc:	1e73      	subs	r3, r6, #1
 800b5fe:	9a06      	ldr	r2, [sp, #24]
 800b600:	9307      	str	r3, [sp, #28]
 800b602:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b606:	4293      	cmp	r3, r2
 800b608:	d019      	beq.n	800b63e <__gethex+0x252>
 800b60a:	f1bb 0f20 	cmp.w	fp, #32
 800b60e:	d107      	bne.n	800b620 <__gethex+0x234>
 800b610:	9b04      	ldr	r3, [sp, #16]
 800b612:	9a01      	ldr	r2, [sp, #4]
 800b614:	f843 2b04 	str.w	r2, [r3], #4
 800b618:	9304      	str	r3, [sp, #16]
 800b61a:	2300      	movs	r3, #0
 800b61c:	469b      	mov	fp, r3
 800b61e:	9301      	str	r3, [sp, #4]
 800b620:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b624:	f7ff fecc 	bl	800b3c0 <__hexdig_fun>
 800b628:	9b01      	ldr	r3, [sp, #4]
 800b62a:	f000 000f 	and.w	r0, r0, #15
 800b62e:	fa00 f00b 	lsl.w	r0, r0, fp
 800b632:	4303      	orrs	r3, r0
 800b634:	9301      	str	r3, [sp, #4]
 800b636:	f10b 0b04 	add.w	fp, fp, #4
 800b63a:	9b07      	ldr	r3, [sp, #28]
 800b63c:	e00d      	b.n	800b65a <__gethex+0x26e>
 800b63e:	9a08      	ldr	r2, [sp, #32]
 800b640:	1e73      	subs	r3, r6, #1
 800b642:	4413      	add	r3, r2
 800b644:	42bb      	cmp	r3, r7
 800b646:	d3e0      	bcc.n	800b60a <__gethex+0x21e>
 800b648:	4618      	mov	r0, r3
 800b64a:	4652      	mov	r2, sl
 800b64c:	9903      	ldr	r1, [sp, #12]
 800b64e:	9309      	str	r3, [sp, #36]	; 0x24
 800b650:	f001 f8bd 	bl	800c7ce <strncmp>
 800b654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b656:	2800      	cmp	r0, #0
 800b658:	d1d7      	bne.n	800b60a <__gethex+0x21e>
 800b65a:	461e      	mov	r6, r3
 800b65c:	e78c      	b.n	800b578 <__gethex+0x18c>
 800b65e:	f04f 0a03 	mov.w	sl, #3
 800b662:	e7b9      	b.n	800b5d8 <__gethex+0x1ec>
 800b664:	da09      	bge.n	800b67a <__gethex+0x28e>
 800b666:	1bf7      	subs	r7, r6, r7
 800b668:	4621      	mov	r1, r4
 800b66a:	463a      	mov	r2, r7
 800b66c:	9802      	ldr	r0, [sp, #8]
 800b66e:	f000 fca9 	bl	800bfc4 <__lshift>
 800b672:	4604      	mov	r4, r0
 800b674:	1bed      	subs	r5, r5, r7
 800b676:	f100 0914 	add.w	r9, r0, #20
 800b67a:	f04f 0a00 	mov.w	sl, #0
 800b67e:	e7b0      	b.n	800b5e2 <__gethex+0x1f6>
 800b680:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b684:	42a8      	cmp	r0, r5
 800b686:	dd72      	ble.n	800b76e <__gethex+0x382>
 800b688:	1b45      	subs	r5, r0, r5
 800b68a:	42ae      	cmp	r6, r5
 800b68c:	dc35      	bgt.n	800b6fa <__gethex+0x30e>
 800b68e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b692:	2b02      	cmp	r3, #2
 800b694:	d029      	beq.n	800b6ea <__gethex+0x2fe>
 800b696:	2b03      	cmp	r3, #3
 800b698:	d02b      	beq.n	800b6f2 <__gethex+0x306>
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d11c      	bne.n	800b6d8 <__gethex+0x2ec>
 800b69e:	42ae      	cmp	r6, r5
 800b6a0:	d11a      	bne.n	800b6d8 <__gethex+0x2ec>
 800b6a2:	2e01      	cmp	r6, #1
 800b6a4:	d112      	bne.n	800b6cc <__gethex+0x2e0>
 800b6a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b6aa:	9a05      	ldr	r2, [sp, #20]
 800b6ac:	2762      	movs	r7, #98	; 0x62
 800b6ae:	6013      	str	r3, [r2, #0]
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	6123      	str	r3, [r4, #16]
 800b6b4:	f8c9 3000 	str.w	r3, [r9]
 800b6b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6ba:	601c      	str	r4, [r3, #0]
 800b6bc:	e728      	b.n	800b510 <__gethex+0x124>
 800b6be:	bf00      	nop
 800b6c0:	0800d49c 	.word	0x0800d49c
 800b6c4:	0800d3c0 	.word	0x0800d3c0
 800b6c8:	0800d434 	.word	0x0800d434
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	1e71      	subs	r1, r6, #1
 800b6d0:	f000 feb7 	bl	800c442 <__any_on>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d1e6      	bne.n	800b6a6 <__gethex+0x2ba>
 800b6d8:	4621      	mov	r1, r4
 800b6da:	9802      	ldr	r0, [sp, #8]
 800b6dc:	f000 fa5a 	bl	800bb94 <_Bfree>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b6e4:	2750      	movs	r7, #80	; 0x50
 800b6e6:	6013      	str	r3, [r2, #0]
 800b6e8:	e712      	b.n	800b510 <__gethex+0x124>
 800b6ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1f3      	bne.n	800b6d8 <__gethex+0x2ec>
 800b6f0:	e7d9      	b.n	800b6a6 <__gethex+0x2ba>
 800b6f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d1d6      	bne.n	800b6a6 <__gethex+0x2ba>
 800b6f8:	e7ee      	b.n	800b6d8 <__gethex+0x2ec>
 800b6fa:	1e6f      	subs	r7, r5, #1
 800b6fc:	f1ba 0f00 	cmp.w	sl, #0
 800b700:	d132      	bne.n	800b768 <__gethex+0x37c>
 800b702:	b127      	cbz	r7, 800b70e <__gethex+0x322>
 800b704:	4639      	mov	r1, r7
 800b706:	4620      	mov	r0, r4
 800b708:	f000 fe9b 	bl	800c442 <__any_on>
 800b70c:	4682      	mov	sl, r0
 800b70e:	2101      	movs	r1, #1
 800b710:	117b      	asrs	r3, r7, #5
 800b712:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b716:	f007 071f 	and.w	r7, r7, #31
 800b71a:	fa01 f707 	lsl.w	r7, r1, r7
 800b71e:	421f      	tst	r7, r3
 800b720:	f04f 0702 	mov.w	r7, #2
 800b724:	4629      	mov	r1, r5
 800b726:	4620      	mov	r0, r4
 800b728:	bf18      	it	ne
 800b72a:	f04a 0a02 	orrne.w	sl, sl, #2
 800b72e:	1b76      	subs	r6, r6, r5
 800b730:	f7ff fdf3 	bl	800b31a <rshift>
 800b734:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b738:	f1ba 0f00 	cmp.w	sl, #0
 800b73c:	d048      	beq.n	800b7d0 <__gethex+0x3e4>
 800b73e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b742:	2b02      	cmp	r3, #2
 800b744:	d015      	beq.n	800b772 <__gethex+0x386>
 800b746:	2b03      	cmp	r3, #3
 800b748:	d017      	beq.n	800b77a <__gethex+0x38e>
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d109      	bne.n	800b762 <__gethex+0x376>
 800b74e:	f01a 0f02 	tst.w	sl, #2
 800b752:	d006      	beq.n	800b762 <__gethex+0x376>
 800b754:	f8d9 0000 	ldr.w	r0, [r9]
 800b758:	ea4a 0a00 	orr.w	sl, sl, r0
 800b75c:	f01a 0f01 	tst.w	sl, #1
 800b760:	d10e      	bne.n	800b780 <__gethex+0x394>
 800b762:	f047 0710 	orr.w	r7, r7, #16
 800b766:	e033      	b.n	800b7d0 <__gethex+0x3e4>
 800b768:	f04f 0a01 	mov.w	sl, #1
 800b76c:	e7cf      	b.n	800b70e <__gethex+0x322>
 800b76e:	2701      	movs	r7, #1
 800b770:	e7e2      	b.n	800b738 <__gethex+0x34c>
 800b772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b774:	f1c3 0301 	rsb	r3, r3, #1
 800b778:	9315      	str	r3, [sp, #84]	; 0x54
 800b77a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d0f0      	beq.n	800b762 <__gethex+0x376>
 800b780:	f04f 0c00 	mov.w	ip, #0
 800b784:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b788:	f104 0314 	add.w	r3, r4, #20
 800b78c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b790:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b794:	4618      	mov	r0, r3
 800b796:	f853 2b04 	ldr.w	r2, [r3], #4
 800b79a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b79e:	d01c      	beq.n	800b7da <__gethex+0x3ee>
 800b7a0:	3201      	adds	r2, #1
 800b7a2:	6002      	str	r2, [r0, #0]
 800b7a4:	2f02      	cmp	r7, #2
 800b7a6:	f104 0314 	add.w	r3, r4, #20
 800b7aa:	d13d      	bne.n	800b828 <__gethex+0x43c>
 800b7ac:	f8d8 2000 	ldr.w	r2, [r8]
 800b7b0:	3a01      	subs	r2, #1
 800b7b2:	42b2      	cmp	r2, r6
 800b7b4:	d10a      	bne.n	800b7cc <__gethex+0x3e0>
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	1171      	asrs	r1, r6, #5
 800b7ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b7be:	f006 061f 	and.w	r6, r6, #31
 800b7c2:	fa02 f606 	lsl.w	r6, r2, r6
 800b7c6:	421e      	tst	r6, r3
 800b7c8:	bf18      	it	ne
 800b7ca:	4617      	movne	r7, r2
 800b7cc:	f047 0720 	orr.w	r7, r7, #32
 800b7d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7d2:	601c      	str	r4, [r3, #0]
 800b7d4:	9b05      	ldr	r3, [sp, #20]
 800b7d6:	601d      	str	r5, [r3, #0]
 800b7d8:	e69a      	b.n	800b510 <__gethex+0x124>
 800b7da:	4299      	cmp	r1, r3
 800b7dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b7e0:	d8d8      	bhi.n	800b794 <__gethex+0x3a8>
 800b7e2:	68a3      	ldr	r3, [r4, #8]
 800b7e4:	459b      	cmp	fp, r3
 800b7e6:	db17      	blt.n	800b818 <__gethex+0x42c>
 800b7e8:	6861      	ldr	r1, [r4, #4]
 800b7ea:	9802      	ldr	r0, [sp, #8]
 800b7ec:	3101      	adds	r1, #1
 800b7ee:	f000 f991 	bl	800bb14 <_Balloc>
 800b7f2:	4681      	mov	r9, r0
 800b7f4:	b918      	cbnz	r0, 800b7fe <__gethex+0x412>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	2184      	movs	r1, #132	; 0x84
 800b7fa:	4b19      	ldr	r3, [pc, #100]	; (800b860 <__gethex+0x474>)
 800b7fc:	e6ab      	b.n	800b556 <__gethex+0x16a>
 800b7fe:	6922      	ldr	r2, [r4, #16]
 800b800:	f104 010c 	add.w	r1, r4, #12
 800b804:	3202      	adds	r2, #2
 800b806:	0092      	lsls	r2, r2, #2
 800b808:	300c      	adds	r0, #12
 800b80a:	f7fc ff23 	bl	8008654 <memcpy>
 800b80e:	4621      	mov	r1, r4
 800b810:	9802      	ldr	r0, [sp, #8]
 800b812:	f000 f9bf 	bl	800bb94 <_Bfree>
 800b816:	464c      	mov	r4, r9
 800b818:	6923      	ldr	r3, [r4, #16]
 800b81a:	1c5a      	adds	r2, r3, #1
 800b81c:	6122      	str	r2, [r4, #16]
 800b81e:	2201      	movs	r2, #1
 800b820:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b824:	615a      	str	r2, [r3, #20]
 800b826:	e7bd      	b.n	800b7a4 <__gethex+0x3b8>
 800b828:	6922      	ldr	r2, [r4, #16]
 800b82a:	455a      	cmp	r2, fp
 800b82c:	dd0b      	ble.n	800b846 <__gethex+0x45a>
 800b82e:	2101      	movs	r1, #1
 800b830:	4620      	mov	r0, r4
 800b832:	f7ff fd72 	bl	800b31a <rshift>
 800b836:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b83a:	3501      	adds	r5, #1
 800b83c:	42ab      	cmp	r3, r5
 800b83e:	f6ff aed4 	blt.w	800b5ea <__gethex+0x1fe>
 800b842:	2701      	movs	r7, #1
 800b844:	e7c2      	b.n	800b7cc <__gethex+0x3e0>
 800b846:	f016 061f 	ands.w	r6, r6, #31
 800b84a:	d0fa      	beq.n	800b842 <__gethex+0x456>
 800b84c:	4453      	add	r3, sl
 800b84e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b852:	f000 fa51 	bl	800bcf8 <__hi0bits>
 800b856:	f1c6 0620 	rsb	r6, r6, #32
 800b85a:	42b0      	cmp	r0, r6
 800b85c:	dbe7      	blt.n	800b82e <__gethex+0x442>
 800b85e:	e7f0      	b.n	800b842 <__gethex+0x456>
 800b860:	0800d3c0 	.word	0x0800d3c0

0800b864 <L_shift>:
 800b864:	f1c2 0208 	rsb	r2, r2, #8
 800b868:	0092      	lsls	r2, r2, #2
 800b86a:	b570      	push	{r4, r5, r6, lr}
 800b86c:	f1c2 0620 	rsb	r6, r2, #32
 800b870:	6843      	ldr	r3, [r0, #4]
 800b872:	6804      	ldr	r4, [r0, #0]
 800b874:	fa03 f506 	lsl.w	r5, r3, r6
 800b878:	432c      	orrs	r4, r5
 800b87a:	40d3      	lsrs	r3, r2
 800b87c:	6004      	str	r4, [r0, #0]
 800b87e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b882:	4288      	cmp	r0, r1
 800b884:	d3f4      	bcc.n	800b870 <L_shift+0xc>
 800b886:	bd70      	pop	{r4, r5, r6, pc}

0800b888 <__match>:
 800b888:	b530      	push	{r4, r5, lr}
 800b88a:	6803      	ldr	r3, [r0, #0]
 800b88c:	3301      	adds	r3, #1
 800b88e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b892:	b914      	cbnz	r4, 800b89a <__match+0x12>
 800b894:	6003      	str	r3, [r0, #0]
 800b896:	2001      	movs	r0, #1
 800b898:	bd30      	pop	{r4, r5, pc}
 800b89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b89e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b8a2:	2d19      	cmp	r5, #25
 800b8a4:	bf98      	it	ls
 800b8a6:	3220      	addls	r2, #32
 800b8a8:	42a2      	cmp	r2, r4
 800b8aa:	d0f0      	beq.n	800b88e <__match+0x6>
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	e7f3      	b.n	800b898 <__match+0x10>

0800b8b0 <__hexnan>:
 800b8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b4:	2500      	movs	r5, #0
 800b8b6:	680b      	ldr	r3, [r1, #0]
 800b8b8:	4682      	mov	sl, r0
 800b8ba:	115e      	asrs	r6, r3, #5
 800b8bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b8c0:	f013 031f 	ands.w	r3, r3, #31
 800b8c4:	bf18      	it	ne
 800b8c6:	3604      	addne	r6, #4
 800b8c8:	1f37      	subs	r7, r6, #4
 800b8ca:	46b9      	mov	r9, r7
 800b8cc:	463c      	mov	r4, r7
 800b8ce:	46ab      	mov	fp, r5
 800b8d0:	b087      	sub	sp, #28
 800b8d2:	4690      	mov	r8, r2
 800b8d4:	6802      	ldr	r2, [r0, #0]
 800b8d6:	9301      	str	r3, [sp, #4]
 800b8d8:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8dc:	9502      	str	r5, [sp, #8]
 800b8de:	7851      	ldrb	r1, [r2, #1]
 800b8e0:	1c53      	adds	r3, r2, #1
 800b8e2:	9303      	str	r3, [sp, #12]
 800b8e4:	b341      	cbz	r1, 800b938 <__hexnan+0x88>
 800b8e6:	4608      	mov	r0, r1
 800b8e8:	9205      	str	r2, [sp, #20]
 800b8ea:	9104      	str	r1, [sp, #16]
 800b8ec:	f7ff fd68 	bl	800b3c0 <__hexdig_fun>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	d14f      	bne.n	800b994 <__hexnan+0xe4>
 800b8f4:	9904      	ldr	r1, [sp, #16]
 800b8f6:	9a05      	ldr	r2, [sp, #20]
 800b8f8:	2920      	cmp	r1, #32
 800b8fa:	d818      	bhi.n	800b92e <__hexnan+0x7e>
 800b8fc:	9b02      	ldr	r3, [sp, #8]
 800b8fe:	459b      	cmp	fp, r3
 800b900:	dd13      	ble.n	800b92a <__hexnan+0x7a>
 800b902:	454c      	cmp	r4, r9
 800b904:	d206      	bcs.n	800b914 <__hexnan+0x64>
 800b906:	2d07      	cmp	r5, #7
 800b908:	dc04      	bgt.n	800b914 <__hexnan+0x64>
 800b90a:	462a      	mov	r2, r5
 800b90c:	4649      	mov	r1, r9
 800b90e:	4620      	mov	r0, r4
 800b910:	f7ff ffa8 	bl	800b864 <L_shift>
 800b914:	4544      	cmp	r4, r8
 800b916:	d950      	bls.n	800b9ba <__hexnan+0x10a>
 800b918:	2300      	movs	r3, #0
 800b91a:	f1a4 0904 	sub.w	r9, r4, #4
 800b91e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b922:	461d      	mov	r5, r3
 800b924:	464c      	mov	r4, r9
 800b926:	f8cd b008 	str.w	fp, [sp, #8]
 800b92a:	9a03      	ldr	r2, [sp, #12]
 800b92c:	e7d7      	b.n	800b8de <__hexnan+0x2e>
 800b92e:	2929      	cmp	r1, #41	; 0x29
 800b930:	d156      	bne.n	800b9e0 <__hexnan+0x130>
 800b932:	3202      	adds	r2, #2
 800b934:	f8ca 2000 	str.w	r2, [sl]
 800b938:	f1bb 0f00 	cmp.w	fp, #0
 800b93c:	d050      	beq.n	800b9e0 <__hexnan+0x130>
 800b93e:	454c      	cmp	r4, r9
 800b940:	d206      	bcs.n	800b950 <__hexnan+0xa0>
 800b942:	2d07      	cmp	r5, #7
 800b944:	dc04      	bgt.n	800b950 <__hexnan+0xa0>
 800b946:	462a      	mov	r2, r5
 800b948:	4649      	mov	r1, r9
 800b94a:	4620      	mov	r0, r4
 800b94c:	f7ff ff8a 	bl	800b864 <L_shift>
 800b950:	4544      	cmp	r4, r8
 800b952:	d934      	bls.n	800b9be <__hexnan+0x10e>
 800b954:	4623      	mov	r3, r4
 800b956:	f1a8 0204 	sub.w	r2, r8, #4
 800b95a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b95e:	429f      	cmp	r7, r3
 800b960:	f842 1f04 	str.w	r1, [r2, #4]!
 800b964:	d2f9      	bcs.n	800b95a <__hexnan+0xaa>
 800b966:	1b3b      	subs	r3, r7, r4
 800b968:	f023 0303 	bic.w	r3, r3, #3
 800b96c:	3304      	adds	r3, #4
 800b96e:	3401      	adds	r4, #1
 800b970:	3e03      	subs	r6, #3
 800b972:	42b4      	cmp	r4, r6
 800b974:	bf88      	it	hi
 800b976:	2304      	movhi	r3, #4
 800b978:	2200      	movs	r2, #0
 800b97a:	4443      	add	r3, r8
 800b97c:	f843 2b04 	str.w	r2, [r3], #4
 800b980:	429f      	cmp	r7, r3
 800b982:	d2fb      	bcs.n	800b97c <__hexnan+0xcc>
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	b91b      	cbnz	r3, 800b990 <__hexnan+0xe0>
 800b988:	4547      	cmp	r7, r8
 800b98a:	d127      	bne.n	800b9dc <__hexnan+0x12c>
 800b98c:	2301      	movs	r3, #1
 800b98e:	603b      	str	r3, [r7, #0]
 800b990:	2005      	movs	r0, #5
 800b992:	e026      	b.n	800b9e2 <__hexnan+0x132>
 800b994:	3501      	adds	r5, #1
 800b996:	2d08      	cmp	r5, #8
 800b998:	f10b 0b01 	add.w	fp, fp, #1
 800b99c:	dd06      	ble.n	800b9ac <__hexnan+0xfc>
 800b99e:	4544      	cmp	r4, r8
 800b9a0:	d9c3      	bls.n	800b92a <__hexnan+0x7a>
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	2501      	movs	r5, #1
 800b9a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9aa:	3c04      	subs	r4, #4
 800b9ac:	6822      	ldr	r2, [r4, #0]
 800b9ae:	f000 000f 	and.w	r0, r0, #15
 800b9b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b9b6:	6022      	str	r2, [r4, #0]
 800b9b8:	e7b7      	b.n	800b92a <__hexnan+0x7a>
 800b9ba:	2508      	movs	r5, #8
 800b9bc:	e7b5      	b.n	800b92a <__hexnan+0x7a>
 800b9be:	9b01      	ldr	r3, [sp, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d0df      	beq.n	800b984 <__hexnan+0xd4>
 800b9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c8:	f1c3 0320 	rsb	r3, r3, #32
 800b9cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b9d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b9d4:	401a      	ands	r2, r3
 800b9d6:	f846 2c04 	str.w	r2, [r6, #-4]
 800b9da:	e7d3      	b.n	800b984 <__hexnan+0xd4>
 800b9dc:	3f04      	subs	r7, #4
 800b9de:	e7d1      	b.n	800b984 <__hexnan+0xd4>
 800b9e0:	2004      	movs	r0, #4
 800b9e2:	b007      	add	sp, #28
 800b9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9e8 <_localeconv_r>:
 800b9e8:	4800      	ldr	r0, [pc, #0]	; (800b9ec <_localeconv_r+0x4>)
 800b9ea:	4770      	bx	lr
 800b9ec:	200003e4 	.word	0x200003e4

0800b9f0 <__swhatbuf_r>:
 800b9f0:	b570      	push	{r4, r5, r6, lr}
 800b9f2:	460e      	mov	r6, r1
 800b9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f8:	4614      	mov	r4, r2
 800b9fa:	2900      	cmp	r1, #0
 800b9fc:	461d      	mov	r5, r3
 800b9fe:	b096      	sub	sp, #88	; 0x58
 800ba00:	da08      	bge.n	800ba14 <__swhatbuf_r+0x24>
 800ba02:	2200      	movs	r2, #0
 800ba04:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba08:	602a      	str	r2, [r5, #0]
 800ba0a:	061a      	lsls	r2, r3, #24
 800ba0c:	d410      	bmi.n	800ba30 <__swhatbuf_r+0x40>
 800ba0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba12:	e00e      	b.n	800ba32 <__swhatbuf_r+0x42>
 800ba14:	466a      	mov	r2, sp
 800ba16:	f000 ff4d 	bl	800c8b4 <_fstat_r>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	dbf1      	blt.n	800ba02 <__swhatbuf_r+0x12>
 800ba1e:	9a01      	ldr	r2, [sp, #4]
 800ba20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba28:	425a      	negs	r2, r3
 800ba2a:	415a      	adcs	r2, r3
 800ba2c:	602a      	str	r2, [r5, #0]
 800ba2e:	e7ee      	b.n	800ba0e <__swhatbuf_r+0x1e>
 800ba30:	2340      	movs	r3, #64	; 0x40
 800ba32:	2000      	movs	r0, #0
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	b016      	add	sp, #88	; 0x58
 800ba38:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba3c <__smakebuf_r>:
 800ba3c:	898b      	ldrh	r3, [r1, #12]
 800ba3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba40:	079d      	lsls	r5, r3, #30
 800ba42:	4606      	mov	r6, r0
 800ba44:	460c      	mov	r4, r1
 800ba46:	d507      	bpl.n	800ba58 <__smakebuf_r+0x1c>
 800ba48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba4c:	6023      	str	r3, [r4, #0]
 800ba4e:	6123      	str	r3, [r4, #16]
 800ba50:	2301      	movs	r3, #1
 800ba52:	6163      	str	r3, [r4, #20]
 800ba54:	b002      	add	sp, #8
 800ba56:	bd70      	pop	{r4, r5, r6, pc}
 800ba58:	466a      	mov	r2, sp
 800ba5a:	ab01      	add	r3, sp, #4
 800ba5c:	f7ff ffc8 	bl	800b9f0 <__swhatbuf_r>
 800ba60:	9900      	ldr	r1, [sp, #0]
 800ba62:	4605      	mov	r5, r0
 800ba64:	4630      	mov	r0, r6
 800ba66:	f7fc fe87 	bl	8008778 <_malloc_r>
 800ba6a:	b948      	cbnz	r0, 800ba80 <__smakebuf_r+0x44>
 800ba6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba70:	059a      	lsls	r2, r3, #22
 800ba72:	d4ef      	bmi.n	800ba54 <__smakebuf_r+0x18>
 800ba74:	f023 0303 	bic.w	r3, r3, #3
 800ba78:	f043 0302 	orr.w	r3, r3, #2
 800ba7c:	81a3      	strh	r3, [r4, #12]
 800ba7e:	e7e3      	b.n	800ba48 <__smakebuf_r+0xc>
 800ba80:	4b0d      	ldr	r3, [pc, #52]	; (800bab8 <__smakebuf_r+0x7c>)
 800ba82:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba84:	89a3      	ldrh	r3, [r4, #12]
 800ba86:	6020      	str	r0, [r4, #0]
 800ba88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba8c:	81a3      	strh	r3, [r4, #12]
 800ba8e:	9b00      	ldr	r3, [sp, #0]
 800ba90:	6120      	str	r0, [r4, #16]
 800ba92:	6163      	str	r3, [r4, #20]
 800ba94:	9b01      	ldr	r3, [sp, #4]
 800ba96:	b15b      	cbz	r3, 800bab0 <__smakebuf_r+0x74>
 800ba98:	4630      	mov	r0, r6
 800ba9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba9e:	f000 ff1b 	bl	800c8d8 <_isatty_r>
 800baa2:	b128      	cbz	r0, 800bab0 <__smakebuf_r+0x74>
 800baa4:	89a3      	ldrh	r3, [r4, #12]
 800baa6:	f023 0303 	bic.w	r3, r3, #3
 800baaa:	f043 0301 	orr.w	r3, r3, #1
 800baae:	81a3      	strh	r3, [r4, #12]
 800bab0:	89a0      	ldrh	r0, [r4, #12]
 800bab2:	4305      	orrs	r5, r0
 800bab4:	81a5      	strh	r5, [r4, #12]
 800bab6:	e7cd      	b.n	800ba54 <__smakebuf_r+0x18>
 800bab8:	0800b179 	.word	0x0800b179

0800babc <__ascii_mbtowc>:
 800babc:	b082      	sub	sp, #8
 800babe:	b901      	cbnz	r1, 800bac2 <__ascii_mbtowc+0x6>
 800bac0:	a901      	add	r1, sp, #4
 800bac2:	b142      	cbz	r2, 800bad6 <__ascii_mbtowc+0x1a>
 800bac4:	b14b      	cbz	r3, 800bada <__ascii_mbtowc+0x1e>
 800bac6:	7813      	ldrb	r3, [r2, #0]
 800bac8:	600b      	str	r3, [r1, #0]
 800baca:	7812      	ldrb	r2, [r2, #0]
 800bacc:	1e10      	subs	r0, r2, #0
 800bace:	bf18      	it	ne
 800bad0:	2001      	movne	r0, #1
 800bad2:	b002      	add	sp, #8
 800bad4:	4770      	bx	lr
 800bad6:	4610      	mov	r0, r2
 800bad8:	e7fb      	b.n	800bad2 <__ascii_mbtowc+0x16>
 800bada:	f06f 0001 	mvn.w	r0, #1
 800bade:	e7f8      	b.n	800bad2 <__ascii_mbtowc+0x16>

0800bae0 <memchr>:
 800bae0:	4603      	mov	r3, r0
 800bae2:	b510      	push	{r4, lr}
 800bae4:	b2c9      	uxtb	r1, r1
 800bae6:	4402      	add	r2, r0
 800bae8:	4293      	cmp	r3, r2
 800baea:	4618      	mov	r0, r3
 800baec:	d101      	bne.n	800baf2 <memchr+0x12>
 800baee:	2000      	movs	r0, #0
 800baf0:	e003      	b.n	800bafa <memchr+0x1a>
 800baf2:	7804      	ldrb	r4, [r0, #0]
 800baf4:	3301      	adds	r3, #1
 800baf6:	428c      	cmp	r4, r1
 800baf8:	d1f6      	bne.n	800bae8 <memchr+0x8>
 800bafa:	bd10      	pop	{r4, pc}

0800bafc <__malloc_lock>:
 800bafc:	4801      	ldr	r0, [pc, #4]	; (800bb04 <__malloc_lock+0x8>)
 800bafe:	f7fc bd9e 	b.w	800863e <__retarget_lock_acquire_recursive>
 800bb02:	bf00      	nop
 800bb04:	20000518 	.word	0x20000518

0800bb08 <__malloc_unlock>:
 800bb08:	4801      	ldr	r0, [pc, #4]	; (800bb10 <__malloc_unlock+0x8>)
 800bb0a:	f7fc bd99 	b.w	8008640 <__retarget_lock_release_recursive>
 800bb0e:	bf00      	nop
 800bb10:	20000518 	.word	0x20000518

0800bb14 <_Balloc>:
 800bb14:	b570      	push	{r4, r5, r6, lr}
 800bb16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb18:	4604      	mov	r4, r0
 800bb1a:	460d      	mov	r5, r1
 800bb1c:	b976      	cbnz	r6, 800bb3c <_Balloc+0x28>
 800bb1e:	2010      	movs	r0, #16
 800bb20:	f7fc fd90 	bl	8008644 <malloc>
 800bb24:	4602      	mov	r2, r0
 800bb26:	6260      	str	r0, [r4, #36]	; 0x24
 800bb28:	b920      	cbnz	r0, 800bb34 <_Balloc+0x20>
 800bb2a:	2166      	movs	r1, #102	; 0x66
 800bb2c:	4b17      	ldr	r3, [pc, #92]	; (800bb8c <_Balloc+0x78>)
 800bb2e:	4818      	ldr	r0, [pc, #96]	; (800bb90 <_Balloc+0x7c>)
 800bb30:	f000 fe80 	bl	800c834 <__assert_func>
 800bb34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb38:	6006      	str	r6, [r0, #0]
 800bb3a:	60c6      	str	r6, [r0, #12]
 800bb3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb3e:	68f3      	ldr	r3, [r6, #12]
 800bb40:	b183      	cbz	r3, 800bb64 <_Balloc+0x50>
 800bb42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb4a:	b9b8      	cbnz	r0, 800bb7c <_Balloc+0x68>
 800bb4c:	2101      	movs	r1, #1
 800bb4e:	fa01 f605 	lsl.w	r6, r1, r5
 800bb52:	1d72      	adds	r2, r6, #5
 800bb54:	4620      	mov	r0, r4
 800bb56:	0092      	lsls	r2, r2, #2
 800bb58:	f7fc fd92 	bl	8008680 <_calloc_r>
 800bb5c:	b160      	cbz	r0, 800bb78 <_Balloc+0x64>
 800bb5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb62:	e00e      	b.n	800bb82 <_Balloc+0x6e>
 800bb64:	2221      	movs	r2, #33	; 0x21
 800bb66:	2104      	movs	r1, #4
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f7fc fd89 	bl	8008680 <_calloc_r>
 800bb6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb70:	60f0      	str	r0, [r6, #12]
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1e4      	bne.n	800bb42 <_Balloc+0x2e>
 800bb78:	2000      	movs	r0, #0
 800bb7a:	bd70      	pop	{r4, r5, r6, pc}
 800bb7c:	6802      	ldr	r2, [r0, #0]
 800bb7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb82:	2300      	movs	r3, #0
 800bb84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb88:	e7f7      	b.n	800bb7a <_Balloc+0x66>
 800bb8a:	bf00      	nop
 800bb8c:	0800d34e 	.word	0x0800d34e
 800bb90:	0800d4b0 	.word	0x0800d4b0

0800bb94 <_Bfree>:
 800bb94:	b570      	push	{r4, r5, r6, lr}
 800bb96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb98:	4605      	mov	r5, r0
 800bb9a:	460c      	mov	r4, r1
 800bb9c:	b976      	cbnz	r6, 800bbbc <_Bfree+0x28>
 800bb9e:	2010      	movs	r0, #16
 800bba0:	f7fc fd50 	bl	8008644 <malloc>
 800bba4:	4602      	mov	r2, r0
 800bba6:	6268      	str	r0, [r5, #36]	; 0x24
 800bba8:	b920      	cbnz	r0, 800bbb4 <_Bfree+0x20>
 800bbaa:	218a      	movs	r1, #138	; 0x8a
 800bbac:	4b08      	ldr	r3, [pc, #32]	; (800bbd0 <_Bfree+0x3c>)
 800bbae:	4809      	ldr	r0, [pc, #36]	; (800bbd4 <_Bfree+0x40>)
 800bbb0:	f000 fe40 	bl	800c834 <__assert_func>
 800bbb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbb8:	6006      	str	r6, [r0, #0]
 800bbba:	60c6      	str	r6, [r0, #12]
 800bbbc:	b13c      	cbz	r4, 800bbce <_Bfree+0x3a>
 800bbbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbc0:	6862      	ldr	r2, [r4, #4]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbc8:	6021      	str	r1, [r4, #0]
 800bbca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbce:	bd70      	pop	{r4, r5, r6, pc}
 800bbd0:	0800d34e 	.word	0x0800d34e
 800bbd4:	0800d4b0 	.word	0x0800d4b0

0800bbd8 <__multadd>:
 800bbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbdc:	4607      	mov	r7, r0
 800bbde:	460c      	mov	r4, r1
 800bbe0:	461e      	mov	r6, r3
 800bbe2:	2000      	movs	r0, #0
 800bbe4:	690d      	ldr	r5, [r1, #16]
 800bbe6:	f101 0c14 	add.w	ip, r1, #20
 800bbea:	f8dc 3000 	ldr.w	r3, [ip]
 800bbee:	3001      	adds	r0, #1
 800bbf0:	b299      	uxth	r1, r3
 800bbf2:	fb02 6101 	mla	r1, r2, r1, r6
 800bbf6:	0c1e      	lsrs	r6, r3, #16
 800bbf8:	0c0b      	lsrs	r3, r1, #16
 800bbfa:	fb02 3306 	mla	r3, r2, r6, r3
 800bbfe:	b289      	uxth	r1, r1
 800bc00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc04:	4285      	cmp	r5, r0
 800bc06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc0a:	f84c 1b04 	str.w	r1, [ip], #4
 800bc0e:	dcec      	bgt.n	800bbea <__multadd+0x12>
 800bc10:	b30e      	cbz	r6, 800bc56 <__multadd+0x7e>
 800bc12:	68a3      	ldr	r3, [r4, #8]
 800bc14:	42ab      	cmp	r3, r5
 800bc16:	dc19      	bgt.n	800bc4c <__multadd+0x74>
 800bc18:	6861      	ldr	r1, [r4, #4]
 800bc1a:	4638      	mov	r0, r7
 800bc1c:	3101      	adds	r1, #1
 800bc1e:	f7ff ff79 	bl	800bb14 <_Balloc>
 800bc22:	4680      	mov	r8, r0
 800bc24:	b928      	cbnz	r0, 800bc32 <__multadd+0x5a>
 800bc26:	4602      	mov	r2, r0
 800bc28:	21b5      	movs	r1, #181	; 0xb5
 800bc2a:	4b0c      	ldr	r3, [pc, #48]	; (800bc5c <__multadd+0x84>)
 800bc2c:	480c      	ldr	r0, [pc, #48]	; (800bc60 <__multadd+0x88>)
 800bc2e:	f000 fe01 	bl	800c834 <__assert_func>
 800bc32:	6922      	ldr	r2, [r4, #16]
 800bc34:	f104 010c 	add.w	r1, r4, #12
 800bc38:	3202      	adds	r2, #2
 800bc3a:	0092      	lsls	r2, r2, #2
 800bc3c:	300c      	adds	r0, #12
 800bc3e:	f7fc fd09 	bl	8008654 <memcpy>
 800bc42:	4621      	mov	r1, r4
 800bc44:	4638      	mov	r0, r7
 800bc46:	f7ff ffa5 	bl	800bb94 <_Bfree>
 800bc4a:	4644      	mov	r4, r8
 800bc4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc50:	3501      	adds	r5, #1
 800bc52:	615e      	str	r6, [r3, #20]
 800bc54:	6125      	str	r5, [r4, #16]
 800bc56:	4620      	mov	r0, r4
 800bc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc5c:	0800d3c0 	.word	0x0800d3c0
 800bc60:	0800d4b0 	.word	0x0800d4b0

0800bc64 <__s2b>:
 800bc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc68:	4615      	mov	r5, r2
 800bc6a:	2209      	movs	r2, #9
 800bc6c:	461f      	mov	r7, r3
 800bc6e:	3308      	adds	r3, #8
 800bc70:	460c      	mov	r4, r1
 800bc72:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc76:	4606      	mov	r6, r0
 800bc78:	2201      	movs	r2, #1
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	db09      	blt.n	800bc94 <__s2b+0x30>
 800bc80:	4630      	mov	r0, r6
 800bc82:	f7ff ff47 	bl	800bb14 <_Balloc>
 800bc86:	b940      	cbnz	r0, 800bc9a <__s2b+0x36>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	21ce      	movs	r1, #206	; 0xce
 800bc8c:	4b18      	ldr	r3, [pc, #96]	; (800bcf0 <__s2b+0x8c>)
 800bc8e:	4819      	ldr	r0, [pc, #100]	; (800bcf4 <__s2b+0x90>)
 800bc90:	f000 fdd0 	bl	800c834 <__assert_func>
 800bc94:	0052      	lsls	r2, r2, #1
 800bc96:	3101      	adds	r1, #1
 800bc98:	e7f0      	b.n	800bc7c <__s2b+0x18>
 800bc9a:	9b08      	ldr	r3, [sp, #32]
 800bc9c:	2d09      	cmp	r5, #9
 800bc9e:	6143      	str	r3, [r0, #20]
 800bca0:	f04f 0301 	mov.w	r3, #1
 800bca4:	6103      	str	r3, [r0, #16]
 800bca6:	dd16      	ble.n	800bcd6 <__s2b+0x72>
 800bca8:	f104 0909 	add.w	r9, r4, #9
 800bcac:	46c8      	mov	r8, r9
 800bcae:	442c      	add	r4, r5
 800bcb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bcb4:	4601      	mov	r1, r0
 800bcb6:	220a      	movs	r2, #10
 800bcb8:	4630      	mov	r0, r6
 800bcba:	3b30      	subs	r3, #48	; 0x30
 800bcbc:	f7ff ff8c 	bl	800bbd8 <__multadd>
 800bcc0:	45a0      	cmp	r8, r4
 800bcc2:	d1f5      	bne.n	800bcb0 <__s2b+0x4c>
 800bcc4:	f1a5 0408 	sub.w	r4, r5, #8
 800bcc8:	444c      	add	r4, r9
 800bcca:	1b2d      	subs	r5, r5, r4
 800bccc:	1963      	adds	r3, r4, r5
 800bcce:	42bb      	cmp	r3, r7
 800bcd0:	db04      	blt.n	800bcdc <__s2b+0x78>
 800bcd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcd6:	2509      	movs	r5, #9
 800bcd8:	340a      	adds	r4, #10
 800bcda:	e7f6      	b.n	800bcca <__s2b+0x66>
 800bcdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bce0:	4601      	mov	r1, r0
 800bce2:	220a      	movs	r2, #10
 800bce4:	4630      	mov	r0, r6
 800bce6:	3b30      	subs	r3, #48	; 0x30
 800bce8:	f7ff ff76 	bl	800bbd8 <__multadd>
 800bcec:	e7ee      	b.n	800bccc <__s2b+0x68>
 800bcee:	bf00      	nop
 800bcf0:	0800d3c0 	.word	0x0800d3c0
 800bcf4:	0800d4b0 	.word	0x0800d4b0

0800bcf8 <__hi0bits>:
 800bcf8:	0c02      	lsrs	r2, r0, #16
 800bcfa:	0412      	lsls	r2, r2, #16
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	b9ca      	cbnz	r2, 800bd34 <__hi0bits+0x3c>
 800bd00:	0403      	lsls	r3, r0, #16
 800bd02:	2010      	movs	r0, #16
 800bd04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bd08:	bf04      	itt	eq
 800bd0a:	021b      	lsleq	r3, r3, #8
 800bd0c:	3008      	addeq	r0, #8
 800bd0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bd12:	bf04      	itt	eq
 800bd14:	011b      	lsleq	r3, r3, #4
 800bd16:	3004      	addeq	r0, #4
 800bd18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bd1c:	bf04      	itt	eq
 800bd1e:	009b      	lsleq	r3, r3, #2
 800bd20:	3002      	addeq	r0, #2
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	db05      	blt.n	800bd32 <__hi0bits+0x3a>
 800bd26:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bd2a:	f100 0001 	add.w	r0, r0, #1
 800bd2e:	bf08      	it	eq
 800bd30:	2020      	moveq	r0, #32
 800bd32:	4770      	bx	lr
 800bd34:	2000      	movs	r0, #0
 800bd36:	e7e5      	b.n	800bd04 <__hi0bits+0xc>

0800bd38 <__lo0bits>:
 800bd38:	6803      	ldr	r3, [r0, #0]
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	f013 0007 	ands.w	r0, r3, #7
 800bd40:	d00b      	beq.n	800bd5a <__lo0bits+0x22>
 800bd42:	07d9      	lsls	r1, r3, #31
 800bd44:	d421      	bmi.n	800bd8a <__lo0bits+0x52>
 800bd46:	0798      	lsls	r0, r3, #30
 800bd48:	bf49      	itett	mi
 800bd4a:	085b      	lsrmi	r3, r3, #1
 800bd4c:	089b      	lsrpl	r3, r3, #2
 800bd4e:	2001      	movmi	r0, #1
 800bd50:	6013      	strmi	r3, [r2, #0]
 800bd52:	bf5c      	itt	pl
 800bd54:	2002      	movpl	r0, #2
 800bd56:	6013      	strpl	r3, [r2, #0]
 800bd58:	4770      	bx	lr
 800bd5a:	b299      	uxth	r1, r3
 800bd5c:	b909      	cbnz	r1, 800bd62 <__lo0bits+0x2a>
 800bd5e:	2010      	movs	r0, #16
 800bd60:	0c1b      	lsrs	r3, r3, #16
 800bd62:	b2d9      	uxtb	r1, r3
 800bd64:	b909      	cbnz	r1, 800bd6a <__lo0bits+0x32>
 800bd66:	3008      	adds	r0, #8
 800bd68:	0a1b      	lsrs	r3, r3, #8
 800bd6a:	0719      	lsls	r1, r3, #28
 800bd6c:	bf04      	itt	eq
 800bd6e:	091b      	lsreq	r3, r3, #4
 800bd70:	3004      	addeq	r0, #4
 800bd72:	0799      	lsls	r1, r3, #30
 800bd74:	bf04      	itt	eq
 800bd76:	089b      	lsreq	r3, r3, #2
 800bd78:	3002      	addeq	r0, #2
 800bd7a:	07d9      	lsls	r1, r3, #31
 800bd7c:	d403      	bmi.n	800bd86 <__lo0bits+0x4e>
 800bd7e:	085b      	lsrs	r3, r3, #1
 800bd80:	f100 0001 	add.w	r0, r0, #1
 800bd84:	d003      	beq.n	800bd8e <__lo0bits+0x56>
 800bd86:	6013      	str	r3, [r2, #0]
 800bd88:	4770      	bx	lr
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	4770      	bx	lr
 800bd8e:	2020      	movs	r0, #32
 800bd90:	4770      	bx	lr
	...

0800bd94 <__i2b>:
 800bd94:	b510      	push	{r4, lr}
 800bd96:	460c      	mov	r4, r1
 800bd98:	2101      	movs	r1, #1
 800bd9a:	f7ff febb 	bl	800bb14 <_Balloc>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	b928      	cbnz	r0, 800bdae <__i2b+0x1a>
 800bda2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bda6:	4b04      	ldr	r3, [pc, #16]	; (800bdb8 <__i2b+0x24>)
 800bda8:	4804      	ldr	r0, [pc, #16]	; (800bdbc <__i2b+0x28>)
 800bdaa:	f000 fd43 	bl	800c834 <__assert_func>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	6144      	str	r4, [r0, #20]
 800bdb2:	6103      	str	r3, [r0, #16]
 800bdb4:	bd10      	pop	{r4, pc}
 800bdb6:	bf00      	nop
 800bdb8:	0800d3c0 	.word	0x0800d3c0
 800bdbc:	0800d4b0 	.word	0x0800d4b0

0800bdc0 <__multiply>:
 800bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	4691      	mov	r9, r2
 800bdc6:	690a      	ldr	r2, [r1, #16]
 800bdc8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bdcc:	460c      	mov	r4, r1
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	bfbe      	ittt	lt
 800bdd2:	460b      	movlt	r3, r1
 800bdd4:	464c      	movlt	r4, r9
 800bdd6:	4699      	movlt	r9, r3
 800bdd8:	6927      	ldr	r7, [r4, #16]
 800bdda:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bdde:	68a3      	ldr	r3, [r4, #8]
 800bde0:	6861      	ldr	r1, [r4, #4]
 800bde2:	eb07 060a 	add.w	r6, r7, sl
 800bde6:	42b3      	cmp	r3, r6
 800bde8:	b085      	sub	sp, #20
 800bdea:	bfb8      	it	lt
 800bdec:	3101      	addlt	r1, #1
 800bdee:	f7ff fe91 	bl	800bb14 <_Balloc>
 800bdf2:	b930      	cbnz	r0, 800be02 <__multiply+0x42>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	f240 115d 	movw	r1, #349	; 0x15d
 800bdfa:	4b43      	ldr	r3, [pc, #268]	; (800bf08 <__multiply+0x148>)
 800bdfc:	4843      	ldr	r0, [pc, #268]	; (800bf0c <__multiply+0x14c>)
 800bdfe:	f000 fd19 	bl	800c834 <__assert_func>
 800be02:	f100 0514 	add.w	r5, r0, #20
 800be06:	462b      	mov	r3, r5
 800be08:	2200      	movs	r2, #0
 800be0a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be0e:	4543      	cmp	r3, r8
 800be10:	d321      	bcc.n	800be56 <__multiply+0x96>
 800be12:	f104 0314 	add.w	r3, r4, #20
 800be16:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800be1a:	f109 0314 	add.w	r3, r9, #20
 800be1e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800be22:	9202      	str	r2, [sp, #8]
 800be24:	1b3a      	subs	r2, r7, r4
 800be26:	3a15      	subs	r2, #21
 800be28:	f022 0203 	bic.w	r2, r2, #3
 800be2c:	3204      	adds	r2, #4
 800be2e:	f104 0115 	add.w	r1, r4, #21
 800be32:	428f      	cmp	r7, r1
 800be34:	bf38      	it	cc
 800be36:	2204      	movcc	r2, #4
 800be38:	9201      	str	r2, [sp, #4]
 800be3a:	9a02      	ldr	r2, [sp, #8]
 800be3c:	9303      	str	r3, [sp, #12]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d80c      	bhi.n	800be5c <__multiply+0x9c>
 800be42:	2e00      	cmp	r6, #0
 800be44:	dd03      	ble.n	800be4e <__multiply+0x8e>
 800be46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d059      	beq.n	800bf02 <__multiply+0x142>
 800be4e:	6106      	str	r6, [r0, #16]
 800be50:	b005      	add	sp, #20
 800be52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be56:	f843 2b04 	str.w	r2, [r3], #4
 800be5a:	e7d8      	b.n	800be0e <__multiply+0x4e>
 800be5c:	f8b3 a000 	ldrh.w	sl, [r3]
 800be60:	f1ba 0f00 	cmp.w	sl, #0
 800be64:	d023      	beq.n	800beae <__multiply+0xee>
 800be66:	46a9      	mov	r9, r5
 800be68:	f04f 0c00 	mov.w	ip, #0
 800be6c:	f104 0e14 	add.w	lr, r4, #20
 800be70:	f85e 2b04 	ldr.w	r2, [lr], #4
 800be74:	f8d9 1000 	ldr.w	r1, [r9]
 800be78:	fa1f fb82 	uxth.w	fp, r2
 800be7c:	b289      	uxth	r1, r1
 800be7e:	fb0a 110b 	mla	r1, sl, fp, r1
 800be82:	4461      	add	r1, ip
 800be84:	f8d9 c000 	ldr.w	ip, [r9]
 800be88:	0c12      	lsrs	r2, r2, #16
 800be8a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800be8e:	fb0a c202 	mla	r2, sl, r2, ip
 800be92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800be96:	b289      	uxth	r1, r1
 800be98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be9c:	4577      	cmp	r7, lr
 800be9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bea2:	f849 1b04 	str.w	r1, [r9], #4
 800bea6:	d8e3      	bhi.n	800be70 <__multiply+0xb0>
 800bea8:	9a01      	ldr	r2, [sp, #4]
 800beaa:	f845 c002 	str.w	ip, [r5, r2]
 800beae:	9a03      	ldr	r2, [sp, #12]
 800beb0:	3304      	adds	r3, #4
 800beb2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800beb6:	f1b9 0f00 	cmp.w	r9, #0
 800beba:	d020      	beq.n	800befe <__multiply+0x13e>
 800bebc:	46ae      	mov	lr, r5
 800bebe:	f04f 0a00 	mov.w	sl, #0
 800bec2:	6829      	ldr	r1, [r5, #0]
 800bec4:	f104 0c14 	add.w	ip, r4, #20
 800bec8:	f8bc b000 	ldrh.w	fp, [ip]
 800becc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bed0:	b289      	uxth	r1, r1
 800bed2:	fb09 220b 	mla	r2, r9, fp, r2
 800bed6:	4492      	add	sl, r2
 800bed8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bedc:	f84e 1b04 	str.w	r1, [lr], #4
 800bee0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bee4:	f8be 1000 	ldrh.w	r1, [lr]
 800bee8:	0c12      	lsrs	r2, r2, #16
 800beea:	fb09 1102 	mla	r1, r9, r2, r1
 800beee:	4567      	cmp	r7, ip
 800bef0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bef4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bef8:	d8e6      	bhi.n	800bec8 <__multiply+0x108>
 800befa:	9a01      	ldr	r2, [sp, #4]
 800befc:	50a9      	str	r1, [r5, r2]
 800befe:	3504      	adds	r5, #4
 800bf00:	e79b      	b.n	800be3a <__multiply+0x7a>
 800bf02:	3e01      	subs	r6, #1
 800bf04:	e79d      	b.n	800be42 <__multiply+0x82>
 800bf06:	bf00      	nop
 800bf08:	0800d3c0 	.word	0x0800d3c0
 800bf0c:	0800d4b0 	.word	0x0800d4b0

0800bf10 <__pow5mult>:
 800bf10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf14:	4615      	mov	r5, r2
 800bf16:	f012 0203 	ands.w	r2, r2, #3
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	460f      	mov	r7, r1
 800bf1e:	d007      	beq.n	800bf30 <__pow5mult+0x20>
 800bf20:	4c25      	ldr	r4, [pc, #148]	; (800bfb8 <__pow5mult+0xa8>)
 800bf22:	3a01      	subs	r2, #1
 800bf24:	2300      	movs	r3, #0
 800bf26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf2a:	f7ff fe55 	bl	800bbd8 <__multadd>
 800bf2e:	4607      	mov	r7, r0
 800bf30:	10ad      	asrs	r5, r5, #2
 800bf32:	d03d      	beq.n	800bfb0 <__pow5mult+0xa0>
 800bf34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bf36:	b97c      	cbnz	r4, 800bf58 <__pow5mult+0x48>
 800bf38:	2010      	movs	r0, #16
 800bf3a:	f7fc fb83 	bl	8008644 <malloc>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	6270      	str	r0, [r6, #36]	; 0x24
 800bf42:	b928      	cbnz	r0, 800bf50 <__pow5mult+0x40>
 800bf44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bf48:	4b1c      	ldr	r3, [pc, #112]	; (800bfbc <__pow5mult+0xac>)
 800bf4a:	481d      	ldr	r0, [pc, #116]	; (800bfc0 <__pow5mult+0xb0>)
 800bf4c:	f000 fc72 	bl	800c834 <__assert_func>
 800bf50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf54:	6004      	str	r4, [r0, #0]
 800bf56:	60c4      	str	r4, [r0, #12]
 800bf58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bf5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf60:	b94c      	cbnz	r4, 800bf76 <__pow5mult+0x66>
 800bf62:	f240 2171 	movw	r1, #625	; 0x271
 800bf66:	4630      	mov	r0, r6
 800bf68:	f7ff ff14 	bl	800bd94 <__i2b>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	4604      	mov	r4, r0
 800bf70:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf74:	6003      	str	r3, [r0, #0]
 800bf76:	f04f 0900 	mov.w	r9, #0
 800bf7a:	07eb      	lsls	r3, r5, #31
 800bf7c:	d50a      	bpl.n	800bf94 <__pow5mult+0x84>
 800bf7e:	4639      	mov	r1, r7
 800bf80:	4622      	mov	r2, r4
 800bf82:	4630      	mov	r0, r6
 800bf84:	f7ff ff1c 	bl	800bdc0 <__multiply>
 800bf88:	4680      	mov	r8, r0
 800bf8a:	4639      	mov	r1, r7
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	f7ff fe01 	bl	800bb94 <_Bfree>
 800bf92:	4647      	mov	r7, r8
 800bf94:	106d      	asrs	r5, r5, #1
 800bf96:	d00b      	beq.n	800bfb0 <__pow5mult+0xa0>
 800bf98:	6820      	ldr	r0, [r4, #0]
 800bf9a:	b938      	cbnz	r0, 800bfac <__pow5mult+0x9c>
 800bf9c:	4622      	mov	r2, r4
 800bf9e:	4621      	mov	r1, r4
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	f7ff ff0d 	bl	800bdc0 <__multiply>
 800bfa6:	6020      	str	r0, [r4, #0]
 800bfa8:	f8c0 9000 	str.w	r9, [r0]
 800bfac:	4604      	mov	r4, r0
 800bfae:	e7e4      	b.n	800bf7a <__pow5mult+0x6a>
 800bfb0:	4638      	mov	r0, r7
 800bfb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfb6:	bf00      	nop
 800bfb8:	0800d600 	.word	0x0800d600
 800bfbc:	0800d34e 	.word	0x0800d34e
 800bfc0:	0800d4b0 	.word	0x0800d4b0

0800bfc4 <__lshift>:
 800bfc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfc8:	460c      	mov	r4, r1
 800bfca:	4607      	mov	r7, r0
 800bfcc:	4691      	mov	r9, r2
 800bfce:	6923      	ldr	r3, [r4, #16]
 800bfd0:	6849      	ldr	r1, [r1, #4]
 800bfd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bfd6:	68a3      	ldr	r3, [r4, #8]
 800bfd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bfdc:	f108 0601 	add.w	r6, r8, #1
 800bfe0:	42b3      	cmp	r3, r6
 800bfe2:	db0b      	blt.n	800bffc <__lshift+0x38>
 800bfe4:	4638      	mov	r0, r7
 800bfe6:	f7ff fd95 	bl	800bb14 <_Balloc>
 800bfea:	4605      	mov	r5, r0
 800bfec:	b948      	cbnz	r0, 800c002 <__lshift+0x3e>
 800bfee:	4602      	mov	r2, r0
 800bff0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bff4:	4b29      	ldr	r3, [pc, #164]	; (800c09c <__lshift+0xd8>)
 800bff6:	482a      	ldr	r0, [pc, #168]	; (800c0a0 <__lshift+0xdc>)
 800bff8:	f000 fc1c 	bl	800c834 <__assert_func>
 800bffc:	3101      	adds	r1, #1
 800bffe:	005b      	lsls	r3, r3, #1
 800c000:	e7ee      	b.n	800bfe0 <__lshift+0x1c>
 800c002:	2300      	movs	r3, #0
 800c004:	f100 0114 	add.w	r1, r0, #20
 800c008:	f100 0210 	add.w	r2, r0, #16
 800c00c:	4618      	mov	r0, r3
 800c00e:	4553      	cmp	r3, sl
 800c010:	db37      	blt.n	800c082 <__lshift+0xbe>
 800c012:	6920      	ldr	r0, [r4, #16]
 800c014:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c018:	f104 0314 	add.w	r3, r4, #20
 800c01c:	f019 091f 	ands.w	r9, r9, #31
 800c020:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c024:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c028:	d02f      	beq.n	800c08a <__lshift+0xc6>
 800c02a:	468a      	mov	sl, r1
 800c02c:	f04f 0c00 	mov.w	ip, #0
 800c030:	f1c9 0e20 	rsb	lr, r9, #32
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	fa02 f209 	lsl.w	r2, r2, r9
 800c03a:	ea42 020c 	orr.w	r2, r2, ip
 800c03e:	f84a 2b04 	str.w	r2, [sl], #4
 800c042:	f853 2b04 	ldr.w	r2, [r3], #4
 800c046:	4298      	cmp	r0, r3
 800c048:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c04c:	d8f2      	bhi.n	800c034 <__lshift+0x70>
 800c04e:	1b03      	subs	r3, r0, r4
 800c050:	3b15      	subs	r3, #21
 800c052:	f023 0303 	bic.w	r3, r3, #3
 800c056:	3304      	adds	r3, #4
 800c058:	f104 0215 	add.w	r2, r4, #21
 800c05c:	4290      	cmp	r0, r2
 800c05e:	bf38      	it	cc
 800c060:	2304      	movcc	r3, #4
 800c062:	f841 c003 	str.w	ip, [r1, r3]
 800c066:	f1bc 0f00 	cmp.w	ip, #0
 800c06a:	d001      	beq.n	800c070 <__lshift+0xac>
 800c06c:	f108 0602 	add.w	r6, r8, #2
 800c070:	3e01      	subs	r6, #1
 800c072:	4638      	mov	r0, r7
 800c074:	4621      	mov	r1, r4
 800c076:	612e      	str	r6, [r5, #16]
 800c078:	f7ff fd8c 	bl	800bb94 <_Bfree>
 800c07c:	4628      	mov	r0, r5
 800c07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c082:	f842 0f04 	str.w	r0, [r2, #4]!
 800c086:	3301      	adds	r3, #1
 800c088:	e7c1      	b.n	800c00e <__lshift+0x4a>
 800c08a:	3904      	subs	r1, #4
 800c08c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c090:	4298      	cmp	r0, r3
 800c092:	f841 2f04 	str.w	r2, [r1, #4]!
 800c096:	d8f9      	bhi.n	800c08c <__lshift+0xc8>
 800c098:	e7ea      	b.n	800c070 <__lshift+0xac>
 800c09a:	bf00      	nop
 800c09c:	0800d3c0 	.word	0x0800d3c0
 800c0a0:	0800d4b0 	.word	0x0800d4b0

0800c0a4 <__mcmp>:
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	690a      	ldr	r2, [r1, #16]
 800c0a8:	6900      	ldr	r0, [r0, #16]
 800c0aa:	b530      	push	{r4, r5, lr}
 800c0ac:	1a80      	subs	r0, r0, r2
 800c0ae:	d10d      	bne.n	800c0cc <__mcmp+0x28>
 800c0b0:	3314      	adds	r3, #20
 800c0b2:	3114      	adds	r1, #20
 800c0b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c0b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c0bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c0c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c0c4:	4295      	cmp	r5, r2
 800c0c6:	d002      	beq.n	800c0ce <__mcmp+0x2a>
 800c0c8:	d304      	bcc.n	800c0d4 <__mcmp+0x30>
 800c0ca:	2001      	movs	r0, #1
 800c0cc:	bd30      	pop	{r4, r5, pc}
 800c0ce:	42a3      	cmp	r3, r4
 800c0d0:	d3f4      	bcc.n	800c0bc <__mcmp+0x18>
 800c0d2:	e7fb      	b.n	800c0cc <__mcmp+0x28>
 800c0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d8:	e7f8      	b.n	800c0cc <__mcmp+0x28>
	...

0800c0dc <__mdiff>:
 800c0dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e0:	460d      	mov	r5, r1
 800c0e2:	4607      	mov	r7, r0
 800c0e4:	4611      	mov	r1, r2
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	4614      	mov	r4, r2
 800c0ea:	f7ff ffdb 	bl	800c0a4 <__mcmp>
 800c0ee:	1e06      	subs	r6, r0, #0
 800c0f0:	d111      	bne.n	800c116 <__mdiff+0x3a>
 800c0f2:	4631      	mov	r1, r6
 800c0f4:	4638      	mov	r0, r7
 800c0f6:	f7ff fd0d 	bl	800bb14 <_Balloc>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	b928      	cbnz	r0, 800c10a <__mdiff+0x2e>
 800c0fe:	f240 2132 	movw	r1, #562	; 0x232
 800c102:	4b3a      	ldr	r3, [pc, #232]	; (800c1ec <__mdiff+0x110>)
 800c104:	483a      	ldr	r0, [pc, #232]	; (800c1f0 <__mdiff+0x114>)
 800c106:	f000 fb95 	bl	800c834 <__assert_func>
 800c10a:	2301      	movs	r3, #1
 800c10c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c110:	4610      	mov	r0, r2
 800c112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c116:	bfa4      	itt	ge
 800c118:	4623      	movge	r3, r4
 800c11a:	462c      	movge	r4, r5
 800c11c:	4638      	mov	r0, r7
 800c11e:	6861      	ldr	r1, [r4, #4]
 800c120:	bfa6      	itte	ge
 800c122:	461d      	movge	r5, r3
 800c124:	2600      	movge	r6, #0
 800c126:	2601      	movlt	r6, #1
 800c128:	f7ff fcf4 	bl	800bb14 <_Balloc>
 800c12c:	4602      	mov	r2, r0
 800c12e:	b918      	cbnz	r0, 800c138 <__mdiff+0x5c>
 800c130:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c134:	4b2d      	ldr	r3, [pc, #180]	; (800c1ec <__mdiff+0x110>)
 800c136:	e7e5      	b.n	800c104 <__mdiff+0x28>
 800c138:	f102 0814 	add.w	r8, r2, #20
 800c13c:	46c2      	mov	sl, r8
 800c13e:	f04f 0c00 	mov.w	ip, #0
 800c142:	6927      	ldr	r7, [r4, #16]
 800c144:	60c6      	str	r6, [r0, #12]
 800c146:	692e      	ldr	r6, [r5, #16]
 800c148:	f104 0014 	add.w	r0, r4, #20
 800c14c:	f105 0914 	add.w	r9, r5, #20
 800c150:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c154:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c158:	3410      	adds	r4, #16
 800c15a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c15e:	f859 3b04 	ldr.w	r3, [r9], #4
 800c162:	fa1f f18b 	uxth.w	r1, fp
 800c166:	448c      	add	ip, r1
 800c168:	b299      	uxth	r1, r3
 800c16a:	0c1b      	lsrs	r3, r3, #16
 800c16c:	ebac 0101 	sub.w	r1, ip, r1
 800c170:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c174:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c178:	b289      	uxth	r1, r1
 800c17a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c17e:	454e      	cmp	r6, r9
 800c180:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c184:	f84a 3b04 	str.w	r3, [sl], #4
 800c188:	d8e7      	bhi.n	800c15a <__mdiff+0x7e>
 800c18a:	1b73      	subs	r3, r6, r5
 800c18c:	3b15      	subs	r3, #21
 800c18e:	f023 0303 	bic.w	r3, r3, #3
 800c192:	3515      	adds	r5, #21
 800c194:	3304      	adds	r3, #4
 800c196:	42ae      	cmp	r6, r5
 800c198:	bf38      	it	cc
 800c19a:	2304      	movcc	r3, #4
 800c19c:	4418      	add	r0, r3
 800c19e:	4443      	add	r3, r8
 800c1a0:	461e      	mov	r6, r3
 800c1a2:	4605      	mov	r5, r0
 800c1a4:	4575      	cmp	r5, lr
 800c1a6:	d30e      	bcc.n	800c1c6 <__mdiff+0xea>
 800c1a8:	f10e 0103 	add.w	r1, lr, #3
 800c1ac:	1a09      	subs	r1, r1, r0
 800c1ae:	f021 0103 	bic.w	r1, r1, #3
 800c1b2:	3803      	subs	r0, #3
 800c1b4:	4586      	cmp	lr, r0
 800c1b6:	bf38      	it	cc
 800c1b8:	2100      	movcc	r1, #0
 800c1ba:	4419      	add	r1, r3
 800c1bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c1c0:	b18b      	cbz	r3, 800c1e6 <__mdiff+0x10a>
 800c1c2:	6117      	str	r7, [r2, #16]
 800c1c4:	e7a4      	b.n	800c110 <__mdiff+0x34>
 800c1c6:	f855 8b04 	ldr.w	r8, [r5], #4
 800c1ca:	fa1f f188 	uxth.w	r1, r8
 800c1ce:	4461      	add	r1, ip
 800c1d0:	140c      	asrs	r4, r1, #16
 800c1d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c1d6:	b289      	uxth	r1, r1
 800c1d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c1dc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c1e0:	f846 1b04 	str.w	r1, [r6], #4
 800c1e4:	e7de      	b.n	800c1a4 <__mdiff+0xc8>
 800c1e6:	3f01      	subs	r7, #1
 800c1e8:	e7e8      	b.n	800c1bc <__mdiff+0xe0>
 800c1ea:	bf00      	nop
 800c1ec:	0800d3c0 	.word	0x0800d3c0
 800c1f0:	0800d4b0 	.word	0x0800d4b0

0800c1f4 <__ulp>:
 800c1f4:	4b11      	ldr	r3, [pc, #68]	; (800c23c <__ulp+0x48>)
 800c1f6:	400b      	ands	r3, r1
 800c1f8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	dd02      	ble.n	800c206 <__ulp+0x12>
 800c200:	2000      	movs	r0, #0
 800c202:	4619      	mov	r1, r3
 800c204:	4770      	bx	lr
 800c206:	425b      	negs	r3, r3
 800c208:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c20c:	f04f 0000 	mov.w	r0, #0
 800c210:	f04f 0100 	mov.w	r1, #0
 800c214:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c218:	da04      	bge.n	800c224 <__ulp+0x30>
 800c21a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c21e:	fa43 f102 	asr.w	r1, r3, r2
 800c222:	4770      	bx	lr
 800c224:	f1a2 0314 	sub.w	r3, r2, #20
 800c228:	2b1e      	cmp	r3, #30
 800c22a:	bfd6      	itet	le
 800c22c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c230:	2301      	movgt	r3, #1
 800c232:	fa22 f303 	lsrle.w	r3, r2, r3
 800c236:	4618      	mov	r0, r3
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	7ff00000 	.word	0x7ff00000

0800c240 <__b2d>:
 800c240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c244:	6907      	ldr	r7, [r0, #16]
 800c246:	f100 0914 	add.w	r9, r0, #20
 800c24a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c24e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c252:	f1a7 0804 	sub.w	r8, r7, #4
 800c256:	4630      	mov	r0, r6
 800c258:	f7ff fd4e 	bl	800bcf8 <__hi0bits>
 800c25c:	f1c0 0320 	rsb	r3, r0, #32
 800c260:	280a      	cmp	r0, #10
 800c262:	600b      	str	r3, [r1, #0]
 800c264:	491f      	ldr	r1, [pc, #124]	; (800c2e4 <__b2d+0xa4>)
 800c266:	dc17      	bgt.n	800c298 <__b2d+0x58>
 800c268:	45c1      	cmp	r9, r8
 800c26a:	bf28      	it	cs
 800c26c:	2200      	movcs	r2, #0
 800c26e:	f1c0 0c0b 	rsb	ip, r0, #11
 800c272:	fa26 f30c 	lsr.w	r3, r6, ip
 800c276:	bf38      	it	cc
 800c278:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c27c:	ea43 0501 	orr.w	r5, r3, r1
 800c280:	f100 0315 	add.w	r3, r0, #21
 800c284:	fa06 f303 	lsl.w	r3, r6, r3
 800c288:	fa22 f20c 	lsr.w	r2, r2, ip
 800c28c:	ea43 0402 	orr.w	r4, r3, r2
 800c290:	4620      	mov	r0, r4
 800c292:	4629      	mov	r1, r5
 800c294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c298:	45c1      	cmp	r9, r8
 800c29a:	bf2e      	itee	cs
 800c29c:	2200      	movcs	r2, #0
 800c29e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c2a2:	f1a7 0808 	subcc.w	r8, r7, #8
 800c2a6:	f1b0 030b 	subs.w	r3, r0, #11
 800c2aa:	d016      	beq.n	800c2da <__b2d+0x9a>
 800c2ac:	f1c3 0720 	rsb	r7, r3, #32
 800c2b0:	fa22 f107 	lsr.w	r1, r2, r7
 800c2b4:	45c8      	cmp	r8, r9
 800c2b6:	fa06 f603 	lsl.w	r6, r6, r3
 800c2ba:	ea46 0601 	orr.w	r6, r6, r1
 800c2be:	bf94      	ite	ls
 800c2c0:	2100      	movls	r1, #0
 800c2c2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c2c6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c2ca:	fa02 f003 	lsl.w	r0, r2, r3
 800c2ce:	40f9      	lsrs	r1, r7
 800c2d0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c2d4:	ea40 0401 	orr.w	r4, r0, r1
 800c2d8:	e7da      	b.n	800c290 <__b2d+0x50>
 800c2da:	4614      	mov	r4, r2
 800c2dc:	ea46 0501 	orr.w	r5, r6, r1
 800c2e0:	e7d6      	b.n	800c290 <__b2d+0x50>
 800c2e2:	bf00      	nop
 800c2e4:	3ff00000 	.word	0x3ff00000

0800c2e8 <__d2b>:
 800c2e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c2ec:	2101      	movs	r1, #1
 800c2ee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c2f2:	4690      	mov	r8, r2
 800c2f4:	461d      	mov	r5, r3
 800c2f6:	f7ff fc0d 	bl	800bb14 <_Balloc>
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	b930      	cbnz	r0, 800c30c <__d2b+0x24>
 800c2fe:	4602      	mov	r2, r0
 800c300:	f240 310a 	movw	r1, #778	; 0x30a
 800c304:	4b24      	ldr	r3, [pc, #144]	; (800c398 <__d2b+0xb0>)
 800c306:	4825      	ldr	r0, [pc, #148]	; (800c39c <__d2b+0xb4>)
 800c308:	f000 fa94 	bl	800c834 <__assert_func>
 800c30c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c310:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c314:	bb2d      	cbnz	r5, 800c362 <__d2b+0x7a>
 800c316:	9301      	str	r3, [sp, #4]
 800c318:	f1b8 0300 	subs.w	r3, r8, #0
 800c31c:	d026      	beq.n	800c36c <__d2b+0x84>
 800c31e:	4668      	mov	r0, sp
 800c320:	9300      	str	r3, [sp, #0]
 800c322:	f7ff fd09 	bl	800bd38 <__lo0bits>
 800c326:	9900      	ldr	r1, [sp, #0]
 800c328:	b1f0      	cbz	r0, 800c368 <__d2b+0x80>
 800c32a:	9a01      	ldr	r2, [sp, #4]
 800c32c:	f1c0 0320 	rsb	r3, r0, #32
 800c330:	fa02 f303 	lsl.w	r3, r2, r3
 800c334:	430b      	orrs	r3, r1
 800c336:	40c2      	lsrs	r2, r0
 800c338:	6163      	str	r3, [r4, #20]
 800c33a:	9201      	str	r2, [sp, #4]
 800c33c:	9b01      	ldr	r3, [sp, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	bf14      	ite	ne
 800c342:	2102      	movne	r1, #2
 800c344:	2101      	moveq	r1, #1
 800c346:	61a3      	str	r3, [r4, #24]
 800c348:	6121      	str	r1, [r4, #16]
 800c34a:	b1c5      	cbz	r5, 800c37e <__d2b+0x96>
 800c34c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c350:	4405      	add	r5, r0
 800c352:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c356:	603d      	str	r5, [r7, #0]
 800c358:	6030      	str	r0, [r6, #0]
 800c35a:	4620      	mov	r0, r4
 800c35c:	b002      	add	sp, #8
 800c35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c366:	e7d6      	b.n	800c316 <__d2b+0x2e>
 800c368:	6161      	str	r1, [r4, #20]
 800c36a:	e7e7      	b.n	800c33c <__d2b+0x54>
 800c36c:	a801      	add	r0, sp, #4
 800c36e:	f7ff fce3 	bl	800bd38 <__lo0bits>
 800c372:	2101      	movs	r1, #1
 800c374:	9b01      	ldr	r3, [sp, #4]
 800c376:	6121      	str	r1, [r4, #16]
 800c378:	6163      	str	r3, [r4, #20]
 800c37a:	3020      	adds	r0, #32
 800c37c:	e7e5      	b.n	800c34a <__d2b+0x62>
 800c37e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c382:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c386:	6038      	str	r0, [r7, #0]
 800c388:	6918      	ldr	r0, [r3, #16]
 800c38a:	f7ff fcb5 	bl	800bcf8 <__hi0bits>
 800c38e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c392:	6031      	str	r1, [r6, #0]
 800c394:	e7e1      	b.n	800c35a <__d2b+0x72>
 800c396:	bf00      	nop
 800c398:	0800d3c0 	.word	0x0800d3c0
 800c39c:	0800d4b0 	.word	0x0800d4b0

0800c3a0 <__ratio>:
 800c3a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a4:	4688      	mov	r8, r1
 800c3a6:	4669      	mov	r1, sp
 800c3a8:	4681      	mov	r9, r0
 800c3aa:	f7ff ff49 	bl	800c240 <__b2d>
 800c3ae:	460f      	mov	r7, r1
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	460d      	mov	r5, r1
 800c3b4:	4640      	mov	r0, r8
 800c3b6:	a901      	add	r1, sp, #4
 800c3b8:	f7ff ff42 	bl	800c240 <__b2d>
 800c3bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3c0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c3c4:	468b      	mov	fp, r1
 800c3c6:	eba3 0c02 	sub.w	ip, r3, r2
 800c3ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c3ce:	1a9b      	subs	r3, r3, r2
 800c3d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	bfd5      	itete	le
 800c3d8:	460a      	movle	r2, r1
 800c3da:	462a      	movgt	r2, r5
 800c3dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c3e0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c3e4:	bfd8      	it	le
 800c3e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c3ea:	465b      	mov	r3, fp
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	4639      	mov	r1, r7
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	f7f4 f99b 	bl	800072c <__aeabi_ddiv>
 800c3f6:	b003      	add	sp, #12
 800c3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c3fc <__copybits>:
 800c3fc:	3901      	subs	r1, #1
 800c3fe:	b570      	push	{r4, r5, r6, lr}
 800c400:	1149      	asrs	r1, r1, #5
 800c402:	6914      	ldr	r4, [r2, #16]
 800c404:	3101      	adds	r1, #1
 800c406:	f102 0314 	add.w	r3, r2, #20
 800c40a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c40e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c412:	1f05      	subs	r5, r0, #4
 800c414:	42a3      	cmp	r3, r4
 800c416:	d30c      	bcc.n	800c432 <__copybits+0x36>
 800c418:	1aa3      	subs	r3, r4, r2
 800c41a:	3b11      	subs	r3, #17
 800c41c:	f023 0303 	bic.w	r3, r3, #3
 800c420:	3211      	adds	r2, #17
 800c422:	42a2      	cmp	r2, r4
 800c424:	bf88      	it	hi
 800c426:	2300      	movhi	r3, #0
 800c428:	4418      	add	r0, r3
 800c42a:	2300      	movs	r3, #0
 800c42c:	4288      	cmp	r0, r1
 800c42e:	d305      	bcc.n	800c43c <__copybits+0x40>
 800c430:	bd70      	pop	{r4, r5, r6, pc}
 800c432:	f853 6b04 	ldr.w	r6, [r3], #4
 800c436:	f845 6f04 	str.w	r6, [r5, #4]!
 800c43a:	e7eb      	b.n	800c414 <__copybits+0x18>
 800c43c:	f840 3b04 	str.w	r3, [r0], #4
 800c440:	e7f4      	b.n	800c42c <__copybits+0x30>

0800c442 <__any_on>:
 800c442:	f100 0214 	add.w	r2, r0, #20
 800c446:	6900      	ldr	r0, [r0, #16]
 800c448:	114b      	asrs	r3, r1, #5
 800c44a:	4298      	cmp	r0, r3
 800c44c:	b510      	push	{r4, lr}
 800c44e:	db11      	blt.n	800c474 <__any_on+0x32>
 800c450:	dd0a      	ble.n	800c468 <__any_on+0x26>
 800c452:	f011 011f 	ands.w	r1, r1, #31
 800c456:	d007      	beq.n	800c468 <__any_on+0x26>
 800c458:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c45c:	fa24 f001 	lsr.w	r0, r4, r1
 800c460:	fa00 f101 	lsl.w	r1, r0, r1
 800c464:	428c      	cmp	r4, r1
 800c466:	d10b      	bne.n	800c480 <__any_on+0x3e>
 800c468:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d803      	bhi.n	800c478 <__any_on+0x36>
 800c470:	2000      	movs	r0, #0
 800c472:	bd10      	pop	{r4, pc}
 800c474:	4603      	mov	r3, r0
 800c476:	e7f7      	b.n	800c468 <__any_on+0x26>
 800c478:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c47c:	2900      	cmp	r1, #0
 800c47e:	d0f5      	beq.n	800c46c <__any_on+0x2a>
 800c480:	2001      	movs	r0, #1
 800c482:	e7f6      	b.n	800c472 <__any_on+0x30>

0800c484 <__ssputs_r>:
 800c484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c488:	688e      	ldr	r6, [r1, #8]
 800c48a:	4682      	mov	sl, r0
 800c48c:	429e      	cmp	r6, r3
 800c48e:	460c      	mov	r4, r1
 800c490:	4690      	mov	r8, r2
 800c492:	461f      	mov	r7, r3
 800c494:	d838      	bhi.n	800c508 <__ssputs_r+0x84>
 800c496:	898a      	ldrh	r2, [r1, #12]
 800c498:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c49c:	d032      	beq.n	800c504 <__ssputs_r+0x80>
 800c49e:	6825      	ldr	r5, [r4, #0]
 800c4a0:	6909      	ldr	r1, [r1, #16]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	eba5 0901 	sub.w	r9, r5, r1
 800c4a8:	6965      	ldr	r5, [r4, #20]
 800c4aa:	444b      	add	r3, r9
 800c4ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4b4:	106d      	asrs	r5, r5, #1
 800c4b6:	429d      	cmp	r5, r3
 800c4b8:	bf38      	it	cc
 800c4ba:	461d      	movcc	r5, r3
 800c4bc:	0553      	lsls	r3, r2, #21
 800c4be:	d531      	bpl.n	800c524 <__ssputs_r+0xa0>
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	f7fc f959 	bl	8008778 <_malloc_r>
 800c4c6:	4606      	mov	r6, r0
 800c4c8:	b950      	cbnz	r0, 800c4e0 <__ssputs_r+0x5c>
 800c4ca:	230c      	movs	r3, #12
 800c4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d0:	f8ca 3000 	str.w	r3, [sl]
 800c4d4:	89a3      	ldrh	r3, [r4, #12]
 800c4d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4da:	81a3      	strh	r3, [r4, #12]
 800c4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e0:	464a      	mov	r2, r9
 800c4e2:	6921      	ldr	r1, [r4, #16]
 800c4e4:	f7fc f8b6 	bl	8008654 <memcpy>
 800c4e8:	89a3      	ldrh	r3, [r4, #12]
 800c4ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4f2:	81a3      	strh	r3, [r4, #12]
 800c4f4:	6126      	str	r6, [r4, #16]
 800c4f6:	444e      	add	r6, r9
 800c4f8:	6026      	str	r6, [r4, #0]
 800c4fa:	463e      	mov	r6, r7
 800c4fc:	6165      	str	r5, [r4, #20]
 800c4fe:	eba5 0509 	sub.w	r5, r5, r9
 800c502:	60a5      	str	r5, [r4, #8]
 800c504:	42be      	cmp	r6, r7
 800c506:	d900      	bls.n	800c50a <__ssputs_r+0x86>
 800c508:	463e      	mov	r6, r7
 800c50a:	4632      	mov	r2, r6
 800c50c:	4641      	mov	r1, r8
 800c50e:	6820      	ldr	r0, [r4, #0]
 800c510:	f000 fa04 	bl	800c91c <memmove>
 800c514:	68a3      	ldr	r3, [r4, #8]
 800c516:	2000      	movs	r0, #0
 800c518:	1b9b      	subs	r3, r3, r6
 800c51a:	60a3      	str	r3, [r4, #8]
 800c51c:	6823      	ldr	r3, [r4, #0]
 800c51e:	4433      	add	r3, r6
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	e7db      	b.n	800c4dc <__ssputs_r+0x58>
 800c524:	462a      	mov	r2, r5
 800c526:	f000 fa13 	bl	800c950 <_realloc_r>
 800c52a:	4606      	mov	r6, r0
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d1e1      	bne.n	800c4f4 <__ssputs_r+0x70>
 800c530:	4650      	mov	r0, sl
 800c532:	6921      	ldr	r1, [r4, #16]
 800c534:	f7fc f8b8 	bl	80086a8 <_free_r>
 800c538:	e7c7      	b.n	800c4ca <__ssputs_r+0x46>
	...

0800c53c <_svfiprintf_r>:
 800c53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c540:	4698      	mov	r8, r3
 800c542:	898b      	ldrh	r3, [r1, #12]
 800c544:	4607      	mov	r7, r0
 800c546:	061b      	lsls	r3, r3, #24
 800c548:	460d      	mov	r5, r1
 800c54a:	4614      	mov	r4, r2
 800c54c:	b09d      	sub	sp, #116	; 0x74
 800c54e:	d50e      	bpl.n	800c56e <_svfiprintf_r+0x32>
 800c550:	690b      	ldr	r3, [r1, #16]
 800c552:	b963      	cbnz	r3, 800c56e <_svfiprintf_r+0x32>
 800c554:	2140      	movs	r1, #64	; 0x40
 800c556:	f7fc f90f 	bl	8008778 <_malloc_r>
 800c55a:	6028      	str	r0, [r5, #0]
 800c55c:	6128      	str	r0, [r5, #16]
 800c55e:	b920      	cbnz	r0, 800c56a <_svfiprintf_r+0x2e>
 800c560:	230c      	movs	r3, #12
 800c562:	603b      	str	r3, [r7, #0]
 800c564:	f04f 30ff 	mov.w	r0, #4294967295
 800c568:	e0d1      	b.n	800c70e <_svfiprintf_r+0x1d2>
 800c56a:	2340      	movs	r3, #64	; 0x40
 800c56c:	616b      	str	r3, [r5, #20]
 800c56e:	2300      	movs	r3, #0
 800c570:	9309      	str	r3, [sp, #36]	; 0x24
 800c572:	2320      	movs	r3, #32
 800c574:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c578:	2330      	movs	r3, #48	; 0x30
 800c57a:	f04f 0901 	mov.w	r9, #1
 800c57e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c582:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c728 <_svfiprintf_r+0x1ec>
 800c586:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c58a:	4623      	mov	r3, r4
 800c58c:	469a      	mov	sl, r3
 800c58e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c592:	b10a      	cbz	r2, 800c598 <_svfiprintf_r+0x5c>
 800c594:	2a25      	cmp	r2, #37	; 0x25
 800c596:	d1f9      	bne.n	800c58c <_svfiprintf_r+0x50>
 800c598:	ebba 0b04 	subs.w	fp, sl, r4
 800c59c:	d00b      	beq.n	800c5b6 <_svfiprintf_r+0x7a>
 800c59e:	465b      	mov	r3, fp
 800c5a0:	4622      	mov	r2, r4
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	4638      	mov	r0, r7
 800c5a6:	f7ff ff6d 	bl	800c484 <__ssputs_r>
 800c5aa:	3001      	adds	r0, #1
 800c5ac:	f000 80aa 	beq.w	800c704 <_svfiprintf_r+0x1c8>
 800c5b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5b2:	445a      	add	r2, fp
 800c5b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c5b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	f000 80a2 	beq.w	800c704 <_svfiprintf_r+0x1c8>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5ca:	f10a 0a01 	add.w	sl, sl, #1
 800c5ce:	9304      	str	r3, [sp, #16]
 800c5d0:	9307      	str	r3, [sp, #28]
 800c5d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5d6:	931a      	str	r3, [sp, #104]	; 0x68
 800c5d8:	4654      	mov	r4, sl
 800c5da:	2205      	movs	r2, #5
 800c5dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e0:	4851      	ldr	r0, [pc, #324]	; (800c728 <_svfiprintf_r+0x1ec>)
 800c5e2:	f7ff fa7d 	bl	800bae0 <memchr>
 800c5e6:	9a04      	ldr	r2, [sp, #16]
 800c5e8:	b9d8      	cbnz	r0, 800c622 <_svfiprintf_r+0xe6>
 800c5ea:	06d0      	lsls	r0, r2, #27
 800c5ec:	bf44      	itt	mi
 800c5ee:	2320      	movmi	r3, #32
 800c5f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5f4:	0711      	lsls	r1, r2, #28
 800c5f6:	bf44      	itt	mi
 800c5f8:	232b      	movmi	r3, #43	; 0x2b
 800c5fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c602:	2b2a      	cmp	r3, #42	; 0x2a
 800c604:	d015      	beq.n	800c632 <_svfiprintf_r+0xf6>
 800c606:	4654      	mov	r4, sl
 800c608:	2000      	movs	r0, #0
 800c60a:	f04f 0c0a 	mov.w	ip, #10
 800c60e:	9a07      	ldr	r2, [sp, #28]
 800c610:	4621      	mov	r1, r4
 800c612:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c616:	3b30      	subs	r3, #48	; 0x30
 800c618:	2b09      	cmp	r3, #9
 800c61a:	d94e      	bls.n	800c6ba <_svfiprintf_r+0x17e>
 800c61c:	b1b0      	cbz	r0, 800c64c <_svfiprintf_r+0x110>
 800c61e:	9207      	str	r2, [sp, #28]
 800c620:	e014      	b.n	800c64c <_svfiprintf_r+0x110>
 800c622:	eba0 0308 	sub.w	r3, r0, r8
 800c626:	fa09 f303 	lsl.w	r3, r9, r3
 800c62a:	4313      	orrs	r3, r2
 800c62c:	46a2      	mov	sl, r4
 800c62e:	9304      	str	r3, [sp, #16]
 800c630:	e7d2      	b.n	800c5d8 <_svfiprintf_r+0x9c>
 800c632:	9b03      	ldr	r3, [sp, #12]
 800c634:	1d19      	adds	r1, r3, #4
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	9103      	str	r1, [sp, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	bfbb      	ittet	lt
 800c63e:	425b      	neglt	r3, r3
 800c640:	f042 0202 	orrlt.w	r2, r2, #2
 800c644:	9307      	strge	r3, [sp, #28]
 800c646:	9307      	strlt	r3, [sp, #28]
 800c648:	bfb8      	it	lt
 800c64a:	9204      	strlt	r2, [sp, #16]
 800c64c:	7823      	ldrb	r3, [r4, #0]
 800c64e:	2b2e      	cmp	r3, #46	; 0x2e
 800c650:	d10c      	bne.n	800c66c <_svfiprintf_r+0x130>
 800c652:	7863      	ldrb	r3, [r4, #1]
 800c654:	2b2a      	cmp	r3, #42	; 0x2a
 800c656:	d135      	bne.n	800c6c4 <_svfiprintf_r+0x188>
 800c658:	9b03      	ldr	r3, [sp, #12]
 800c65a:	3402      	adds	r4, #2
 800c65c:	1d1a      	adds	r2, r3, #4
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	9203      	str	r2, [sp, #12]
 800c662:	2b00      	cmp	r3, #0
 800c664:	bfb8      	it	lt
 800c666:	f04f 33ff 	movlt.w	r3, #4294967295
 800c66a:	9305      	str	r3, [sp, #20]
 800c66c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c72c <_svfiprintf_r+0x1f0>
 800c670:	2203      	movs	r2, #3
 800c672:	4650      	mov	r0, sl
 800c674:	7821      	ldrb	r1, [r4, #0]
 800c676:	f7ff fa33 	bl	800bae0 <memchr>
 800c67a:	b140      	cbz	r0, 800c68e <_svfiprintf_r+0x152>
 800c67c:	2340      	movs	r3, #64	; 0x40
 800c67e:	eba0 000a 	sub.w	r0, r0, sl
 800c682:	fa03 f000 	lsl.w	r0, r3, r0
 800c686:	9b04      	ldr	r3, [sp, #16]
 800c688:	3401      	adds	r4, #1
 800c68a:	4303      	orrs	r3, r0
 800c68c:	9304      	str	r3, [sp, #16]
 800c68e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c692:	2206      	movs	r2, #6
 800c694:	4826      	ldr	r0, [pc, #152]	; (800c730 <_svfiprintf_r+0x1f4>)
 800c696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c69a:	f7ff fa21 	bl	800bae0 <memchr>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d038      	beq.n	800c714 <_svfiprintf_r+0x1d8>
 800c6a2:	4b24      	ldr	r3, [pc, #144]	; (800c734 <_svfiprintf_r+0x1f8>)
 800c6a4:	bb1b      	cbnz	r3, 800c6ee <_svfiprintf_r+0x1b2>
 800c6a6:	9b03      	ldr	r3, [sp, #12]
 800c6a8:	3307      	adds	r3, #7
 800c6aa:	f023 0307 	bic.w	r3, r3, #7
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	9303      	str	r3, [sp, #12]
 800c6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6b4:	4433      	add	r3, r6
 800c6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6b8:	e767      	b.n	800c58a <_svfiprintf_r+0x4e>
 800c6ba:	460c      	mov	r4, r1
 800c6bc:	2001      	movs	r0, #1
 800c6be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6c2:	e7a5      	b.n	800c610 <_svfiprintf_r+0xd4>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	f04f 0c0a 	mov.w	ip, #10
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	3401      	adds	r4, #1
 800c6ce:	9305      	str	r3, [sp, #20]
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6d6:	3a30      	subs	r2, #48	; 0x30
 800c6d8:	2a09      	cmp	r2, #9
 800c6da:	d903      	bls.n	800c6e4 <_svfiprintf_r+0x1a8>
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d0c5      	beq.n	800c66c <_svfiprintf_r+0x130>
 800c6e0:	9105      	str	r1, [sp, #20]
 800c6e2:	e7c3      	b.n	800c66c <_svfiprintf_r+0x130>
 800c6e4:	4604      	mov	r4, r0
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ec:	e7f0      	b.n	800c6d0 <_svfiprintf_r+0x194>
 800c6ee:	ab03      	add	r3, sp, #12
 800c6f0:	9300      	str	r3, [sp, #0]
 800c6f2:	462a      	mov	r2, r5
 800c6f4:	4638      	mov	r0, r7
 800c6f6:	4b10      	ldr	r3, [pc, #64]	; (800c738 <_svfiprintf_r+0x1fc>)
 800c6f8:	a904      	add	r1, sp, #16
 800c6fa:	f7fc f94f 	bl	800899c <_printf_float>
 800c6fe:	1c42      	adds	r2, r0, #1
 800c700:	4606      	mov	r6, r0
 800c702:	d1d6      	bne.n	800c6b2 <_svfiprintf_r+0x176>
 800c704:	89ab      	ldrh	r3, [r5, #12]
 800c706:	065b      	lsls	r3, r3, #25
 800c708:	f53f af2c 	bmi.w	800c564 <_svfiprintf_r+0x28>
 800c70c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c70e:	b01d      	add	sp, #116	; 0x74
 800c710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c714:	ab03      	add	r3, sp, #12
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	462a      	mov	r2, r5
 800c71a:	4638      	mov	r0, r7
 800c71c:	4b06      	ldr	r3, [pc, #24]	; (800c738 <_svfiprintf_r+0x1fc>)
 800c71e:	a904      	add	r1, sp, #16
 800c720:	f7fc fbd8 	bl	8008ed4 <_printf_i>
 800c724:	e7eb      	b.n	800c6fe <_svfiprintf_r+0x1c2>
 800c726:	bf00      	nop
 800c728:	0800d60c 	.word	0x0800d60c
 800c72c:	0800d612 	.word	0x0800d612
 800c730:	0800d616 	.word	0x0800d616
 800c734:	0800899d 	.word	0x0800899d
 800c738:	0800c485 	.word	0x0800c485

0800c73c <nan>:
 800c73c:	2000      	movs	r0, #0
 800c73e:	4901      	ldr	r1, [pc, #4]	; (800c744 <nan+0x8>)
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop
 800c744:	7ff80000 	.word	0x7ff80000

0800c748 <__sread>:
 800c748:	b510      	push	{r4, lr}
 800c74a:	460c      	mov	r4, r1
 800c74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c750:	f000 fa84 	bl	800cc5c <_read_r>
 800c754:	2800      	cmp	r0, #0
 800c756:	bfab      	itete	ge
 800c758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c75a:	89a3      	ldrhlt	r3, [r4, #12]
 800c75c:	181b      	addge	r3, r3, r0
 800c75e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c762:	bfac      	ite	ge
 800c764:	6563      	strge	r3, [r4, #84]	; 0x54
 800c766:	81a3      	strhlt	r3, [r4, #12]
 800c768:	bd10      	pop	{r4, pc}

0800c76a <__swrite>:
 800c76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c76e:	461f      	mov	r7, r3
 800c770:	898b      	ldrh	r3, [r1, #12]
 800c772:	4605      	mov	r5, r0
 800c774:	05db      	lsls	r3, r3, #23
 800c776:	460c      	mov	r4, r1
 800c778:	4616      	mov	r6, r2
 800c77a:	d505      	bpl.n	800c788 <__swrite+0x1e>
 800c77c:	2302      	movs	r3, #2
 800c77e:	2200      	movs	r2, #0
 800c780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c784:	f000 f8b8 	bl	800c8f8 <_lseek_r>
 800c788:	89a3      	ldrh	r3, [r4, #12]
 800c78a:	4632      	mov	r2, r6
 800c78c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c790:	81a3      	strh	r3, [r4, #12]
 800c792:	4628      	mov	r0, r5
 800c794:	463b      	mov	r3, r7
 800c796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c79a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c79e:	f000 b837 	b.w	800c810 <_write_r>

0800c7a2 <__sseek>:
 800c7a2:	b510      	push	{r4, lr}
 800c7a4:	460c      	mov	r4, r1
 800c7a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7aa:	f000 f8a5 	bl	800c8f8 <_lseek_r>
 800c7ae:	1c43      	adds	r3, r0, #1
 800c7b0:	89a3      	ldrh	r3, [r4, #12]
 800c7b2:	bf15      	itete	ne
 800c7b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7be:	81a3      	strheq	r3, [r4, #12]
 800c7c0:	bf18      	it	ne
 800c7c2:	81a3      	strhne	r3, [r4, #12]
 800c7c4:	bd10      	pop	{r4, pc}

0800c7c6 <__sclose>:
 800c7c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ca:	f000 b851 	b.w	800c870 <_close_r>

0800c7ce <strncmp>:
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	b510      	push	{r4, lr}
 800c7d2:	b172      	cbz	r2, 800c7f2 <strncmp+0x24>
 800c7d4:	3901      	subs	r1, #1
 800c7d6:	1884      	adds	r4, r0, r2
 800c7d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c7dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c7e0:	4290      	cmp	r0, r2
 800c7e2:	d101      	bne.n	800c7e8 <strncmp+0x1a>
 800c7e4:	42a3      	cmp	r3, r4
 800c7e6:	d101      	bne.n	800c7ec <strncmp+0x1e>
 800c7e8:	1a80      	subs	r0, r0, r2
 800c7ea:	bd10      	pop	{r4, pc}
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	d1f3      	bne.n	800c7d8 <strncmp+0xa>
 800c7f0:	e7fa      	b.n	800c7e8 <strncmp+0x1a>
 800c7f2:	4610      	mov	r0, r2
 800c7f4:	e7f9      	b.n	800c7ea <strncmp+0x1c>

0800c7f6 <__ascii_wctomb>:
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	4608      	mov	r0, r1
 800c7fa:	b141      	cbz	r1, 800c80e <__ascii_wctomb+0x18>
 800c7fc:	2aff      	cmp	r2, #255	; 0xff
 800c7fe:	d904      	bls.n	800c80a <__ascii_wctomb+0x14>
 800c800:	228a      	movs	r2, #138	; 0x8a
 800c802:	f04f 30ff 	mov.w	r0, #4294967295
 800c806:	601a      	str	r2, [r3, #0]
 800c808:	4770      	bx	lr
 800c80a:	2001      	movs	r0, #1
 800c80c:	700a      	strb	r2, [r1, #0]
 800c80e:	4770      	bx	lr

0800c810 <_write_r>:
 800c810:	b538      	push	{r3, r4, r5, lr}
 800c812:	4604      	mov	r4, r0
 800c814:	4608      	mov	r0, r1
 800c816:	4611      	mov	r1, r2
 800c818:	2200      	movs	r2, #0
 800c81a:	4d05      	ldr	r5, [pc, #20]	; (800c830 <_write_r+0x20>)
 800c81c:	602a      	str	r2, [r5, #0]
 800c81e:	461a      	mov	r2, r3
 800c820:	f7f9 ff5e 	bl	80066e0 <_write>
 800c824:	1c43      	adds	r3, r0, #1
 800c826:	d102      	bne.n	800c82e <_write_r+0x1e>
 800c828:	682b      	ldr	r3, [r5, #0]
 800c82a:	b103      	cbz	r3, 800c82e <_write_r+0x1e>
 800c82c:	6023      	str	r3, [r4, #0]
 800c82e:	bd38      	pop	{r3, r4, r5, pc}
 800c830:	20000524 	.word	0x20000524

0800c834 <__assert_func>:
 800c834:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c836:	4614      	mov	r4, r2
 800c838:	461a      	mov	r2, r3
 800c83a:	4b09      	ldr	r3, [pc, #36]	; (800c860 <__assert_func+0x2c>)
 800c83c:	4605      	mov	r5, r0
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	68d8      	ldr	r0, [r3, #12]
 800c842:	b14c      	cbz	r4, 800c858 <__assert_func+0x24>
 800c844:	4b07      	ldr	r3, [pc, #28]	; (800c864 <__assert_func+0x30>)
 800c846:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c84a:	9100      	str	r1, [sp, #0]
 800c84c:	462b      	mov	r3, r5
 800c84e:	4906      	ldr	r1, [pc, #24]	; (800c868 <__assert_func+0x34>)
 800c850:	f000 f81e 	bl	800c890 <fiprintf>
 800c854:	f000 fad4 	bl	800ce00 <abort>
 800c858:	4b04      	ldr	r3, [pc, #16]	; (800c86c <__assert_func+0x38>)
 800c85a:	461c      	mov	r4, r3
 800c85c:	e7f3      	b.n	800c846 <__assert_func+0x12>
 800c85e:	bf00      	nop
 800c860:	2000028c 	.word	0x2000028c
 800c864:	0800d61d 	.word	0x0800d61d
 800c868:	0800d62a 	.word	0x0800d62a
 800c86c:	0800d658 	.word	0x0800d658

0800c870 <_close_r>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	2300      	movs	r3, #0
 800c874:	4d05      	ldr	r5, [pc, #20]	; (800c88c <_close_r+0x1c>)
 800c876:	4604      	mov	r4, r0
 800c878:	4608      	mov	r0, r1
 800c87a:	602b      	str	r3, [r5, #0]
 800c87c:	f7f9 ff4c 	bl	8006718 <_close>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	d102      	bne.n	800c88a <_close_r+0x1a>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	b103      	cbz	r3, 800c88a <_close_r+0x1a>
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	bd38      	pop	{r3, r4, r5, pc}
 800c88c:	20000524 	.word	0x20000524

0800c890 <fiprintf>:
 800c890:	b40e      	push	{r1, r2, r3}
 800c892:	b503      	push	{r0, r1, lr}
 800c894:	4601      	mov	r1, r0
 800c896:	ab03      	add	r3, sp, #12
 800c898:	4805      	ldr	r0, [pc, #20]	; (800c8b0 <fiprintf+0x20>)
 800c89a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c89e:	6800      	ldr	r0, [r0, #0]
 800c8a0:	9301      	str	r3, [sp, #4]
 800c8a2:	f000 f8ab 	bl	800c9fc <_vfiprintf_r>
 800c8a6:	b002      	add	sp, #8
 800c8a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8ac:	b003      	add	sp, #12
 800c8ae:	4770      	bx	lr
 800c8b0:	2000028c 	.word	0x2000028c

0800c8b4 <_fstat_r>:
 800c8b4:	b538      	push	{r3, r4, r5, lr}
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	4d06      	ldr	r5, [pc, #24]	; (800c8d4 <_fstat_r+0x20>)
 800c8ba:	4604      	mov	r4, r0
 800c8bc:	4608      	mov	r0, r1
 800c8be:	4611      	mov	r1, r2
 800c8c0:	602b      	str	r3, [r5, #0]
 800c8c2:	f7f9 ff34 	bl	800672e <_fstat>
 800c8c6:	1c43      	adds	r3, r0, #1
 800c8c8:	d102      	bne.n	800c8d0 <_fstat_r+0x1c>
 800c8ca:	682b      	ldr	r3, [r5, #0]
 800c8cc:	b103      	cbz	r3, 800c8d0 <_fstat_r+0x1c>
 800c8ce:	6023      	str	r3, [r4, #0]
 800c8d0:	bd38      	pop	{r3, r4, r5, pc}
 800c8d2:	bf00      	nop
 800c8d4:	20000524 	.word	0x20000524

0800c8d8 <_isatty_r>:
 800c8d8:	b538      	push	{r3, r4, r5, lr}
 800c8da:	2300      	movs	r3, #0
 800c8dc:	4d05      	ldr	r5, [pc, #20]	; (800c8f4 <_isatty_r+0x1c>)
 800c8de:	4604      	mov	r4, r0
 800c8e0:	4608      	mov	r0, r1
 800c8e2:	602b      	str	r3, [r5, #0]
 800c8e4:	f7f9 ff32 	bl	800674c <_isatty>
 800c8e8:	1c43      	adds	r3, r0, #1
 800c8ea:	d102      	bne.n	800c8f2 <_isatty_r+0x1a>
 800c8ec:	682b      	ldr	r3, [r5, #0]
 800c8ee:	b103      	cbz	r3, 800c8f2 <_isatty_r+0x1a>
 800c8f0:	6023      	str	r3, [r4, #0]
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}
 800c8f4:	20000524 	.word	0x20000524

0800c8f8 <_lseek_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	4604      	mov	r4, r0
 800c8fc:	4608      	mov	r0, r1
 800c8fe:	4611      	mov	r1, r2
 800c900:	2200      	movs	r2, #0
 800c902:	4d05      	ldr	r5, [pc, #20]	; (800c918 <_lseek_r+0x20>)
 800c904:	602a      	str	r2, [r5, #0]
 800c906:	461a      	mov	r2, r3
 800c908:	f7f9 ff2a 	bl	8006760 <_lseek>
 800c90c:	1c43      	adds	r3, r0, #1
 800c90e:	d102      	bne.n	800c916 <_lseek_r+0x1e>
 800c910:	682b      	ldr	r3, [r5, #0]
 800c912:	b103      	cbz	r3, 800c916 <_lseek_r+0x1e>
 800c914:	6023      	str	r3, [r4, #0]
 800c916:	bd38      	pop	{r3, r4, r5, pc}
 800c918:	20000524 	.word	0x20000524

0800c91c <memmove>:
 800c91c:	4288      	cmp	r0, r1
 800c91e:	b510      	push	{r4, lr}
 800c920:	eb01 0402 	add.w	r4, r1, r2
 800c924:	d902      	bls.n	800c92c <memmove+0x10>
 800c926:	4284      	cmp	r4, r0
 800c928:	4623      	mov	r3, r4
 800c92a:	d807      	bhi.n	800c93c <memmove+0x20>
 800c92c:	1e43      	subs	r3, r0, #1
 800c92e:	42a1      	cmp	r1, r4
 800c930:	d008      	beq.n	800c944 <memmove+0x28>
 800c932:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c936:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c93a:	e7f8      	b.n	800c92e <memmove+0x12>
 800c93c:	4601      	mov	r1, r0
 800c93e:	4402      	add	r2, r0
 800c940:	428a      	cmp	r2, r1
 800c942:	d100      	bne.n	800c946 <memmove+0x2a>
 800c944:	bd10      	pop	{r4, pc}
 800c946:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c94a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c94e:	e7f7      	b.n	800c940 <memmove+0x24>

0800c950 <_realloc_r>:
 800c950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c954:	4680      	mov	r8, r0
 800c956:	4614      	mov	r4, r2
 800c958:	460e      	mov	r6, r1
 800c95a:	b921      	cbnz	r1, 800c966 <_realloc_r+0x16>
 800c95c:	4611      	mov	r1, r2
 800c95e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c962:	f7fb bf09 	b.w	8008778 <_malloc_r>
 800c966:	b92a      	cbnz	r2, 800c974 <_realloc_r+0x24>
 800c968:	f7fb fe9e 	bl	80086a8 <_free_r>
 800c96c:	4625      	mov	r5, r4
 800c96e:	4628      	mov	r0, r5
 800c970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c974:	f000 fa4b 	bl	800ce0e <_malloc_usable_size_r>
 800c978:	4284      	cmp	r4, r0
 800c97a:	4607      	mov	r7, r0
 800c97c:	d802      	bhi.n	800c984 <_realloc_r+0x34>
 800c97e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c982:	d812      	bhi.n	800c9aa <_realloc_r+0x5a>
 800c984:	4621      	mov	r1, r4
 800c986:	4640      	mov	r0, r8
 800c988:	f7fb fef6 	bl	8008778 <_malloc_r>
 800c98c:	4605      	mov	r5, r0
 800c98e:	2800      	cmp	r0, #0
 800c990:	d0ed      	beq.n	800c96e <_realloc_r+0x1e>
 800c992:	42bc      	cmp	r4, r7
 800c994:	4622      	mov	r2, r4
 800c996:	4631      	mov	r1, r6
 800c998:	bf28      	it	cs
 800c99a:	463a      	movcs	r2, r7
 800c99c:	f7fb fe5a 	bl	8008654 <memcpy>
 800c9a0:	4631      	mov	r1, r6
 800c9a2:	4640      	mov	r0, r8
 800c9a4:	f7fb fe80 	bl	80086a8 <_free_r>
 800c9a8:	e7e1      	b.n	800c96e <_realloc_r+0x1e>
 800c9aa:	4635      	mov	r5, r6
 800c9ac:	e7df      	b.n	800c96e <_realloc_r+0x1e>

0800c9ae <__sfputc_r>:
 800c9ae:	6893      	ldr	r3, [r2, #8]
 800c9b0:	b410      	push	{r4}
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	6093      	str	r3, [r2, #8]
 800c9b8:	da07      	bge.n	800c9ca <__sfputc_r+0x1c>
 800c9ba:	6994      	ldr	r4, [r2, #24]
 800c9bc:	42a3      	cmp	r3, r4
 800c9be:	db01      	blt.n	800c9c4 <__sfputc_r+0x16>
 800c9c0:	290a      	cmp	r1, #10
 800c9c2:	d102      	bne.n	800c9ca <__sfputc_r+0x1c>
 800c9c4:	bc10      	pop	{r4}
 800c9c6:	f000 b95b 	b.w	800cc80 <__swbuf_r>
 800c9ca:	6813      	ldr	r3, [r2, #0]
 800c9cc:	1c58      	adds	r0, r3, #1
 800c9ce:	6010      	str	r0, [r2, #0]
 800c9d0:	7019      	strb	r1, [r3, #0]
 800c9d2:	4608      	mov	r0, r1
 800c9d4:	bc10      	pop	{r4}
 800c9d6:	4770      	bx	lr

0800c9d8 <__sfputs_r>:
 800c9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9da:	4606      	mov	r6, r0
 800c9dc:	460f      	mov	r7, r1
 800c9de:	4614      	mov	r4, r2
 800c9e0:	18d5      	adds	r5, r2, r3
 800c9e2:	42ac      	cmp	r4, r5
 800c9e4:	d101      	bne.n	800c9ea <__sfputs_r+0x12>
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	e007      	b.n	800c9fa <__sfputs_r+0x22>
 800c9ea:	463a      	mov	r2, r7
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f2:	f7ff ffdc 	bl	800c9ae <__sfputc_r>
 800c9f6:	1c43      	adds	r3, r0, #1
 800c9f8:	d1f3      	bne.n	800c9e2 <__sfputs_r+0xa>
 800c9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9fc <_vfiprintf_r>:
 800c9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca00:	460d      	mov	r5, r1
 800ca02:	4614      	mov	r4, r2
 800ca04:	4698      	mov	r8, r3
 800ca06:	4606      	mov	r6, r0
 800ca08:	b09d      	sub	sp, #116	; 0x74
 800ca0a:	b118      	cbz	r0, 800ca14 <_vfiprintf_r+0x18>
 800ca0c:	6983      	ldr	r3, [r0, #24]
 800ca0e:	b90b      	cbnz	r3, 800ca14 <_vfiprintf_r+0x18>
 800ca10:	f7fe fbe6 	bl	800b1e0 <__sinit>
 800ca14:	4b89      	ldr	r3, [pc, #548]	; (800cc3c <_vfiprintf_r+0x240>)
 800ca16:	429d      	cmp	r5, r3
 800ca18:	d11b      	bne.n	800ca52 <_vfiprintf_r+0x56>
 800ca1a:	6875      	ldr	r5, [r6, #4]
 800ca1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca1e:	07d9      	lsls	r1, r3, #31
 800ca20:	d405      	bmi.n	800ca2e <_vfiprintf_r+0x32>
 800ca22:	89ab      	ldrh	r3, [r5, #12]
 800ca24:	059a      	lsls	r2, r3, #22
 800ca26:	d402      	bmi.n	800ca2e <_vfiprintf_r+0x32>
 800ca28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca2a:	f7fb fe08 	bl	800863e <__retarget_lock_acquire_recursive>
 800ca2e:	89ab      	ldrh	r3, [r5, #12]
 800ca30:	071b      	lsls	r3, r3, #28
 800ca32:	d501      	bpl.n	800ca38 <_vfiprintf_r+0x3c>
 800ca34:	692b      	ldr	r3, [r5, #16]
 800ca36:	b9eb      	cbnz	r3, 800ca74 <_vfiprintf_r+0x78>
 800ca38:	4629      	mov	r1, r5
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	f000 f972 	bl	800cd24 <__swsetup_r>
 800ca40:	b1c0      	cbz	r0, 800ca74 <_vfiprintf_r+0x78>
 800ca42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca44:	07dc      	lsls	r4, r3, #31
 800ca46:	d50e      	bpl.n	800ca66 <_vfiprintf_r+0x6a>
 800ca48:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4c:	b01d      	add	sp, #116	; 0x74
 800ca4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca52:	4b7b      	ldr	r3, [pc, #492]	; (800cc40 <_vfiprintf_r+0x244>)
 800ca54:	429d      	cmp	r5, r3
 800ca56:	d101      	bne.n	800ca5c <_vfiprintf_r+0x60>
 800ca58:	68b5      	ldr	r5, [r6, #8]
 800ca5a:	e7df      	b.n	800ca1c <_vfiprintf_r+0x20>
 800ca5c:	4b79      	ldr	r3, [pc, #484]	; (800cc44 <_vfiprintf_r+0x248>)
 800ca5e:	429d      	cmp	r5, r3
 800ca60:	bf08      	it	eq
 800ca62:	68f5      	ldreq	r5, [r6, #12]
 800ca64:	e7da      	b.n	800ca1c <_vfiprintf_r+0x20>
 800ca66:	89ab      	ldrh	r3, [r5, #12]
 800ca68:	0598      	lsls	r0, r3, #22
 800ca6a:	d4ed      	bmi.n	800ca48 <_vfiprintf_r+0x4c>
 800ca6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca6e:	f7fb fde7 	bl	8008640 <__retarget_lock_release_recursive>
 800ca72:	e7e9      	b.n	800ca48 <_vfiprintf_r+0x4c>
 800ca74:	2300      	movs	r3, #0
 800ca76:	9309      	str	r3, [sp, #36]	; 0x24
 800ca78:	2320      	movs	r3, #32
 800ca7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca7e:	2330      	movs	r3, #48	; 0x30
 800ca80:	f04f 0901 	mov.w	r9, #1
 800ca84:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca88:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800cc48 <_vfiprintf_r+0x24c>
 800ca8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca90:	4623      	mov	r3, r4
 800ca92:	469a      	mov	sl, r3
 800ca94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca98:	b10a      	cbz	r2, 800ca9e <_vfiprintf_r+0xa2>
 800ca9a:	2a25      	cmp	r2, #37	; 0x25
 800ca9c:	d1f9      	bne.n	800ca92 <_vfiprintf_r+0x96>
 800ca9e:	ebba 0b04 	subs.w	fp, sl, r4
 800caa2:	d00b      	beq.n	800cabc <_vfiprintf_r+0xc0>
 800caa4:	465b      	mov	r3, fp
 800caa6:	4622      	mov	r2, r4
 800caa8:	4629      	mov	r1, r5
 800caaa:	4630      	mov	r0, r6
 800caac:	f7ff ff94 	bl	800c9d8 <__sfputs_r>
 800cab0:	3001      	adds	r0, #1
 800cab2:	f000 80aa 	beq.w	800cc0a <_vfiprintf_r+0x20e>
 800cab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cab8:	445a      	add	r2, fp
 800caba:	9209      	str	r2, [sp, #36]	; 0x24
 800cabc:	f89a 3000 	ldrb.w	r3, [sl]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f000 80a2 	beq.w	800cc0a <_vfiprintf_r+0x20e>
 800cac6:	2300      	movs	r3, #0
 800cac8:	f04f 32ff 	mov.w	r2, #4294967295
 800cacc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cad0:	f10a 0a01 	add.w	sl, sl, #1
 800cad4:	9304      	str	r3, [sp, #16]
 800cad6:	9307      	str	r3, [sp, #28]
 800cad8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cadc:	931a      	str	r3, [sp, #104]	; 0x68
 800cade:	4654      	mov	r4, sl
 800cae0:	2205      	movs	r2, #5
 800cae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cae6:	4858      	ldr	r0, [pc, #352]	; (800cc48 <_vfiprintf_r+0x24c>)
 800cae8:	f7fe fffa 	bl	800bae0 <memchr>
 800caec:	9a04      	ldr	r2, [sp, #16]
 800caee:	b9d8      	cbnz	r0, 800cb28 <_vfiprintf_r+0x12c>
 800caf0:	06d1      	lsls	r1, r2, #27
 800caf2:	bf44      	itt	mi
 800caf4:	2320      	movmi	r3, #32
 800caf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cafa:	0713      	lsls	r3, r2, #28
 800cafc:	bf44      	itt	mi
 800cafe:	232b      	movmi	r3, #43	; 0x2b
 800cb00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb04:	f89a 3000 	ldrb.w	r3, [sl]
 800cb08:	2b2a      	cmp	r3, #42	; 0x2a
 800cb0a:	d015      	beq.n	800cb38 <_vfiprintf_r+0x13c>
 800cb0c:	4654      	mov	r4, sl
 800cb0e:	2000      	movs	r0, #0
 800cb10:	f04f 0c0a 	mov.w	ip, #10
 800cb14:	9a07      	ldr	r2, [sp, #28]
 800cb16:	4621      	mov	r1, r4
 800cb18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb1c:	3b30      	subs	r3, #48	; 0x30
 800cb1e:	2b09      	cmp	r3, #9
 800cb20:	d94e      	bls.n	800cbc0 <_vfiprintf_r+0x1c4>
 800cb22:	b1b0      	cbz	r0, 800cb52 <_vfiprintf_r+0x156>
 800cb24:	9207      	str	r2, [sp, #28]
 800cb26:	e014      	b.n	800cb52 <_vfiprintf_r+0x156>
 800cb28:	eba0 0308 	sub.w	r3, r0, r8
 800cb2c:	fa09 f303 	lsl.w	r3, r9, r3
 800cb30:	4313      	orrs	r3, r2
 800cb32:	46a2      	mov	sl, r4
 800cb34:	9304      	str	r3, [sp, #16]
 800cb36:	e7d2      	b.n	800cade <_vfiprintf_r+0xe2>
 800cb38:	9b03      	ldr	r3, [sp, #12]
 800cb3a:	1d19      	adds	r1, r3, #4
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	9103      	str	r1, [sp, #12]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	bfbb      	ittet	lt
 800cb44:	425b      	neglt	r3, r3
 800cb46:	f042 0202 	orrlt.w	r2, r2, #2
 800cb4a:	9307      	strge	r3, [sp, #28]
 800cb4c:	9307      	strlt	r3, [sp, #28]
 800cb4e:	bfb8      	it	lt
 800cb50:	9204      	strlt	r2, [sp, #16]
 800cb52:	7823      	ldrb	r3, [r4, #0]
 800cb54:	2b2e      	cmp	r3, #46	; 0x2e
 800cb56:	d10c      	bne.n	800cb72 <_vfiprintf_r+0x176>
 800cb58:	7863      	ldrb	r3, [r4, #1]
 800cb5a:	2b2a      	cmp	r3, #42	; 0x2a
 800cb5c:	d135      	bne.n	800cbca <_vfiprintf_r+0x1ce>
 800cb5e:	9b03      	ldr	r3, [sp, #12]
 800cb60:	3402      	adds	r4, #2
 800cb62:	1d1a      	adds	r2, r3, #4
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	9203      	str	r2, [sp, #12]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	bfb8      	it	lt
 800cb6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb70:	9305      	str	r3, [sp, #20]
 800cb72:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800cc4c <_vfiprintf_r+0x250>
 800cb76:	2203      	movs	r2, #3
 800cb78:	4650      	mov	r0, sl
 800cb7a:	7821      	ldrb	r1, [r4, #0]
 800cb7c:	f7fe ffb0 	bl	800bae0 <memchr>
 800cb80:	b140      	cbz	r0, 800cb94 <_vfiprintf_r+0x198>
 800cb82:	2340      	movs	r3, #64	; 0x40
 800cb84:	eba0 000a 	sub.w	r0, r0, sl
 800cb88:	fa03 f000 	lsl.w	r0, r3, r0
 800cb8c:	9b04      	ldr	r3, [sp, #16]
 800cb8e:	3401      	adds	r4, #1
 800cb90:	4303      	orrs	r3, r0
 800cb92:	9304      	str	r3, [sp, #16]
 800cb94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb98:	2206      	movs	r2, #6
 800cb9a:	482d      	ldr	r0, [pc, #180]	; (800cc50 <_vfiprintf_r+0x254>)
 800cb9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cba0:	f7fe ff9e 	bl	800bae0 <memchr>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d03f      	beq.n	800cc28 <_vfiprintf_r+0x22c>
 800cba8:	4b2a      	ldr	r3, [pc, #168]	; (800cc54 <_vfiprintf_r+0x258>)
 800cbaa:	bb1b      	cbnz	r3, 800cbf4 <_vfiprintf_r+0x1f8>
 800cbac:	9b03      	ldr	r3, [sp, #12]
 800cbae:	3307      	adds	r3, #7
 800cbb0:	f023 0307 	bic.w	r3, r3, #7
 800cbb4:	3308      	adds	r3, #8
 800cbb6:	9303      	str	r3, [sp, #12]
 800cbb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbba:	443b      	add	r3, r7
 800cbbc:	9309      	str	r3, [sp, #36]	; 0x24
 800cbbe:	e767      	b.n	800ca90 <_vfiprintf_r+0x94>
 800cbc0:	460c      	mov	r4, r1
 800cbc2:	2001      	movs	r0, #1
 800cbc4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbc8:	e7a5      	b.n	800cb16 <_vfiprintf_r+0x11a>
 800cbca:	2300      	movs	r3, #0
 800cbcc:	f04f 0c0a 	mov.w	ip, #10
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	3401      	adds	r4, #1
 800cbd4:	9305      	str	r3, [sp, #20]
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbdc:	3a30      	subs	r2, #48	; 0x30
 800cbde:	2a09      	cmp	r2, #9
 800cbe0:	d903      	bls.n	800cbea <_vfiprintf_r+0x1ee>
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d0c5      	beq.n	800cb72 <_vfiprintf_r+0x176>
 800cbe6:	9105      	str	r1, [sp, #20]
 800cbe8:	e7c3      	b.n	800cb72 <_vfiprintf_r+0x176>
 800cbea:	4604      	mov	r4, r0
 800cbec:	2301      	movs	r3, #1
 800cbee:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbf2:	e7f0      	b.n	800cbd6 <_vfiprintf_r+0x1da>
 800cbf4:	ab03      	add	r3, sp, #12
 800cbf6:	9300      	str	r3, [sp, #0]
 800cbf8:	462a      	mov	r2, r5
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	4b16      	ldr	r3, [pc, #88]	; (800cc58 <_vfiprintf_r+0x25c>)
 800cbfe:	a904      	add	r1, sp, #16
 800cc00:	f7fb fecc 	bl	800899c <_printf_float>
 800cc04:	4607      	mov	r7, r0
 800cc06:	1c78      	adds	r0, r7, #1
 800cc08:	d1d6      	bne.n	800cbb8 <_vfiprintf_r+0x1bc>
 800cc0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc0c:	07d9      	lsls	r1, r3, #31
 800cc0e:	d405      	bmi.n	800cc1c <_vfiprintf_r+0x220>
 800cc10:	89ab      	ldrh	r3, [r5, #12]
 800cc12:	059a      	lsls	r2, r3, #22
 800cc14:	d402      	bmi.n	800cc1c <_vfiprintf_r+0x220>
 800cc16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc18:	f7fb fd12 	bl	8008640 <__retarget_lock_release_recursive>
 800cc1c:	89ab      	ldrh	r3, [r5, #12]
 800cc1e:	065b      	lsls	r3, r3, #25
 800cc20:	f53f af12 	bmi.w	800ca48 <_vfiprintf_r+0x4c>
 800cc24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc26:	e711      	b.n	800ca4c <_vfiprintf_r+0x50>
 800cc28:	ab03      	add	r3, sp, #12
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	462a      	mov	r2, r5
 800cc2e:	4630      	mov	r0, r6
 800cc30:	4b09      	ldr	r3, [pc, #36]	; (800cc58 <_vfiprintf_r+0x25c>)
 800cc32:	a904      	add	r1, sp, #16
 800cc34:	f7fc f94e 	bl	8008ed4 <_printf_i>
 800cc38:	e7e4      	b.n	800cc04 <_vfiprintf_r+0x208>
 800cc3a:	bf00      	nop
 800cc3c:	0800d3f4 	.word	0x0800d3f4
 800cc40:	0800d414 	.word	0x0800d414
 800cc44:	0800d3d4 	.word	0x0800d3d4
 800cc48:	0800d60c 	.word	0x0800d60c
 800cc4c:	0800d612 	.word	0x0800d612
 800cc50:	0800d616 	.word	0x0800d616
 800cc54:	0800899d 	.word	0x0800899d
 800cc58:	0800c9d9 	.word	0x0800c9d9

0800cc5c <_read_r>:
 800cc5c:	b538      	push	{r3, r4, r5, lr}
 800cc5e:	4604      	mov	r4, r0
 800cc60:	4608      	mov	r0, r1
 800cc62:	4611      	mov	r1, r2
 800cc64:	2200      	movs	r2, #0
 800cc66:	4d05      	ldr	r5, [pc, #20]	; (800cc7c <_read_r+0x20>)
 800cc68:	602a      	str	r2, [r5, #0]
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	f7f9 fd1b 	bl	80066a6 <_read>
 800cc70:	1c43      	adds	r3, r0, #1
 800cc72:	d102      	bne.n	800cc7a <_read_r+0x1e>
 800cc74:	682b      	ldr	r3, [r5, #0]
 800cc76:	b103      	cbz	r3, 800cc7a <_read_r+0x1e>
 800cc78:	6023      	str	r3, [r4, #0]
 800cc7a:	bd38      	pop	{r3, r4, r5, pc}
 800cc7c:	20000524 	.word	0x20000524

0800cc80 <__swbuf_r>:
 800cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc82:	460e      	mov	r6, r1
 800cc84:	4614      	mov	r4, r2
 800cc86:	4605      	mov	r5, r0
 800cc88:	b118      	cbz	r0, 800cc92 <__swbuf_r+0x12>
 800cc8a:	6983      	ldr	r3, [r0, #24]
 800cc8c:	b90b      	cbnz	r3, 800cc92 <__swbuf_r+0x12>
 800cc8e:	f7fe faa7 	bl	800b1e0 <__sinit>
 800cc92:	4b21      	ldr	r3, [pc, #132]	; (800cd18 <__swbuf_r+0x98>)
 800cc94:	429c      	cmp	r4, r3
 800cc96:	d12b      	bne.n	800ccf0 <__swbuf_r+0x70>
 800cc98:	686c      	ldr	r4, [r5, #4]
 800cc9a:	69a3      	ldr	r3, [r4, #24]
 800cc9c:	60a3      	str	r3, [r4, #8]
 800cc9e:	89a3      	ldrh	r3, [r4, #12]
 800cca0:	071a      	lsls	r2, r3, #28
 800cca2:	d52f      	bpl.n	800cd04 <__swbuf_r+0x84>
 800cca4:	6923      	ldr	r3, [r4, #16]
 800cca6:	b36b      	cbz	r3, 800cd04 <__swbuf_r+0x84>
 800cca8:	6923      	ldr	r3, [r4, #16]
 800ccaa:	6820      	ldr	r0, [r4, #0]
 800ccac:	b2f6      	uxtb	r6, r6
 800ccae:	1ac0      	subs	r0, r0, r3
 800ccb0:	6963      	ldr	r3, [r4, #20]
 800ccb2:	4637      	mov	r7, r6
 800ccb4:	4283      	cmp	r3, r0
 800ccb6:	dc04      	bgt.n	800ccc2 <__swbuf_r+0x42>
 800ccb8:	4621      	mov	r1, r4
 800ccba:	4628      	mov	r0, r5
 800ccbc:	f7fe f9fc 	bl	800b0b8 <_fflush_r>
 800ccc0:	bb30      	cbnz	r0, 800cd10 <__swbuf_r+0x90>
 800ccc2:	68a3      	ldr	r3, [r4, #8]
 800ccc4:	3001      	adds	r0, #1
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	60a3      	str	r3, [r4, #8]
 800ccca:	6823      	ldr	r3, [r4, #0]
 800cccc:	1c5a      	adds	r2, r3, #1
 800ccce:	6022      	str	r2, [r4, #0]
 800ccd0:	701e      	strb	r6, [r3, #0]
 800ccd2:	6963      	ldr	r3, [r4, #20]
 800ccd4:	4283      	cmp	r3, r0
 800ccd6:	d004      	beq.n	800cce2 <__swbuf_r+0x62>
 800ccd8:	89a3      	ldrh	r3, [r4, #12]
 800ccda:	07db      	lsls	r3, r3, #31
 800ccdc:	d506      	bpl.n	800ccec <__swbuf_r+0x6c>
 800ccde:	2e0a      	cmp	r6, #10
 800cce0:	d104      	bne.n	800ccec <__swbuf_r+0x6c>
 800cce2:	4621      	mov	r1, r4
 800cce4:	4628      	mov	r0, r5
 800cce6:	f7fe f9e7 	bl	800b0b8 <_fflush_r>
 800ccea:	b988      	cbnz	r0, 800cd10 <__swbuf_r+0x90>
 800ccec:	4638      	mov	r0, r7
 800ccee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccf0:	4b0a      	ldr	r3, [pc, #40]	; (800cd1c <__swbuf_r+0x9c>)
 800ccf2:	429c      	cmp	r4, r3
 800ccf4:	d101      	bne.n	800ccfa <__swbuf_r+0x7a>
 800ccf6:	68ac      	ldr	r4, [r5, #8]
 800ccf8:	e7cf      	b.n	800cc9a <__swbuf_r+0x1a>
 800ccfa:	4b09      	ldr	r3, [pc, #36]	; (800cd20 <__swbuf_r+0xa0>)
 800ccfc:	429c      	cmp	r4, r3
 800ccfe:	bf08      	it	eq
 800cd00:	68ec      	ldreq	r4, [r5, #12]
 800cd02:	e7ca      	b.n	800cc9a <__swbuf_r+0x1a>
 800cd04:	4621      	mov	r1, r4
 800cd06:	4628      	mov	r0, r5
 800cd08:	f000 f80c 	bl	800cd24 <__swsetup_r>
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d0cb      	beq.n	800cca8 <__swbuf_r+0x28>
 800cd10:	f04f 37ff 	mov.w	r7, #4294967295
 800cd14:	e7ea      	b.n	800ccec <__swbuf_r+0x6c>
 800cd16:	bf00      	nop
 800cd18:	0800d3f4 	.word	0x0800d3f4
 800cd1c:	0800d414 	.word	0x0800d414
 800cd20:	0800d3d4 	.word	0x0800d3d4

0800cd24 <__swsetup_r>:
 800cd24:	4b32      	ldr	r3, [pc, #200]	; (800cdf0 <__swsetup_r+0xcc>)
 800cd26:	b570      	push	{r4, r5, r6, lr}
 800cd28:	681d      	ldr	r5, [r3, #0]
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	460c      	mov	r4, r1
 800cd2e:	b125      	cbz	r5, 800cd3a <__swsetup_r+0x16>
 800cd30:	69ab      	ldr	r3, [r5, #24]
 800cd32:	b913      	cbnz	r3, 800cd3a <__swsetup_r+0x16>
 800cd34:	4628      	mov	r0, r5
 800cd36:	f7fe fa53 	bl	800b1e0 <__sinit>
 800cd3a:	4b2e      	ldr	r3, [pc, #184]	; (800cdf4 <__swsetup_r+0xd0>)
 800cd3c:	429c      	cmp	r4, r3
 800cd3e:	d10f      	bne.n	800cd60 <__swsetup_r+0x3c>
 800cd40:	686c      	ldr	r4, [r5, #4]
 800cd42:	89a3      	ldrh	r3, [r4, #12]
 800cd44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd48:	0719      	lsls	r1, r3, #28
 800cd4a:	d42c      	bmi.n	800cda6 <__swsetup_r+0x82>
 800cd4c:	06dd      	lsls	r5, r3, #27
 800cd4e:	d411      	bmi.n	800cd74 <__swsetup_r+0x50>
 800cd50:	2309      	movs	r3, #9
 800cd52:	6033      	str	r3, [r6, #0]
 800cd54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd58:	f04f 30ff 	mov.w	r0, #4294967295
 800cd5c:	81a3      	strh	r3, [r4, #12]
 800cd5e:	e03e      	b.n	800cdde <__swsetup_r+0xba>
 800cd60:	4b25      	ldr	r3, [pc, #148]	; (800cdf8 <__swsetup_r+0xd4>)
 800cd62:	429c      	cmp	r4, r3
 800cd64:	d101      	bne.n	800cd6a <__swsetup_r+0x46>
 800cd66:	68ac      	ldr	r4, [r5, #8]
 800cd68:	e7eb      	b.n	800cd42 <__swsetup_r+0x1e>
 800cd6a:	4b24      	ldr	r3, [pc, #144]	; (800cdfc <__swsetup_r+0xd8>)
 800cd6c:	429c      	cmp	r4, r3
 800cd6e:	bf08      	it	eq
 800cd70:	68ec      	ldreq	r4, [r5, #12]
 800cd72:	e7e6      	b.n	800cd42 <__swsetup_r+0x1e>
 800cd74:	0758      	lsls	r0, r3, #29
 800cd76:	d512      	bpl.n	800cd9e <__swsetup_r+0x7a>
 800cd78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd7a:	b141      	cbz	r1, 800cd8e <__swsetup_r+0x6a>
 800cd7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd80:	4299      	cmp	r1, r3
 800cd82:	d002      	beq.n	800cd8a <__swsetup_r+0x66>
 800cd84:	4630      	mov	r0, r6
 800cd86:	f7fb fc8f 	bl	80086a8 <_free_r>
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	6363      	str	r3, [r4, #52]	; 0x34
 800cd8e:	89a3      	ldrh	r3, [r4, #12]
 800cd90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd94:	81a3      	strh	r3, [r4, #12]
 800cd96:	2300      	movs	r3, #0
 800cd98:	6063      	str	r3, [r4, #4]
 800cd9a:	6923      	ldr	r3, [r4, #16]
 800cd9c:	6023      	str	r3, [r4, #0]
 800cd9e:	89a3      	ldrh	r3, [r4, #12]
 800cda0:	f043 0308 	orr.w	r3, r3, #8
 800cda4:	81a3      	strh	r3, [r4, #12]
 800cda6:	6923      	ldr	r3, [r4, #16]
 800cda8:	b94b      	cbnz	r3, 800cdbe <__swsetup_r+0x9a>
 800cdaa:	89a3      	ldrh	r3, [r4, #12]
 800cdac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cdb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdb4:	d003      	beq.n	800cdbe <__swsetup_r+0x9a>
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	4630      	mov	r0, r6
 800cdba:	f7fe fe3f 	bl	800ba3c <__smakebuf_r>
 800cdbe:	89a0      	ldrh	r0, [r4, #12]
 800cdc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdc4:	f010 0301 	ands.w	r3, r0, #1
 800cdc8:	d00a      	beq.n	800cde0 <__swsetup_r+0xbc>
 800cdca:	2300      	movs	r3, #0
 800cdcc:	60a3      	str	r3, [r4, #8]
 800cdce:	6963      	ldr	r3, [r4, #20]
 800cdd0:	425b      	negs	r3, r3
 800cdd2:	61a3      	str	r3, [r4, #24]
 800cdd4:	6923      	ldr	r3, [r4, #16]
 800cdd6:	b943      	cbnz	r3, 800cdea <__swsetup_r+0xc6>
 800cdd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cddc:	d1ba      	bne.n	800cd54 <__swsetup_r+0x30>
 800cdde:	bd70      	pop	{r4, r5, r6, pc}
 800cde0:	0781      	lsls	r1, r0, #30
 800cde2:	bf58      	it	pl
 800cde4:	6963      	ldrpl	r3, [r4, #20]
 800cde6:	60a3      	str	r3, [r4, #8]
 800cde8:	e7f4      	b.n	800cdd4 <__swsetup_r+0xb0>
 800cdea:	2000      	movs	r0, #0
 800cdec:	e7f7      	b.n	800cdde <__swsetup_r+0xba>
 800cdee:	bf00      	nop
 800cdf0:	2000028c 	.word	0x2000028c
 800cdf4:	0800d3f4 	.word	0x0800d3f4
 800cdf8:	0800d414 	.word	0x0800d414
 800cdfc:	0800d3d4 	.word	0x0800d3d4

0800ce00 <abort>:
 800ce00:	2006      	movs	r0, #6
 800ce02:	b508      	push	{r3, lr}
 800ce04:	f000 f834 	bl	800ce70 <raise>
 800ce08:	2001      	movs	r0, #1
 800ce0a:	f7f9 fc42 	bl	8006692 <_exit>

0800ce0e <_malloc_usable_size_r>:
 800ce0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce12:	1f18      	subs	r0, r3, #4
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	bfbc      	itt	lt
 800ce18:	580b      	ldrlt	r3, [r1, r0]
 800ce1a:	18c0      	addlt	r0, r0, r3
 800ce1c:	4770      	bx	lr

0800ce1e <_raise_r>:
 800ce1e:	291f      	cmp	r1, #31
 800ce20:	b538      	push	{r3, r4, r5, lr}
 800ce22:	4604      	mov	r4, r0
 800ce24:	460d      	mov	r5, r1
 800ce26:	d904      	bls.n	800ce32 <_raise_r+0x14>
 800ce28:	2316      	movs	r3, #22
 800ce2a:	6003      	str	r3, [r0, #0]
 800ce2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce30:	bd38      	pop	{r3, r4, r5, pc}
 800ce32:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce34:	b112      	cbz	r2, 800ce3c <_raise_r+0x1e>
 800ce36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce3a:	b94b      	cbnz	r3, 800ce50 <_raise_r+0x32>
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	f000 f831 	bl	800cea4 <_getpid_r>
 800ce42:	462a      	mov	r2, r5
 800ce44:	4601      	mov	r1, r0
 800ce46:	4620      	mov	r0, r4
 800ce48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce4c:	f000 b818 	b.w	800ce80 <_kill_r>
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d00a      	beq.n	800ce6a <_raise_r+0x4c>
 800ce54:	1c59      	adds	r1, r3, #1
 800ce56:	d103      	bne.n	800ce60 <_raise_r+0x42>
 800ce58:	2316      	movs	r3, #22
 800ce5a:	6003      	str	r3, [r0, #0]
 800ce5c:	2001      	movs	r0, #1
 800ce5e:	e7e7      	b.n	800ce30 <_raise_r+0x12>
 800ce60:	2400      	movs	r4, #0
 800ce62:	4628      	mov	r0, r5
 800ce64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce68:	4798      	blx	r3
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	e7e0      	b.n	800ce30 <_raise_r+0x12>
	...

0800ce70 <raise>:
 800ce70:	4b02      	ldr	r3, [pc, #8]	; (800ce7c <raise+0xc>)
 800ce72:	4601      	mov	r1, r0
 800ce74:	6818      	ldr	r0, [r3, #0]
 800ce76:	f7ff bfd2 	b.w	800ce1e <_raise_r>
 800ce7a:	bf00      	nop
 800ce7c:	2000028c 	.word	0x2000028c

0800ce80 <_kill_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	2300      	movs	r3, #0
 800ce84:	4d06      	ldr	r5, [pc, #24]	; (800cea0 <_kill_r+0x20>)
 800ce86:	4604      	mov	r4, r0
 800ce88:	4608      	mov	r0, r1
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	602b      	str	r3, [r5, #0]
 800ce8e:	f7f9 fbf0 	bl	8006672 <_kill>
 800ce92:	1c43      	adds	r3, r0, #1
 800ce94:	d102      	bne.n	800ce9c <_kill_r+0x1c>
 800ce96:	682b      	ldr	r3, [r5, #0]
 800ce98:	b103      	cbz	r3, 800ce9c <_kill_r+0x1c>
 800ce9a:	6023      	str	r3, [r4, #0]
 800ce9c:	bd38      	pop	{r3, r4, r5, pc}
 800ce9e:	bf00      	nop
 800cea0:	20000524 	.word	0x20000524

0800cea4 <_getpid_r>:
 800cea4:	f7f9 bbde 	b.w	8006664 <_getpid>

0800cea8 <_init>:
 800cea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceaa:	bf00      	nop
 800ceac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceae:	bc08      	pop	{r3}
 800ceb0:	469e      	mov	lr, r3
 800ceb2:	4770      	bx	lr

0800ceb4 <_fini>:
 800ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb6:	bf00      	nop
 800ceb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceba:	bc08      	pop	{r3}
 800cebc:	469e      	mov	lr, r3
 800cebe:	4770      	bx	lr
