
kursach_c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008368  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08008474  08008474  00018474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086a4  080086a4  000202f0  2**0
                  CONTENTS
  4 .ARM          00000000  080086a4  080086a4  000202f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086a4  080086a4  000202f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086a4  080086a4  000186a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086a8  080086a8  000186a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  080086ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  200002f0  0800899c  000202f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  0800899c  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092b7  00000000  00000000  00020319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfd  00000000  00000000  000295d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0002b2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002ba70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fe4  00000000  00000000  0002c138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa1f  00000000  00000000  0004411c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083110  00000000  00000000  0004eb3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1c4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021b8  00000000  00000000  000d1c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002f0 	.word	0x200002f0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800845c 	.word	0x0800845c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002f4 	.word	0x200002f4
 8000148:	0800845c 	.word	0x0800845c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <do_algorithm>:
 *
 *  Created on: Nov 28, 2023
 *      Author: Pizza Delivery
 */
#include "algorithm_interface.h"
void do_algorithm(int algorithm_id) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b0b2      	sub	sp, #200	; 0xc8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	// hashing data with chosen algorithm
//	lcd_init();
//	int8_t *chosen_algorithm = "";

	lcd_clear();
 8000164:	f000 fb86 	bl	8000874 <lcd_clear>
	lcd_init();
 8000168:	f000 fa24 	bl	80005b4 <lcd_init>
	switch (algorithm_id) {
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2b02      	cmp	r3, #2
 8000170:	d019      	beq.n	80001a6 <do_algorithm+0x4a>
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2b02      	cmp	r3, #2
 8000176:	dc1e      	bgt.n	80001b6 <do_algorithm+0x5a>
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b00      	cmp	r3, #0
 800017c:	d003      	beq.n	8000186 <do_algorithm+0x2a>
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2b01      	cmp	r3, #1
 8000182:	d008      	beq.n	8000196 <do_algorithm+0x3a>
 8000184:	e017      	b.n	80001b6 <do_algorithm+0x5a>
		case 0:
//			chosen_algorithm = "You chose sha256";
			lcd_init();
 8000186:	f000 fa15 	bl	80005b4 <lcd_init>
			lcd_puts(0, 0, (int8_t*)"You chose sha256");
 800018a:	4ad7      	ldr	r2, [pc, #860]	; (80004e8 <do_algorithm+0x38c>)
 800018c:	2100      	movs	r1, #0
 800018e:	2000      	movs	r0, #0
 8000190:	f000 fb1e 	bl	80007d0 <lcd_puts>
			break;
 8000194:	e01f      	b.n	80001d6 <do_algorithm+0x7a>
		case 1:
//			chosen_algorithm = "You chose md5";
			lcd_init();
 8000196:	f000 fa0d 	bl	80005b4 <lcd_init>
			lcd_puts(0, 0, (int8_t*)"You chose md5");
 800019a:	4ad4      	ldr	r2, [pc, #848]	; (80004ec <do_algorithm+0x390>)
 800019c:	2100      	movs	r1, #0
 800019e:	2000      	movs	r0, #0
 80001a0:	f000 fb16 	bl	80007d0 <lcd_puts>
			break;
 80001a4:	e017      	b.n	80001d6 <do_algorithm+0x7a>
		case 2:
//			chosen_algorithm = "You chose crc16";
			lcd_init();
 80001a6:	f000 fa05 	bl	80005b4 <lcd_init>
			lcd_puts(0, 0, (int8_t*)"You chose crc16");
 80001aa:	4ad1      	ldr	r2, [pc, #836]	; (80004f0 <do_algorithm+0x394>)
 80001ac:	2100      	movs	r1, #0
 80001ae:	2000      	movs	r0, #0
 80001b0:	f000 fb0e 	bl	80007d0 <lcd_puts>
			break;
 80001b4:	e00f      	b.n	80001d6 <do_algorithm+0x7a>
		default:
			lcd_init();
 80001b6:	f000 f9fd 	bl	80005b4 <lcd_init>
			int8_t *error_msg = "Unexpected algorithm chosen";
 80001ba:	4bce      	ldr	r3, [pc, #824]	; (80004f4 <do_algorithm+0x398>)
 80001bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			lcd_puts(0, 0, (int8_t*) error_msg);
 80001c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80001c4:	2100      	movs	r1, #0
 80001c6:	2000      	movs	r0, #0
 80001c8:	f000 fb02 	bl	80007d0 <lcd_puts>
			HAL_Delay(1000);
 80001cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001d0:	f005 ff60 	bl	8006094 <HAL_Delay>
			break;
 80001d4:	bf00      	nop
	}

	HAL_Delay(1000);
 80001d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001da:	f005 ff5b 	bl	8006094 <HAL_Delay>

	lcd_clear();
 80001de:	f000 fb49 	bl	8000874 <lcd_clear>
//	lcd_init();
	lcd_puts(0, 0, (int8_t*)"Input data");
 80001e2:	4ac5      	ldr	r2, [pc, #788]	; (80004f8 <do_algorithm+0x39c>)
 80001e4:	2100      	movs	r1, #0
 80001e6:	2000      	movs	r0, #0
 80001e8:	f000 faf2 	bl	80007d0 <lcd_puts>
	HAL_Delay(1000);
 80001ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f0:	f005 ff50 	bl	8006094 <HAL_Delay>
//	HAL_UART_Receive_IT(&huart1,(uint8_t*) str,8);
//	HAL_UART_Transmit(&huart1, (uint8_t*)"hiiiiiiiii2i", strlen("hiiiiiii2ii"), 1000);

//	lcd_clear();
//	lcd_init();
	int is_reading_data = 1;
 80001f4:	2301      	movs	r3, #1
 80001f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	while (is_reading_data == 1) {
 80001fa:	e023      	b.n	8000244 <do_algorithm+0xe8>
		HAL_Delay(100);
 80001fc:	2064      	movs	r0, #100	; 0x64
 80001fe:	f005 ff49 	bl	8006094 <HAL_Delay>

		if(huart1.RxXferCount == 0)
 8000202:	4bbe      	ldr	r3, [pc, #760]	; (80004fc <do_algorithm+0x3a0>)
 8000204:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000206:	b29b      	uxth	r3, r3
 8000208:	2b00      	cmp	r3, #0
 800020a:	d11b      	bne.n	8000244 <do_algorithm+0xe8>
		{
			lcd_init();
 800020c:	f000 f9d2 	bl	80005b4 <lcd_init>
			HAL_Delay(1000);
 8000210:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000214:	f005 ff3e 	bl	8006094 <HAL_Delay>
			lcd_clear();
 8000218:	f000 fb2c 	bl	8000874 <lcd_clear>
			data[8] = 0;
 800021c:	2300      	movs	r3, #0
 800021e:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
			HAL_UART_Receive_IT(&huart1, (int8_t*)data, 8);
 8000222:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000226:	2208      	movs	r2, #8
 8000228:	4619      	mov	r1, r3
 800022a:	48b4      	ldr	r0, [pc, #720]	; (80004fc <do_algorithm+0x3a0>)
 800022c:	f006 ff2a 	bl	8007084 <HAL_UART_Receive_IT>
			lcd_init();
 8000230:	f000 f9c0 	bl	80005b4 <lcd_init>
			lcd_puts(0, 0, (int8_t*) data);
 8000234:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000238:	461a      	mov	r2, r3
 800023a:	2100      	movs	r1, #0
 800023c:	2000      	movs	r0, #0
 800023e:	f000 fac7 	bl	80007d0 <lcd_puts>
//			lcd_clear();
//			lcd_puts(0, 0, (uint8_t*)"hiii");
//				HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), 1000);
//				HAL_UART_AbortReceive(&huart1);
//			if (data != "") break;
			break;
 8000242:	e003      	b.n	800024c <do_algorithm+0xf0>
	while (is_reading_data == 1) {
 8000244:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000248:	2b01      	cmp	r3, #1
 800024a:	d0d7      	beq.n	80001fc <do_algorithm+0xa0>

//		if (data != "") is_reading_data = 0;
//			HAL_UART_AbortReceive(&huart1);
	}

	lcd_clear();
 800024c:	f000 fb12 	bl	8000874 <lcd_clear>
//	lcd_init();
	lcd_puts(0, 0, (int8_t*)"Your input is:");
 8000250:	4aab      	ldr	r2, [pc, #684]	; (8000500 <do_algorithm+0x3a4>)
 8000252:	2100      	movs	r1, #0
 8000254:	2000      	movs	r0, #0
 8000256:	f000 fabb 	bl	80007d0 <lcd_puts>

	HAL_Delay(500);
 800025a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800025e:	f005 ff19 	bl	8006094 <HAL_Delay>

	lcd_clear();
 8000262:	f000 fb07 	bl	8000874 <lcd_clear>
	lcd_init();
 8000266:	f000 f9a5 	bl	80005b4 <lcd_init>
	lcd_puts(0, 0, (int8_t*) data);
 800026a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800026e:	461a      	mov	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	2000      	movs	r0, #0
 8000274:	f000 faac 	bl	80007d0 <lcd_puts>

	HAL_Delay(1000);
 8000278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800027c:	f005 ff0a 	bl	8006094 <HAL_Delay>
//	uint8_t result;
	int8_t *result;
	int8_t *output;
	int j = 0, i = 0, k = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000286:	2300      	movs	r3, #0
 8000288:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800028c:	2300      	movs	r3, #0
 800028e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
//	lcd_clear();
	switch (algorithm_id) {
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2b02      	cmp	r3, #2
 8000296:	f000 80d5 	beq.w	8000444 <do_algorithm+0x2e8>
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b02      	cmp	r3, #2
 800029e:	f300 810f 	bgt.w	80004c0 <do_algorithm+0x364>
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d003      	beq.n	80002b0 <do_algorithm+0x154>
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d06e      	beq.n	800038c <do_algorithm+0x230>
 80002ae:	e107      	b.n	80004c0 <do_algorithm+0x364>
			case 0:
				// sha256
				lcd_clear();
 80002b0:	f000 fae0 	bl	8000874 <lcd_clear>
				lcd_init();
 80002b4:	f000 f97e 	bl	80005b4 <lcd_init>
				lcd_puts(0, 0, (uint8_t*)"Starting sha256");
 80002b8:	4a92      	ldr	r2, [pc, #584]	; (8000504 <do_algorithm+0x3a8>)
 80002ba:	2100      	movs	r1, #0
 80002bc:	2000      	movs	r0, #0
 80002be:	f000 fa87 	bl	80007d0 <lcd_puts>
//				result = md5_start(data);
				sha256_context foo;
				unsigned char hash[32];

				sha256_init (&foo);
 80002c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fe46 	bl	8000f58 <sha256_init>
				sha256_update(&foo, "abc", 3);
 80002cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002d0:	2203      	movs	r2, #3
 80002d2:	498d      	ldr	r1, [pc, #564]	; (8000508 <do_algorithm+0x3ac>)
 80002d4:	4618      	mov	r0, r3
 80002d6:	f005 fbe1 	bl	8005a9c <sha256_update>
				sha256_finish(&foo, hash);
 80002da:	f107 0208 	add.w	r2, r7, #8
 80002de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e2:	4611      	mov	r1, r2
 80002e4:	4618      	mov	r0, r3
 80002e6:	f005 fc41 	bl	8005b6c <sha256_finish>

				HAL_Delay(1000);
 80002ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ee:	f005 fed1 	bl	8006094 <HAL_Delay>
				lcd_clear();
 80002f2:	f000 fabf 	bl	8000874 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Result of sha256:");
 80002f6:	4a85      	ldr	r2, [pc, #532]	; (800050c <do_algorithm+0x3b0>)
 80002f8:	2100      	movs	r1, #0
 80002fa:	2000      	movs	r0, #0
 80002fc:	f000 fa68 	bl	80007d0 <lcd_puts>
				HAL_Delay(1000);
 8000300:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000304:	f005 fec6 	bl	8006094 <HAL_Delay>

				lcd_clear();
 8000308:	f000 fab4 	bl	8000874 <lcd_clear>

				while (k < 16) {
 800030c:	e02a      	b.n	8000364 <do_algorithm+0x208>
					sprintf(output, "%02x", hash[k]);
 800030e:	f107 0208 	add.w	r2, r7, #8
 8000312:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	461a      	mov	r2, r3
 800031c:	497c      	ldr	r1, [pc, #496]	; (8000510 <do_algorithm+0x3b4>)
 800031e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000322:	f007 fd1d 	bl	8007d60 <siprintf>
					if (i == 16) {
 8000326:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800032a:	2b10      	cmp	r3, #16
 800032c:	d105      	bne.n	800033a <do_algorithm+0x1de>
						i = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
						j = 1;
 8000334:	2301      	movs	r3, #1
 8000336:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
					}
					lcd_puts(j, i, (uint8_t*)output);
 800033a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800033e:	b25b      	sxtb	r3, r3
 8000340:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000344:	b251      	sxtb	r1, r2
 8000346:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800034a:	4618      	mov	r0, r3
 800034c:	f000 fa40 	bl	80007d0 <lcd_puts>
					++k;
 8000350:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000354:	3301      	adds	r3, #1
 8000356:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					i += 2;
 800035a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800035e:	3302      	adds	r3, #2
 8000360:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
				while (k < 16) {
 8000364:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000368:	2b0f      	cmp	r3, #15
 800036a:	ddd0      	ble.n	800030e <do_algorithm+0x1b2>
				}

				HAL_Delay(1000);
 800036c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000370:	f005 fe90 	bl	8006094 <HAL_Delay>
				lcd_clear();
 8000374:	f000 fa7e 	bl	8000874 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Finished sha256");
 8000378:	4a66      	ldr	r2, [pc, #408]	; (8000514 <do_algorithm+0x3b8>)
 800037a:	2100      	movs	r1, #0
 800037c:	2000      	movs	r0, #0
 800037e:	f000 fa27 	bl	80007d0 <lcd_puts>
				HAL_Delay(1000);
 8000382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000386:	f005 fe85 	bl	8006094 <HAL_Delay>
				break;
 800038a:	e0a9      	b.n	80004e0 <do_algorithm+0x384>
			case 1:
				// md5
				lcd_clear();
 800038c:	f000 fa72 	bl	8000874 <lcd_clear>
				lcd_init();
 8000390:	f000 f910 	bl	80005b4 <lcd_init>
				lcd_puts(0, 0, (uint8_t*)"Starting md5");
 8000394:	4a60      	ldr	r2, [pc, #384]	; (8000518 <do_algorithm+0x3bc>)
 8000396:	2100      	movs	r1, #0
 8000398:	2000      	movs	r0, #0
 800039a:	f000 fa19 	bl	80007d0 <lcd_puts>
				uint8_t md5_result[16];
				md5String("Hello World", md5_result);
 800039e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80003a2:	4619      	mov	r1, r3
 80003a4:	485d      	ldr	r0, [pc, #372]	; (800051c <do_algorithm+0x3c0>)
 80003a6:	f000 fdb1 	bl	8000f0c <md5String>

				HAL_Delay(1000);
 80003aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ae:	f005 fe71 	bl	8006094 <HAL_Delay>
				lcd_clear();
 80003b2:	f000 fa5f 	bl	8000874 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Result of md5:");
 80003b6:	4a5a      	ldr	r2, [pc, #360]	; (8000520 <do_algorithm+0x3c4>)
 80003b8:	2100      	movs	r1, #0
 80003ba:	2000      	movs	r0, #0
 80003bc:	f000 fa08 	bl	80007d0 <lcd_puts>
				HAL_Delay(1000);
 80003c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c4:	f005 fe66 	bl	8006094 <HAL_Delay>

				lcd_clear();
 80003c8:	f000 fa54 	bl	8000874 <lcd_clear>
				while (k < 16) {
 80003cc:	e02a      	b.n	8000424 <do_algorithm+0x2c8>
					sprintf(output, "%02x", md5_result[k]);
 80003ce:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80003d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80003d6:	4413      	add	r3, r2
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	461a      	mov	r2, r3
 80003dc:	494c      	ldr	r1, [pc, #304]	; (8000510 <do_algorithm+0x3b4>)
 80003de:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80003e2:	f007 fcbd 	bl	8007d60 <siprintf>
					if (i == 16) {
 80003e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80003ea:	2b10      	cmp	r3, #16
 80003ec:	d105      	bne.n	80003fa <do_algorithm+0x29e>
						i = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
						j = 1;
 80003f4:	2301      	movs	r3, #1
 80003f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
					}
					lcd_puts(j, i, (uint8_t*)output);
 80003fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80003fe:	b25b      	sxtb	r3, r3
 8000400:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000404:	b251      	sxtb	r1, r2
 8000406:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800040a:	4618      	mov	r0, r3
 800040c:	f000 f9e0 	bl	80007d0 <lcd_puts>
					++k;
 8000410:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000414:	3301      	adds	r3, #1
 8000416:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					i += 2;
 800041a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800041e:	3302      	adds	r3, #2
 8000420:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
				while (k < 16) {
 8000424:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000428:	2b0f      	cmp	r3, #15
 800042a:	ddd0      	ble.n	80003ce <do_algorithm+0x272>
				}

				HAL_Delay(1000);
 800042c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000430:	f005 fe30 	bl	8006094 <HAL_Delay>
				lcd_clear();
 8000434:	f000 fa1e 	bl	8000874 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Finished md5");
 8000438:	4a3a      	ldr	r2, [pc, #232]	; (8000524 <do_algorithm+0x3c8>)
 800043a:	2100      	movs	r1, #0
 800043c:	2000      	movs	r0, #0
 800043e:	f000 f9c7 	bl	80007d0 <lcd_puts>
				break;
 8000442:	e04d      	b.n	80004e0 <do_algorithm+0x384>
			case 2:
				// crc16

				lcd_clear();
 8000444:	f000 fa16 	bl	8000874 <lcd_clear>
				lcd_init();
 8000448:	f000 f8b4 	bl	80005b4 <lcd_init>
				lcd_puts(0, 0, (uint8_t*)"Starting crc16");
 800044c:	4a36      	ldr	r2, [pc, #216]	; (8000528 <do_algorithm+0x3cc>)
 800044e:	2100      	movs	r1, #0
 8000450:	2000      	movs	r0, #0
 8000452:	f000 f9bd 	bl	80007d0 <lcd_puts>
				result = crc16("Hello World", strlen("Hello World"));
 8000456:	210b      	movs	r1, #11
 8000458:	4830      	ldr	r0, [pc, #192]	; (800051c <do_algorithm+0x3c0>)
 800045a:	f000 f86f 	bl	800053c <crc16>
 800045e:	4603      	mov	r3, r0
 8000460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

				HAL_Delay(1000);
 8000464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000468:	f005 fe14 	bl	8006094 <HAL_Delay>
				lcd_clear();
 800046c:	f000 fa02 	bl	8000874 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Result of crc16:");
 8000470:	4a2e      	ldr	r2, [pc, #184]	; (800052c <do_algorithm+0x3d0>)
 8000472:	2100      	movs	r1, #0
 8000474:	2000      	movs	r0, #0
 8000476:	f000 f9ab 	bl	80007d0 <lcd_puts>
				HAL_Delay(1000);
 800047a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800047e:	f005 fe09 	bl	8006094 <HAL_Delay>

//				int8_t *output;
				sprintf(output, "%hX", result);
 8000482:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000486:	492a      	ldr	r1, [pc, #168]	; (8000530 <do_algorithm+0x3d4>)
 8000488:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800048c:	f007 fc68 	bl	8007d60 <siprintf>
				HAL_Delay(1000);
 8000490:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000494:	f005 fdfe 	bl	8006094 <HAL_Delay>
				lcd_clear();
 8000498:	f000 f9ec 	bl	8000874 <lcd_clear>
				lcd_puts(0, 0, output);
 800049c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80004a0:	2100      	movs	r1, #0
 80004a2:	2000      	movs	r0, #0
 80004a4:	f000 f994 	bl	80007d0 <lcd_puts>

				HAL_Delay(1000);
 80004a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ac:	f005 fdf2 	bl	8006094 <HAL_Delay>
				lcd_clear();
 80004b0:	f000 f9e0 	bl	8000874 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Finished crc16");
 80004b4:	4a1f      	ldr	r2, [pc, #124]	; (8000534 <do_algorithm+0x3d8>)
 80004b6:	2100      	movs	r1, #0
 80004b8:	2000      	movs	r0, #0
 80004ba:	f000 f989 	bl	80007d0 <lcd_puts>
				break;
 80004be:	e00f      	b.n	80004e0 <do_algorithm+0x384>
			default:
				lcd_init();
 80004c0:	f000 f878 	bl	80005b4 <lcd_init>
				int8_t *error_msg = "Unexpected error in algorithms\r\n";
 80004c4:	4b1c      	ldr	r3, [pc, #112]	; (8000538 <do_algorithm+0x3dc>)
 80004c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				lcd_puts(0, 0, (int8_t*) error_msg);
 80004ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80004ce:	2100      	movs	r1, #0
 80004d0:	2000      	movs	r0, #0
 80004d2:	f000 f97d 	bl	80007d0 <lcd_puts>
				HAL_Delay(1000);
 80004d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004da:	f005 fddb 	bl	8006094 <HAL_Delay>
				break;
 80004de:	bf00      	nop
		}
//	HAL_UART_Transmit(&huart1, (uint8_t*)result, strlen(result), 1000);
}
 80004e0:	bf00      	nop
 80004e2:	37c8      	adds	r7, #200	; 0xc8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	08008474 	.word	0x08008474
 80004ec:	08008488 	.word	0x08008488
 80004f0:	08008498 	.word	0x08008498
 80004f4:	080084a8 	.word	0x080084a8
 80004f8:	080084c4 	.word	0x080084c4
 80004fc:	2000030c 	.word	0x2000030c
 8000500:	080084d0 	.word	0x080084d0
 8000504:	080084e0 	.word	0x080084e0
 8000508:	080084f0 	.word	0x080084f0
 800050c:	080084f4 	.word	0x080084f4
 8000510:	08008508 	.word	0x08008508
 8000514:	08008510 	.word	0x08008510
 8000518:	08008520 	.word	0x08008520
 800051c:	08008530 	.word	0x08008530
 8000520:	0800853c 	.word	0x0800853c
 8000524:	0800854c 	.word	0x0800854c
 8000528:	0800855c 	.word	0x0800855c
 800052c:	0800856c 	.word	0x0800856c
 8000530:	08008580 	.word	0x08008580
 8000534:	08008584 	.word	0x08008584
 8000538:	08008594 	.word	0x08008594

0800053c <crc16>:
  Check : 0x29B1 ("123456789")
  MaxLen: 4095 байт (32767 бит) - обнаружение
    одинарных, двойных, тройных и всех нечетных ошибок
*/
unsigned short crc16(unsigned char *data, unsigned short len)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8000548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800054c:	81fb      	strh	r3, [r7, #14]
    unsigned char i;

    while (len--)
 800054e:	e025      	b.n	800059c <crc16+0x60>
    {
        crc ^= *data++ << 8;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	607a      	str	r2, [r7, #4]
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	021b      	lsls	r3, r3, #8
 800055a:	b21a      	sxth	r2, r3
 800055c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000560:	4053      	eors	r3, r2
 8000562:	b21b      	sxth	r3, r3
 8000564:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 8000566:	2300      	movs	r3, #0
 8000568:	737b      	strb	r3, [r7, #13]
 800056a:	e014      	b.n	8000596 <crc16+0x5a>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 800056c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000570:	2b00      	cmp	r3, #0
 8000572:	da09      	bge.n	8000588 <crc16+0x4c>
 8000574:	89fb      	ldrh	r3, [r7, #14]
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	b21b      	sxth	r3, r3
 800057a:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800057e:	f083 0301 	eor.w	r3, r3, #1
 8000582:	b21b      	sxth	r3, r3
 8000584:	b29b      	uxth	r3, r3
 8000586:	e002      	b.n	800058e <crc16+0x52>
 8000588:	89fb      	ldrh	r3, [r7, #14]
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	b29b      	uxth	r3, r3
 800058e:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 8000590:	7b7b      	ldrb	r3, [r7, #13]
 8000592:	3301      	adds	r3, #1
 8000594:	737b      	strb	r3, [r7, #13]
 8000596:	7b7b      	ldrb	r3, [r7, #13]
 8000598:	2b07      	cmp	r3, #7
 800059a:	d9e7      	bls.n	800056c <crc16+0x30>
    while (len--)
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	1e5a      	subs	r2, r3, #1
 80005a0:	807a      	strh	r2, [r7, #2]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1d4      	bne.n	8000550 <crc16+0x14>
    }
    return crc;
 80005a6:	89fb      	ldrh	r3, [r7, #14]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr
	...

080005b4 <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 80005b8:	201e      	movs	r0, #30
 80005ba:	f005 fd6b 	bl	8006094 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c4:	481c      	ldr	r0, [pc, #112]	; (8000638 <lcd_init+0x84>)
 80005c6:	f006 f8e4 	bl	8006792 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 80005ca:	2201      	movs	r2, #1
 80005cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d0:	4819      	ldr	r0, [pc, #100]	; (8000638 <lcd_init+0x84>)
 80005d2:	f006 f8de 	bl	8006792 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005dc:	4816      	ldr	r0, [pc, #88]	; (8000638 <lcd_init+0x84>)
 80005de:	f006 f8d8 	bl	8006792 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e8:	4813      	ldr	r0, [pc, #76]	; (8000638 <lcd_init+0x84>)
 80005ea:	f006 f8d2 	bl	8006792 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f4:	4810      	ldr	r0, [pc, #64]	; (8000638 <lcd_init+0x84>)
 80005f6:	f006 f8cc 	bl	8006792 <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <lcd_init+0x84>)
 8000602:	f006 f8c6 	bl	8006792 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060c:	480a      	ldr	r0, [pc, #40]	; (8000638 <lcd_init+0x84>)
 800060e:	f006 f8c0 	bl	8006792 <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 8000612:	2128      	movs	r1, #40	; 0x28
 8000614:	2000      	movs	r0, #0
 8000616:	f000 f811 	bl	800063c <lcd_write>
	lcd_write(0,0x0c);
 800061a:	210c      	movs	r1, #12
 800061c:	2000      	movs	r0, #0
 800061e:	f000 f80d 	bl	800063c <lcd_write>
	lcd_write(0,0x06);
 8000622:	2106      	movs	r1, #6
 8000624:	2000      	movs	r0, #0
 8000626:	f000 f809 	bl	800063c <lcd_write>
	lcd_write(0,0x01);
 800062a:	2101      	movs	r1, #1
 800062c:	2000      	movs	r0, #0
 800062e:	f000 f805 	bl	800063c <lcd_write>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40010c00 	.word	0x40010c00

0800063c <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(int8_t type, int8_t data)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(2);
 800064c:	2002      	movs	r0, #2
 800064e:	f005 fd21 	bl	8006094 <HAL_Delay>
	if(type)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d006      	beq.n	8000668 <lcd_write+0x2c>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000660:	485a      	ldr	r0, [pc, #360]	; (80007cc <lcd_write+0x190>)
 8000662:	f006 f896 	bl	8006792 <HAL_GPIO_WritePin>
 8000666:	e005      	b.n	8000674 <lcd_write+0x38>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800066e:	4857      	ldr	r0, [pc, #348]	; (80007cc <lcd_write+0x190>)
 8000670:	f006 f88f 	bl	8006792 <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 8000674:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000678:	2b00      	cmp	r3, #0
 800067a:	da06      	bge.n	800068a <lcd_write+0x4e>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000682:	4852      	ldr	r0, [pc, #328]	; (80007cc <lcd_write+0x190>)
 8000684:	f006 f885 	bl	8006792 <HAL_GPIO_WritePin>
 8000688:	e005      	b.n	8000696 <lcd_write+0x5a>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000690:	484e      	ldr	r0, [pc, #312]	; (80007cc <lcd_write+0x190>)
 8000692:	f006 f87e 	bl	8006792 <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800069c:	2b00      	cmp	r3, #0
 800069e:	d006      	beq.n	80006ae <lcd_write+0x72>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a6:	4849      	ldr	r0, [pc, #292]	; (80007cc <lcd_write+0x190>)
 80006a8:	f006 f873 	bl	8006792 <HAL_GPIO_WritePin>
 80006ac:	e005      	b.n	80006ba <lcd_write+0x7e>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b4:	4845      	ldr	r0, [pc, #276]	; (80007cc <lcd_write+0x190>)
 80006b6:	f006 f86c 	bl	8006792 <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 80006ba:	79bb      	ldrb	r3, [r7, #6]
 80006bc:	f003 0320 	and.w	r3, r3, #32
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d006      	beq.n	80006d2 <lcd_write+0x96>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ca:	4840      	ldr	r0, [pc, #256]	; (80007cc <lcd_write+0x190>)
 80006cc:	f006 f861 	bl	8006792 <HAL_GPIO_WritePin>
 80006d0:	e005      	b.n	80006de <lcd_write+0xa2>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d8:	483c      	ldr	r0, [pc, #240]	; (80007cc <lcd_write+0x190>)
 80006da:	f006 f85a 	bl	8006792 <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	f003 0310 	and.w	r3, r3, #16
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d006      	beq.n	80006f6 <lcd_write+0xba>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ee:	4837      	ldr	r0, [pc, #220]	; (80007cc <lcd_write+0x190>)
 80006f0:	f006 f84f 	bl	8006792 <HAL_GPIO_WritePin>
 80006f4:	e005      	b.n	8000702 <lcd_write+0xc6>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fc:	4833      	ldr	r0, [pc, #204]	; (80007cc <lcd_write+0x190>)
 80006fe:	f006 f848 	bl	8006792 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000708:	4830      	ldr	r0, [pc, #192]	; (80007cc <lcd_write+0x190>)
 800070a:	f006 f842 	bl	8006792 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000714:	482d      	ldr	r0, [pc, #180]	; (80007cc <lcd_write+0x190>)
 8000716:	f006 f83c 	bl	8006792 <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 800071a:	79bb      	ldrb	r3, [r7, #6]
 800071c:	f003 0308 	and.w	r3, r3, #8
 8000720:	2b00      	cmp	r3, #0
 8000722:	d006      	beq.n	8000732 <lcd_write+0xf6>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072a:	4828      	ldr	r0, [pc, #160]	; (80007cc <lcd_write+0x190>)
 800072c:	f006 f831 	bl	8006792 <HAL_GPIO_WritePin>
 8000730:	e005      	b.n	800073e <lcd_write+0x102>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000738:	4824      	ldr	r0, [pc, #144]	; (80007cc <lcd_write+0x190>)
 800073a:	f006 f82a 	bl	8006792 <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	f003 0304 	and.w	r3, r3, #4
 8000744:	2b00      	cmp	r3, #0
 8000746:	d006      	beq.n	8000756 <lcd_write+0x11a>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800074e:	481f      	ldr	r0, [pc, #124]	; (80007cc <lcd_write+0x190>)
 8000750:	f006 f81f 	bl	8006792 <HAL_GPIO_WritePin>
 8000754:	e005      	b.n	8000762 <lcd_write+0x126>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800075c:	481b      	ldr	r0, [pc, #108]	; (80007cc <lcd_write+0x190>)
 800075e:	f006 f818 	bl	8006792 <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 8000762:	79bb      	ldrb	r3, [r7, #6]
 8000764:	f003 0302 	and.w	r3, r3, #2
 8000768:	2b00      	cmp	r3, #0
 800076a:	d006      	beq.n	800077a <lcd_write+0x13e>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000772:	4816      	ldr	r0, [pc, #88]	; (80007cc <lcd_write+0x190>)
 8000774:	f006 f80d 	bl	8006792 <HAL_GPIO_WritePin>
 8000778:	e005      	b.n	8000786 <lcd_write+0x14a>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000780:	4812      	ldr	r0, [pc, #72]	; (80007cc <lcd_write+0x190>)
 8000782:	f006 f806 	bl	8006792 <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 8000786:	79bb      	ldrb	r3, [r7, #6]
 8000788:	f003 0301 	and.w	r3, r3, #1
 800078c:	2b00      	cmp	r3, #0
 800078e:	d006      	beq.n	800079e <lcd_write+0x162>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000796:	480d      	ldr	r0, [pc, #52]	; (80007cc <lcd_write+0x190>)
 8000798:	f005 fffb 	bl	8006792 <HAL_GPIO_WritePin>
 800079c:	e005      	b.n	80007aa <lcd_write+0x16e>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <lcd_write+0x190>)
 80007a6:	f005 fff4 	bl	8006792 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <lcd_write+0x190>)
 80007b2:	f005 ffee 	bl	8006792 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <lcd_write+0x190>)
 80007be:	f005 ffe8 	bl	8006792 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40010c00 	.word	0x40010c00

080007d0 <lcd_puts>:

void lcd_puts(int8_t x, int8_t y, int8_t *string)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	603a      	str	r2, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
 80007dc:	460b      	mov	r3, r1
 80007de:	71bb      	strb	r3, [r7, #6]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	d83a      	bhi.n	800085e <lcd_puts+0x8e>
 80007e8:	a201      	add	r2, pc, #4	; (adr r2, 80007f0 <lcd_puts+0x20>)
 80007ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ee:	bf00      	nop
 80007f0:	08000801 	.word	0x08000801
 80007f4:	08000813 	.word	0x08000813
 80007f8:	08000825 	.word	0x08000825
 80007fc:	08000837 	.word	0x08000837
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 8000800:	79bb      	ldrb	r3, [r7, #6]
 8000802:	3b80      	subs	r3, #128	; 0x80
 8000804:	b2db      	uxtb	r3, r3
 8000806:	b25b      	sxtb	r3, r3
 8000808:	4619      	mov	r1, r3
 800080a:	2000      	movs	r0, #0
 800080c:	f7ff ff16 	bl	800063c <lcd_write>
			break;
 8000810:	e01a      	b.n	8000848 <lcd_puts+0x78>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	3b40      	subs	r3, #64	; 0x40
 8000816:	b2db      	uxtb	r3, r3
 8000818:	b25b      	sxtb	r3, r3
 800081a:	4619      	mov	r1, r3
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff ff0d 	bl	800063c <lcd_write>
			break;
 8000822:	e011      	b.n	8000848 <lcd_puts+0x78>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	3b70      	subs	r3, #112	; 0x70
 8000828:	b2db      	uxtb	r3, r3
 800082a:	b25b      	sxtb	r3, r3
 800082c:	4619      	mov	r1, r3
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff ff04 	bl	800063c <lcd_write>
			break;
 8000834:	e008      	b.n	8000848 <lcd_puts+0x78>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	3b30      	subs	r3, #48	; 0x30
 800083a:	b2db      	uxtb	r3, r3
 800083c:	b25b      	sxtb	r3, r3
 800083e:	4619      	mov	r1, r3
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff fefb 	bl	800063c <lcd_write>
			break;
 8000846:	bf00      	nop
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 8000848:	e009      	b.n	800085e <lcd_puts+0x8e>
	{
		lcd_write(1,*string);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	f993 3000 	ldrsb.w	r3, [r3]
 8000850:	4619      	mov	r1, r3
 8000852:	2001      	movs	r0, #1
 8000854:	f7ff fef2 	bl	800063c <lcd_write>
		string++;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	603b      	str	r3, [r7, #0]
	while(*string)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	f993 3000 	ldrsb.w	r3, [r3]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1f0      	bne.n	800084a <lcd_puts+0x7a>
	}
}
 8000868:	bf00      	nop
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop

08000874 <lcd_clear>:
void lcd_clear(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 8000878:	2101      	movs	r1, #1
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff fede 	bl	800063c <lcd_write>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <chosen_algorithm>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int8_t* chosen_algorithm(int id) {
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	switch (id) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b02      	cmp	r3, #2
 8000890:	d00d      	beq.n	80008ae <chosen_algorithm+0x2a>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b02      	cmp	r3, #2
 8000896:	dc0c      	bgt.n	80008b2 <chosen_algorithm+0x2e>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <chosen_algorithm+0x22>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d002      	beq.n	80008aa <chosen_algorithm+0x26>
 80008a4:	e005      	b.n	80008b2 <chosen_algorithm+0x2e>
		case 0:
			return "sha256";
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <chosen_algorithm+0x3c>)
 80008a8:	e004      	b.n	80008b4 <chosen_algorithm+0x30>
		case 1:
			return "md5";
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <chosen_algorithm+0x40>)
 80008ac:	e002      	b.n	80008b4 <chosen_algorithm+0x30>
		case 2:
			return "crc16";
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <chosen_algorithm+0x44>)
 80008b0:	e000      	b.n	80008b4 <chosen_algorithm+0x30>
		default:
			return "Invalid algorithm";
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <chosen_algorithm+0x48>)
			break;
	}
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	080085bc 	.word	0x080085bc
 80008c4:	080085c4 	.word	0x080085c4
 80008c8:	080085c8 	.word	0x080085c8
 80008cc:	080085d0 	.word	0x080085d0

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f005 fb7b 	bl	8005fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008da:	f000 f859 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008de:	f000 f8bd 	bl	8000a5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008e2:	f000 f891 	bl	8000a08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  int8_t *output, data;
  int alg_id = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
  lcd_init();
 80008ea:	f7ff fe63 	bl	80005b4 <lcd_init>

    /* USER CODE BEGIN 3 */
	  /* scrolling through algorithms
	  			ids: 0 - sha, 1 - md, 2 - crc
	  	  */
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 80008ee:	2108      	movs	r1, #8
 80008f0:	4826      	ldr	r0, [pc, #152]	; (800098c <main+0xbc>)
 80008f2:	f005 ff37 	bl	8006764 <HAL_GPIO_ReadPin>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d10b      	bne.n	8000914 <main+0x44>
		  if (alg_id < 2) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	dc03      	bgt.n	800090a <main+0x3a>
			  alg_id++;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3301      	adds	r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	e001      	b.n	800090e <main+0x3e>
		  } else {
			  alg_id = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
		  }
		  lcd_clear();
 800090e:	f7ff ffb1 	bl	8000874 <lcd_clear>
 8000912:	e02d      	b.n	8000970 <main+0xa0>
	  } else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1) {
 8000914:	2104      	movs	r1, #4
 8000916:	481d      	ldr	r0, [pc, #116]	; (800098c <main+0xbc>)
 8000918:	f005 ff24 	bl	8006764 <HAL_GPIO_ReadPin>
 800091c:	4603      	mov	r3, r0
 800091e:	2b01      	cmp	r3, #1
 8000920:	d10b      	bne.n	800093a <main+0x6a>
		  if (alg_id > 0) {
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b00      	cmp	r3, #0
 8000926:	dd03      	ble.n	8000930 <main+0x60>
			  alg_id--;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	e001      	b.n	8000934 <main+0x64>
		  } else {
			  alg_id = 2;
 8000930:	2302      	movs	r3, #2
 8000932:	607b      	str	r3, [r7, #4]
		  }
		  lcd_clear();
 8000934:	f7ff ff9e 	bl	8000874 <lcd_clear>
 8000938:	e01a      	b.n	8000970 <main+0xa0>
	  } else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) {
 800093a:	2102      	movs	r1, #2
 800093c:	4813      	ldr	r0, [pc, #76]	; (800098c <main+0xbc>)
 800093e:	f005 ff11 	bl	8006764 <HAL_GPIO_ReadPin>
 8000942:	4603      	mov	r3, r0
 8000944:	2b01      	cmp	r3, #1
 8000946:	d113      	bne.n	8000970 <main+0xa0>
		  lcd_clear();
 8000948:	f7ff ff94 	bl	8000874 <lcd_clear>
		  output = chosen_algorithm(alg_id);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ff99 	bl	8000884 <chosen_algorithm>
 8000952:	6038      	str	r0, [r7, #0]
		  lcd_puts(0, 0, (int8_t*) output);
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	2100      	movs	r1, #0
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff ff39 	bl	80007d0 <lcd_puts>
		  lcd_clear();
 800095e:	f7ff ff89 	bl	8000874 <lcd_clear>
		  do_algorithm(alg_id);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff fbfa 	bl	800015c <do_algorithm>
		  HAL_Delay(50000);
 8000968:	f24c 3050 	movw	r0, #50000	; 0xc350
 800096c:	f005 fb92 	bl	8006094 <HAL_Delay>
	  }


	  output = chosen_algorithm(alg_id);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ff87 	bl	8000884 <chosen_algorithm>
 8000976:	6038      	str	r0, [r7, #0]
	  lcd_puts(0, 0, (int8_t*) output);
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	2100      	movs	r1, #0
 800097c:	2000      	movs	r0, #0
 800097e:	f7ff ff27 	bl	80007d0 <lcd_puts>
	  HAL_Delay(500);
 8000982:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000986:	f005 fb85 	bl	8006094 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 800098a:	e7b0      	b.n	80008ee <main+0x1e>
 800098c:	40010800 	.word	0x40010800

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b090      	sub	sp, #64	; 0x40
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0318 	add.w	r3, r7, #24
 800099a:	2228      	movs	r2, #40	; 0x28
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f007 f8ea 	bl	8007b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b2:	2302      	movs	r3, #2
 80009b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b6:	2301      	movs	r3, #1
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ba:	2310      	movs	r3, #16
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009be:	2300      	movs	r3, #0
 80009c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	4618      	mov	r0, r3
 80009c8:	f005 fefc 	bl	80067c4 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009d2:	f000 f883 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f006 f96a 	bl	8006cc8 <HAL_RCC_ClockConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009fa:	f000 f86f 	bl	8000adc <Error_Handler>
  }
}
 80009fe:	bf00      	nop
 8000a00:	3740      	adds	r7, #64	; 0x40
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a40:	f006 fad0 	bl	8006fe4 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a4a:	f000 f847 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000030c 	.word	0x2000030c
 8000a58:	40013800 	.word	0x40013800

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_GPIO_Init+0x78>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <MX_GPIO_Init+0x78>)
 8000a76:	f043 0308 	orr.w	r3, r3, #8
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_GPIO_Init+0x78>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_GPIO_Init+0x78>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a11      	ldr	r2, [pc, #68]	; (8000ad4 <MX_GPIO_Init+0x78>)
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_GPIO_Init+0x78>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000aa6:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <MX_GPIO_Init+0x7c>)
 8000aa8:	f005 fe73 	bl	8006792 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000aac:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000ab0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2302      	movs	r3, #2
 8000abc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_GPIO_Init+0x7c>)
 8000ac6:	f005 fcc9 	bl	800645c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010c00 	.word	0x40010c00

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>

08000ae6 <rotateLeft>:
#define I(X, Y, Z) (Y ^ (X | ~Z))

/*
 * Rotates a 32-bit word left by n bits
 */
uint32_t rotateLeft(uint32_t x, uint32_t n){
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
    return (x << n) | (x >> (32 - n));
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	f1c3 0320 	rsb	r3, r3, #32
 8000af8:	fa62 f303 	ror.w	r3, r2, r3
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
	...

08000b08 <md5Init>:


/*
 * Initialize a context
 */
void md5Init(MD5Context *ctx){
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
    ctx->size = (uint64_t)0;
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	f04f 0300 	mov.w	r3, #0
 8000b1a:	e9c1 2300 	strd	r2, r3, [r1]

    ctx->buffer[0] = (uint32_t)A;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <md5Init+0x38>)
 8000b22:	609a      	str	r2, [r3, #8]
    ctx->buffer[1] = (uint32_t)B;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <md5Init+0x3c>)
 8000b28:	60da      	str	r2, [r3, #12]
    ctx->buffer[2] = (uint32_t)C;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <md5Init+0x40>)
 8000b2e:	611a      	str	r2, [r3, #16]
    ctx->buffer[3] = (uint32_t)D;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <md5Init+0x44>)
 8000b34:	615a      	str	r2, [r3, #20]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	67452301 	.word	0x67452301
 8000b44:	efcdab89 	.word	0xefcdab89
 8000b48:	98badcfe 	.word	0x98badcfe
 8000b4c:	10325476 	.word	0x10325476

08000b50 <md5Update>:
 * Add some amount of input to the context
 *
 * If the input fills out a block of 512 bits, apply the algorithm (md5Step)
 * and save the result in the buffer. Also updates the overall size.
 */
void md5Update(MD5Context *ctx, uint8_t *input_buffer, size_t input_len){
 8000b50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b54:	b098      	sub	sp, #96	; 0x60
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
    uint32_t input[16];
    unsigned int offset = ctx->size % 64;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b64:	4613      	mov	r3, r2
 8000b66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    ctx->size += (uint64_t)input_len;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	2000      	movs	r0, #0
 8000b76:	460c      	mov	r4, r1
 8000b78:	4605      	mov	r5, r0
 8000b7a:	eb12 0804 	adds.w	r8, r2, r4
 8000b7e:	eb43 0905 	adc.w	r9, r3, r5
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	e9c3 8900 	strd	r8, r9, [r3]

    // Copy each byte in input_buffer into the next space in our context input
    for(unsigned int i = 0; i < input_len; ++i){
 8000b88:	2300      	movs	r3, #0
 8000b8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b8c:	e048      	b.n	8000c20 <md5Update+0xd0>
        ctx->input[offset++] = (uint8_t)*(input_buffer + i);
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b92:	441a      	add	r2, r3
 8000b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b96:	1c59      	adds	r1, r3, #1
 8000b98:	65f9      	str	r1, [r7, #92]	; 0x5c
 8000b9a:	7811      	ldrb	r1, [r2, #0]
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	460a      	mov	r2, r1
 8000ba2:	761a      	strb	r2, [r3, #24]

        // If we've filled our context input, copy it into our local array input
        // then reset the offset to 0 and fill in a new buffer.
        // Every time we fill out a chunk, we run it through the algorithm
        // to enable some back and forth between cpu and i/o
        if(offset % 64 == 0){
 8000ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ba6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d135      	bne.n	8000c1a <md5Update+0xca>
            for(unsigned int j = 0; j < 16; ++j){
 8000bae:	2300      	movs	r3, #0
 8000bb0:	657b      	str	r3, [r7, #84]	; 0x54
 8000bb2:	e025      	b.n	8000c00 <md5Update+0xb0>
                // Convert to little-endian
                // The local variable `input` our 512-bit chunk separated into 32-bit words
                // we can use in calculations
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8000bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	3303      	adds	r3, #3
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	7e1b      	ldrb	r3, [r3, #24]
 8000bc0:	061a      	lsls	r2, r3, #24
                           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8000bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	3302      	adds	r3, #2
 8000bc8:	68f9      	ldr	r1, [r7, #12]
 8000bca:	440b      	add	r3, r1
 8000bcc:	7e1b      	ldrb	r3, [r3, #24]
 8000bce:	041b      	lsls	r3, r3, #16
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8000bd0:	431a      	orrs	r2, r3
                           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8000bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	68f9      	ldr	r1, [r7, #12]
 8000bda:	440b      	add	r3, r1
 8000bdc:	7e1b      	ldrb	r3, [r3, #24]
 8000bde:	021b      	lsls	r3, r3, #8
                           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8000be0:	4313      	orrs	r3, r2
                           (uint32_t)(ctx->input[(j * 4)]);
 8000be2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000be4:	0092      	lsls	r2, r2, #2
 8000be6:	68f9      	ldr	r1, [r7, #12]
 8000be8:	440a      	add	r2, r1
 8000bea:	7e12      	ldrb	r2, [r2, #24]
                           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8000bec:	431a      	orrs	r2, r3
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8000bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	3360      	adds	r3, #96	; 0x60
 8000bf4:	443b      	add	r3, r7
 8000bf6:	f843 2c4c 	str.w	r2, [r3, #-76]
            for(unsigned int j = 0; j < 16; ++j){
 8000bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	657b      	str	r3, [r7, #84]	; 0x54
 8000c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	d9d6      	bls.n	8000bb4 <md5Update+0x64>
            }
            md5Step(ctx->buffer, input);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	3308      	adds	r3, #8
 8000c0a:	f107 0214 	add.w	r2, r7, #20
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 f8d1 	bl	8000db8 <md5Step>
            offset = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(unsigned int i = 0; i < input_len; ++i){
 8000c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d3b2      	bcc.n	8000b8e <md5Update+0x3e>
        }
    }
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3760      	adds	r7, #96	; 0x60
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000c34 <md5Finalize>:

/*
 * Pad the current input to get to 448 bytes, append the size in bits to the very end,
 * and save the result of the final iteration into digest.
 */
void md5Finalize(MD5Context *ctx){
 8000c34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c38:	b096      	sub	sp, #88	; 0x58
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
    uint32_t input[16];
    unsigned int offset = ctx->size % 64;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c44:	4613      	mov	r3, r2
 8000c46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    unsigned int padding_length = offset < 56 ? 56 - offset : (56 + 64) - offset;
 8000c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c4e:	2b37      	cmp	r3, #55	; 0x37
 8000c50:	d803      	bhi.n	8000c5a <md5Finalize+0x26>
 8000c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c54:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8000c58:	e002      	b.n	8000c60 <md5Finalize+0x2c>
 8000c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c5c:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8000c60:	64bb      	str	r3, [r7, #72]	; 0x48

    // Fill in the padding and undo the changes to size that resulted from the update
    md5Update(ctx, PADDING, padding_length);
 8000c62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c64:	4953      	ldr	r1, [pc, #332]	; (8000db4 <md5Finalize+0x180>)
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ff72 	bl	8000b50 <md5Update>
    ctx->size -= (uint64_t)padding_length;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c72:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000c74:	2000      	movs	r0, #0
 8000c76:	460c      	mov	r4, r1
 8000c78:	4605      	mov	r5, r0
 8000c7a:	ebb2 0804 	subs.w	r8, r2, r4
 8000c7e:	eb63 0905 	sbc.w	r9, r3, r5
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	e9c3 8900 	strd	r8, r9, [r3]

    // Do a final update (internal to this function)
    // Last two 32-bit words are the two halves of the size (converted from bytes to bits)
    for(unsigned int j = 0; j < 14; ++j){
 8000c88:	2300      	movs	r3, #0
 8000c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8000c8c:	e025      	b.n	8000cda <md5Finalize+0xa6>
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8000c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	3303      	adds	r3, #3
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	4413      	add	r3, r2
 8000c98:	7e1b      	ldrb	r3, [r3, #24]
 8000c9a:	061a      	lsls	r2, r3, #24
                   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8000c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	440b      	add	r3, r1
 8000ca6:	7e1b      	ldrb	r3, [r3, #24]
 8000ca8:	041b      	lsls	r3, r3, #16
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8000caa:	431a      	orrs	r2, r3
                   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8000cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	440b      	add	r3, r1
 8000cb6:	7e1b      	ldrb	r3, [r3, #24]
 8000cb8:	021b      	lsls	r3, r3, #8
                   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8000cba:	4313      	orrs	r3, r2
                   (uint32_t)(ctx->input[(j * 4)]);
 8000cbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	440a      	add	r2, r1
 8000cc4:	7e12      	ldrb	r2, [r2, #24]
                   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8000cc6:	431a      	orrs	r2, r3
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8000cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	3358      	adds	r3, #88	; 0x58
 8000cce:	443b      	add	r3, r7
 8000cd0:	f843 2c50 	str.w	r2, [r3, #-80]
    for(unsigned int j = 0; j < 14; ++j){
 8000cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	657b      	str	r3, [r7, #84]	; 0x54
 8000cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cdc:	2b0d      	cmp	r3, #13
 8000cde:	d9d6      	bls.n	8000c8e <md5Finalize+0x5a>
    }
    input[14] = (uint32_t)(ctx->size * 8);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	643b      	str	r3, [r7, #64]	; 0x40
    input[15] = (uint32_t)((ctx->size * 8) >> 32);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cf2:	f04f 0200 	mov.w	r2, #0
 8000cf6:	f04f 0300 	mov.w	r3, #0
 8000cfa:	00cb      	lsls	r3, r1, #3
 8000cfc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d00:	00c2      	lsls	r2, r0, #3
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	f04f 0100 	mov.w	r1, #0
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	647b      	str	r3, [r7, #68]	; 0x44

    md5Step(ctx->buffer, input);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3308      	adds	r3, #8
 8000d16:	f107 0208 	add.w	r2, r7, #8
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 f84b 	bl	8000db8 <md5Step>

    // Move the result into digest (convert from little-endian)
    for(unsigned int i = 0; i < 4; ++i){
 8000d22:	2300      	movs	r3, #0
 8000d24:	653b      	str	r3, [r7, #80]	; 0x50
 8000d26:	e03c      	b.n	8000da2 <md5Finalize+0x16e>
        ctx->digest[(i * 4) + 0] = (uint8_t)((ctx->buffer[i] & 0x000000FF));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d2c:	3202      	adds	r2, #2
 8000d2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	b2d1      	uxtb	r1, r2
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        ctx->digest[(i * 4) + 1] = (uint8_t)((ctx->buffer[i] & 0x0000FF00) >>  8);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d46:	3202      	adds	r2, #2
 8000d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4c:	0a1a      	lsrs	r2, r3, #8
 8000d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	3301      	adds	r3, #1
 8000d54:	b2d1      	uxtb	r1, r2
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	460a      	mov	r2, r1
 8000d5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        ctx->digest[(i * 4) + 2] = (uint8_t)((ctx->buffer[i] & 0x00FF0000) >> 16);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d64:	3202      	adds	r2, #2
 8000d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6a:	0c1a      	lsrs	r2, r3, #16
 8000d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	3302      	adds	r3, #2
 8000d72:	b2d1      	uxtb	r1, r2
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	4413      	add	r3, r2
 8000d78:	460a      	mov	r2, r1
 8000d7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        ctx->digest[(i * 4) + 3] = (uint8_t)((ctx->buffer[i] & 0xFF000000) >> 24);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d82:	3202      	adds	r2, #2
 8000d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d88:	0e1a      	lsrs	r2, r3, #24
 8000d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	3303      	adds	r3, #3
 8000d90:	b2d1      	uxtb	r1, r2
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	460a      	mov	r2, r1
 8000d98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    for(unsigned int i = 0; i < 4; ++i){
 8000d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d9e:	3301      	adds	r3, #1
 8000da0:	653b      	str	r3, [r7, #80]	; 0x50
 8000da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d9bf      	bls.n	8000d28 <md5Finalize+0xf4>
    }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	3758      	adds	r7, #88	; 0x58
 8000dae:	46bd      	mov	sp, r7
 8000db0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000db4:	20000200 	.word	0x20000200

08000db8 <md5Step>:

/*
 * Step on 512 bits of input with the main MD5 algorithm.
 */
void md5Step(uint32_t *buffer, uint32_t *input){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
    uint32_t AA = buffer[0];
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t BB = buffer[1];
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	623b      	str	r3, [r7, #32]
    uint32_t CC = buffer[2];
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61fb      	str	r3, [r7, #28]
    uint32_t DD = buffer[3];
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	61bb      	str	r3, [r7, #24]

    uint32_t E;

    unsigned int j;

    for(unsigned int i = 0; i < 64; ++i){
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	e06b      	b.n	8000eb8 <md5Step+0x100>
        switch(i / 16){
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d024      	beq.n	8000e32 <md5Step+0x7a>
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d831      	bhi.n	8000e50 <md5Step+0x98>
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d002      	beq.n	8000df6 <md5Step+0x3e>
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d00c      	beq.n	8000e0e <md5Step+0x56>
 8000df4:	e02c      	b.n	8000e50 <md5Step+0x98>
            case 0:
                E = F(BB, CC, DD);
 8000df6:	6a3a      	ldr	r2, [r7, #32]
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	400b      	ands	r3, r1
 8000e04:	4313      	orrs	r3, r2
 8000e06:	617b      	str	r3, [r7, #20]
                j = i;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	613b      	str	r3, [r7, #16]
                break;
 8000e0c:	e02f      	b.n	8000e6e <md5Step+0xb6>
            case 1:
                E = G(BB, CC, DD);
 8000e0e:	6a3a      	ldr	r2, [r7, #32]
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	401a      	ands	r2, r3
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	43d9      	mvns	r1, r3
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	400b      	ands	r3, r1
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	617b      	str	r3, [r7, #20]
                j = ((i * 5) + 1) % 16;
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	3301      	adds	r3, #1
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	613b      	str	r3, [r7, #16]
                break;
 8000e30:	e01d      	b.n	8000e6e <md5Step+0xb6>
            case 2:
                E = H(BB, CC, DD);
 8000e32:	6a3a      	ldr	r2, [r7, #32]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	4053      	eors	r3, r2
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4053      	eors	r3, r2
 8000e3c:	617b      	str	r3, [r7, #20]
                j = ((i * 3) + 5) % 16;
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	4613      	mov	r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4413      	add	r3, r2
 8000e46:	3305      	adds	r3, #5
 8000e48:	f003 030f 	and.w	r3, r3, #15
 8000e4c:	613b      	str	r3, [r7, #16]
                break;
 8000e4e:	e00e      	b.n	8000e6e <md5Step+0xb6>
            default:
                E = I(BB, CC, DD);
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	43da      	mvns	r2, r3
 8000e54:	6a3b      	ldr	r3, [r7, #32]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	69fa      	ldr	r2, [r7, #28]
 8000e5a:	4053      	eors	r3, r2
 8000e5c:	617b      	str	r3, [r7, #20]
                j = (i * 7) % 16;
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	4613      	mov	r3, r2
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	1a9b      	subs	r3, r3, r2
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	613b      	str	r3, [r7, #16]
                break;
 8000e6c:	bf00      	nop
        }

        uint32_t temp = DD;
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	60bb      	str	r3, [r7, #8]
        DD = CC;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	61bb      	str	r3, [r7, #24]
        CC = BB;
 8000e76:	6a3b      	ldr	r3, [r7, #32]
 8000e78:	61fb      	str	r3, [r7, #28]
        BB = BB + rotateLeft(AA + E + K[i] + input[j], S[i]);
 8000e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	441a      	add	r2, r3
 8000e80:	4920      	ldr	r1, [pc, #128]	; (8000f04 <md5Step+0x14c>)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e88:	441a      	add	r2, r3
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	6839      	ldr	r1, [r7, #0]
 8000e90:	440b      	add	r3, r1
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	441a      	add	r2, r3
 8000e96:	491c      	ldr	r1, [pc, #112]	; (8000f08 <md5Step+0x150>)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	f7ff fe20 	bl	8000ae6 <rotateLeft>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	6a3b      	ldr	r3, [r7, #32]
 8000eaa:	4413      	add	r3, r2
 8000eac:	623b      	str	r3, [r7, #32]
        AA = temp;
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    for(unsigned int i = 0; i < 64; ++i){
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2b3f      	cmp	r3, #63	; 0x3f
 8000ebc:	d990      	bls.n	8000de0 <md5Step+0x28>
    }

    buffer[0] += AA;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	441a      	add	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
    buffer[1] += BB;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	6819      	ldr	r1, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	6a3a      	ldr	r2, [r7, #32]
 8000ed6:	440a      	add	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]
    buffer[2] += CC;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3308      	adds	r3, #8
 8000ede:	6819      	ldr	r1, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3308      	adds	r3, #8
 8000ee4:	69fa      	ldr	r2, [r7, #28]
 8000ee6:	440a      	add	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]
    buffer[3] += DD;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	330c      	adds	r3, #12
 8000eee:	6819      	ldr	r1, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	330c      	adds	r3, #12
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	440a      	add	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]
}
 8000efa:	bf00      	nop
 8000efc:	3728      	adds	r7, #40	; 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000100 	.word	0x20000100
 8000f08:	20000000 	.word	0x20000000

08000f0c <md5String>:

/*
 * Functions that run the algorithm on the provided input and put the digest into result.
 * result should be able to store 16 bytes.
 */
void md5String(char *input, uint8_t *result){
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b09c      	sub	sp, #112	; 0x70
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
    MD5Context ctx;
    md5Init(&ctx);
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fdf4 	bl	8000b08 <md5Init>
    md5Update(&ctx, (uint8_t *)input, strlen(input));
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff f913 	bl	800014c <strlen>
 8000f26:	4602      	mov	r2, r0
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fe0e 	bl	8000b50 <md5Update>
    md5Finalize(&ctx);
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fe7b 	bl	8000c34 <md5Finalize>

    memcpy(result, ctx.digest, 16);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	461d      	mov	r5, r3
 8000f42:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f48:	6028      	str	r0, [r5, #0]
 8000f4a:	6069      	str	r1, [r5, #4]
 8000f4c:	60aa      	str	r2, [r5, #8]
 8000f4e:	60eb      	str	r3, [r5, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3770      	adds	r7, #112	; 0x70
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bdb0      	pop	{r4, r5, r7, pc}

08000f58 <sha256_init>:
    (b)[(i) + 2] = (uint8) ( (n) >>  8 );       \
    (b)[(i) + 3] = (uint8) ( (n)       );       \
}

void sha256_init( sha256_context *ctx )
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x6A09E667;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <sha256_init+0x50>)
 8000f70:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xBB67AE85;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <sha256_init+0x54>)
 8000f76:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x3C6EF372;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <sha256_init+0x58>)
 8000f7c:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0xA54FF53A;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <sha256_init+0x5c>)
 8000f82:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0x510E527F;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <sha256_init+0x60>)
 8000f88:	619a      	str	r2, [r3, #24]
    ctx->state[5] = 0x9B05688C;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <sha256_init+0x64>)
 8000f8e:	61da      	str	r2, [r3, #28]
    ctx->state[6] = 0x1F83D9AB;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <sha256_init+0x68>)
 8000f94:	621a      	str	r2, [r3, #32]
    ctx->state[7] = 0x5BE0CD19;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <sha256_init+0x6c>)
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	6a09e667 	.word	0x6a09e667
 8000fac:	bb67ae85 	.word	0xbb67ae85
 8000fb0:	3c6ef372 	.word	0x3c6ef372
 8000fb4:	a54ff53a 	.word	0xa54ff53a
 8000fb8:	510e527f 	.word	0x510e527f
 8000fbc:	9b05688c 	.word	0x9b05688c
 8000fc0:	1f83d9ab 	.word	0x1f83d9ab
 8000fc4:	5be0cd19 	.word	0x5be0cd19

08000fc8 <sha256_process>:

void sha256_process( sha256_context *ctx, uint8 data[64] )
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b0cd      	sub	sp, #308	; 0x134
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000fd6:	6018      	str	r0, [r3, #0]
 8000fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000fe0:	6019      	str	r1, [r3, #0]
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 8000fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	061a      	lsls	r2, r3, #24
 8000ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	041b      	lsls	r3, r3, #16
 8001000:	431a      	orrs	r2, r3
 8001002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3302      	adds	r3, #2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	4313      	orrs	r3, r2
 8001014:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001018:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800101c:	6812      	ldr	r2, [r2, #0]
 800101e:	3203      	adds	r2, #3
 8001020:	7812      	ldrb	r2, [r2, #0]
 8001022:	431a      	orrs	r2, r3
 8001024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001028:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800102c:	601a      	str	r2, [r3, #0]
    GET_UINT32( W[1],  data,  4 );
 800102e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3304      	adds	r3, #4
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	061a      	lsls	r2, r3, #24
 800103e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3305      	adds	r3, #5
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	041b      	lsls	r3, r3, #16
 800104e:	431a      	orrs	r2, r3
 8001050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3306      	adds	r3, #6
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	4313      	orrs	r3, r2
 8001062:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001066:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800106a:	6812      	ldr	r2, [r2, #0]
 800106c:	3207      	adds	r2, #7
 800106e:	7812      	ldrb	r2, [r2, #0]
 8001070:	431a      	orrs	r2, r3
 8001072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001076:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800107a:	605a      	str	r2, [r3, #4]
    GET_UINT32( W[2],  data,  8 );
 800107c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	3308      	adds	r3, #8
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	061a      	lsls	r2, r3, #24
 800108c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3309      	adds	r3, #9
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	041b      	lsls	r3, r3, #16
 800109c:	431a      	orrs	r2, r3
 800109e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	330a      	adds	r3, #10
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	4313      	orrs	r3, r2
 80010b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80010b4:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	320b      	adds	r2, #11
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	431a      	orrs	r2, r3
 80010c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010c4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80010c8:	609a      	str	r2, [r3, #8]
    GET_UINT32( W[3],  data, 12 );
 80010ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	330c      	adds	r3, #12
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	061a      	lsls	r2, r3, #24
 80010da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	330d      	adds	r3, #13
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	041b      	lsls	r3, r3, #16
 80010ea:	431a      	orrs	r2, r3
 80010ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	330e      	adds	r3, #14
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	4313      	orrs	r3, r2
 80010fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001102:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	320f      	adds	r2, #15
 800110a:	7812      	ldrb	r2, [r2, #0]
 800110c:	431a      	orrs	r2, r3
 800110e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001112:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001116:	60da      	str	r2, [r3, #12]
    GET_UINT32( W[4],  data, 16 );
 8001118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800111c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3310      	adds	r3, #16
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	061a      	lsls	r2, r3, #24
 8001128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800112c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3311      	adds	r3, #17
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	041b      	lsls	r3, r3, #16
 8001138:	431a      	orrs	r2, r3
 800113a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800113e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	3312      	adds	r3, #18
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	4313      	orrs	r3, r2
 800114c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001150:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001154:	6812      	ldr	r2, [r2, #0]
 8001156:	3213      	adds	r2, #19
 8001158:	7812      	ldrb	r2, [r2, #0]
 800115a:	431a      	orrs	r2, r3
 800115c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001160:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001164:	611a      	str	r2, [r3, #16]
    GET_UINT32( W[5],  data, 20 );
 8001166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800116a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3314      	adds	r3, #20
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	061a      	lsls	r2, r3, #24
 8001176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800117a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3315      	adds	r3, #21
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	041b      	lsls	r3, r3, #16
 8001186:	431a      	orrs	r2, r3
 8001188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800118c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3316      	adds	r3, #22
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	4313      	orrs	r3, r2
 800119a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800119e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	3217      	adds	r2, #23
 80011a6:	7812      	ldrb	r2, [r2, #0]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80011b2:	615a      	str	r2, [r3, #20]
    GET_UINT32( W[6],  data, 24 );
 80011b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3318      	adds	r3, #24
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	061a      	lsls	r2, r3, #24
 80011c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3319      	adds	r3, #25
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	041b      	lsls	r3, r3, #16
 80011d4:	431a      	orrs	r2, r3
 80011d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	331a      	adds	r3, #26
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	4313      	orrs	r3, r2
 80011e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80011ec:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	321b      	adds	r2, #27
 80011f4:	7812      	ldrb	r2, [r2, #0]
 80011f6:	431a      	orrs	r2, r3
 80011f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011fc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001200:	619a      	str	r2, [r3, #24]
    GET_UINT32( W[7],  data, 28 );
 8001202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	331c      	adds	r3, #28
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	061a      	lsls	r2, r3, #24
 8001212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	331d      	adds	r3, #29
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	041b      	lsls	r3, r3, #16
 8001222:	431a      	orrs	r2, r3
 8001224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001228:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	331e      	adds	r3, #30
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	4313      	orrs	r3, r2
 8001236:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800123a:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	321f      	adds	r2, #31
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	431a      	orrs	r2, r3
 8001246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800124a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800124e:	61da      	str	r2, [r3, #28]
    GET_UINT32( W[8],  data, 32 );
 8001250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001254:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	3320      	adds	r3, #32
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	061a      	lsls	r2, r3, #24
 8001260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001264:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3321      	adds	r3, #33	; 0x21
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	041b      	lsls	r3, r3, #16
 8001270:	431a      	orrs	r2, r3
 8001272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001276:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3322      	adds	r3, #34	; 0x22
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	4313      	orrs	r3, r2
 8001284:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001288:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	3223      	adds	r2, #35	; 0x23
 8001290:	7812      	ldrb	r2, [r2, #0]
 8001292:	431a      	orrs	r2, r3
 8001294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001298:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800129c:	621a      	str	r2, [r3, #32]
    GET_UINT32( W[9],  data, 36 );
 800129e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3324      	adds	r3, #36	; 0x24
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	061a      	lsls	r2, r3, #24
 80012ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3325      	adds	r3, #37	; 0x25
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	041b      	lsls	r3, r3, #16
 80012be:	431a      	orrs	r2, r3
 80012c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3326      	adds	r3, #38	; 0x26
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	4313      	orrs	r3, r2
 80012d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80012d6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	3227      	adds	r2, #39	; 0x27
 80012de:	7812      	ldrb	r2, [r2, #0]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
    GET_UINT32( W[10], data, 40 );
 80012ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3328      	adds	r3, #40	; 0x28
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	061a      	lsls	r2, r3, #24
 80012fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3329      	adds	r3, #41	; 0x29
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	041b      	lsls	r3, r3, #16
 800130c:	431a      	orrs	r2, r3
 800130e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001312:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	332a      	adds	r3, #42	; 0x2a
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	4313      	orrs	r3, r2
 8001320:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001324:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	322b      	adds	r2, #43	; 0x2b
 800132c:	7812      	ldrb	r2, [r2, #0]
 800132e:	431a      	orrs	r2, r3
 8001330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001334:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
    GET_UINT32( W[11], data, 44 );
 800133a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800133e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	332c      	adds	r3, #44	; 0x2c
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	061a      	lsls	r2, r3, #24
 800134a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800134e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	332d      	adds	r3, #45	; 0x2d
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	041b      	lsls	r3, r3, #16
 800135a:	431a      	orrs	r2, r3
 800135c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001360:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	332e      	adds	r3, #46	; 0x2e
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	4313      	orrs	r3, r2
 800136e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001372:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	322f      	adds	r2, #47	; 0x2f
 800137a:	7812      	ldrb	r2, [r2, #0]
 800137c:	431a      	orrs	r2, r3
 800137e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001382:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001386:	62da      	str	r2, [r3, #44]	; 0x2c
    GET_UINT32( W[12], data, 48 );
 8001388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800138c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3330      	adds	r3, #48	; 0x30
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	061a      	lsls	r2, r3, #24
 8001398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800139c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3331      	adds	r3, #49	; 0x31
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	041b      	lsls	r3, r3, #16
 80013a8:	431a      	orrs	r2, r3
 80013aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3332      	adds	r3, #50	; 0x32
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	4313      	orrs	r3, r2
 80013bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80013c0:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	3233      	adds	r2, #51	; 0x33
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013d0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
    GET_UINT32( W[13], data, 52 );
 80013d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3334      	adds	r3, #52	; 0x34
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	061a      	lsls	r2, r3, #24
 80013e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3335      	adds	r3, #53	; 0x35
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	041b      	lsls	r3, r3, #16
 80013f6:	431a      	orrs	r2, r3
 80013f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	3336      	adds	r3, #54	; 0x36
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	4313      	orrs	r3, r2
 800140a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800140e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	3237      	adds	r2, #55	; 0x37
 8001416:	7812      	ldrb	r2, [r2, #0]
 8001418:	431a      	orrs	r2, r3
 800141a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800141e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001422:	635a      	str	r2, [r3, #52]	; 0x34
    GET_UINT32( W[14], data, 56 );
 8001424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001428:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	3338      	adds	r3, #56	; 0x38
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	061a      	lsls	r2, r3, #24
 8001434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	3339      	adds	r3, #57	; 0x39
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	041b      	lsls	r3, r3, #16
 8001444:	431a      	orrs	r2, r3
 8001446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800144a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	333a      	adds	r3, #58	; 0x3a
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	4313      	orrs	r3, r2
 8001458:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800145c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	323b      	adds	r2, #59	; 0x3b
 8001464:	7812      	ldrb	r2, [r2, #0]
 8001466:	431a      	orrs	r2, r3
 8001468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800146c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001470:	639a      	str	r2, [r3, #56]	; 0x38
    GET_UINT32( W[15], data, 60 );
 8001472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	333c      	adds	r3, #60	; 0x3c
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	061a      	lsls	r2, r3, #24
 8001482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001486:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	333d      	adds	r3, #61	; 0x3d
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	041b      	lsls	r3, r3, #16
 8001492:	431a      	orrs	r2, r3
 8001494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001498:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	333e      	adds	r3, #62	; 0x3e
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	021b      	lsls	r3, r3, #8
 80014a4:	4313      	orrs	r3, r2
 80014a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80014aa:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	323f      	adds	r2, #63	; 0x3f
 80014b2:	7812      	ldrb	r2, [r2, #0]
 80014b4:	431a      	orrs	r2, r3
 80014b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014be:	63da      	str	r2, [r3, #60]	; 0x3c
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
 80014c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    B = ctx->state[1];
 80014d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    C = ctx->state[2];
 80014e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    D = ctx->state[3];
 80014f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    E = ctx->state[4];
 8001500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    F = ctx->state[5];
 8001510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001514:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    G = ctx->state[6];
 8001520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    H = ctx->state[7];
 8001530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001534:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8001540:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001544:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001548:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800154c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001550:	405a      	eors	r2, r3
 8001552:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001556:	ea4f 6373 	mov.w	r3, r3, ror #25
 800155a:	405a      	eors	r2, r3
 800155c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001560:	441a      	add	r2, r3
 8001562:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8001566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800156a:	4059      	eors	r1, r3
 800156c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001570:	4019      	ands	r1, r3
 8001572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001576:	404b      	eors	r3, r1
 8001578:	441a      	add	r2, r3
 800157a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800157e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	441a      	add	r2, r3
 8001586:	4bf9      	ldr	r3, [pc, #996]	; (800196c <sha256_process+0x9a4>)
 8001588:	4413      	add	r3, r2
 800158a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800158e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001592:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800159a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800159e:	405a      	eors	r2, r3
 80015a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80015a4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80015a8:	405a      	eors	r2, r3
 80015aa:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80015ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015b2:	4019      	ands	r1, r3
 80015b4:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80015b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015bc:	4318      	orrs	r0, r3
 80015be:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015c2:	4003      	ands	r3, r0
 80015c4:	430b      	orrs	r3, r1
 80015c6:	4413      	add	r3, r2
 80015c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80015cc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80015d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80015d4:	4413      	add	r3, r2
 80015d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015da:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80015de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015e2:	4413      	add	r3, r2
 80015e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80015e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015ec:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80015f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015f4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80015f8:	405a      	eors	r2, r3
 80015fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015fe:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001602:	405a      	eors	r2, r3
 8001604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001608:	441a      	add	r2, r3
 800160a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800160e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001612:	4059      	eors	r1, r3
 8001614:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001618:	4019      	ands	r1, r3
 800161a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800161e:	404b      	eors	r3, r1
 8001620:	441a      	add	r2, r3
 8001622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001626:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	441a      	add	r2, r3
 800162e:	4bd0      	ldr	r3, [pc, #832]	; (8001970 <sha256_process+0x9a8>)
 8001630:	4413      	add	r3, r2
 8001632:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001636:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800163a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800163e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001642:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001646:	405a      	eors	r2, r3
 8001648:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800164c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001650:	405a      	eors	r2, r3
 8001652:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8001656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800165a:	4019      	ands	r1, r3
 800165c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8001660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001664:	4318      	orrs	r0, r3
 8001666:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800166a:	4003      	ands	r3, r0
 800166c:	430b      	orrs	r3, r1
 800166e:	4413      	add	r3, r2
 8001670:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001674:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800167c:	4413      	add	r3, r2
 800167e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001682:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001686:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800168a:	4413      	add	r3, r2
 800168c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8001690:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001694:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001698:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800169c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80016a0:	405a      	eors	r2, r3
 80016a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016a6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80016aa:	405a      	eors	r2, r3
 80016ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80016b0:	441a      	add	r2, r3
 80016b2:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80016b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80016ba:	4059      	eors	r1, r3
 80016bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016c0:	4019      	ands	r1, r3
 80016c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80016c6:	404b      	eors	r3, r1
 80016c8:	441a      	add	r2, r3
 80016ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80016ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	441a      	add	r2, r3
 80016d6:	4ba7      	ldr	r3, [pc, #668]	; (8001974 <sha256_process+0x9ac>)
 80016d8:	4413      	add	r3, r2
 80016da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80016de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016e2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80016e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016ea:	ea4f 3373 	mov.w	r3, r3, ror #13
 80016ee:	405a      	eors	r2, r3
 80016f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016f4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80016f8:	405a      	eors	r2, r3
 80016fa:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80016fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001702:	4019      	ands	r1, r3
 8001704:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8001708:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800170c:	4318      	orrs	r0, r3
 800170e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001712:	4003      	ands	r3, r0
 8001714:	430b      	orrs	r3, r1
 8001716:	4413      	add	r3, r2
 8001718:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800171c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001724:	4413      	add	r3, r2
 8001726:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800172a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800172e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001732:	4413      	add	r3, r2
 8001734:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 8001738:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800173c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001740:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001744:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001748:	405a      	eors	r2, r3
 800174a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800174e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001752:	405a      	eors	r2, r3
 8001754:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001758:	441a      	add	r2, r3
 800175a:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800175e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001762:	4059      	eors	r1, r3
 8001764:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001768:	4019      	ands	r1, r3
 800176a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800176e:	404b      	eors	r3, r1
 8001770:	441a      	add	r2, r3
 8001772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001776:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	441a      	add	r2, r3
 800177e:	4b7e      	ldr	r3, [pc, #504]	; (8001978 <sha256_process+0x9b0>)
 8001780:	4413      	add	r3, r2
 8001782:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001786:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800178a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800178e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001792:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001796:	405a      	eors	r2, r3
 8001798:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800179c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80017a0:	405a      	eors	r2, r3
 80017a2:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80017a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017aa:	4019      	ands	r1, r3
 80017ac:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80017b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017b4:	4318      	orrs	r0, r3
 80017b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017ba:	4003      	ands	r3, r0
 80017bc:	430b      	orrs	r3, r1
 80017be:	4413      	add	r3, r2
 80017c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80017c4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80017c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017cc:	4413      	add	r3, r2
 80017ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80017d2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80017d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80017da:	4413      	add	r3, r2
 80017dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 80017e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017e4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80017e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017ec:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80017f0:	405a      	eors	r2, r3
 80017f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017f6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80017fa:	405a      	eors	r2, r3
 80017fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001800:	441a      	add	r2, r3
 8001802:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8001806:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800180a:	4059      	eors	r1, r3
 800180c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001810:	4019      	ands	r1, r3
 8001812:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001816:	404b      	eors	r3, r1
 8001818:	441a      	add	r2, r3
 800181a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800181e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	441a      	add	r2, r3
 8001826:	4b55      	ldr	r3, [pc, #340]	; (800197c <sha256_process+0x9b4>)
 8001828:	4413      	add	r3, r2
 800182a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800182e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001832:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001836:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800183a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800183e:	405a      	eors	r2, r3
 8001840:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001844:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001848:	405a      	eors	r2, r3
 800184a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800184e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001852:	4019      	ands	r1, r3
 8001854:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001858:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800185c:	4318      	orrs	r0, r3
 800185e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001862:	4003      	ands	r3, r0
 8001864:	430b      	orrs	r3, r1
 8001866:	4413      	add	r3, r2
 8001868:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800186c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001874:	4413      	add	r3, r2
 8001876:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800187a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800187e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001882:	4413      	add	r3, r2
 8001884:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8001888:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800188c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001890:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001894:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001898:	405a      	eors	r2, r3
 800189a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800189e:	ea4f 6373 	mov.w	r3, r3, ror #25
 80018a2:	405a      	eors	r2, r3
 80018a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018a8:	441a      	add	r2, r3
 80018aa:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80018ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018b2:	4059      	eors	r1, r3
 80018b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018b8:	4019      	ands	r1, r3
 80018ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018be:	404b      	eors	r3, r1
 80018c0:	441a      	add	r2, r3
 80018c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80018c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	441a      	add	r2, r3
 80018ce:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <sha256_process+0x9b8>)
 80018d0:	4413      	add	r3, r2
 80018d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80018d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018da:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80018de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018e2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80018e6:	405a      	eors	r2, r3
 80018e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018ec:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80018f0:	405a      	eors	r2, r3
 80018f2:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80018f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80018fa:	4019      	ands	r1, r3
 80018fc:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001900:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001904:	4318      	orrs	r0, r3
 8001906:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800190a:	4003      	ands	r3, r0
 800190c:	430b      	orrs	r3, r1
 800190e:	4413      	add	r3, r2
 8001910:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001914:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800191c:	4413      	add	r3, r2
 800191e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001922:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001926:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800192a:	4413      	add	r3, r2
 800192c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8001930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001934:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800193c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001940:	405a      	eors	r2, r3
 8001942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001946:	ea4f 6373 	mov.w	r3, r3, ror #25
 800194a:	405a      	eors	r2, r3
 800194c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001950:	441a      	add	r2, r3
 8001952:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8001956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800195a:	4059      	eors	r1, r3
 800195c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001960:	4019      	ands	r1, r3
 8001962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001966:	404b      	eors	r3, r1
 8001968:	e00c      	b.n	8001984 <sha256_process+0x9bc>
 800196a:	bf00      	nop
 800196c:	428a2f98 	.word	0x428a2f98
 8001970:	71374491 	.word	0x71374491
 8001974:	b5c0fbcf 	.word	0xb5c0fbcf
 8001978:	e9b5dba5 	.word	0xe9b5dba5
 800197c:	3956c25b 	.word	0x3956c25b
 8001980:	59f111f1 	.word	0x59f111f1
 8001984:	441a      	add	r2, r3
 8001986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800198a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	441a      	add	r2, r3
 8001992:	4bf9      	ldr	r3, [pc, #996]	; (8001d78 <sha256_process+0xdb0>)
 8001994:	4413      	add	r3, r2
 8001996:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800199a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800199e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80019a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019a6:	ea4f 3373 	mov.w	r3, r3, ror #13
 80019aa:	405a      	eors	r2, r3
 80019ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80019b0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80019b4:	405a      	eors	r2, r3
 80019b6:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80019ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019be:	4019      	ands	r1, r3
 80019c0:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80019c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019c8:	4318      	orrs	r0, r3
 80019ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80019ce:	4003      	ands	r3, r0
 80019d0:	430b      	orrs	r3, r1
 80019d2:	4413      	add	r3, r2
 80019d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80019d8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80019dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019e0:	4413      	add	r3, r2
 80019e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80019e6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80019ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019ee:	4413      	add	r3, r2
 80019f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80019f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80019f8:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80019fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a00:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001a04:	405a      	eors	r2, r3
 8001a06:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a0a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001a0e:	405a      	eors	r2, r3
 8001a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a14:	441a      	add	r2, r3
 8001a16:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8001a1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a1e:	4059      	eors	r1, r3
 8001a20:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001a24:	4019      	ands	r1, r3
 8001a26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a2a:	404b      	eors	r3, r1
 8001a2c:	441a      	add	r2, r3
 8001a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001a32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	441a      	add	r2, r3
 8001a3a:	4bd0      	ldr	r3, [pc, #832]	; (8001d7c <sha256_process+0xdb4>)
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001a42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a46:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001a4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a4e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001a52:	405a      	eors	r2, r3
 8001a54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a58:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001a5c:	405a      	eors	r2, r3
 8001a5e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8001a62:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a66:	4019      	ands	r1, r3
 8001a68:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8001a6c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a70:	4318      	orrs	r0, r3
 8001a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a76:	4003      	ands	r3, r0
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001a80:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a88:	4413      	add	r3, r2
 8001a8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a8e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001a92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a96:	4413      	add	r3, r2
 8001a98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8001a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001aa0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001aa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001aa8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001aac:	405a      	eors	r2, r3
 8001aae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001ab2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001ab6:	405a      	eors	r2, r3
 8001ab8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001abc:	441a      	add	r2, r3
 8001abe:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8001ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ac6:	4059      	eors	r1, r3
 8001ac8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001acc:	4019      	ands	r1, r3
 8001ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ad2:	404b      	eors	r3, r1
 8001ad4:	441a      	add	r2, r3
 8001ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ada:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	441a      	add	r2, r3
 8001ae2:	4ba7      	ldr	r3, [pc, #668]	; (8001d80 <sha256_process+0xdb8>)
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001aee:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001af6:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001afa:	405a      	eors	r2, r3
 8001afc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b00:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001b04:	405a      	eors	r2, r3
 8001b06:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8001b0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b0e:	4019      	ands	r1, r3
 8001b10:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8001b14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b18:	4318      	orrs	r0, r3
 8001b1a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b1e:	4003      	ands	r3, r0
 8001b20:	430b      	orrs	r3, r1
 8001b22:	4413      	add	r3, r2
 8001b24:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001b28:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001b30:	4413      	add	r3, r2
 8001b32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b36:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001b3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b3e:	4413      	add	r3, r2
 8001b40:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8001b44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b48:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001b4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b50:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001b54:	405a      	eors	r2, r3
 8001b56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b5a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001b5e:	405a      	eors	r2, r3
 8001b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b64:	441a      	add	r2, r3
 8001b66:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8001b6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001b6e:	4059      	eors	r1, r3
 8001b70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b74:	4019      	ands	r1, r3
 8001b76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001b7a:	404b      	eors	r3, r1
 8001b7c:	441a      	add	r2, r3
 8001b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	441a      	add	r2, r3
 8001b8a:	4b7e      	ldr	r3, [pc, #504]	; (8001d84 <sha256_process+0xdbc>)
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001b92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b96:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001b9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b9e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001ba2:	405a      	eors	r2, r3
 8001ba4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ba8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001bac:	405a      	eors	r2, r3
 8001bae:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8001bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bb6:	4019      	ands	r1, r3
 8001bb8:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8001bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001bc0:	4318      	orrs	r0, r3
 8001bc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001bc6:	4003      	ands	r3, r0
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	4413      	add	r3, r2
 8001bcc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001bd0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001bd8:	4413      	add	r3, r2
 8001bda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001bde:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001be2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001be6:	4413      	add	r3, r2
 8001be8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8001bec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001bf0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001bf4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001bf8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001bfc:	405a      	eors	r2, r3
 8001bfe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c02:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001c06:	405a      	eors	r2, r3
 8001c08:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c0c:	441a      	add	r2, r3
 8001c0e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8001c12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001c16:	4059      	eors	r1, r3
 8001c18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c1c:	4019      	ands	r1, r3
 8001c1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001c22:	404b      	eors	r3, r1
 8001c24:	441a      	add	r2, r3
 8001c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	441a      	add	r2, r3
 8001c32:	4b55      	ldr	r3, [pc, #340]	; (8001d88 <sha256_process+0xdc0>)
 8001c34:	4413      	add	r3, r2
 8001c36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c3e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c46:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001c4a:	405a      	eors	r2, r3
 8001c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c50:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001c54:	405a      	eors	r2, r3
 8001c56:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8001c5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c5e:	4019      	ands	r1, r3
 8001c60:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8001c64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c68:	4318      	orrs	r0, r3
 8001c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c6e:	4003      	ands	r3, r0
 8001c70:	430b      	orrs	r3, r1
 8001c72:	4413      	add	r3, r2
 8001c74:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001c78:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c80:	4413      	add	r3, r2
 8001c82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001c86:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001c8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c8e:	4413      	add	r3, r2
 8001c90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8001c94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c98:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001c9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ca0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001ca4:	405a      	eors	r2, r3
 8001ca6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001caa:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001cae:	405a      	eors	r2, r3
 8001cb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001cb4:	441a      	add	r2, r3
 8001cb6:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8001cba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cbe:	4059      	eors	r1, r3
 8001cc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cc4:	4019      	ands	r1, r3
 8001cc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cca:	404b      	eors	r3, r1
 8001ccc:	441a      	add	r2, r3
 8001cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cd2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	441a      	add	r2, r3
 8001cda:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <sha256_process+0xdc4>)
 8001cdc:	4413      	add	r3, r2
 8001cde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001ce2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001ce6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001cea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001cee:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001cf2:	405a      	eors	r2, r3
 8001cf4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001cf8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001cfc:	405a      	eors	r2, r3
 8001cfe:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8001d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d06:	4019      	ands	r1, r3
 8001d08:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8001d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d10:	4318      	orrs	r0, r3
 8001d12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d16:	4003      	ands	r3, r0
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001d20:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d28:	4413      	add	r3, r2
 8001d2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001d2e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001d32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d36:	4413      	add	r3, r2
 8001d38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8001d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d40:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d48:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001d4c:	405a      	eors	r2, r3
 8001d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d52:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001d56:	405a      	eors	r2, r3
 8001d58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d5c:	441a      	add	r2, r3
 8001d5e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8001d62:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d66:	4059      	eors	r1, r3
 8001d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d6c:	4019      	ands	r1, r3
 8001d6e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d72:	404b      	eors	r3, r1
 8001d74:	e00c      	b.n	8001d90 <sha256_process+0xdc8>
 8001d76:	bf00      	nop
 8001d78:	923f82a4 	.word	0x923f82a4
 8001d7c:	ab1c5ed5 	.word	0xab1c5ed5
 8001d80:	d807aa98 	.word	0xd807aa98
 8001d84:	12835b01 	.word	0x12835b01
 8001d88:	243185be 	.word	0x243185be
 8001d8c:	550c7dc3 	.word	0x550c7dc3
 8001d90:	441a      	add	r2, r3
 8001d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	441a      	add	r2, r3
 8001d9e:	4bf4      	ldr	r3, [pc, #976]	; (8002170 <sha256_process+0x11a8>)
 8001da0:	4413      	add	r3, r2
 8001da2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001daa:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001dae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001db2:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001db6:	405a      	eors	r2, r3
 8001db8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001dbc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001dc0:	405a      	eors	r2, r3
 8001dc2:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8001dc6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001dca:	4019      	ands	r1, r3
 8001dcc:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001dd0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001dd4:	4318      	orrs	r0, r3
 8001dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001dda:	4003      	ands	r3, r0
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	4413      	add	r3, r2
 8001de0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001de4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001dec:	4413      	add	r3, r2
 8001dee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001df2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001df6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8001e00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e04:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001e08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e0c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001e10:	405a      	eors	r2, r3
 8001e12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e16:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001e1a:	405a      	eors	r2, r3
 8001e1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001e20:	441a      	add	r2, r3
 8001e22:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8001e26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e2a:	4059      	eors	r1, r3
 8001e2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e30:	4019      	ands	r1, r3
 8001e32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e36:	404b      	eors	r3, r1
 8001e38:	441a      	add	r2, r3
 8001e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	441a      	add	r2, r3
 8001e46:	4bcb      	ldr	r3, [pc, #812]	; (8002174 <sha256_process+0x11ac>)
 8001e48:	4413      	add	r3, r2
 8001e4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001e4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e52:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001e56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e5a:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001e5e:	405a      	eors	r2, r3
 8001e60:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e64:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001e68:	405a      	eors	r2, r3
 8001e6a:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8001e6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001e72:	4019      	ands	r1, r3
 8001e74:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001e78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001e7c:	4318      	orrs	r0, r3
 8001e7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001e82:	4003      	ands	r3, r0
 8001e84:	430b      	orrs	r3, r1
 8001e86:	4413      	add	r3, r2
 8001e88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001e8c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001e94:	4413      	add	r3, r2
 8001e96:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001e9a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001e9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8001ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001eac:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001eb4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001eb8:	405a      	eors	r2, r3
 8001eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ebe:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001ec2:	405a      	eors	r2, r3
 8001ec4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ec8:	441a      	add	r2, r3
 8001eca:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8001ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ed2:	4059      	eors	r1, r3
 8001ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ed8:	4019      	ands	r1, r3
 8001eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ede:	404b      	eors	r3, r1
 8001ee0:	441a      	add	r2, r3
 8001ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ee6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eec:	441a      	add	r2, r3
 8001eee:	4ba2      	ldr	r3, [pc, #648]	; (8002178 <sha256_process+0x11b0>)
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001ef6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001efa:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001efe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f02:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001f06:	405a      	eors	r2, r3
 8001f08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f0c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001f10:	405a      	eors	r2, r3
 8001f12:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8001f16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f1a:	4019      	ands	r1, r3
 8001f1c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8001f20:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f24:	4318      	orrs	r0, r3
 8001f26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001f2a:	4003      	ands	r3, r0
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	4413      	add	r3, r2
 8001f30:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001f34:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001f42:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001f46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8001f50:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f54:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001f58:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f5c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001f60:	405a      	eors	r2, r3
 8001f62:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f66:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001f6a:	405a      	eors	r2, r3
 8001f6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f70:	441a      	add	r2, r3
 8001f72:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8001f76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f7a:	4059      	eors	r1, r3
 8001f7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f80:	4019      	ands	r1, r3
 8001f82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f86:	404b      	eors	r3, r1
 8001f88:	441a      	add	r2, r3
 8001f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f8e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f94:	441a      	add	r2, r3
 8001f96:	4b79      	ldr	r3, [pc, #484]	; (800217c <sha256_process+0x11b4>)
 8001f98:	4413      	add	r3, r2
 8001f9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001f9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001fa2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001fa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001faa:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001fae:	405a      	eors	r2, r3
 8001fb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001fb4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001fb8:	405a      	eors	r2, r3
 8001fba:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8001fbe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001fc2:	4019      	ands	r1, r3
 8001fc4:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8001fc8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001fcc:	4318      	orrs	r0, r3
 8001fce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fd2:	4003      	ands	r3, r0
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001fdc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001fea:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001fee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8001ff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001ffc:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002000:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002004:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002008:	405a      	eors	r2, r3
 800200a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800200e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002012:	405a      	eors	r2, r3
 8002014:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002018:	441a      	add	r2, r3
 800201a:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800201e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002022:	4059      	eors	r1, r3
 8002024:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002028:	4019      	ands	r1, r3
 800202a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800202e:	404b      	eors	r3, r1
 8002030:	441a      	add	r2, r3
 8002032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002036:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002044:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800204e:	4059      	eors	r1, r3
 8002050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002054:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205a:	0a9b      	lsrs	r3, r3, #10
 800205c:	4059      	eors	r1, r3
 800205e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002062:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	4419      	add	r1, r3
 800206a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800206e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800207c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002086:	4058      	eors	r0, r3
 8002088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800208c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	08db      	lsrs	r3, r3, #3
 8002094:	4043      	eors	r3, r0
 8002096:	4419      	add	r1, r3
 8002098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800209c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4419      	add	r1, r3
 80020a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80020a8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80020ac:	6419      	str	r1, [r3, #64]	; 0x40
 80020ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80020b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	441a      	add	r2, r3
 80020ba:	4b31      	ldr	r3, [pc, #196]	; (8002180 <sha256_process+0x11b8>)
 80020bc:	4413      	add	r3, r2
 80020be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80020c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020c6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80020ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020ce:	ea4f 3373 	mov.w	r3, r3, ror #13
 80020d2:	405a      	eors	r2, r3
 80020d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020d8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80020dc:	405a      	eors	r2, r3
 80020de:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80020e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020e6:	4019      	ands	r1, r3
 80020e8:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80020ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020f0:	4318      	orrs	r0, r3
 80020f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80020f6:	4003      	ands	r3, r0
 80020f8:	430b      	orrs	r3, r1
 80020fa:	4413      	add	r3, r2
 80020fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002100:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002108:	4413      	add	r3, r2
 800210a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800210e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002112:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002116:	4413      	add	r3, r2
 8002118:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 800211c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002120:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002124:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002128:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800212c:	405a      	eors	r2, r3
 800212e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002132:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002136:	405a      	eors	r2, r3
 8002138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800213c:	441a      	add	r2, r3
 800213e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8002142:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002146:	4059      	eors	r1, r3
 8002148:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800214c:	4019      	ands	r1, r3
 800214e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002152:	404b      	eors	r3, r1
 8002154:	441a      	add	r2, r3
 8002156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800215a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800215e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002160:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002168:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	e009      	b.n	8002184 <sha256_process+0x11bc>
 8002170:	72be5d74 	.word	0x72be5d74
 8002174:	80deb1fe 	.word	0x80deb1fe
 8002178:	9bdc06a7 	.word	0x9bdc06a7
 800217c:	c19bf174 	.word	0xc19bf174
 8002180:	e49b69c1 	.word	0xe49b69c1
 8002184:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002188:	4059      	eors	r1, r3
 800218a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800218e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002194:	0a9b      	lsrs	r3, r3, #10
 8002196:	4059      	eors	r1, r3
 8002198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800219c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	4419      	add	r1, r3
 80021a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021a8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80021b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80021c0:	4058      	eors	r0, r3
 80021c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	08db      	lsrs	r3, r3, #3
 80021ce:	4043      	eors	r3, r0
 80021d0:	4419      	add	r1, r3
 80021d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4419      	add	r1, r3
 80021de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021e6:	6459      	str	r1, [r3, #68]	; 0x44
 80021e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021ec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	441a      	add	r2, r3
 80021f4:	4bec      	ldr	r3, [pc, #944]	; (80025a8 <sha256_process+0x15e0>)
 80021f6:	4413      	add	r3, r2
 80021f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80021fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002200:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002204:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002208:	ea4f 3373 	mov.w	r3, r3, ror #13
 800220c:	405a      	eors	r2, r3
 800220e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002212:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002216:	405a      	eors	r2, r3
 8002218:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800221c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002220:	4019      	ands	r1, r3
 8002222:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8002226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800222a:	4318      	orrs	r0, r3
 800222c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002230:	4003      	ands	r3, r0
 8002232:	430b      	orrs	r3, r1
 8002234:	4413      	add	r3, r2
 8002236:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800223a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800223e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002242:	4413      	add	r3, r2
 8002244:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002248:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800224c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002250:	4413      	add	r3, r2
 8002252:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8002256:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800225a:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800225e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002262:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002266:	405a      	eors	r2, r3
 8002268:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800226c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002270:	405a      	eors	r2, r3
 8002272:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002276:	441a      	add	r2, r3
 8002278:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800227c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002280:	4059      	eors	r1, r3
 8002282:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002286:	4019      	ands	r1, r3
 8002288:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800228c:	404b      	eors	r3, r1
 800228e:	441a      	add	r2, r3
 8002290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002294:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	ea4f 4173 	mov.w	r1, r3, ror #17
 800229e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80022ac:	4059      	eors	r1, r3
 80022ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	0a9b      	lsrs	r3, r3, #10
 80022ba:	4059      	eors	r1, r3
 80022bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	4419      	add	r1, r3
 80022c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80022d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80022e4:	4058      	eors	r0, r3
 80022e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	08db      	lsrs	r3, r3, #3
 80022f2:	4043      	eors	r3, r0
 80022f4:	4419      	add	r1, r3
 80022f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4419      	add	r1, r3
 8002302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002306:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800230a:	6499      	str	r1, [r3, #72]	; 0x48
 800230c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002310:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002316:	441a      	add	r2, r3
 8002318:	4ba4      	ldr	r3, [pc, #656]	; (80025ac <sha256_process+0x15e4>)
 800231a:	4413      	add	r3, r2
 800231c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002324:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800232c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002330:	405a      	eors	r2, r3
 8002332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002336:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800233a:	405a      	eors	r2, r3
 800233c:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8002340:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002344:	4019      	ands	r1, r3
 8002346:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800234a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800234e:	4318      	orrs	r0, r3
 8002350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002354:	4003      	ands	r3, r0
 8002356:	430b      	orrs	r3, r1
 8002358:	4413      	add	r3, r2
 800235a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800235e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002366:	4413      	add	r3, r2
 8002368:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800236c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002370:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002374:	4413      	add	r3, r2
 8002376:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 800237a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800237e:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002382:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002386:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800238a:	405a      	eors	r2, r3
 800238c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002390:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002394:	405a      	eors	r2, r3
 8002396:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800239a:	441a      	add	r2, r3
 800239c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80023a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80023a4:	4059      	eors	r1, r3
 80023a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80023aa:	4019      	ands	r1, r3
 80023ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80023b0:	404b      	eors	r3, r1
 80023b2:	441a      	add	r2, r3
 80023b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023b8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	ea4f 4173 	mov.w	r1, r3, ror #17
 80023c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80023d0:	4059      	eors	r1, r3
 80023d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	0a9b      	lsrs	r3, r3, #10
 80023de:	4059      	eors	r1, r3
 80023e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4419      	add	r1, r3
 80023ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80023fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002408:	4058      	eors	r0, r3
 800240a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800240e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	08db      	lsrs	r3, r3, #3
 8002416:	4043      	eors	r3, r0
 8002418:	4419      	add	r1, r3
 800241a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800241e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4419      	add	r1, r3
 8002426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800242a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800242e:	64d9      	str	r1, [r3, #76]	; 0x4c
 8002430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002434:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	441a      	add	r2, r3
 800243c:	4b5c      	ldr	r3, [pc, #368]	; (80025b0 <sha256_process+0x15e8>)
 800243e:	4413      	add	r3, r2
 8002440:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002444:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002448:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800244c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002450:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002454:	405a      	eors	r2, r3
 8002456:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800245a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800245e:	405a      	eors	r2, r3
 8002460:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8002464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002468:	4019      	ands	r1, r3
 800246a:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800246e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002472:	4318      	orrs	r0, r3
 8002474:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002478:	4003      	ands	r3, r0
 800247a:	430b      	orrs	r3, r1
 800247c:	4413      	add	r3, r2
 800247e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002482:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800248a:	4413      	add	r3, r2
 800248c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002490:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002494:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002498:	4413      	add	r3, r2
 800249a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 800249e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80024a2:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80024a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80024aa:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80024ae:	405a      	eors	r2, r3
 80024b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80024b4:	ea4f 6373 	mov.w	r3, r3, ror #25
 80024b8:	405a      	eors	r2, r3
 80024ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80024be:	441a      	add	r2, r3
 80024c0:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80024c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80024c8:	4059      	eors	r1, r3
 80024ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80024ce:	4019      	ands	r1, r3
 80024d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80024d4:	404b      	eors	r3, r1
 80024d6:	441a      	add	r2, r3
 80024d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80024dc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e2:	ea4f 4173 	mov.w	r1, r3, ror #17
 80024e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80024ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f0:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80024f4:	4059      	eors	r1, r3
 80024f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80024fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002500:	0a9b      	lsrs	r3, r3, #10
 8002502:	4059      	eors	r1, r3
 8002504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002508:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800250c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250e:	4419      	add	r1, r3
 8002510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002514:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800251e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002522:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800252c:	4058      	eors	r0, r3
 800252e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002532:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	08db      	lsrs	r3, r3, #3
 800253a:	4043      	eors	r3, r0
 800253c:	4419      	add	r1, r3
 800253e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002542:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	4419      	add	r1, r3
 800254a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800254e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002552:	6519      	str	r1, [r3, #80]	; 0x50
 8002554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002558:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	441a      	add	r2, r3
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <sha256_process+0x15ec>)
 8002562:	4413      	add	r3, r2
 8002564:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002568:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800256c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002570:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002574:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002578:	405a      	eors	r2, r3
 800257a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800257e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002582:	405a      	eors	r2, r3
 8002584:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8002588:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800258c:	4019      	ands	r1, r3
 800258e:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002592:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002596:	4318      	orrs	r0, r3
 8002598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800259c:	4003      	ands	r3, r0
 800259e:	430b      	orrs	r3, r1
 80025a0:	4413      	add	r3, r2
 80025a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80025a6:	e007      	b.n	80025b8 <sha256_process+0x15f0>
 80025a8:	efbe4786 	.word	0xefbe4786
 80025ac:	0fc19dc6 	.word	0x0fc19dc6
 80025b0:	240ca1cc 	.word	0x240ca1cc
 80025b4:	2de92c6f 	.word	0x2de92c6f
 80025b8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80025bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025c0:	4413      	add	r3, r2
 80025c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80025c6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80025ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80025ce:	4413      	add	r3, r2
 80025d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 80025d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025d8:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80025dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025e0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80025e4:	405a      	eors	r2, r3
 80025e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025ea:	ea4f 6373 	mov.w	r3, r3, ror #25
 80025ee:	405a      	eors	r2, r3
 80025f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80025f4:	441a      	add	r2, r3
 80025f6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80025fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80025fe:	4059      	eors	r1, r3
 8002600:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002604:	4019      	ands	r1, r3
 8002606:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800260a:	404b      	eors	r3, r1
 800260c:	441a      	add	r2, r3
 800260e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002612:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002618:	ea4f 4173 	mov.w	r1, r3, ror #17
 800261c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002620:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002626:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800262a:	4059      	eors	r1, r3
 800262c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002630:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	0a9b      	lsrs	r3, r3, #10
 8002638:	4059      	eors	r1, r3
 800263a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800263e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	4419      	add	r1, r3
 8002646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800264a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002658:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002662:	4058      	eors	r0, r3
 8002664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002668:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	08db      	lsrs	r3, r3, #3
 8002670:	4043      	eors	r3, r0
 8002672:	4419      	add	r1, r3
 8002674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002678:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	4419      	add	r1, r3
 8002680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002684:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002688:	6559      	str	r1, [r3, #84]	; 0x54
 800268a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800268e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	441a      	add	r2, r3
 8002696:	4bed      	ldr	r3, [pc, #948]	; (8002a4c <sha256_process+0x1a84>)
 8002698:	4413      	add	r3, r2
 800269a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800269e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80026a2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80026a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80026aa:	ea4f 3373 	mov.w	r3, r3, ror #13
 80026ae:	405a      	eors	r2, r3
 80026b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80026b4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80026b8:	405a      	eors	r2, r3
 80026ba:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80026be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026c2:	4019      	ands	r1, r3
 80026c4:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80026c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026cc:	4318      	orrs	r0, r3
 80026ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80026d2:	4003      	ands	r3, r0
 80026d4:	430b      	orrs	r3, r1
 80026d6:	4413      	add	r3, r2
 80026d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80026dc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80026e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026e4:	4413      	add	r3, r2
 80026e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80026ea:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80026ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80026f2:	4413      	add	r3, r2
 80026f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 80026f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026fc:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002704:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002708:	405a      	eors	r2, r3
 800270a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800270e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002712:	405a      	eors	r2, r3
 8002714:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002718:	441a      	add	r2, r3
 800271a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800271e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002722:	4059      	eors	r1, r3
 8002724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002728:	4019      	ands	r1, r3
 800272a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800272e:	404b      	eors	r3, r1
 8002730:	441a      	add	r2, r3
 8002732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002736:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800273a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800273c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002744:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800274e:	4059      	eors	r1, r3
 8002750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002754:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275a:	0a9b      	lsrs	r3, r3, #10
 800275c:	4059      	eors	r1, r3
 800275e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002762:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002768:	4419      	add	r1, r3
 800276a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800276e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800277c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002786:	4058      	eors	r0, r3
 8002788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800278c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	08db      	lsrs	r3, r3, #3
 8002794:	4043      	eors	r3, r0
 8002796:	4419      	add	r1, r3
 8002798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800279c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	4419      	add	r1, r3
 80027a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80027a8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027ac:	6599      	str	r1, [r3, #88]	; 0x58
 80027ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80027b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	441a      	add	r2, r3
 80027ba:	4ba5      	ldr	r3, [pc, #660]	; (8002a50 <sha256_process+0x1a88>)
 80027bc:	4413      	add	r3, r2
 80027be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80027c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80027c6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80027ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80027ce:	ea4f 3373 	mov.w	r3, r3, ror #13
 80027d2:	405a      	eors	r2, r3
 80027d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80027d8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80027dc:	405a      	eors	r2, r3
 80027de:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80027e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027e6:	4019      	ands	r1, r3
 80027e8:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80027ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027f0:	4318      	orrs	r0, r3
 80027f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027f6:	4003      	ands	r3, r0
 80027f8:	430b      	orrs	r3, r1
 80027fa:	4413      	add	r3, r2
 80027fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002800:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002808:	4413      	add	r3, r2
 800280a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800280e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002812:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002816:	4413      	add	r3, r2
 8002818:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 800281c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002820:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002824:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002828:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800282c:	405a      	eors	r2, r3
 800282e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002832:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002836:	405a      	eors	r2, r3
 8002838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800283c:	441a      	add	r2, r3
 800283e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8002842:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002846:	4059      	eors	r1, r3
 8002848:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800284c:	4019      	ands	r1, r3
 800284e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002852:	404b      	eors	r3, r1
 8002854:	441a      	add	r2, r3
 8002856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800285a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800285e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002860:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002868:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002872:	4059      	eors	r1, r3
 8002874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002878:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800287c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287e:	0a9b      	lsrs	r3, r3, #10
 8002880:	4059      	eors	r1, r3
 8002882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002886:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	4419      	add	r1, r3
 800288e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002892:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800289c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80028a0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80028aa:	4058      	eors	r0, r3
 80028ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80028b0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	08db      	lsrs	r3, r3, #3
 80028b8:	4043      	eors	r3, r0
 80028ba:	4419      	add	r1, r3
 80028bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80028c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	4419      	add	r1, r3
 80028c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80028cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028d0:	65d9      	str	r1, [r3, #92]	; 0x5c
 80028d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80028d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	441a      	add	r2, r3
 80028de:	4b5d      	ldr	r3, [pc, #372]	; (8002a54 <sha256_process+0x1a8c>)
 80028e0:	4413      	add	r3, r2
 80028e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80028e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80028ea:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80028ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80028f2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80028f6:	405a      	eors	r2, r3
 80028f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80028fc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002900:	405a      	eors	r2, r3
 8002902:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8002906:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800290a:	4019      	ands	r1, r3
 800290c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8002910:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002914:	4318      	orrs	r0, r3
 8002916:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800291a:	4003      	ands	r3, r0
 800291c:	430b      	orrs	r3, r1
 800291e:	4413      	add	r3, r2
 8002920:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002924:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800292c:	4413      	add	r3, r2
 800292e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002932:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002936:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800293a:	4413      	add	r3, r2
 800293c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8002940:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002944:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002948:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800294c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002950:	405a      	eors	r2, r3
 8002952:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002956:	ea4f 6373 	mov.w	r3, r3, ror #25
 800295a:	405a      	eors	r2, r3
 800295c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002960:	441a      	add	r2, r3
 8002962:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8002966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800296a:	4059      	eors	r1, r3
 800296c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002970:	4019      	ands	r1, r3
 8002972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002976:	404b      	eors	r3, r1
 8002978:	441a      	add	r2, r3
 800297a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800297e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002984:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800298c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002992:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002996:	4059      	eors	r1, r3
 8002998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800299c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a2:	0a9b      	lsrs	r3, r3, #10
 80029a4:	4059      	eors	r1, r3
 80029a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80029aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	4419      	add	r1, r3
 80029b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80029b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80029c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80029c4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80029ce:	4058      	eors	r0, r3
 80029d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80029d4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	08db      	lsrs	r3, r3, #3
 80029dc:	4043      	eors	r3, r0
 80029de:	4419      	add	r1, r3
 80029e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80029e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	4419      	add	r1, r3
 80029ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80029f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029f4:	6619      	str	r1, [r3, #96]	; 0x60
 80029f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80029fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a00:	441a      	add	r2, r3
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <sha256_process+0x1a90>)
 8002a04:	4413      	add	r3, r2
 8002a06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a0e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a16:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002a1a:	405a      	eors	r2, r3
 8002a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a20:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002a24:	405a      	eors	r2, r3
 8002a26:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8002a2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002a2e:	4019      	ands	r1, r3
 8002a30:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002a34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002a38:	4318      	orrs	r0, r3
 8002a3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a3e:	4003      	ands	r3, r0
 8002a40:	430b      	orrs	r3, r1
 8002a42:	4413      	add	r3, r2
 8002a44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002a48:	e008      	b.n	8002a5c <sha256_process+0x1a94>
 8002a4a:	bf00      	nop
 8002a4c:	4a7484aa 	.word	0x4a7484aa
 8002a50:	5cb0a9dc 	.word	0x5cb0a9dc
 8002a54:	76f988da 	.word	0x76f988da
 8002a58:	983e5152 	.word	0x983e5152
 8002a5c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a64:	4413      	add	r3, r2
 8002a66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002a6a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002a6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a72:	4413      	add	r3, r2
 8002a74:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8002a78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a7c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002a80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a84:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002a88:	405a      	eors	r2, r3
 8002a8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a8e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002a92:	405a      	eors	r2, r3
 8002a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a98:	441a      	add	r2, r3
 8002a9a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8002a9e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002aa2:	4059      	eors	r1, r3
 8002aa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002aa8:	4019      	ands	r1, r3
 8002aaa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002aae:	404b      	eors	r3, r1
 8002ab0:	441a      	add	r2, r3
 8002ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ab6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ac4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002ace:	4059      	eors	r1, r3
 8002ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ad4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	0a9b      	lsrs	r3, r3, #10
 8002adc:	4059      	eors	r1, r3
 8002ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ae2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae8:	4419      	add	r1, r3
 8002aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002aee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002afc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002b06:	4058      	eors	r0, r3
 8002b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b0c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	08db      	lsrs	r3, r3, #3
 8002b14:	4043      	eors	r3, r0
 8002b16:	4419      	add	r1, r3
 8002b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b1c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	4419      	add	r1, r3
 8002b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b28:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b2c:	6659      	str	r1, [r3, #100]	; 0x64
 8002b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b38:	441a      	add	r2, r3
 8002b3a:	4bed      	ldr	r3, [pc, #948]	; (8002ef0 <sha256_process+0x1f28>)
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002b42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b46:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002b4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b4e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002b52:	405a      	eors	r2, r3
 8002b54:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b58:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002b5c:	405a      	eors	r2, r3
 8002b5e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8002b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002b66:	4019      	ands	r1, r3
 8002b68:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8002b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002b70:	4318      	orrs	r0, r3
 8002b72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b76:	4003      	ands	r3, r0
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002b80:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b88:	4413      	add	r3, r2
 8002b8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b8e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002b92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b96:	4413      	add	r3, r2
 8002b98:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8002b9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ba0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002ba4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ba8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002bac:	405a      	eors	r2, r3
 8002bae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002bb2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002bb6:	405a      	eors	r2, r3
 8002bb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002bbc:	441a      	add	r2, r3
 8002bbe:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8002bc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bc6:	4059      	eors	r1, r3
 8002bc8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002bcc:	4019      	ands	r1, r3
 8002bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bd2:	404b      	eors	r3, r1
 8002bd4:	441a      	add	r2, r3
 8002bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002bda:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be0:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002be8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bee:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002bf2:	4059      	eors	r1, r3
 8002bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002bf8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfe:	0a9b      	lsrs	r3, r3, #10
 8002c00:	4059      	eors	r1, r3
 8002c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0c:	4419      	add	r1, r3
 8002c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c20:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002c2a:	4058      	eors	r0, r3
 8002c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c30:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	08db      	lsrs	r3, r3, #3
 8002c38:	4043      	eors	r3, r0
 8002c3a:	4419      	add	r1, r3
 8002c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c40:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	4419      	add	r1, r3
 8002c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c4c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c50:	6699      	str	r1, [r3, #104]	; 0x68
 8002c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c5c:	441a      	add	r2, r3
 8002c5e:	4ba5      	ldr	r3, [pc, #660]	; (8002ef4 <sha256_process+0x1f2c>)
 8002c60:	4413      	add	r3, r2
 8002c62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c6a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c72:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002c76:	405a      	eors	r2, r3
 8002c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c7c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002c80:	405a      	eors	r2, r3
 8002c82:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8002c86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c8a:	4019      	ands	r1, r3
 8002c8c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002c90:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c94:	4318      	orrs	r0, r3
 8002c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002c9a:	4003      	ands	r3, r0
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002ca4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cac:	4413      	add	r3, r2
 8002cae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002cb2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002cb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002cba:	4413      	add	r3, r2
 8002cbc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8002cc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002cc4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002cc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002ccc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002cd0:	405a      	eors	r2, r3
 8002cd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002cd6:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002cda:	405a      	eors	r2, r3
 8002cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ce0:	441a      	add	r2, r3
 8002ce2:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8002ce6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cea:	4059      	eors	r1, r3
 8002cec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002cf0:	4019      	ands	r1, r3
 8002cf2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cf6:	404b      	eors	r3, r1
 8002cf8:	441a      	add	r2, r3
 8002cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002cfe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d04:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d0c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d12:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002d16:	4059      	eors	r1, r3
 8002d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d1c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d22:	0a9b      	lsrs	r3, r3, #10
 8002d24:	4059      	eors	r1, r3
 8002d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d30:	4419      	add	r1, r3
 8002d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d36:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d44:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002d4e:	4058      	eors	r0, r3
 8002d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d54:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	08db      	lsrs	r3, r3, #3
 8002d5c:	4043      	eors	r3, r0
 8002d5e:	4419      	add	r1, r3
 8002d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d64:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	4419      	add	r1, r3
 8002d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d70:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d74:	66d9      	str	r1, [r3, #108]	; 0x6c
 8002d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d80:	441a      	add	r2, r3
 8002d82:	4b5d      	ldr	r3, [pc, #372]	; (8002ef8 <sha256_process+0x1f30>)
 8002d84:	4413      	add	r3, r2
 8002d86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002d8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002d8e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002d92:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002d96:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002d9a:	405a      	eors	r2, r3
 8002d9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002da0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002da4:	405a      	eors	r2, r3
 8002da6:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8002daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dae:	4019      	ands	r1, r3
 8002db0:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8002db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db8:	4318      	orrs	r0, r3
 8002dba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002dbe:	4003      	ands	r3, r0
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002dc8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002dd6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002dda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002dde:	4413      	add	r3, r2
 8002de0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8002de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002de8:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002df0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002df4:	405a      	eors	r2, r3
 8002df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002dfa:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002dfe:	405a      	eors	r2, r3
 8002e00:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e04:	441a      	add	r2, r3
 8002e06:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8002e0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002e0e:	4059      	eors	r1, r3
 8002e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002e14:	4019      	ands	r1, r3
 8002e16:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002e1a:	404b      	eors	r3, r1
 8002e1c:	441a      	add	r2, r3
 8002e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e28:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e30:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e36:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002e3a:	4059      	eors	r1, r3
 8002e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e40:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e46:	0a9b      	lsrs	r3, r3, #10
 8002e48:	4059      	eors	r1, r3
 8002e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e4e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	4419      	add	r1, r3
 8002e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e60:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e68:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002e72:	4058      	eors	r0, r3
 8002e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e78:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	08db      	lsrs	r3, r3, #3
 8002e80:	4043      	eors	r3, r0
 8002e82:	4419      	add	r1, r3
 8002e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e88:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4419      	add	r1, r3
 8002e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e94:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e98:	6719      	str	r1, [r3, #112]	; 0x70
 8002e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	441a      	add	r2, r3
 8002ea6:	4b15      	ldr	r3, [pc, #84]	; (8002efc <sha256_process+0x1f34>)
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002eb2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002eb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002eba:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002ebe:	405a      	eors	r2, r3
 8002ec0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ec4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002ec8:	405a      	eors	r2, r3
 8002eca:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8002ece:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002ed2:	4019      	ands	r1, r3
 8002ed4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002ed8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002edc:	4318      	orrs	r0, r3
 8002ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ee2:	4003      	ands	r3, r0
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002eec:	e008      	b.n	8002f00 <sha256_process+0x1f38>
 8002eee:	bf00      	nop
 8002ef0:	a831c66d 	.word	0xa831c66d
 8002ef4:	b00327c8 	.word	0xb00327c8
 8002ef8:	bf597fc7 	.word	0xbf597fc7
 8002efc:	c6e00bf3 	.word	0xc6e00bf3
 8002f00:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f08:	4413      	add	r3, r2
 8002f0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002f0e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002f12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f16:	4413      	add	r3, r2
 8002f18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8002f1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f20:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002f24:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f28:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002f2c:	405a      	eors	r2, r3
 8002f2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f32:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002f36:	405a      	eors	r2, r3
 8002f38:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002f3c:	441a      	add	r2, r3
 8002f3e:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8002f42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f46:	4059      	eors	r1, r3
 8002f48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f4c:	4019      	ands	r1, r3
 8002f4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f52:	404b      	eors	r3, r1
 8002f54:	441a      	add	r2, r3
 8002f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002f5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f60:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002f68:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f6e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002f72:	4059      	eors	r1, r3
 8002f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002f78:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f7e:	0a9b      	lsrs	r3, r3, #10
 8002f80:	4059      	eors	r1, r3
 8002f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002f86:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8c:	4419      	add	r1, r3
 8002f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002f92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fa0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002faa:	4058      	eors	r0, r3
 8002fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fb0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	08db      	lsrs	r3, r3, #3
 8002fb8:	4043      	eors	r3, r0
 8002fba:	4419      	add	r1, r3
 8002fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fc0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc6:	4419      	add	r1, r3
 8002fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fcc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fd0:	6759      	str	r1, [r3, #116]	; 0x74
 8002fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fd6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fdc:	441a      	add	r2, r3
 8002fde:	4bee      	ldr	r3, [pc, #952]	; (8003398 <sha256_process+0x23d0>)
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002fe6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002fea:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002fee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ff2:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002ff6:	405a      	eors	r2, r3
 8002ff8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ffc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003000:	405a      	eors	r2, r3
 8003002:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8003006:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800300a:	4019      	ands	r1, r3
 800300c:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8003010:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003014:	4318      	orrs	r0, r3
 8003016:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800301a:	4003      	ands	r3, r0
 800301c:	430b      	orrs	r3, r1
 800301e:	4413      	add	r3, r2
 8003020:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003024:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800302c:	4413      	add	r3, r2
 800302e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003032:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003036:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800303a:	4413      	add	r3, r2
 800303c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8003040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003044:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800304c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003050:	405a      	eors	r2, r3
 8003052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003056:	ea4f 6373 	mov.w	r3, r3, ror #25
 800305a:	405a      	eors	r2, r3
 800305c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003060:	441a      	add	r2, r3
 8003062:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8003066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800306a:	4059      	eors	r1, r3
 800306c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003070:	4019      	ands	r1, r3
 8003072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003076:	404b      	eors	r3, r1
 8003078:	441a      	add	r2, r3
 800307a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800307e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800308c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003096:	4059      	eors	r1, r3
 8003098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800309c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	0a9b      	lsrs	r3, r3, #10
 80030a4:	4059      	eors	r1, r3
 80030a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b0:	4419      	add	r1, r3
 80030b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030bc:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80030c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030c4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80030ce:	4058      	eors	r0, r3
 80030d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030d4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	08db      	lsrs	r3, r3, #3
 80030dc:	4043      	eors	r3, r0
 80030de:	4419      	add	r1, r3
 80030e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	4419      	add	r1, r3
 80030ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030f4:	6799      	str	r1, [r3, #120]	; 0x78
 80030f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003100:	441a      	add	r2, r3
 8003102:	4ba6      	ldr	r3, [pc, #664]	; (800339c <sha256_process+0x23d4>)
 8003104:	4413      	add	r3, r2
 8003106:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800310a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800310e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003112:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003116:	ea4f 3373 	mov.w	r3, r3, ror #13
 800311a:	405a      	eors	r2, r3
 800311c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003120:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003124:	405a      	eors	r2, r3
 8003126:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800312a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800312e:	4019      	ands	r1, r3
 8003130:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8003134:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003138:	4318      	orrs	r0, r3
 800313a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800313e:	4003      	ands	r3, r0
 8003140:	430b      	orrs	r3, r1
 8003142:	4413      	add	r3, r2
 8003144:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003148:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800314c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003150:	4413      	add	r3, r2
 8003152:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003156:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800315a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800315e:	4413      	add	r3, r2
 8003160:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8003164:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003168:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800316c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003170:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003174:	405a      	eors	r2, r3
 8003176:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800317a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800317e:	405a      	eors	r2, r3
 8003180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003184:	441a      	add	r2, r3
 8003186:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800318a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800318e:	4059      	eors	r1, r3
 8003190:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003194:	4019      	ands	r1, r3
 8003196:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800319a:	404b      	eors	r3, r1
 800319c:	441a      	add	r2, r3
 800319e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80031a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a8:	ea4f 4173 	mov.w	r1, r3, ror #17
 80031ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80031b0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80031ba:	4059      	eors	r1, r3
 80031bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80031c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c6:	0a9b      	lsrs	r3, r3, #10
 80031c8:	4059      	eors	r1, r3
 80031ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80031ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d4:	4419      	add	r1, r3
 80031d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80031da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80031e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80031e8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80031f2:	4058      	eors	r0, r3
 80031f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80031f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	08db      	lsrs	r3, r3, #3
 8003200:	4043      	eors	r3, r0
 8003202:	4419      	add	r1, r3
 8003204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003208:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320e:	4419      	add	r1, r3
 8003210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003214:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003218:	67d9      	str	r1, [r3, #124]	; 0x7c
 800321a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800321e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003224:	441a      	add	r2, r3
 8003226:	4b5e      	ldr	r3, [pc, #376]	; (80033a0 <sha256_process+0x23d8>)
 8003228:	4413      	add	r3, r2
 800322a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800322e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003232:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003236:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800323a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800323e:	405a      	eors	r2, r3
 8003240:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003244:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003248:	405a      	eors	r2, r3
 800324a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800324e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003252:	4019      	ands	r1, r3
 8003254:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8003258:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800325c:	4318      	orrs	r0, r3
 800325e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003262:	4003      	ands	r3, r0
 8003264:	430b      	orrs	r3, r1
 8003266:	4413      	add	r3, r2
 8003268:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800326c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003274:	4413      	add	r3, r2
 8003276:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800327a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800327e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003282:	4413      	add	r3, r2
 8003284:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8003288:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800328c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003290:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003294:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003298:	405a      	eors	r2, r3
 800329a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800329e:	ea4f 6373 	mov.w	r3, r3, ror #25
 80032a2:	405a      	eors	r2, r3
 80032a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80032a8:	441a      	add	r2, r3
 80032aa:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80032ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032b2:	4059      	eors	r1, r3
 80032b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032b8:	4019      	ands	r1, r3
 80032ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032be:	404b      	eors	r3, r1
 80032c0:	441a      	add	r2, r3
 80032c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80032c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032cc:	ea4f 4173 	mov.w	r1, r3, ror #17
 80032d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80032d4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032da:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80032de:	4059      	eors	r1, r3
 80032e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80032e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ea:	0a9b      	lsrs	r3, r3, #10
 80032ec:	4059      	eors	r1, r3
 80032ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80032f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032f8:	4419      	add	r1, r3
 80032fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80032fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003304:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800330c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003316:	4058      	eors	r0, r3
 8003318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800331c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	08db      	lsrs	r3, r3, #3
 8003324:	4043      	eors	r3, r0
 8003326:	4419      	add	r1, r3
 8003328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800332c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4419      	add	r1, r3
 8003334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003338:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800333c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
 8003340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003344:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800334c:	441a      	add	r2, r3
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <sha256_process+0x23dc>)
 8003350:	4413      	add	r3, r2
 8003352:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800335a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800335e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003362:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003366:	405a      	eors	r2, r3
 8003368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800336c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003370:	405a      	eors	r2, r3
 8003372:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8003376:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800337a:	4019      	ands	r1, r3
 800337c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8003380:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003384:	4318      	orrs	r0, r3
 8003386:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800338a:	4003      	ands	r3, r0
 800338c:	430b      	orrs	r3, r1
 800338e:	4413      	add	r3, r2
 8003390:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003394:	e008      	b.n	80033a8 <sha256_process+0x23e0>
 8003396:	bf00      	nop
 8003398:	d5a79147 	.word	0xd5a79147
 800339c:	06ca6351 	.word	0x06ca6351
 80033a0:	14292967 	.word	0x14292967
 80033a4:	27b70a85 	.word	0x27b70a85
 80033a8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80033ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033b0:	4413      	add	r3, r2
 80033b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80033b6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80033ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80033be:	4413      	add	r3, r2
 80033c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80033c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80033c8:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80033cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80033d0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80033d4:	405a      	eors	r2, r3
 80033d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80033da:	ea4f 6373 	mov.w	r3, r3, ror #25
 80033de:	405a      	eors	r2, r3
 80033e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e4:	441a      	add	r2, r3
 80033e6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80033ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80033ee:	4059      	eors	r1, r3
 80033f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80033f4:	4019      	ands	r1, r3
 80033f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80033fa:	404b      	eors	r3, r1
 80033fc:	441a      	add	r2, r3
 80033fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003402:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003408:	ea4f 4173 	mov.w	r1, r3, ror #17
 800340c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003410:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003416:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800341a:	4059      	eors	r1, r3
 800341c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003420:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003426:	0a9b      	lsrs	r3, r3, #10
 8003428:	4059      	eors	r1, r3
 800342a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800342e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003434:	4419      	add	r1, r3
 8003436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800343a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800343e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003440:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003448:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800344c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003452:	4058      	eors	r0, r3
 8003454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003458:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800345c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345e:	08db      	lsrs	r3, r3, #3
 8003460:	4043      	eors	r3, r0
 8003462:	4419      	add	r1, r3
 8003464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003468:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	4419      	add	r1, r3
 8003470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003474:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003478:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
 800347c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003480:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003488:	441a      	add	r2, r3
 800348a:	4bf4      	ldr	r3, [pc, #976]	; (800385c <sha256_process+0x2894>)
 800348c:	4413      	add	r3, r2
 800348e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003492:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003496:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800349a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800349e:	ea4f 3373 	mov.w	r3, r3, ror #13
 80034a2:	405a      	eors	r2, r3
 80034a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80034a8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80034ac:	405a      	eors	r2, r3
 80034ae:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80034b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80034b6:	4019      	ands	r1, r3
 80034b8:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80034bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80034c0:	4318      	orrs	r0, r3
 80034c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80034c6:	4003      	ands	r3, r0
 80034c8:	430b      	orrs	r3, r1
 80034ca:	4413      	add	r3, r2
 80034cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80034d0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80034d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d8:	4413      	add	r3, r2
 80034da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80034de:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80034e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80034e6:	4413      	add	r3, r2
 80034e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80034ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80034f0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80034f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80034f8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80034fc:	405a      	eors	r2, r3
 80034fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003502:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003506:	405a      	eors	r2, r3
 8003508:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800350c:	441a      	add	r2, r3
 800350e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8003512:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003516:	4059      	eors	r1, r3
 8003518:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800351c:	4019      	ands	r1, r3
 800351e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003522:	404b      	eors	r3, r1
 8003524:	441a      	add	r2, r3
 8003526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800352a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800352e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003532:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800353a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800353e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003542:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003546:	4059      	eors	r1, r3
 8003548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800354c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003554:	0a9b      	lsrs	r3, r3, #10
 8003556:	4059      	eors	r1, r3
 8003558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800355c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003562:	4419      	add	r1, r3
 8003564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003568:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800356c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003576:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800357a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003580:	4058      	eors	r0, r3
 8003582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003586:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800358a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358c:	08db      	lsrs	r3, r3, #3
 800358e:	4043      	eors	r3, r0
 8003590:	4419      	add	r1, r3
 8003592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003596:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800359a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359c:	4419      	add	r1, r3
 800359e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80035a6:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 80035aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	441a      	add	r2, r3
 80035b8:	4ba9      	ldr	r3, [pc, #676]	; (8003860 <sha256_process+0x2898>)
 80035ba:	4413      	add	r3, r2
 80035bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80035c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035c4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80035c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035cc:	ea4f 3373 	mov.w	r3, r3, ror #13
 80035d0:	405a      	eors	r2, r3
 80035d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80035da:	405a      	eors	r2, r3
 80035dc:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80035e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035e4:	4019      	ands	r1, r3
 80035e6:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80035ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035ee:	4318      	orrs	r0, r3
 80035f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035f4:	4003      	ands	r3, r0
 80035f6:	430b      	orrs	r3, r1
 80035f8:	4413      	add	r3, r2
 80035fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80035fe:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003606:	4413      	add	r3, r2
 8003608:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800360c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003610:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003614:	4413      	add	r3, r2
 8003616:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800361a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800361e:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003622:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003626:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800362a:	405a      	eors	r2, r3
 800362c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003630:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003634:	405a      	eors	r2, r3
 8003636:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800363a:	441a      	add	r2, r3
 800363c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8003640:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003644:	4059      	eors	r1, r3
 8003646:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800364a:	4019      	ands	r1, r3
 800364c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003650:	404b      	eors	r3, r1
 8003652:	441a      	add	r2, r3
 8003654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003658:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800365c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003660:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003668:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800366c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003670:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003674:	4059      	eors	r1, r3
 8003676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800367a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800367e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003682:	0a9b      	lsrs	r3, r3, #10
 8003684:	4059      	eors	r1, r3
 8003686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800368a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4419      	add	r1, r3
 8003692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003696:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800369a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369c:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80036a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036a4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80036a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036aa:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80036ae:	4058      	eors	r0, r3
 80036b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80036b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ba:	08db      	lsrs	r3, r3, #3
 80036bc:	4043      	eors	r3, r0
 80036be:	4419      	add	r1, r3
 80036c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036c4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	4419      	add	r1, r3
 80036cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036d0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80036d4:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
 80036d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036dc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80036e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e4:	441a      	add	r2, r3
 80036e6:	4b5f      	ldr	r3, [pc, #380]	; (8003864 <sha256_process+0x289c>)
 80036e8:	4413      	add	r3, r2
 80036ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80036ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80036f2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80036f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80036fa:	ea4f 3373 	mov.w	r3, r3, ror #13
 80036fe:	405a      	eors	r2, r3
 8003700:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003704:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003708:	405a      	eors	r2, r3
 800370a:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800370e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003712:	4019      	ands	r1, r3
 8003714:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8003718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371c:	4318      	orrs	r0, r3
 800371e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003722:	4003      	ands	r3, r0
 8003724:	430b      	orrs	r3, r1
 8003726:	4413      	add	r3, r2
 8003728:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800372c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003734:	4413      	add	r3, r2
 8003736:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800373a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800373e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003742:	4413      	add	r3, r2
 8003744:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8003748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800374c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003754:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003758:	405a      	eors	r2, r3
 800375a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800375e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003762:	405a      	eors	r2, r3
 8003764:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003768:	441a      	add	r2, r3
 800376a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800376e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003772:	4059      	eors	r1, r3
 8003774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003778:	4019      	ands	r1, r3
 800377a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800377e:	404b      	eors	r3, r1
 8003780:	441a      	add	r2, r3
 8003782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003786:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003796:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80037a2:	4059      	eors	r1, r3
 80037a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037a8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	0a9b      	lsrs	r3, r3, #10
 80037b2:	4059      	eors	r1, r3
 80037b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037b8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037be:	4419      	add	r1, r3
 80037c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037c4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80037ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80037dc:	4058      	eors	r0, r3
 80037de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	08db      	lsrs	r3, r3, #3
 80037ea:	4043      	eors	r3, r0
 80037ec:	4419      	add	r1, r3
 80037ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f8:	4419      	add	r1, r3
 80037fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003802:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 8003806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800380a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003812:	441a      	add	r2, r3
 8003814:	4b14      	ldr	r3, [pc, #80]	; (8003868 <sha256_process+0x28a0>)
 8003816:	4413      	add	r3, r2
 8003818:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800381c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003820:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003824:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003828:	ea4f 3373 	mov.w	r3, r3, ror #13
 800382c:	405a      	eors	r2, r3
 800382e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003832:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003836:	405a      	eors	r2, r3
 8003838:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800383c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003840:	4019      	ands	r1, r3
 8003842:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8003846:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800384a:	4318      	orrs	r0, r3
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003850:	4003      	ands	r3, r0
 8003852:	430b      	orrs	r3, r1
 8003854:	4413      	add	r3, r2
 8003856:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800385a:	e007      	b.n	800386c <sha256_process+0x28a4>
 800385c:	2e1b2138 	.word	0x2e1b2138
 8003860:	4d2c6dfc 	.word	0x4d2c6dfc
 8003864:	53380d13 	.word	0x53380d13
 8003868:	650a7354 	.word	0x650a7354
 800386c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003870:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003874:	4413      	add	r3, r2
 8003876:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800387a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800387e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003882:	4413      	add	r3, r2
 8003884:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8003888:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800388c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003890:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003894:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003898:	405a      	eors	r2, r3
 800389a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800389e:	ea4f 6373 	mov.w	r3, r3, ror #25
 80038a2:	405a      	eors	r2, r3
 80038a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80038a8:	441a      	add	r2, r3
 80038aa:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80038ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80038b2:	4059      	eors	r1, r3
 80038b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038b8:	4019      	ands	r1, r3
 80038ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80038be:	404b      	eors	r3, r1
 80038c0:	441a      	add	r2, r3
 80038c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ce:	ea4f 4173 	mov.w	r1, r3, ror #17
 80038d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038de:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80038e2:	4059      	eors	r1, r3
 80038e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038e8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f0:	0a9b      	lsrs	r3, r3, #10
 80038f2:	4059      	eors	r1, r3
 80038f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038fe:	4419      	add	r1, r3
 8003900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003904:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800390e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003912:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003918:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800391c:	4058      	eors	r0, r3
 800391e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003922:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003928:	08db      	lsrs	r3, r3, #3
 800392a:	4043      	eors	r3, r0
 800392c:	4419      	add	r1, r3
 800392e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003932:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003938:	4419      	add	r1, r3
 800393a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800393e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003942:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
 8003946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800394a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800394e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003952:	441a      	add	r2, r3
 8003954:	4bf5      	ldr	r3, [pc, #980]	; (8003d2c <sha256_process+0x2d64>)
 8003956:	4413      	add	r3, r2
 8003958:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800395c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003960:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003964:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003968:	ea4f 3373 	mov.w	r3, r3, ror #13
 800396c:	405a      	eors	r2, r3
 800396e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003972:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003976:	405a      	eors	r2, r3
 8003978:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800397c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003980:	4019      	ands	r1, r3
 8003982:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8003986:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800398a:	4318      	orrs	r0, r3
 800398c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003990:	4003      	ands	r3, r0
 8003992:	430b      	orrs	r3, r1
 8003994:	4413      	add	r3, r2
 8003996:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800399a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800399e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039a2:	4413      	add	r3, r2
 80039a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80039a8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80039ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039b0:	4413      	add	r3, r2
 80039b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ba:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80039c6:	405a      	eors	r2, r3
 80039c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039cc:	ea4f 6373 	mov.w	r3, r3, ror #25
 80039d0:	405a      	eors	r2, r3
 80039d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039d6:	441a      	add	r2, r3
 80039d8:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80039dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039e0:	4059      	eors	r1, r3
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e6:	4019      	ands	r1, r3
 80039e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039ec:	404b      	eors	r3, r1
 80039ee:	441a      	add	r2, r3
 80039f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039f4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80039f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fc:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a04:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0c:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003a10:	4059      	eors	r1, r3
 8003a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	0a9b      	lsrs	r3, r3, #10
 8003a20:	4059      	eors	r1, r3
 8003a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a2c:	4419      	add	r1, r3
 8003a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a40:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a46:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003a4a:	4058      	eors	r0, r3
 8003a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a50:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	08db      	lsrs	r3, r3, #3
 8003a58:	4043      	eors	r3, r0
 8003a5a:	4419      	add	r1, r3
 8003a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a60:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a66:	4419      	add	r1, r3
 8003a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a6c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a70:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 8003a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a78:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a80:	441a      	add	r2, r3
 8003a82:	4bab      	ldr	r3, [pc, #684]	; (8003d30 <sha256_process+0x2d68>)
 8003a84:	4413      	add	r3, r2
 8003a86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003a8a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003a8e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003a92:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003a96:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003a9a:	405a      	eors	r2, r3
 8003a9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003aa0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003aa4:	405a      	eors	r2, r3
 8003aa6:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8003aaa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003aae:	4019      	ands	r1, r3
 8003ab0:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8003ab4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ab8:	4318      	orrs	r0, r3
 8003aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003abe:	4003      	ands	r3, r0
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003ac8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003ad6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003ada:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ade:	4413      	add	r3, r2
 8003ae0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8003ae4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003ae8:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003aec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003af0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003af4:	405a      	eors	r2, r3
 8003af6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003afa:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003afe:	405a      	eors	r2, r3
 8003b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b04:	441a      	add	r2, r3
 8003b06:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8003b0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b0e:	4059      	eors	r1, r3
 8003b10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003b14:	4019      	ands	r1, r3
 8003b16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003b1a:	404b      	eors	r3, r1
 8003b1c:	441a      	add	r2, r3
 8003b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b2a:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b3a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003b3e:	4059      	eors	r1, r3
 8003b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b44:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4c:	0a9b      	lsrs	r3, r3, #10
 8003b4e:	4059      	eors	r1, r3
 8003b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b54:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b5c:	4419      	add	r1, r3
 8003b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b62:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b68:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b70:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b76:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003b7a:	4058      	eors	r0, r3
 8003b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b80:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b86:	08db      	lsrs	r3, r3, #3
 8003b88:	4043      	eors	r3, r0
 8003b8a:	4419      	add	r1, r3
 8003b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b90:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	4419      	add	r1, r3
 8003b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b9c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ba0:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
 8003ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ba8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003bac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bb0:	441a      	add	r2, r3
 8003bb2:	4b60      	ldr	r3, [pc, #384]	; (8003d34 <sha256_process+0x2d6c>)
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003bba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003bbe:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003bc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003bc6:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003bca:	405a      	eors	r2, r3
 8003bcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003bd0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003bd4:	405a      	eors	r2, r3
 8003bd6:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8003bda:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003bde:	4019      	ands	r1, r3
 8003be0:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8003be4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003be8:	4318      	orrs	r0, r3
 8003bea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003bee:	4003      	ands	r3, r0
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003bf8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c00:	4413      	add	r3, r2
 8003c02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003c06:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003c0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c0e:	4413      	add	r3, r2
 8003c10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8003c14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c18:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003c1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c20:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003c24:	405a      	eors	r2, r3
 8003c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c2a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003c2e:	405a      	eors	r2, r3
 8003c30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003c34:	441a      	add	r2, r3
 8003c36:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8003c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c3e:	4059      	eors	r1, r3
 8003c40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c44:	4019      	ands	r1, r3
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c4a:	404b      	eors	r3, r1
 8003c4c:	441a      	add	r2, r3
 8003c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c5a:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c62:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c6a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003c6e:	4059      	eors	r1, r3
 8003c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c74:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c7c:	0a9b      	lsrs	r3, r3, #10
 8003c7e:	4059      	eors	r1, r3
 8003c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c84:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c8c:	4419      	add	r1, r3
 8003c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c98:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ca0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003caa:	4058      	eors	r0, r3
 8003cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cb0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb6:	08db      	lsrs	r3, r3, #3
 8003cb8:	4043      	eors	r3, r0
 8003cba:	4419      	add	r1, r3
 8003cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cc0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc6:	4419      	add	r1, r3
 8003cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ccc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003cd0:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
 8003cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cd8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003cdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ce0:	441a      	add	r2, r3
 8003ce2:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <sha256_process+0x2d70>)
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cee:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cf6:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003cfa:	405a      	eors	r2, r3
 8003cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d00:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003d04:	405a      	eors	r2, r3
 8003d06:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8003d0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d0e:	4019      	ands	r1, r3
 8003d10:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8003d14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d18:	4318      	orrs	r0, r3
 8003d1a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d1e:	4003      	ands	r3, r0
 8003d20:	430b      	orrs	r3, r1
 8003d22:	4413      	add	r3, r2
 8003d24:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003d28:	e008      	b.n	8003d3c <sha256_process+0x2d74>
 8003d2a:	bf00      	nop
 8003d2c:	766a0abb 	.word	0x766a0abb
 8003d30:	81c2c92e 	.word	0x81c2c92e
 8003d34:	92722c85 	.word	0x92722c85
 8003d38:	a2bfe8a1 	.word	0xa2bfe8a1
 8003d3c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d44:	4413      	add	r3, r2
 8003d46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003d4a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003d4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d52:	4413      	add	r3, r2
 8003d54:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8003d58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d5c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003d60:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d64:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003d68:	405a      	eors	r2, r3
 8003d6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d6e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003d72:	405a      	eors	r2, r3
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d78:	441a      	add	r2, r3
 8003d7a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8003d7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003d82:	4059      	eors	r1, r3
 8003d84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d88:	4019      	ands	r1, r3
 8003d8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003d8e:	404b      	eors	r3, r1
 8003d90:	441a      	add	r2, r3
 8003d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d9e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003da6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003daa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dae:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003db2:	4059      	eors	r1, r3
 8003db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003db8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003dbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dc0:	0a9b      	lsrs	r3, r3, #10
 8003dc2:	4059      	eors	r1, r3
 8003dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dc8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd0:	4419      	add	r1, r3
 8003dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dd6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ddc:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003de4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dea:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003dee:	4058      	eors	r0, r3
 8003df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003df4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003df8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dfa:	08db      	lsrs	r3, r3, #3
 8003dfc:	4043      	eors	r3, r0
 8003dfe:	4419      	add	r1, r3
 8003e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e04:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e0a:	4419      	add	r1, r3
 8003e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e10:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003e14:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
 8003e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003e1c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003e20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e24:	441a      	add	r2, r3
 8003e26:	4bf6      	ldr	r3, [pc, #984]	; (8004200 <sha256_process+0x3238>)
 8003e28:	4413      	add	r3, r2
 8003e2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003e2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e32:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003e36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e3a:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003e3e:	405a      	eors	r2, r3
 8003e40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e44:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003e48:	405a      	eors	r2, r3
 8003e4a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8003e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e52:	4019      	ands	r1, r3
 8003e54:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8003e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e5c:	4318      	orrs	r0, r3
 8003e5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e62:	4003      	ands	r3, r0
 8003e64:	430b      	orrs	r3, r1
 8003e66:	4413      	add	r3, r2
 8003e68:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003e6c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e74:	4413      	add	r3, r2
 8003e76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e7a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003e7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e82:	4413      	add	r3, r2
 8003e84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8003e88:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003e8c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003e90:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003e94:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003e98:	405a      	eors	r2, r3
 8003e9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003e9e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003ea2:	405a      	eors	r2, r3
 8003ea4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003ea8:	441a      	add	r2, r3
 8003eaa:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8003eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003eb2:	4059      	eors	r1, r3
 8003eb4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003eb8:	4019      	ands	r1, r3
 8003eba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ebe:	404b      	eors	r3, r1
 8003ec0:	441a      	add	r2, r3
 8003ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ec6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003eca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ece:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ed6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003eda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ede:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003ee2:	4059      	eors	r1, r3
 8003ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ee8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003eec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ef0:	0a9b      	lsrs	r3, r3, #10
 8003ef2:	4059      	eors	r1, r3
 8003ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ef8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f00:	4419      	add	r1, r3
 8003f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f0c:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f14:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f1a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003f1e:	4058      	eors	r0, r3
 8003f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f24:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2a:	08db      	lsrs	r3, r3, #3
 8003f2c:	4043      	eors	r3, r0
 8003f2e:	4419      	add	r1, r3
 8003f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f34:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f3a:	4419      	add	r1, r3
 8003f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f40:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f44:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
 8003f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f4c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f54:	441a      	add	r2, r3
 8003f56:	4bab      	ldr	r3, [pc, #684]	; (8004204 <sha256_process+0x323c>)
 8003f58:	4413      	add	r3, r2
 8003f5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f62:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6a:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003f6e:	405a      	eors	r2, r3
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f74:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003f78:	405a      	eors	r2, r3
 8003f7a:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8003f7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f82:	4019      	ands	r1, r3
 8003f84:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8003f88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f8c:	4318      	orrs	r0, r3
 8003f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f92:	4003      	ands	r3, r0
 8003f94:	430b      	orrs	r3, r1
 8003f96:	4413      	add	r3, r2
 8003f98:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003f9c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003faa:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003fae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8003fb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fbc:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003fc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fc4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003fc8:	405a      	eors	r2, r3
 8003fca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fce:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003fd2:	405a      	eors	r2, r3
 8003fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fd8:	441a      	add	r2, r3
 8003fda:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8003fde:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003fe2:	4059      	eors	r1, r3
 8003fe4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fe8:	4019      	ands	r1, r3
 8003fea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003fee:	404b      	eors	r3, r1
 8003ff0:	441a      	add	r2, r3
 8003ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ff6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ffa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ffe:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004006:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800400a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800400e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004012:	4059      	eors	r1, r3
 8004014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004018:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800401c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004020:	0a9b      	lsrs	r3, r3, #10
 8004022:	4059      	eors	r1, r3
 8004024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004028:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800402c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004030:	4419      	add	r1, r3
 8004032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004036:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004044:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800404e:	4058      	eors	r0, r3
 8004050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004054:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	08db      	lsrs	r3, r3, #3
 800405c:	4043      	eors	r3, r0
 800405e:	4419      	add	r1, r3
 8004060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004064:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406a:	4419      	add	r1, r3
 800406c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004070:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004074:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
 8004078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800407c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004080:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004084:	441a      	add	r2, r3
 8004086:	4b60      	ldr	r3, [pc, #384]	; (8004208 <sha256_process+0x3240>)
 8004088:	4413      	add	r3, r2
 800408a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800408e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004092:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004096:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800409a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800409e:	405a      	eors	r2, r3
 80040a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80040a4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80040a8:	405a      	eors	r2, r3
 80040aa:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b2:	4019      	ands	r1, r3
 80040b4:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040bc:	4318      	orrs	r0, r3
 80040be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040c2:	4003      	ands	r3, r0
 80040c4:	430b      	orrs	r3, r1
 80040c6:	4413      	add	r3, r2
 80040c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80040cc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80040d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040d4:	4413      	add	r3, r2
 80040d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80040da:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80040de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80040e2:	4413      	add	r3, r2
 80040e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80040e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040ec:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80040f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040f4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80040f8:	405a      	eors	r2, r3
 80040fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040fe:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004102:	405a      	eors	r2, r3
 8004104:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004108:	441a      	add	r2, r3
 800410a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800410e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004112:	4059      	eors	r1, r3
 8004114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004118:	4019      	ands	r1, r3
 800411a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800411e:	404b      	eors	r3, r1
 8004120:	441a      	add	r2, r3
 8004122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004126:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800412a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800412e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004136:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800413a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800413e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004142:	4059      	eors	r1, r3
 8004144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004148:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800414c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004150:	0a9b      	lsrs	r3, r3, #10
 8004152:	4059      	eors	r1, r3
 8004154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004158:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800415c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004160:	4419      	add	r1, r3
 8004162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004166:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800416a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416c:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004174:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800417e:	4058      	eors	r0, r3
 8004180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004184:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800418a:	08db      	lsrs	r3, r3, #3
 800418c:	4043      	eors	r3, r0
 800418e:	4419      	add	r1, r3
 8004190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004194:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	4419      	add	r1, r3
 800419c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041a0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80041a4:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 80041a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80041b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041b4:	441a      	add	r2, r3
 80041b6:	4b15      	ldr	r3, [pc, #84]	; (800420c <sha256_process+0x3244>)
 80041b8:	4413      	add	r3, r2
 80041ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80041be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041c2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80041c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041ca:	ea4f 3373 	mov.w	r3, r3, ror #13
 80041ce:	405a      	eors	r2, r3
 80041d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041d4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80041d8:	405a      	eors	r2, r3
 80041da:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80041de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80041e2:	4019      	ands	r1, r3
 80041e4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80041e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80041ec:	4318      	orrs	r0, r3
 80041ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f2:	4003      	ands	r3, r0
 80041f4:	430b      	orrs	r3, r1
 80041f6:	4413      	add	r3, r2
 80041f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80041fc:	e008      	b.n	8004210 <sha256_process+0x3248>
 80041fe:	bf00      	nop
 8004200:	a81a664b 	.word	0xa81a664b
 8004204:	c24b8b70 	.word	0xc24b8b70
 8004208:	c76c51a3 	.word	0xc76c51a3
 800420c:	d192e819 	.word	0xd192e819
 8004210:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004218:	4413      	add	r3, r2
 800421a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800421e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004222:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004226:	4413      	add	r3, r2
 8004228:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 800422c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004230:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004234:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004238:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800423c:	405a      	eors	r2, r3
 800423e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004242:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004246:	405a      	eors	r2, r3
 8004248:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800424c:	441a      	add	r2, r3
 800424e:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8004252:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004256:	4059      	eors	r1, r3
 8004258:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800425c:	4019      	ands	r1, r3
 800425e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004262:	404b      	eors	r3, r1
 8004264:	441a      	add	r2, r3
 8004266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800426a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800426e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004272:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800427a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800427e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004282:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004286:	4059      	eors	r1, r3
 8004288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800428c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004290:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004294:	0a9b      	lsrs	r3, r3, #10
 8004296:	4059      	eors	r1, r3
 8004298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800429c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80042a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a4:	4419      	add	r1, r3
 80042a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80042ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042b0:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80042b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042b8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80042bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042be:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80042c2:	4058      	eors	r0, r3
 80042c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042c8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80042cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ce:	08db      	lsrs	r3, r3, #3
 80042d0:	4043      	eors	r3, r0
 80042d2:	4419      	add	r1, r3
 80042d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80042dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042de:	4419      	add	r1, r3
 80042e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80042e8:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 80042ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80042f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042f8:	441a      	add	r2, r3
 80042fa:	4bf9      	ldr	r3, [pc, #996]	; (80046e0 <sha256_process+0x3718>)
 80042fc:	4413      	add	r3, r2
 80042fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004302:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004306:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800430a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800430e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004312:	405a      	eors	r2, r3
 8004314:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004318:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800431c:	405a      	eors	r2, r3
 800431e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8004322:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004326:	4019      	ands	r1, r3
 8004328:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800432c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004330:	4318      	orrs	r0, r3
 8004332:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004336:	4003      	ands	r3, r0
 8004338:	430b      	orrs	r3, r1
 800433a:	4413      	add	r3, r2
 800433c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004340:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004348:	4413      	add	r3, r2
 800434a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800434e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004352:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004356:	4413      	add	r3, r2
 8004358:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004360:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004368:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800436c:	405a      	eors	r2, r3
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004372:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004376:	405a      	eors	r2, r3
 8004378:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800437c:	441a      	add	r2, r3
 800437e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8004382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004386:	4059      	eors	r1, r3
 8004388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438c:	4019      	ands	r1, r3
 800438e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004392:	404b      	eors	r3, r1
 8004394:	441a      	add	r2, r3
 8004396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800439a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800439e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043a2:	ea4f 4173 	mov.w	r1, r3, ror #17
 80043a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043b2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80043b6:	4059      	eors	r1, r3
 80043b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043bc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043c4:	0a9b      	lsrs	r3, r3, #10
 80043c6:	4059      	eors	r1, r3
 80043c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043d4:	4419      	add	r1, r3
 80043d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e0:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80043e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043e8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ee:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80043f2:	4058      	eors	r0, r3
 80043f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043fe:	08db      	lsrs	r3, r3, #3
 8004400:	4043      	eors	r3, r0
 8004402:	4419      	add	r1, r3
 8004404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004408:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800440c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800440e:	4419      	add	r1, r3
 8004410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004414:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004418:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
 800441c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004420:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004424:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004428:	441a      	add	r2, r3
 800442a:	4bae      	ldr	r3, [pc, #696]	; (80046e4 <sha256_process+0x371c>)
 800442c:	4413      	add	r3, r2
 800442e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004432:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004436:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800443a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800443e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004442:	405a      	eors	r2, r3
 8004444:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004448:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800444c:	405a      	eors	r2, r3
 800444e:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8004452:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004456:	4019      	ands	r1, r3
 8004458:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800445c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004460:	4318      	orrs	r0, r3
 8004462:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004466:	4003      	ands	r3, r0
 8004468:	430b      	orrs	r3, r1
 800446a:	4413      	add	r3, r2
 800446c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004470:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004478:	4413      	add	r3, r2
 800447a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800447e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004482:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004486:	4413      	add	r3, r2
 8004488:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 800448c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004490:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004494:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004498:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800449c:	405a      	eors	r2, r3
 800449e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80044a2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80044a6:	405a      	eors	r2, r3
 80044a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044ac:	441a      	add	r2, r3
 80044ae:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80044b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044b6:	4059      	eors	r1, r3
 80044b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80044bc:	4019      	ands	r1, r3
 80044be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044c2:	404b      	eors	r3, r1
 80044c4:	441a      	add	r2, r3
 80044c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80044ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044d2:	ea4f 4173 	mov.w	r1, r3, ror #17
 80044d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80044de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044e2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80044e6:	4059      	eors	r1, r3
 80044e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80044f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044f4:	0a9b      	lsrs	r3, r3, #10
 80044f6:	4059      	eors	r1, r3
 80044f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044fc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004500:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004504:	4419      	add	r1, r3
 8004506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800450a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800450e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004512:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800451a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800451e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004522:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004526:	4058      	eors	r0, r3
 8004528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800452c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004534:	08db      	lsrs	r3, r3, #3
 8004536:	4043      	eors	r3, r0
 8004538:	4419      	add	r1, r3
 800453a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800453e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004544:	4419      	add	r1, r3
 8004546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800454a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800454e:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 8004552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004556:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800455a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800455e:	441a      	add	r2, r3
 8004560:	4b61      	ldr	r3, [pc, #388]	; (80046e8 <sha256_process+0x3720>)
 8004562:	4413      	add	r3, r2
 8004564:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004568:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800456c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004570:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004574:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004578:	405a      	eors	r2, r3
 800457a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800457e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004582:	405a      	eors	r2, r3
 8004584:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8004588:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800458c:	4019      	ands	r1, r3
 800458e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8004592:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004596:	4318      	orrs	r0, r3
 8004598:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800459c:	4003      	ands	r3, r0
 800459e:	430b      	orrs	r3, r1
 80045a0:	4413      	add	r3, r2
 80045a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80045a6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80045aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ae:	4413      	add	r3, r2
 80045b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80045b4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80045b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80045bc:	4413      	add	r3, r2
 80045be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 80045c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045c6:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80045ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045ce:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80045d2:	405a      	eors	r2, r3
 80045d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045d8:	ea4f 6373 	mov.w	r3, r3, ror #25
 80045dc:	405a      	eors	r2, r3
 80045de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80045e2:	441a      	add	r2, r3
 80045e4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80045e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ec:	4059      	eors	r1, r3
 80045ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045f2:	4019      	ands	r1, r3
 80045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f8:	404b      	eors	r3, r1
 80045fa:	441a      	add	r2, r3
 80045fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004600:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004604:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004608:	ea4f 4173 	mov.w	r1, r3, ror #17
 800460c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004610:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004614:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004618:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800461c:	4059      	eors	r1, r3
 800461e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004622:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004626:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800462a:	0a9b      	lsrs	r3, r3, #10
 800462c:	4059      	eors	r1, r3
 800462e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004632:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004636:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800463a:	4419      	add	r1, r3
 800463c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004640:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004648:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800464c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004650:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004658:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800465c:	4058      	eors	r0, r3
 800465e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004662:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466a:	08db      	lsrs	r3, r3, #3
 800466c:	4043      	eors	r3, r0
 800466e:	4419      	add	r1, r3
 8004670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004674:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800467c:	4419      	add	r1, r3
 800467e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004682:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004686:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
 800468a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800468e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004692:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004696:	441a      	add	r2, r3
 8004698:	4b14      	ldr	r3, [pc, #80]	; (80046ec <sha256_process+0x3724>)
 800469a:	4413      	add	r3, r2
 800469c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80046a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046a4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80046a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046ac:	ea4f 3373 	mov.w	r3, r3, ror #13
 80046b0:	405a      	eors	r2, r3
 80046b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046b6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80046ba:	405a      	eors	r2, r3
 80046bc:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80046c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046c4:	4019      	ands	r1, r3
 80046c6:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80046ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046ce:	4318      	orrs	r0, r3
 80046d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80046d4:	4003      	ands	r3, r0
 80046d6:	430b      	orrs	r3, r1
 80046d8:	4413      	add	r3, r2
 80046da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80046de:	e007      	b.n	80046f0 <sha256_process+0x3728>
 80046e0:	d6990624 	.word	0xd6990624
 80046e4:	f40e3585 	.word	0xf40e3585
 80046e8:	106aa070 	.word	0x106aa070
 80046ec:	19a4c116 	.word	0x19a4c116
 80046f0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80046f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f8:	4413      	add	r3, r2
 80046fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80046fe:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004702:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004706:	4413      	add	r3, r2
 8004708:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 800470c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004710:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004714:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004718:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800471c:	405a      	eors	r2, r3
 800471e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004722:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004726:	405a      	eors	r2, r3
 8004728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800472c:	441a      	add	r2, r3
 800472e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8004732:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004736:	4059      	eors	r1, r3
 8004738:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800473c:	4019      	ands	r1, r3
 800473e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004742:	404b      	eors	r3, r1
 8004744:	441a      	add	r2, r3
 8004746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800474a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800474e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004752:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800475a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800475e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004762:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004766:	4059      	eors	r1, r3
 8004768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800476c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004770:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004774:	0a9b      	lsrs	r3, r3, #10
 8004776:	4059      	eors	r1, r3
 8004778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800477c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004780:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004784:	4419      	add	r1, r3
 8004786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800478a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800479a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80047a6:	4058      	eors	r0, r3
 80047a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b4:	08db      	lsrs	r3, r3, #3
 80047b6:	4043      	eors	r3, r0
 80047b8:	4419      	add	r1, r3
 80047ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80047c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c6:	4419      	add	r1, r3
 80047c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80047d0:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
 80047d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80047dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80047e0:	441a      	add	r2, r3
 80047e2:	4bfc      	ldr	r3, [pc, #1008]	; (8004bd4 <sha256_process+0x3c0c>)
 80047e4:	4413      	add	r3, r2
 80047e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80047ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80047ee:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80047f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80047f6:	ea4f 3373 	mov.w	r3, r3, ror #13
 80047fa:	405a      	eors	r2, r3
 80047fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004800:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004804:	405a      	eors	r2, r3
 8004806:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800480a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800480e:	4019      	ands	r1, r3
 8004810:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8004814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004818:	4318      	orrs	r0, r3
 800481a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800481e:	4003      	ands	r3, r0
 8004820:	430b      	orrs	r3, r1
 8004822:	4413      	add	r3, r2
 8004824:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004828:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800482c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004830:	4413      	add	r3, r2
 8004832:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004836:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800483a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800483e:	4413      	add	r3, r2
 8004840:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004844:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004848:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800484c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004850:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004854:	405a      	eors	r2, r3
 8004856:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800485a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800485e:	405a      	eors	r2, r3
 8004860:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004864:	441a      	add	r2, r3
 8004866:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800486a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800486e:	4059      	eors	r1, r3
 8004870:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004874:	4019      	ands	r1, r3
 8004876:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800487a:	404b      	eors	r3, r1
 800487c:	441a      	add	r2, r3
 800487e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004882:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004886:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800488a:	ea4f 4173 	mov.w	r1, r3, ror #17
 800488e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004892:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004896:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800489a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800489e:	4059      	eors	r1, r3
 80048a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80048a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80048ac:	0a9b      	lsrs	r3, r3, #10
 80048ae:	4059      	eors	r1, r3
 80048b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80048b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80048bc:	4419      	add	r1, r3
 80048be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80048c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ca:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80048ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80048d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048da:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80048de:	4058      	eors	r0, r3
 80048e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80048e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ec:	08db      	lsrs	r3, r3, #3
 80048ee:	4043      	eors	r3, r0
 80048f0:	4419      	add	r1, r3
 80048f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fe:	4419      	add	r1, r3
 8004900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004904:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004908:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 800490c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004910:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004914:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004918:	441a      	add	r2, r3
 800491a:	4baf      	ldr	r3, [pc, #700]	; (8004bd8 <sha256_process+0x3c10>)
 800491c:	4413      	add	r3, r2
 800491e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004926:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800492e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004932:	405a      	eors	r2, r3
 8004934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004938:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800493c:	405a      	eors	r2, r3
 800493e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8004942:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004946:	4019      	ands	r1, r3
 8004948:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800494c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004950:	4318      	orrs	r0, r3
 8004952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004956:	4003      	ands	r3, r0
 8004958:	430b      	orrs	r3, r1
 800495a:	4413      	add	r3, r2
 800495c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004960:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004968:	4413      	add	r3, r2
 800496a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800496e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004972:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004976:	4413      	add	r3, r2
 8004978:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 800497c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004980:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004984:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004988:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800498c:	405a      	eors	r2, r3
 800498e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004992:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004996:	405a      	eors	r2, r3
 8004998:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800499c:	441a      	add	r2, r3
 800499e:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80049a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80049a6:	4059      	eors	r1, r3
 80049a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049ac:	4019      	ands	r1, r3
 80049ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80049b2:	404b      	eors	r3, r1
 80049b4:	441a      	add	r2, r3
 80049b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80049be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80049c2:	ea4f 4173 	mov.w	r1, r3, ror #17
 80049c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80049ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80049d2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80049d6:	4059      	eors	r1, r3
 80049d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049dc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80049e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80049e4:	0a9b      	lsrs	r3, r3, #10
 80049e6:	4059      	eors	r1, r3
 80049e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80049f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049f4:	4419      	add	r1, r3
 80049f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a02:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a12:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004a16:	4058      	eors	r0, r3
 8004a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a24:	08db      	lsrs	r3, r3, #3
 8004a26:	4043      	eors	r3, r0
 8004a28:	4419      	add	r1, r3
 8004a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a36:	4419      	add	r1, r3
 8004a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a3c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a40:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 8004a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a48:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a4c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004a50:	441a      	add	r2, r3
 8004a52:	4b62      	ldr	r3, [pc, #392]	; (8004bdc <sha256_process+0x3c14>)
 8004a54:	4413      	add	r3, r2
 8004a56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004a5a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004a5e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004a62:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004a66:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004a6a:	405a      	eors	r2, r3
 8004a6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004a70:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004a74:	405a      	eors	r2, r3
 8004a76:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8004a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a7e:	4019      	ands	r1, r3
 8004a80:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8004a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a88:	4318      	orrs	r0, r3
 8004a8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a8e:	4003      	ands	r3, r0
 8004a90:	430b      	orrs	r3, r1
 8004a92:	4413      	add	r3, r2
 8004a94:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004a98:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004aa6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004aaa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004aae:	4413      	add	r3, r2
 8004ab0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ab8:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ac0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004ac4:	405a      	eors	r2, r3
 8004ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aca:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004ace:	405a      	eors	r2, r3
 8004ad0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ad4:	441a      	add	r2, r3
 8004ad6:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8004ada:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ade:	4059      	eors	r1, r3
 8004ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae4:	4019      	ands	r1, r3
 8004ae6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004aea:	404b      	eors	r3, r1
 8004aec:	441a      	add	r2, r3
 8004aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004af6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004afa:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b02:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b06:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004b0a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004b0e:	4059      	eors	r1, r3
 8004b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b14:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b18:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004b1c:	0a9b      	lsrs	r3, r3, #10
 8004b1e:	4059      	eors	r1, r3
 8004b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b24:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b2c:	4419      	add	r1, r3
 8004b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b3a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b42:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b4a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004b4e:	4058      	eors	r0, r3
 8004b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b54:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b5c:	08db      	lsrs	r3, r3, #3
 8004b5e:	4043      	eors	r3, r0
 8004b60:	4419      	add	r1, r3
 8004b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b66:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	4419      	add	r1, r3
 8004b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b74:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b78:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
 8004b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b80:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b84:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004b88:	441a      	add	r2, r3
 8004b8a:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <sha256_process+0x3c18>)
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004b92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b96:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004b9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b9e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004ba2:	405a      	eors	r2, r3
 8004ba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ba8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004bac:	405a      	eors	r2, r3
 8004bae:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8004bb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004bb6:	4019      	ands	r1, r3
 8004bb8:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8004bbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004bc0:	4318      	orrs	r0, r3
 8004bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc6:	4003      	ands	r3, r0
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	4413      	add	r3, r2
 8004bcc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004bd0:	e008      	b.n	8004be4 <sha256_process+0x3c1c>
 8004bd2:	bf00      	nop
 8004bd4:	1e376c08 	.word	0x1e376c08
 8004bd8:	2748774c 	.word	0x2748774c
 8004bdc:	34b0bcb5 	.word	0x34b0bcb5
 8004be0:	391c0cb3 	.word	0x391c0cb3
 8004be4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bec:	4413      	add	r3, r2
 8004bee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004bf2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004bf6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004c00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c04:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004c08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c0c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004c10:	405a      	eors	r2, r3
 8004c12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c16:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004c1a:	405a      	eors	r2, r3
 8004c1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004c20:	441a      	add	r2, r3
 8004c22:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8004c26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c2a:	4059      	eors	r1, r3
 8004c2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004c30:	4019      	ands	r1, r3
 8004c32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c36:	404b      	eors	r3, r1
 8004c38:	441a      	add	r2, r3
 8004c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c42:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004c46:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c52:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004c56:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004c5a:	4059      	eors	r1, r3
 8004c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c60:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c64:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004c68:	0a9b      	lsrs	r3, r3, #10
 8004c6a:	4059      	eors	r1, r3
 8004c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c70:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c78:	4419      	add	r1, r3
 8004c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c7e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c86:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c96:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004c9a:	4058      	eors	r0, r3
 8004c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ca8:	08db      	lsrs	r3, r3, #3
 8004caa:	4043      	eors	r3, r0
 8004cac:	4419      	add	r1, r3
 8004cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cba:	4419      	add	r1, r3
 8004cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004cc4:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
 8004cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ccc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004cd0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004cd4:	441a      	add	r2, r3
 8004cd6:	4bfc      	ldr	r3, [pc, #1008]	; (80050c8 <sha256_process+0x4100>)
 8004cd8:	4413      	add	r3, r2
 8004cda:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004cde:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ce2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004ce6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004cea:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004cee:	405a      	eors	r2, r3
 8004cf0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004cf4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004cf8:	405a      	eors	r2, r3
 8004cfa:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8004cfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d02:	4019      	ands	r1, r3
 8004d04:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d0c:	4318      	orrs	r0, r3
 8004d0e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004d12:	4003      	ands	r3, r0
 8004d14:	430b      	orrs	r3, r1
 8004d16:	4413      	add	r3, r2
 8004d18:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004d1c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d24:	4413      	add	r3, r2
 8004d26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004d2a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004d2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d32:	4413      	add	r3, r2
 8004d34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d3c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d44:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004d48:	405a      	eors	r2, r3
 8004d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d4e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004d52:	405a      	eors	r2, r3
 8004d54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d58:	441a      	add	r2, r3
 8004d5a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8004d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d62:	4059      	eors	r1, r3
 8004d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d68:	4019      	ands	r1, r3
 8004d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d6e:	404b      	eors	r3, r1
 8004d70:	441a      	add	r2, r3
 8004d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d7a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004d7e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d86:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d8a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004d8e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004d92:	4059      	eors	r1, r3
 8004d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d98:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d9c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004da0:	0a9b      	lsrs	r3, r3, #10
 8004da2:	4059      	eors	r1, r3
 8004da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004dac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004db0:	4419      	add	r1, r3
 8004db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004dba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dbe:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dce:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004dd2:	4058      	eors	r0, r3
 8004dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ddc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004de0:	08db      	lsrs	r3, r3, #3
 8004de2:	4043      	eors	r3, r0
 8004de4:	4419      	add	r1, r3
 8004de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004df2:	4419      	add	r1, r3
 8004df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004dfc:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
 8004e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e04:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004e08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004e0c:	441a      	add	r2, r3
 8004e0e:	4baf      	ldr	r3, [pc, #700]	; (80050cc <sha256_process+0x4104>)
 8004e10:	4413      	add	r3, r2
 8004e12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004e16:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004e1a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004e1e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004e22:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004e26:	405a      	eors	r2, r3
 8004e28:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004e2c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004e30:	405a      	eors	r2, r3
 8004e32:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8004e36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e3a:	4019      	ands	r1, r3
 8004e3c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004e40:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e44:	4318      	orrs	r0, r3
 8004e46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e4a:	4003      	ands	r3, r0
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	4413      	add	r3, r2
 8004e50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004e54:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004e62:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004e66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004e70:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004e74:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004e78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004e7c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004e80:	405a      	eors	r2, r3
 8004e82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004e86:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004e8a:	405a      	eors	r2, r3
 8004e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e90:	441a      	add	r2, r3
 8004e92:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8004e96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004e9a:	4059      	eors	r1, r3
 8004e9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004ea0:	4019      	ands	r1, r3
 8004ea2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ea6:	404b      	eors	r3, r1
 8004ea8:	441a      	add	r2, r3
 8004eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004eb2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004eb6:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ebe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ec2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004ec6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004eca:	4059      	eors	r1, r3
 8004ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ed4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004ed8:	0a9b      	lsrs	r3, r3, #10
 8004eda:	4059      	eors	r1, r3
 8004edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ee4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004ee8:	4419      	add	r1, r3
 8004eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ef2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ef6:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004efe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f06:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004f0a:	4058      	eors	r0, r3
 8004f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f10:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f18:	08db      	lsrs	r3, r3, #3
 8004f1a:	4043      	eors	r3, r0
 8004f1c:	4419      	add	r1, r3
 8004f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f2a:	4419      	add	r1, r3
 8004f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f30:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f34:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
 8004f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f3c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004f44:	441a      	add	r2, r3
 8004f46:	4b62      	ldr	r3, [pc, #392]	; (80050d0 <sha256_process+0x4108>)
 8004f48:	4413      	add	r3, r2
 8004f4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004f4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f52:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004f56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f5a:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004f5e:	405a      	eors	r2, r3
 8004f60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f64:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004f68:	405a      	eors	r2, r3
 8004f6a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8004f6e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f72:	4019      	ands	r1, r3
 8004f74:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8004f78:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f7c:	4318      	orrs	r0, r3
 8004f7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f82:	4003      	ands	r3, r0
 8004f84:	430b      	orrs	r3, r1
 8004f86:	4413      	add	r3, r2
 8004f88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004f8c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f94:	4413      	add	r3, r2
 8004f96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f9a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004f9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004fa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fac:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fb4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004fb8:	405a      	eors	r2, r3
 8004fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fbe:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004fc2:	405a      	eors	r2, r3
 8004fc4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004fc8:	441a      	add	r2, r3
 8004fca:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8004fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fd2:	4059      	eors	r1, r3
 8004fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fd8:	4019      	ands	r1, r3
 8004fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fde:	404b      	eors	r3, r1
 8004fe0:	441a      	add	r2, r3
 8004fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004fea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004fee:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ffa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004ffe:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005002:	4059      	eors	r1, r3
 8005004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005008:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800500c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005010:	0a9b      	lsrs	r3, r3, #10
 8005012:	4059      	eors	r1, r3
 8005014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005018:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800501c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005020:	4419      	add	r1, r3
 8005022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005026:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800502a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800502e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005036:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800503a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800503e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005042:	4058      	eors	r0, r3
 8005044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005048:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800504c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005050:	08db      	lsrs	r3, r3, #3
 8005052:	4043      	eors	r3, r0
 8005054:	4419      	add	r1, r3
 8005056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800505e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005062:	4419      	add	r1, r3
 8005064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005068:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800506c:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 8005070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005074:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800507c:	441a      	add	r2, r3
 800507e:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <sha256_process+0x410c>)
 8005080:	4413      	add	r3, r2
 8005082:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800508a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800508e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005092:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005096:	405a      	eors	r2, r3
 8005098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800509c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80050a0:	405a      	eors	r2, r3
 80050a2:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80050a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050aa:	4019      	ands	r1, r3
 80050ac:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80050b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050b4:	4318      	orrs	r0, r3
 80050b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80050ba:	4003      	ands	r3, r0
 80050bc:	430b      	orrs	r3, r1
 80050be:	4413      	add	r3, r2
 80050c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80050c4:	e008      	b.n	80050d8 <sha256_process+0x4110>
 80050c6:	bf00      	nop
 80050c8:	4ed8aa4a 	.word	0x4ed8aa4a
 80050cc:	5b9cca4f 	.word	0x5b9cca4f
 80050d0:	682e6ff3 	.word	0x682e6ff3
 80050d4:	748f82ee 	.word	0x748f82ee
 80050d8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80050dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e0:	4413      	add	r3, r2
 80050e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80050e6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80050ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050ee:	4413      	add	r3, r2
 80050f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 80050f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050f8:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80050fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005100:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005104:	405a      	eors	r2, r3
 8005106:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800510a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800510e:	405a      	eors	r2, r3
 8005110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005114:	441a      	add	r2, r3
 8005116:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800511a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800511e:	4059      	eors	r1, r3
 8005120:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005124:	4019      	ands	r1, r3
 8005126:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800512a:	404b      	eors	r3, r1
 800512c:	441a      	add	r2, r3
 800512e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005132:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005136:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800513a:	ea4f 4173 	mov.w	r1, r3, ror #17
 800513e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005142:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005146:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800514a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800514e:	4059      	eors	r1, r3
 8005150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005154:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005158:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800515c:	0a9b      	lsrs	r3, r3, #10
 800515e:	4059      	eors	r1, r3
 8005160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005164:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005168:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800516c:	4419      	add	r1, r3
 800516e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005172:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005176:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800517a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800517e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005182:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005186:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800518a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800518e:	4058      	eors	r0, r3
 8005190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005194:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005198:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800519c:	08db      	lsrs	r3, r3, #3
 800519e:	4043      	eors	r3, r0
 80051a0:	4419      	add	r1, r3
 80051a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80051aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80051ae:	4419      	add	r1, r3
 80051b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80051b8:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 80051bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80051c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80051c8:	441a      	add	r2, r3
 80051ca:	4bfc      	ldr	r3, [pc, #1008]	; (80055bc <sha256_process+0x45f4>)
 80051cc:	4413      	add	r3, r2
 80051ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80051d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051d6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80051da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051de:	ea4f 3373 	mov.w	r3, r3, ror #13
 80051e2:	405a      	eors	r2, r3
 80051e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051e8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80051ec:	405a      	eors	r2, r3
 80051ee:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80051f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f6:	4019      	ands	r1, r3
 80051f8:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80051fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005200:	4318      	orrs	r0, r3
 8005202:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005206:	4003      	ands	r3, r0
 8005208:	430b      	orrs	r3, r1
 800520a:	4413      	add	r3, r2
 800520c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005210:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8005214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005218:	4413      	add	r3, r2
 800521a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800521e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005222:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005226:	4413      	add	r3, r2
 8005228:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 800522c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005230:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005234:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005238:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800523c:	405a      	eors	r2, r3
 800523e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005242:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005246:	405a      	eors	r2, r3
 8005248:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800524c:	441a      	add	r2, r3
 800524e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8005252:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005256:	4059      	eors	r1, r3
 8005258:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800525c:	4019      	ands	r1, r3
 800525e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005262:	404b      	eors	r3, r1
 8005264:	441a      	add	r2, r3
 8005266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800526e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005272:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800527a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800527e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005282:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005286:	4059      	eors	r1, r3
 8005288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005294:	0a9b      	lsrs	r3, r3, #10
 8005296:	4059      	eors	r1, r3
 8005298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800529c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80052a0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80052a4:	4419      	add	r1, r3
 80052a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80052ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052b2:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80052b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80052be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052c2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80052c6:	4058      	eors	r0, r3
 80052c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80052d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052d4:	08db      	lsrs	r3, r3, #3
 80052d6:	4043      	eors	r3, r0
 80052d8:	4419      	add	r1, r3
 80052da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80052e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052e6:	4419      	add	r1, r3
 80052e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80052f0:	f8c3 10e8 	str.w	r1, [r3, #232]	; 0xe8
 80052f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80052fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005300:	441a      	add	r2, r3
 8005302:	4baf      	ldr	r3, [pc, #700]	; (80055c0 <sha256_process+0x45f8>)
 8005304:	4413      	add	r3, r2
 8005306:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800530a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800530e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005316:	ea4f 3373 	mov.w	r3, r3, ror #13
 800531a:	405a      	eors	r2, r3
 800531c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005320:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005324:	405a      	eors	r2, r3
 8005326:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800532a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800532e:	4019      	ands	r1, r3
 8005330:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8005334:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005338:	4318      	orrs	r0, r3
 800533a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800533e:	4003      	ands	r3, r0
 8005340:	430b      	orrs	r3, r1
 8005342:	4413      	add	r3, r2
 8005344:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005348:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800534c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005350:	4413      	add	r3, r2
 8005352:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005356:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800535a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800535e:	4413      	add	r3, r2
 8005360:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005368:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800536c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005370:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005374:	405a      	eors	r2, r3
 8005376:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800537a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800537e:	405a      	eors	r2, r3
 8005380:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005384:	441a      	add	r2, r3
 8005386:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800538a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800538e:	4059      	eors	r1, r3
 8005390:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005394:	4019      	ands	r1, r3
 8005396:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800539a:	404b      	eors	r3, r1
 800539c:	441a      	add	r2, r3
 800539e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80053a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80053aa:	ea4f 4173 	mov.w	r1, r3, ror #17
 80053ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80053b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80053ba:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80053be:	4059      	eors	r1, r3
 80053c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80053c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80053cc:	0a9b      	lsrs	r3, r3, #10
 80053ce:	4059      	eors	r1, r3
 80053d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80053d8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80053dc:	4419      	add	r1, r3
 80053de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80053e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053ea:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80053ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80053f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053fa:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80053fe:	4058      	eors	r0, r3
 8005400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005404:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005408:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800540c:	08db      	lsrs	r3, r3, #3
 800540e:	4043      	eors	r3, r0
 8005410:	4419      	add	r1, r3
 8005412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005416:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800541a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800541e:	4419      	add	r1, r3
 8005420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005424:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005428:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
 800542c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005430:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005434:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005438:	441a      	add	r2, r3
 800543a:	4b62      	ldr	r3, [pc, #392]	; (80055c4 <sha256_process+0x45fc>)
 800543c:	4413      	add	r3, r2
 800543e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005442:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005446:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800544a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800544e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005452:	405a      	eors	r2, r3
 8005454:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005458:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800545c:	405a      	eors	r2, r3
 800545e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8005462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005466:	4019      	ands	r1, r3
 8005468:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800546c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005470:	4318      	orrs	r0, r3
 8005472:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005476:	4003      	ands	r3, r0
 8005478:	430b      	orrs	r3, r1
 800547a:	4413      	add	r3, r2
 800547c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005480:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8005484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005488:	4413      	add	r3, r2
 800548a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800548e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005492:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005496:	4413      	add	r3, r2
 8005498:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800549c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80054a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80054ac:	405a      	eors	r2, r3
 80054ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80054b6:	405a      	eors	r2, r3
 80054b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80054bc:	441a      	add	r2, r3
 80054be:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80054c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80054c6:	4059      	eors	r1, r3
 80054c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054cc:	4019      	ands	r1, r3
 80054ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80054d2:	404b      	eors	r3, r1
 80054d4:	441a      	add	r2, r3
 80054d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80054de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054e2:	ea4f 4173 	mov.w	r1, r3, ror #17
 80054e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80054ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054f2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80054f6:	4059      	eors	r1, r3
 80054f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054fc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005500:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005504:	0a9b      	lsrs	r3, r3, #10
 8005506:	4059      	eors	r1, r3
 8005508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005510:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005514:	4419      	add	r1, r3
 8005516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800551a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800551e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005522:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800552e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005532:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005536:	4058      	eors	r0, r3
 8005538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005540:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005544:	08db      	lsrs	r3, r3, #3
 8005546:	4043      	eors	r3, r0
 8005548:	4419      	add	r1, r3
 800554a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005552:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005556:	4419      	add	r1, r3
 8005558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005560:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
 8005564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005568:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800556c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005570:	441a      	add	r2, r3
 8005572:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <sha256_process+0x4600>)
 8005574:	4413      	add	r3, r2
 8005576:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800557a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800557e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005582:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005586:	ea4f 3373 	mov.w	r3, r3, ror #13
 800558a:	405a      	eors	r2, r3
 800558c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005590:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005594:	405a      	eors	r2, r3
 8005596:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800559a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800559e:	4019      	ands	r1, r3
 80055a0:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80055a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80055a8:	4318      	orrs	r0, r3
 80055aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ae:	4003      	ands	r3, r0
 80055b0:	430b      	orrs	r3, r1
 80055b2:	4413      	add	r3, r2
 80055b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80055b8:	e008      	b.n	80055cc <sha256_process+0x4604>
 80055ba:	bf00      	nop
 80055bc:	78a5636f 	.word	0x78a5636f
 80055c0:	84c87814 	.word	0x84c87814
 80055c4:	8cc70208 	.word	0x8cc70208
 80055c8:	90befffa 	.word	0x90befffa
 80055cc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80055d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d4:	4413      	add	r3, r2
 80055d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055da:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80055de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055e2:	4413      	add	r3, r2
 80055e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80055e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055ec:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80055f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055f4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80055f8:	405a      	eors	r2, r3
 80055fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055fe:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005602:	405a      	eors	r2, r3
 8005604:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005608:	441a      	add	r2, r3
 800560a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800560e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005612:	4059      	eors	r1, r3
 8005614:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005618:	4019      	ands	r1, r3
 800561a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800561e:	404b      	eors	r3, r1
 8005620:	441a      	add	r2, r3
 8005622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005626:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800562a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800562e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005636:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800563a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800563e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005642:	4059      	eors	r1, r3
 8005644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005648:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800564c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005650:	0a9b      	lsrs	r3, r3, #10
 8005652:	4059      	eors	r1, r3
 8005654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005658:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800565c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005660:	4419      	add	r1, r3
 8005662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005666:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800566a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800566e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005676:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800567a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800567e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005682:	4058      	eors	r0, r3
 8005684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005688:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800568c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005690:	08db      	lsrs	r3, r3, #3
 8005692:	4043      	eors	r3, r0
 8005694:	4419      	add	r1, r3
 8005696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800569e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80056a2:	4419      	add	r1, r3
 80056a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80056ac:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
 80056b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80056b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056bc:	441a      	add	r2, r3
 80056be:	4bee      	ldr	r3, [pc, #952]	; (8005a78 <sha256_process+0x4ab0>)
 80056c0:	4413      	add	r3, r2
 80056c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80056c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80056ca:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80056ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80056d2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80056d6:	405a      	eors	r2, r3
 80056d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80056dc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80056e0:	405a      	eors	r2, r3
 80056e2:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80056e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056ea:	4019      	ands	r1, r3
 80056ec:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80056f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056f4:	4318      	orrs	r0, r3
 80056f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80056fa:	4003      	ands	r3, r0
 80056fc:	430b      	orrs	r3, r1
 80056fe:	4413      	add	r3, r2
 8005700:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005704:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800570c:	4413      	add	r3, r2
 800570e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005712:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005716:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800571a:	4413      	add	r3, r2
 800571c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005724:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800572c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005730:	405a      	eors	r2, r3
 8005732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005736:	ea4f 6373 	mov.w	r3, r3, ror #25
 800573a:	405a      	eors	r2, r3
 800573c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005740:	441a      	add	r2, r3
 8005742:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8005746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800574a:	4059      	eors	r1, r3
 800574c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005750:	4019      	ands	r1, r3
 8005752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005756:	404b      	eors	r3, r1
 8005758:	441a      	add	r2, r3
 800575a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005766:	ea4f 4173 	mov.w	r1, r3, ror #17
 800576a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005776:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800577a:	4059      	eors	r1, r3
 800577c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005780:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005788:	0a9b      	lsrs	r3, r3, #10
 800578a:	4059      	eors	r1, r3
 800578c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005790:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005794:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005798:	4419      	add	r1, r3
 800579a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80057a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80057a6:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80057aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80057b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80057b6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80057ba:	4058      	eors	r0, r3
 80057bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80057c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80057c8:	08db      	lsrs	r3, r3, #3
 80057ca:	4043      	eors	r3, r0
 80057cc:	4419      	add	r1, r3
 80057ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80057d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80057da:	4419      	add	r1, r3
 80057dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80057e4:	f8c3 10f8 	str.w	r1, [r3, #248]	; 0xf8
 80057e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80057f0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80057f4:	441a      	add	r2, r3
 80057f6:	4ba1      	ldr	r3, [pc, #644]	; (8005a7c <sha256_process+0x4ab4>)
 80057f8:	4413      	add	r3, r2
 80057fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005802:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005806:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800580a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800580e:	405a      	eors	r2, r3
 8005810:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005814:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005818:	405a      	eors	r2, r3
 800581a:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800581e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005822:	4019      	ands	r1, r3
 8005824:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005828:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800582c:	4318      	orrs	r0, r3
 800582e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005832:	4003      	ands	r3, r0
 8005834:	430b      	orrs	r3, r1
 8005836:	4413      	add	r3, r2
 8005838:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800583c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005844:	4413      	add	r3, r2
 8005846:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800584a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800584e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005852:	4413      	add	r3, r2
 8005854:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005858:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800585c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005860:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005864:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005868:	405a      	eors	r2, r3
 800586a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800586e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005872:	405a      	eors	r2, r3
 8005874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005878:	441a      	add	r2, r3
 800587a:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800587e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005882:	4059      	eors	r1, r3
 8005884:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005888:	4019      	ands	r1, r3
 800588a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800588e:	404b      	eors	r3, r1
 8005890:	441a      	add	r2, r3
 8005892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005896:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800589a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800589e:	ea4f 4173 	mov.w	r1, r3, ror #17
 80058a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80058aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058ae:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80058b2:	4059      	eors	r1, r3
 80058b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80058bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058c0:	0a9b      	lsrs	r3, r3, #10
 80058c2:	4059      	eors	r1, r3
 80058c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80058cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058d0:	4419      	add	r1, r3
 80058d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80058da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80058de:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80058e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80058ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80058ee:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80058f2:	4058      	eors	r0, r3
 80058f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80058fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005900:	08db      	lsrs	r3, r3, #3
 8005902:	4043      	eors	r3, r0
 8005904:	4419      	add	r1, r3
 8005906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800590e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005912:	4419      	add	r1, r3
 8005914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005918:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800591c:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
 8005920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005924:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005928:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800592c:	441a      	add	r2, r3
 800592e:	4b54      	ldr	r3, [pc, #336]	; (8005a80 <sha256_process+0x4ab8>)
 8005930:	4413      	add	r3, r2
 8005932:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005936:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800593a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800593e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005942:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005946:	405a      	eors	r2, r3
 8005948:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800594c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005950:	405a      	eors	r2, r3
 8005952:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8005956:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800595a:	4019      	ands	r1, r3
 800595c:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8005960:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005964:	4318      	orrs	r0, r3
 8005966:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800596a:	4003      	ands	r3, r0
 800596c:	430b      	orrs	r3, r1
 800596e:	4413      	add	r3, r2
 8005970:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005974:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800597c:	4413      	add	r3, r2
 800597e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005982:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005986:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800598a:	4413      	add	r3, r2
 800598c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    ctx->state[0] += A;
 8005990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005994:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a0:	441a      	add	r2, r3
 80059a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	609a      	str	r2, [r3, #8]
    ctx->state[1] += B;
 80059ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059be:	441a      	add	r2, r3
 80059c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60da      	str	r2, [r3, #12]
    ctx->state[2] += C;
 80059cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80059dc:	441a      	add	r2, r3
 80059de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	611a      	str	r2, [r3, #16]
    ctx->state[3] += D;
 80059ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695a      	ldr	r2, [r3, #20]
 80059f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059fa:	441a      	add	r2, r3
 80059fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	615a      	str	r2, [r3, #20]
    ctx->state[4] += E;
 8005a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699a      	ldr	r2, [r3, #24]
 8005a14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a18:	441a      	add	r2, r3
 8005a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	619a      	str	r2, [r3, #24]
    ctx->state[5] += F;
 8005a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69da      	ldr	r2, [r3, #28]
 8005a32:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a36:	441a      	add	r2, r3
 8005a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	61da      	str	r2, [r3, #28]
    ctx->state[6] += G;
 8005a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6a1a      	ldr	r2, [r3, #32]
 8005a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a54:	441a      	add	r2, r3
 8005a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	621a      	str	r2, [r3, #32]
    ctx->state[7] += H;
 8005a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a72:	441a      	add	r2, r3
 8005a74:	e006      	b.n	8005a84 <sha256_process+0x4abc>
 8005a76:	bf00      	nop
 8005a78:	a4506ceb 	.word	0xa4506ceb
 8005a7c:	bef9a3f7 	.word	0xbef9a3f7
 8005a80:	c67178f2 	.word	0xc67178f2
 8005a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005a90:	bf00      	nop
 8005a92:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr

08005a9c <sha256_update>:

void sha256_update( sha256_context *ctx, uint8 *input, uint32 length )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
    uint32 left, fill;

    if( ! length ) return;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d059      	beq.n	8005b62 <sha256_update+0xc6>

    left = ctx->total[0] & 0x3F;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ab6:	617b      	str	r3, [r7, #20]
    fill = 64 - left;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005abe:	613b      	str	r3, [r7, #16]

    ctx->total[0] += length;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	441a      	add	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < length )
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d904      	bls.n	8005ae8 <sha256_update+0x4c>
        ctx->total[1]++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	605a      	str	r2, [r3, #4]

    if( left && length >= fill )
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d028      	beq.n	8005b40 <sha256_update+0xa4>
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d324      	bcc.n	8005b40 <sha256_update+0xa4>
    {
        memcpy( (void *) (ctx->buffer + left),
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	4413      	add	r3, r2
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	68b9      	ldr	r1, [r7, #8]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f002 f829 	bl	8007b5c <memcpy>
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	3328      	adds	r3, #40	; 0x28
 8005b0e:	4619      	mov	r1, r3
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7fb fa59 	bl	8000fc8 <sha256_process>
        length -= fill;
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	607b      	str	r3, [r7, #4]
        input  += fill;
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	4413      	add	r3, r2
 8005b24:	60bb      	str	r3, [r7, #8]
        left = 0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
    }

    while( length >= 64 )
 8005b2a:	e009      	b.n	8005b40 <sha256_update+0xa4>
    {
        sha256_process( ctx, input );
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f7fb fa4a 	bl	8000fc8 <sha256_process>
        length -= 64;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3b40      	subs	r3, #64	; 0x40
 8005b38:	607b      	str	r3, [r7, #4]
        input  += 64;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	3340      	adds	r3, #64	; 0x40
 8005b3e:	60bb      	str	r3, [r7, #8]
    while( length >= 64 )
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b3f      	cmp	r3, #63	; 0x3f
 8005b44:	d8f2      	bhi.n	8005b2c <sha256_update+0x90>
    }

    if( length )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00b      	beq.n	8005b64 <sha256_update+0xc8>
    {
        memcpy( (void *) (ctx->buffer + left),
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	4413      	add	r3, r2
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f001 fffe 	bl	8007b5c <memcpy>
 8005b60:	e000      	b.n	8005b64 <sha256_update+0xc8>
    if( ! length ) return;
 8005b62:	bf00      	nop
                (void *) input, length );
    }
}
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <sha256_finish>:
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
    uint32 last, padn;
    uint32 high, low;
    uint8 msglen[8];

    high = ( ctx->total[0] >> 29 )
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 8005b82:	4313      	orrs	r3, r2
 8005b84:	61fb      	str	r3, [r7, #28]
    low  = ( ctx->total[0] <<  3 );
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	61bb      	str	r3, [r7, #24]

    PUT_UINT32( high, msglen, 0 );
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	0e1b      	lsrs	r3, r3, #24
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	723b      	strb	r3, [r7, #8]
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	0c1b      	lsrs	r3, r3, #16
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	727b      	strb	r3, [r7, #9]
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	0a1b      	lsrs	r3, r3, #8
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	72bb      	strb	r3, [r7, #10]
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	72fb      	strb	r3, [r7, #11]
    PUT_UINT32( low,  msglen, 4 );
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	0e1b      	lsrs	r3, r3, #24
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	733b      	strb	r3, [r7, #12]
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	0c1b      	lsrs	r3, r3, #16
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	737b      	strb	r3, [r7, #13]
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	0a1b      	lsrs	r3, r3, #8
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	73bb      	strb	r3, [r7, #14]
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	73fb      	strb	r3, [r7, #15]

    last = ctx->total[0] & 0x3F;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bd2:	617b      	str	r3, [r7, #20]
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2b37      	cmp	r3, #55	; 0x37
 8005bd8:	d803      	bhi.n	8005be2 <sha256_finish+0x76>
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005be0:	e002      	b.n	8005be8 <sha256_finish+0x7c>
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8005be8:	613b      	str	r3, [r7, #16]

    sha256_update( ctx, sha256_padding, padn );
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4972      	ldr	r1, [pc, #456]	; (8005db8 <sha256_finish+0x24c>)
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff ff54 	bl	8005a9c <sha256_update>
    sha256_update( ctx, msglen, 8 );
 8005bf4:	f107 0308 	add.w	r3, r7, #8
 8005bf8:	2208      	movs	r2, #8
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7ff ff4d 	bl	8005a9c <sha256_update>

    PUT_UINT32( ctx->state[0], digest,  0 );
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	0e1b      	lsrs	r3, r3, #24
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	0c1a      	lsrs	r2, r3, #16
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	3301      	adds	r3, #1
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	0a1a      	lsrs	r2, r3, #8
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	3302      	adds	r3, #2
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	3303      	adds	r3, #3
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	701a      	strb	r2, [r3, #0]
    PUT_UINT32( ctx->state[1], digest,  4 );
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	0e1a      	lsrs	r2, r3, #24
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	0c1a      	lsrs	r2, r3, #16
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	3305      	adds	r3, #5
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	0a1a      	lsrs	r2, r3, #8
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	3306      	adds	r3, #6
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	3307      	adds	r3, #7
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32( ctx->state[2], digest,  8 );
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	0e1a      	lsrs	r2, r3, #24
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	3308      	adds	r3, #8
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	0c1a      	lsrs	r2, r3, #16
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	3309      	adds	r3, #9
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	0a1a      	lsrs	r2, r3, #8
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	330a      	adds	r3, #10
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691a      	ldr	r2, [r3, #16]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	330b      	adds	r3, #11
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	701a      	strb	r2, [r3, #0]
    PUT_UINT32( ctx->state[3], digest, 12 );
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	0e1a      	lsrs	r2, r3, #24
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	330c      	adds	r3, #12
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	701a      	strb	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	0c1a      	lsrs	r2, r3, #16
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	330d      	adds	r3, #13
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	0a1a      	lsrs	r2, r3, #8
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	330e      	adds	r3, #14
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	695a      	ldr	r2, [r3, #20]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	330f      	adds	r3, #15
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32( ctx->state[4], digest, 16 );
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	0e1a      	lsrs	r2, r3, #24
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	3310      	adds	r3, #16
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	0c1a      	lsrs	r2, r3, #16
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	3311      	adds	r3, #17
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	0a1a      	lsrs	r2, r3, #8
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	3312      	adds	r3, #18
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	3313      	adds	r3, #19
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32( ctx->state[5], digest, 20 );
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	0e1a      	lsrs	r2, r3, #24
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	3314      	adds	r3, #20
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	701a      	strb	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	0c1a      	lsrs	r2, r3, #16
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	3315      	adds	r3, #21
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	0a1a      	lsrs	r2, r3, #8
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	3316      	adds	r3, #22
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	701a      	strb	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	69da      	ldr	r2, [r3, #28]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	3317      	adds	r3, #23
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	701a      	strb	r2, [r3, #0]
    PUT_UINT32( ctx->state[6], digest, 24 );
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	0e1a      	lsrs	r2, r3, #24
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	3318      	adds	r3, #24
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	0c1a      	lsrs	r2, r3, #16
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	3319      	adds	r3, #25
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	0a1a      	lsrs	r2, r3, #8
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	331a      	adds	r3, #26
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1a      	ldr	r2, [r3, #32]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	331b      	adds	r3, #27
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
    PUT_UINT32( ctx->state[7], digest, 28 );
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	0e1a      	lsrs	r2, r3, #24
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	331c      	adds	r3, #28
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	0c1a      	lsrs	r2, r3, #16
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	331d      	adds	r3, #29
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	0a1a      	lsrs	r2, r3, #8
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	331e      	adds	r3, #30
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	331f      	adds	r3, #31
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	701a      	strb	r2, [r3, #0]
}
 8005db0:	bf00      	nop
 8005db2:	3720      	adds	r7, #32
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20000240 	.word	0x20000240

08005dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005dc2:	4b0e      	ldr	r3, [pc, #56]	; (8005dfc <HAL_MspInit+0x40>)
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	4a0d      	ldr	r2, [pc, #52]	; (8005dfc <HAL_MspInit+0x40>)
 8005dc8:	f043 0301 	orr.w	r3, r3, #1
 8005dcc:	6193      	str	r3, [r2, #24]
 8005dce:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <HAL_MspInit+0x40>)
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	607b      	str	r3, [r7, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dda:	4b08      	ldr	r3, [pc, #32]	; (8005dfc <HAL_MspInit+0x40>)
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	4a07      	ldr	r2, [pc, #28]	; (8005dfc <HAL_MspInit+0x40>)
 8005de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de4:	61d3      	str	r3, [r2, #28]
 8005de6:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <HAL_MspInit+0x40>)
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bc80      	pop	{r7}
 8005dfa:	4770      	bx	lr
 8005dfc:	40021000 	.word	0x40021000

08005e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e08:	f107 0310 	add.w	r3, r7, #16
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	605a      	str	r2, [r3, #4]
 8005e12:	609a      	str	r2, [r3, #8]
 8005e14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a20      	ldr	r2, [pc, #128]	; (8005e9c <HAL_UART_MspInit+0x9c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d139      	bne.n	8005e94 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e20:	4b1f      	ldr	r3, [pc, #124]	; (8005ea0 <HAL_UART_MspInit+0xa0>)
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	4a1e      	ldr	r2, [pc, #120]	; (8005ea0 <HAL_UART_MspInit+0xa0>)
 8005e26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e2a:	6193      	str	r3, [r2, #24]
 8005e2c:	4b1c      	ldr	r3, [pc, #112]	; (8005ea0 <HAL_UART_MspInit+0xa0>)
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e38:	4b19      	ldr	r3, [pc, #100]	; (8005ea0 <HAL_UART_MspInit+0xa0>)
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	4a18      	ldr	r2, [pc, #96]	; (8005ea0 <HAL_UART_MspInit+0xa0>)
 8005e3e:	f043 0304 	orr.w	r3, r3, #4
 8005e42:	6193      	str	r3, [r2, #24]
 8005e44:	4b16      	ldr	r3, [pc, #88]	; (8005ea0 <HAL_UART_MspInit+0xa0>)
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	60bb      	str	r3, [r7, #8]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e56:	2302      	movs	r3, #2
 8005e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e5e:	f107 0310 	add.w	r3, r7, #16
 8005e62:	4619      	mov	r1, r3
 8005e64:	480f      	ldr	r0, [pc, #60]	; (8005ea4 <HAL_UART_MspInit+0xa4>)
 8005e66:	f000 faf9 	bl	800645c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e70:	2300      	movs	r3, #0
 8005e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e78:	f107 0310 	add.w	r3, r7, #16
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4809      	ldr	r0, [pc, #36]	; (8005ea4 <HAL_UART_MspInit+0xa4>)
 8005e80:	f000 faec 	bl	800645c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005e84:	2200      	movs	r2, #0
 8005e86:	2100      	movs	r1, #0
 8005e88:	2025      	movs	r0, #37	; 0x25
 8005e8a:	f000 f9fe 	bl	800628a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005e8e:	2025      	movs	r0, #37	; 0x25
 8005e90:	f000 fa17 	bl	80062c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005e94:	bf00      	nop
 8005e96:	3720      	adds	r7, #32
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	40013800 	.word	0x40013800
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	40010800 	.word	0x40010800

08005ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005eac:	e7fe      	b.n	8005eac <NMI_Handler+0x4>

08005eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005eb2:	e7fe      	b.n	8005eb2 <HardFault_Handler+0x4>

08005eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005eb8:	e7fe      	b.n	8005eb8 <MemManage_Handler+0x4>

08005eba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ebe:	e7fe      	b.n	8005ebe <BusFault_Handler+0x4>

08005ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ec4:	e7fe      	b.n	8005ec4 <UsageFault_Handler+0x4>

08005ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005eca:	bf00      	nop
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr

08005ed2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ed6:	bf00      	nop
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bc80      	pop	{r7}
 8005edc:	4770      	bx	lr

08005ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ee2:	bf00      	nop
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr

08005eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005eee:	f000 f8b5 	bl	800605c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ef2:	bf00      	nop
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005efc:	4802      	ldr	r0, [pc, #8]	; (8005f08 <USART1_IRQHandler+0x10>)
 8005efe:	f001 f8e7 	bl	80070d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005f02:	bf00      	nop
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	2000030c 	.word	0x2000030c

08005f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f14:	4a14      	ldr	r2, [pc, #80]	; (8005f68 <_sbrk+0x5c>)
 8005f16:	4b15      	ldr	r3, [pc, #84]	; (8005f6c <_sbrk+0x60>)
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f20:	4b13      	ldr	r3, [pc, #76]	; (8005f70 <_sbrk+0x64>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d102      	bne.n	8005f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f28:	4b11      	ldr	r3, [pc, #68]	; (8005f70 <_sbrk+0x64>)
 8005f2a:	4a12      	ldr	r2, [pc, #72]	; (8005f74 <_sbrk+0x68>)
 8005f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f2e:	4b10      	ldr	r3, [pc, #64]	; (8005f70 <_sbrk+0x64>)
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4413      	add	r3, r2
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d207      	bcs.n	8005f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f3c:	f001 fde2 	bl	8007b04 <__errno>
 8005f40:	4603      	mov	r3, r0
 8005f42:	220c      	movs	r2, #12
 8005f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f46:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4a:	e009      	b.n	8005f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f4c:	4b08      	ldr	r3, [pc, #32]	; (8005f70 <_sbrk+0x64>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f52:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <_sbrk+0x64>)
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4413      	add	r3, r2
 8005f5a:	4a05      	ldr	r2, [pc, #20]	; (8005f70 <_sbrk+0x64>)
 8005f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20005000 	.word	0x20005000
 8005f6c:	00000400 	.word	0x00000400
 8005f70:	20000354 	.word	0x20000354
 8005f74:	20000370 	.word	0x20000370

08005f78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f7c:	bf00      	nop
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr

08005f84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005f84:	f7ff fff8 	bl	8005f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f88:	480b      	ldr	r0, [pc, #44]	; (8005fb8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005f8a:	490c      	ldr	r1, [pc, #48]	; (8005fbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005f8c:	4a0c      	ldr	r2, [pc, #48]	; (8005fc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f90:	e002      	b.n	8005f98 <LoopCopyDataInit>

08005f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f96:	3304      	adds	r3, #4

08005f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f9c:	d3f9      	bcc.n	8005f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f9e:	4a09      	ldr	r2, [pc, #36]	; (8005fc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005fa0:	4c09      	ldr	r4, [pc, #36]	; (8005fc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fa4:	e001      	b.n	8005faa <LoopFillZerobss>

08005fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fa8:	3204      	adds	r2, #4

08005faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fac:	d3fb      	bcc.n	8005fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005fae:	f001 fdaf 	bl	8007b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005fb2:	f7fa fc8d 	bl	80008d0 <main>
  bx lr
 8005fb6:	4770      	bx	lr
  ldr r0, =_sdata
 8005fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fbc:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 8005fc0:	080086ac 	.word	0x080086ac
  ldr r2, =_sbss
 8005fc4:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8005fc8:	2000036c 	.word	0x2000036c

08005fcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005fcc:	e7fe      	b.n	8005fcc <ADC1_2_IRQHandler>
	...

08005fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fd4:	4b08      	ldr	r3, [pc, #32]	; (8005ff8 <HAL_Init+0x28>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a07      	ldr	r2, [pc, #28]	; (8005ff8 <HAL_Init+0x28>)
 8005fda:	f043 0310 	orr.w	r3, r3, #16
 8005fde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fe0:	2003      	movs	r0, #3
 8005fe2:	f000 f947 	bl	8006274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005fe6:	200f      	movs	r0, #15
 8005fe8:	f000 f808 	bl	8005ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005fec:	f7ff fee6 	bl	8005dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40022000 	.word	0x40022000

08005ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006004:	4b12      	ldr	r3, [pc, #72]	; (8006050 <HAL_InitTick+0x54>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	4b12      	ldr	r3, [pc, #72]	; (8006054 <HAL_InitTick+0x58>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	4619      	mov	r1, r3
 800600e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006012:	fbb3 f3f1 	udiv	r3, r3, r1
 8006016:	fbb2 f3f3 	udiv	r3, r2, r3
 800601a:	4618      	mov	r0, r3
 800601c:	f000 f95f 	bl	80062de <HAL_SYSTICK_Config>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e00e      	b.n	8006048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b0f      	cmp	r3, #15
 800602e:	d80a      	bhi.n	8006046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006030:	2200      	movs	r2, #0
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	f04f 30ff 	mov.w	r0, #4294967295
 8006038:	f000 f927 	bl	800628a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800603c:	4a06      	ldr	r2, [pc, #24]	; (8006058 <HAL_InitTick+0x5c>)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	e000      	b.n	8006048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
}
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20000280 	.word	0x20000280
 8006054:	20000288 	.word	0x20000288
 8006058:	20000284 	.word	0x20000284

0800605c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006060:	4b05      	ldr	r3, [pc, #20]	; (8006078 <HAL_IncTick+0x1c>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	461a      	mov	r2, r3
 8006066:	4b05      	ldr	r3, [pc, #20]	; (800607c <HAL_IncTick+0x20>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4413      	add	r3, r2
 800606c:	4a03      	ldr	r2, [pc, #12]	; (800607c <HAL_IncTick+0x20>)
 800606e:	6013      	str	r3, [r2, #0]
}
 8006070:	bf00      	nop
 8006072:	46bd      	mov	sp, r7
 8006074:	bc80      	pop	{r7}
 8006076:	4770      	bx	lr
 8006078:	20000288 	.word	0x20000288
 800607c:	20000358 	.word	0x20000358

08006080 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  return uwTick;
 8006084:	4b02      	ldr	r3, [pc, #8]	; (8006090 <HAL_GetTick+0x10>)
 8006086:	681b      	ldr	r3, [r3, #0]
}
 8006088:	4618      	mov	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	bc80      	pop	{r7}
 800608e:	4770      	bx	lr
 8006090:	20000358 	.word	0x20000358

08006094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800609c:	f7ff fff0 	bl	8006080 <HAL_GetTick>
 80060a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ac:	d005      	beq.n	80060ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80060ae:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <HAL_Delay+0x44>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4413      	add	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80060ba:	bf00      	nop
 80060bc:	f7ff ffe0 	bl	8006080 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d8f7      	bhi.n	80060bc <HAL_Delay+0x28>
  {
  }
}
 80060cc:	bf00      	nop
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000288 	.word	0x20000288

080060dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060ec:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <__NVIC_SetPriorityGrouping+0x44>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060f8:	4013      	ands	r3, r2
 80060fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800610c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800610e:	4a04      	ldr	r2, [pc, #16]	; (8006120 <__NVIC_SetPriorityGrouping+0x44>)
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	60d3      	str	r3, [r2, #12]
}
 8006114:	bf00      	nop
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	e000ed00 	.word	0xe000ed00

08006124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006124:	b480      	push	{r7}
 8006126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006128:	4b04      	ldr	r3, [pc, #16]	; (800613c <__NVIC_GetPriorityGrouping+0x18>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	0a1b      	lsrs	r3, r3, #8
 800612e:	f003 0307 	and.w	r3, r3, #7
}
 8006132:	4618      	mov	r0, r3
 8006134:	46bd      	mov	sp, r7
 8006136:	bc80      	pop	{r7}
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	e000ed00 	.word	0xe000ed00

08006140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	4603      	mov	r3, r0
 8006148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800614a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800614e:	2b00      	cmp	r3, #0
 8006150:	db0b      	blt.n	800616a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006152:	79fb      	ldrb	r3, [r7, #7]
 8006154:	f003 021f 	and.w	r2, r3, #31
 8006158:	4906      	ldr	r1, [pc, #24]	; (8006174 <__NVIC_EnableIRQ+0x34>)
 800615a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	2001      	movs	r0, #1
 8006162:	fa00 f202 	lsl.w	r2, r0, r2
 8006166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr
 8006174:	e000e100 	.word	0xe000e100

08006178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	4603      	mov	r3, r0
 8006180:	6039      	str	r1, [r7, #0]
 8006182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006188:	2b00      	cmp	r3, #0
 800618a:	db0a      	blt.n	80061a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	b2da      	uxtb	r2, r3
 8006190:	490c      	ldr	r1, [pc, #48]	; (80061c4 <__NVIC_SetPriority+0x4c>)
 8006192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006196:	0112      	lsls	r2, r2, #4
 8006198:	b2d2      	uxtb	r2, r2
 800619a:	440b      	add	r3, r1
 800619c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061a0:	e00a      	b.n	80061b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	4908      	ldr	r1, [pc, #32]	; (80061c8 <__NVIC_SetPriority+0x50>)
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	3b04      	subs	r3, #4
 80061b0:	0112      	lsls	r2, r2, #4
 80061b2:	b2d2      	uxtb	r2, r2
 80061b4:	440b      	add	r3, r1
 80061b6:	761a      	strb	r2, [r3, #24]
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	e000e100 	.word	0xe000e100
 80061c8:	e000ed00 	.word	0xe000ed00

080061cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b089      	sub	sp, #36	; 0x24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	f1c3 0307 	rsb	r3, r3, #7
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	bf28      	it	cs
 80061ea:	2304      	movcs	r3, #4
 80061ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	3304      	adds	r3, #4
 80061f2:	2b06      	cmp	r3, #6
 80061f4:	d902      	bls.n	80061fc <NVIC_EncodePriority+0x30>
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	3b03      	subs	r3, #3
 80061fa:	e000      	b.n	80061fe <NVIC_EncodePriority+0x32>
 80061fc:	2300      	movs	r3, #0
 80061fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006200:	f04f 32ff 	mov.w	r2, #4294967295
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	43da      	mvns	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	401a      	ands	r2, r3
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006214:	f04f 31ff 	mov.w	r1, #4294967295
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	fa01 f303 	lsl.w	r3, r1, r3
 800621e:	43d9      	mvns	r1, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006224:	4313      	orrs	r3, r2
         );
}
 8006226:	4618      	mov	r0, r3
 8006228:	3724      	adds	r7, #36	; 0x24
 800622a:	46bd      	mov	sp, r7
 800622c:	bc80      	pop	{r7}
 800622e:	4770      	bx	lr

08006230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3b01      	subs	r3, #1
 800623c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006240:	d301      	bcc.n	8006246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006242:	2301      	movs	r3, #1
 8006244:	e00f      	b.n	8006266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006246:	4a0a      	ldr	r2, [pc, #40]	; (8006270 <SysTick_Config+0x40>)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3b01      	subs	r3, #1
 800624c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800624e:	210f      	movs	r1, #15
 8006250:	f04f 30ff 	mov.w	r0, #4294967295
 8006254:	f7ff ff90 	bl	8006178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006258:	4b05      	ldr	r3, [pc, #20]	; (8006270 <SysTick_Config+0x40>)
 800625a:	2200      	movs	r2, #0
 800625c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800625e:	4b04      	ldr	r3, [pc, #16]	; (8006270 <SysTick_Config+0x40>)
 8006260:	2207      	movs	r2, #7
 8006262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	e000e010 	.word	0xe000e010

08006274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff ff2d 	bl	80060dc <__NVIC_SetPriorityGrouping>
}
 8006282:	bf00      	nop
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800628a:	b580      	push	{r7, lr}
 800628c:	b086      	sub	sp, #24
 800628e:	af00      	add	r7, sp, #0
 8006290:	4603      	mov	r3, r0
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
 8006296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800629c:	f7ff ff42 	bl	8006124 <__NVIC_GetPriorityGrouping>
 80062a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	68b9      	ldr	r1, [r7, #8]
 80062a6:	6978      	ldr	r0, [r7, #20]
 80062a8:	f7ff ff90 	bl	80061cc <NVIC_EncodePriority>
 80062ac:	4602      	mov	r2, r0
 80062ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062b2:	4611      	mov	r1, r2
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff ff5f 	bl	8006178 <__NVIC_SetPriority>
}
 80062ba:	bf00      	nop
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b082      	sub	sp, #8
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	4603      	mov	r3, r0
 80062ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff ff35 	bl	8006140 <__NVIC_EnableIRQ>
}
 80062d6:	bf00      	nop
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff ffa2 	bl	8006230 <SysTick_Config>
 80062ec:	4603      	mov	r3, r0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b085      	sub	sp, #20
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b02      	cmp	r3, #2
 800630c:	d008      	beq.n	8006320 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2204      	movs	r2, #4
 8006312:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e020      	b.n	8006362 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 020e 	bic.w	r2, r2, #14
 800632e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0201 	bic.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006348:	2101      	movs	r1, #1
 800634a:	fa01 f202 	lsl.w	r2, r1, r2
 800634e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006360:	7bfb      	ldrb	r3, [r7, #15]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	bc80      	pop	{r7}
 800636a:	4770      	bx	lr

0800636c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d005      	beq.n	8006390 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2204      	movs	r2, #4
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	73fb      	strb	r3, [r7, #15]
 800638e:	e051      	b.n	8006434 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 020e 	bic.w	r2, r2, #14
 800639e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0201 	bic.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a22      	ldr	r2, [pc, #136]	; (8006440 <HAL_DMA_Abort_IT+0xd4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d029      	beq.n	800640e <HAL_DMA_Abort_IT+0xa2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a21      	ldr	r2, [pc, #132]	; (8006444 <HAL_DMA_Abort_IT+0xd8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d022      	beq.n	800640a <HAL_DMA_Abort_IT+0x9e>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a1f      	ldr	r2, [pc, #124]	; (8006448 <HAL_DMA_Abort_IT+0xdc>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d01a      	beq.n	8006404 <HAL_DMA_Abort_IT+0x98>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a1e      	ldr	r2, [pc, #120]	; (800644c <HAL_DMA_Abort_IT+0xe0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d012      	beq.n	80063fe <HAL_DMA_Abort_IT+0x92>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a1c      	ldr	r2, [pc, #112]	; (8006450 <HAL_DMA_Abort_IT+0xe4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00a      	beq.n	80063f8 <HAL_DMA_Abort_IT+0x8c>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a1b      	ldr	r2, [pc, #108]	; (8006454 <HAL_DMA_Abort_IT+0xe8>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d102      	bne.n	80063f2 <HAL_DMA_Abort_IT+0x86>
 80063ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80063f0:	e00e      	b.n	8006410 <HAL_DMA_Abort_IT+0xa4>
 80063f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063f6:	e00b      	b.n	8006410 <HAL_DMA_Abort_IT+0xa4>
 80063f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80063fc:	e008      	b.n	8006410 <HAL_DMA_Abort_IT+0xa4>
 80063fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006402:	e005      	b.n	8006410 <HAL_DMA_Abort_IT+0xa4>
 8006404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006408:	e002      	b.n	8006410 <HAL_DMA_Abort_IT+0xa4>
 800640a:	2310      	movs	r3, #16
 800640c:	e000      	b.n	8006410 <HAL_DMA_Abort_IT+0xa4>
 800640e:	2301      	movs	r3, #1
 8006410:	4a11      	ldr	r2, [pc, #68]	; (8006458 <HAL_DMA_Abort_IT+0xec>)
 8006412:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	4798      	blx	r3
    } 
  }
  return status;
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40020008 	.word	0x40020008
 8006444:	4002001c 	.word	0x4002001c
 8006448:	40020030 	.word	0x40020030
 800644c:	40020044 	.word	0x40020044
 8006450:	40020058 	.word	0x40020058
 8006454:	4002006c 	.word	0x4002006c
 8006458:	40020000 	.word	0x40020000

0800645c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800645c:	b480      	push	{r7}
 800645e:	b08b      	sub	sp, #44	; 0x2c
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006466:	2300      	movs	r3, #0
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800646a:	2300      	movs	r3, #0
 800646c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800646e:	e169      	b.n	8006744 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006470:	2201      	movs	r2, #1
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	4013      	ands	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	429a      	cmp	r2, r3
 800648a:	f040 8158 	bne.w	800673e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	4a9a      	ldr	r2, [pc, #616]	; (80066fc <HAL_GPIO_Init+0x2a0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d05e      	beq.n	8006556 <HAL_GPIO_Init+0xfa>
 8006498:	4a98      	ldr	r2, [pc, #608]	; (80066fc <HAL_GPIO_Init+0x2a0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d875      	bhi.n	800658a <HAL_GPIO_Init+0x12e>
 800649e:	4a98      	ldr	r2, [pc, #608]	; (8006700 <HAL_GPIO_Init+0x2a4>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d058      	beq.n	8006556 <HAL_GPIO_Init+0xfa>
 80064a4:	4a96      	ldr	r2, [pc, #600]	; (8006700 <HAL_GPIO_Init+0x2a4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d86f      	bhi.n	800658a <HAL_GPIO_Init+0x12e>
 80064aa:	4a96      	ldr	r2, [pc, #600]	; (8006704 <HAL_GPIO_Init+0x2a8>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d052      	beq.n	8006556 <HAL_GPIO_Init+0xfa>
 80064b0:	4a94      	ldr	r2, [pc, #592]	; (8006704 <HAL_GPIO_Init+0x2a8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d869      	bhi.n	800658a <HAL_GPIO_Init+0x12e>
 80064b6:	4a94      	ldr	r2, [pc, #592]	; (8006708 <HAL_GPIO_Init+0x2ac>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d04c      	beq.n	8006556 <HAL_GPIO_Init+0xfa>
 80064bc:	4a92      	ldr	r2, [pc, #584]	; (8006708 <HAL_GPIO_Init+0x2ac>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d863      	bhi.n	800658a <HAL_GPIO_Init+0x12e>
 80064c2:	4a92      	ldr	r2, [pc, #584]	; (800670c <HAL_GPIO_Init+0x2b0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d046      	beq.n	8006556 <HAL_GPIO_Init+0xfa>
 80064c8:	4a90      	ldr	r2, [pc, #576]	; (800670c <HAL_GPIO_Init+0x2b0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d85d      	bhi.n	800658a <HAL_GPIO_Init+0x12e>
 80064ce:	2b12      	cmp	r3, #18
 80064d0:	d82a      	bhi.n	8006528 <HAL_GPIO_Init+0xcc>
 80064d2:	2b12      	cmp	r3, #18
 80064d4:	d859      	bhi.n	800658a <HAL_GPIO_Init+0x12e>
 80064d6:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <HAL_GPIO_Init+0x80>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	08006557 	.word	0x08006557
 80064e0:	08006531 	.word	0x08006531
 80064e4:	08006543 	.word	0x08006543
 80064e8:	08006585 	.word	0x08006585
 80064ec:	0800658b 	.word	0x0800658b
 80064f0:	0800658b 	.word	0x0800658b
 80064f4:	0800658b 	.word	0x0800658b
 80064f8:	0800658b 	.word	0x0800658b
 80064fc:	0800658b 	.word	0x0800658b
 8006500:	0800658b 	.word	0x0800658b
 8006504:	0800658b 	.word	0x0800658b
 8006508:	0800658b 	.word	0x0800658b
 800650c:	0800658b 	.word	0x0800658b
 8006510:	0800658b 	.word	0x0800658b
 8006514:	0800658b 	.word	0x0800658b
 8006518:	0800658b 	.word	0x0800658b
 800651c:	0800658b 	.word	0x0800658b
 8006520:	08006539 	.word	0x08006539
 8006524:	0800654d 	.word	0x0800654d
 8006528:	4a79      	ldr	r2, [pc, #484]	; (8006710 <HAL_GPIO_Init+0x2b4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d013      	beq.n	8006556 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800652e:	e02c      	b.n	800658a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	623b      	str	r3, [r7, #32]
          break;
 8006536:	e029      	b.n	800658c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	3304      	adds	r3, #4
 800653e:	623b      	str	r3, [r7, #32]
          break;
 8006540:	e024      	b.n	800658c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	3308      	adds	r3, #8
 8006548:	623b      	str	r3, [r7, #32]
          break;
 800654a:	e01f      	b.n	800658c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	330c      	adds	r3, #12
 8006552:	623b      	str	r3, [r7, #32]
          break;
 8006554:	e01a      	b.n	800658c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800655e:	2304      	movs	r3, #4
 8006560:	623b      	str	r3, [r7, #32]
          break;
 8006562:	e013      	b.n	800658c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d105      	bne.n	8006578 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800656c:	2308      	movs	r3, #8
 800656e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	611a      	str	r2, [r3, #16]
          break;
 8006576:	e009      	b.n	800658c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006578:	2308      	movs	r3, #8
 800657a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	615a      	str	r2, [r3, #20]
          break;
 8006582:	e003      	b.n	800658c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006584:	2300      	movs	r3, #0
 8006586:	623b      	str	r3, [r7, #32]
          break;
 8006588:	e000      	b.n	800658c <HAL_GPIO_Init+0x130>
          break;
 800658a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	2bff      	cmp	r3, #255	; 0xff
 8006590:	d801      	bhi.n	8006596 <HAL_GPIO_Init+0x13a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	e001      	b.n	800659a <HAL_GPIO_Init+0x13e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3304      	adds	r3, #4
 800659a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2bff      	cmp	r3, #255	; 0xff
 80065a0:	d802      	bhi.n	80065a8 <HAL_GPIO_Init+0x14c>
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	e002      	b.n	80065ae <HAL_GPIO_Init+0x152>
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	3b08      	subs	r3, #8
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	210f      	movs	r1, #15
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	fa01 f303 	lsl.w	r3, r1, r3
 80065bc:	43db      	mvns	r3, r3
 80065be:	401a      	ands	r2, r3
 80065c0:	6a39      	ldr	r1, [r7, #32]
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	fa01 f303 	lsl.w	r3, r1, r3
 80065c8:	431a      	orrs	r2, r3
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 80b1 	beq.w	800673e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80065dc:	4b4d      	ldr	r3, [pc, #308]	; (8006714 <HAL_GPIO_Init+0x2b8>)
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	4a4c      	ldr	r2, [pc, #304]	; (8006714 <HAL_GPIO_Init+0x2b8>)
 80065e2:	f043 0301 	orr.w	r3, r3, #1
 80065e6:	6193      	str	r3, [r2, #24]
 80065e8:	4b4a      	ldr	r3, [pc, #296]	; (8006714 <HAL_GPIO_Init+0x2b8>)
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	60bb      	str	r3, [r7, #8]
 80065f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80065f4:	4a48      	ldr	r2, [pc, #288]	; (8006718 <HAL_GPIO_Init+0x2bc>)
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	089b      	lsrs	r3, r3, #2
 80065fa:	3302      	adds	r3, #2
 80065fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006600:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	f003 0303 	and.w	r3, r3, #3
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	220f      	movs	r2, #15
 800660c:	fa02 f303 	lsl.w	r3, r2, r3
 8006610:	43db      	mvns	r3, r3
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4013      	ands	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a40      	ldr	r2, [pc, #256]	; (800671c <HAL_GPIO_Init+0x2c0>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d013      	beq.n	8006648 <HAL_GPIO_Init+0x1ec>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a3f      	ldr	r2, [pc, #252]	; (8006720 <HAL_GPIO_Init+0x2c4>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00d      	beq.n	8006644 <HAL_GPIO_Init+0x1e8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a3e      	ldr	r2, [pc, #248]	; (8006724 <HAL_GPIO_Init+0x2c8>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d007      	beq.n	8006640 <HAL_GPIO_Init+0x1e4>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a3d      	ldr	r2, [pc, #244]	; (8006728 <HAL_GPIO_Init+0x2cc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d101      	bne.n	800663c <HAL_GPIO_Init+0x1e0>
 8006638:	2303      	movs	r3, #3
 800663a:	e006      	b.n	800664a <HAL_GPIO_Init+0x1ee>
 800663c:	2304      	movs	r3, #4
 800663e:	e004      	b.n	800664a <HAL_GPIO_Init+0x1ee>
 8006640:	2302      	movs	r3, #2
 8006642:	e002      	b.n	800664a <HAL_GPIO_Init+0x1ee>
 8006644:	2301      	movs	r3, #1
 8006646:	e000      	b.n	800664a <HAL_GPIO_Init+0x1ee>
 8006648:	2300      	movs	r3, #0
 800664a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800664c:	f002 0203 	and.w	r2, r2, #3
 8006650:	0092      	lsls	r2, r2, #2
 8006652:	4093      	lsls	r3, r2
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800665a:	492f      	ldr	r1, [pc, #188]	; (8006718 <HAL_GPIO_Init+0x2bc>)
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	089b      	lsrs	r3, r3, #2
 8006660:	3302      	adds	r3, #2
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d006      	beq.n	8006682 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006674:	4b2d      	ldr	r3, [pc, #180]	; (800672c <HAL_GPIO_Init+0x2d0>)
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	492c      	ldr	r1, [pc, #176]	; (800672c <HAL_GPIO_Init+0x2d0>)
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	4313      	orrs	r3, r2
 800667e:	608b      	str	r3, [r1, #8]
 8006680:	e006      	b.n	8006690 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006682:	4b2a      	ldr	r3, [pc, #168]	; (800672c <HAL_GPIO_Init+0x2d0>)
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	43db      	mvns	r3, r3
 800668a:	4928      	ldr	r1, [pc, #160]	; (800672c <HAL_GPIO_Init+0x2d0>)
 800668c:	4013      	ands	r3, r2
 800668e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d006      	beq.n	80066aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800669c:	4b23      	ldr	r3, [pc, #140]	; (800672c <HAL_GPIO_Init+0x2d0>)
 800669e:	68da      	ldr	r2, [r3, #12]
 80066a0:	4922      	ldr	r1, [pc, #136]	; (800672c <HAL_GPIO_Init+0x2d0>)
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60cb      	str	r3, [r1, #12]
 80066a8:	e006      	b.n	80066b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80066aa:	4b20      	ldr	r3, [pc, #128]	; (800672c <HAL_GPIO_Init+0x2d0>)
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	43db      	mvns	r3, r3
 80066b2:	491e      	ldr	r1, [pc, #120]	; (800672c <HAL_GPIO_Init+0x2d0>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d006      	beq.n	80066d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80066c4:	4b19      	ldr	r3, [pc, #100]	; (800672c <HAL_GPIO_Init+0x2d0>)
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	4918      	ldr	r1, [pc, #96]	; (800672c <HAL_GPIO_Init+0x2d0>)
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	604b      	str	r3, [r1, #4]
 80066d0:	e006      	b.n	80066e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80066d2:	4b16      	ldr	r3, [pc, #88]	; (800672c <HAL_GPIO_Init+0x2d0>)
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	43db      	mvns	r3, r3
 80066da:	4914      	ldr	r1, [pc, #80]	; (800672c <HAL_GPIO_Init+0x2d0>)
 80066dc:	4013      	ands	r3, r2
 80066de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d021      	beq.n	8006730 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80066ec:	4b0f      	ldr	r3, [pc, #60]	; (800672c <HAL_GPIO_Init+0x2d0>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	490e      	ldr	r1, [pc, #56]	; (800672c <HAL_GPIO_Init+0x2d0>)
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	600b      	str	r3, [r1, #0]
 80066f8:	e021      	b.n	800673e <HAL_GPIO_Init+0x2e2>
 80066fa:	bf00      	nop
 80066fc:	10320000 	.word	0x10320000
 8006700:	10310000 	.word	0x10310000
 8006704:	10220000 	.word	0x10220000
 8006708:	10210000 	.word	0x10210000
 800670c:	10120000 	.word	0x10120000
 8006710:	10110000 	.word	0x10110000
 8006714:	40021000 	.word	0x40021000
 8006718:	40010000 	.word	0x40010000
 800671c:	40010800 	.word	0x40010800
 8006720:	40010c00 	.word	0x40010c00
 8006724:	40011000 	.word	0x40011000
 8006728:	40011400 	.word	0x40011400
 800672c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006730:	4b0b      	ldr	r3, [pc, #44]	; (8006760 <HAL_GPIO_Init+0x304>)
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	43db      	mvns	r3, r3
 8006738:	4909      	ldr	r1, [pc, #36]	; (8006760 <HAL_GPIO_Init+0x304>)
 800673a:	4013      	ands	r3, r2
 800673c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	3301      	adds	r3, #1
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	fa22 f303 	lsr.w	r3, r2, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	f47f ae8e 	bne.w	8006470 <HAL_GPIO_Init+0x14>
  }
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	372c      	adds	r7, #44	; 0x2c
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr
 8006760:	40010400 	.word	0x40010400

08006764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	460b      	mov	r3, r1
 800676e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	887b      	ldrh	r3, [r7, #2]
 8006776:	4013      	ands	r3, r2
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800677c:	2301      	movs	r3, #1
 800677e:	73fb      	strb	r3, [r7, #15]
 8006780:	e001      	b.n	8006786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006782:	2300      	movs	r3, #0
 8006784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006786:	7bfb      	ldrb	r3, [r7, #15]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	bc80      	pop	{r7}
 8006790:	4770      	bx	lr

08006792 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	460b      	mov	r3, r1
 800679c:	807b      	strh	r3, [r7, #2]
 800679e:	4613      	mov	r3, r2
 80067a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067a2:	787b      	ldrb	r3, [r7, #1]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067a8:	887a      	ldrh	r2, [r7, #2]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80067ae:	e003      	b.n	80067b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80067b0:	887b      	ldrh	r3, [r7, #2]
 80067b2:	041a      	lsls	r2, r3, #16
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	611a      	str	r2, [r3, #16]
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr
	...

080067c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e272      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 8087 	beq.w	80068f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80067e4:	4b92      	ldr	r3, [pc, #584]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f003 030c 	and.w	r3, r3, #12
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d00c      	beq.n	800680a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80067f0:	4b8f      	ldr	r3, [pc, #572]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f003 030c 	and.w	r3, r3, #12
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d112      	bne.n	8006822 <HAL_RCC_OscConfig+0x5e>
 80067fc:	4b8c      	ldr	r3, [pc, #560]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006808:	d10b      	bne.n	8006822 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800680a:	4b89      	ldr	r3, [pc, #548]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d06c      	beq.n	80068f0 <HAL_RCC_OscConfig+0x12c>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d168      	bne.n	80068f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e24c      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800682a:	d106      	bne.n	800683a <HAL_RCC_OscConfig+0x76>
 800682c:	4b80      	ldr	r3, [pc, #512]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a7f      	ldr	r2, [pc, #508]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 8006832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	e02e      	b.n	8006898 <HAL_RCC_OscConfig+0xd4>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10c      	bne.n	800685c <HAL_RCC_OscConfig+0x98>
 8006842:	4b7b      	ldr	r3, [pc, #492]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a7a      	ldr	r2, [pc, #488]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 8006848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	4b78      	ldr	r3, [pc, #480]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a77      	ldr	r2, [pc, #476]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 8006854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	e01d      	b.n	8006898 <HAL_RCC_OscConfig+0xd4>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006864:	d10c      	bne.n	8006880 <HAL_RCC_OscConfig+0xbc>
 8006866:	4b72      	ldr	r3, [pc, #456]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a71      	ldr	r2, [pc, #452]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 800686c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	4b6f      	ldr	r3, [pc, #444]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a6e      	ldr	r2, [pc, #440]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 8006878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	e00b      	b.n	8006898 <HAL_RCC_OscConfig+0xd4>
 8006880:	4b6b      	ldr	r3, [pc, #428]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a6a      	ldr	r2, [pc, #424]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 8006886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	4b68      	ldr	r3, [pc, #416]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a67      	ldr	r2, [pc, #412]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 8006892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006896:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d013      	beq.n	80068c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a0:	f7ff fbee 	bl	8006080 <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068a8:	f7ff fbea 	bl	8006080 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b64      	cmp	r3, #100	; 0x64
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e200      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ba:	4b5d      	ldr	r3, [pc, #372]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0f0      	beq.n	80068a8 <HAL_RCC_OscConfig+0xe4>
 80068c6:	e014      	b.n	80068f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c8:	f7ff fbda 	bl	8006080 <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068d0:	f7ff fbd6 	bl	8006080 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b64      	cmp	r3, #100	; 0x64
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e1ec      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068e2:	4b53      	ldr	r3, [pc, #332]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f0      	bne.n	80068d0 <HAL_RCC_OscConfig+0x10c>
 80068ee:	e000      	b.n	80068f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d063      	beq.n	80069c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068fe:	4b4c      	ldr	r3, [pc, #304]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f003 030c 	and.w	r3, r3, #12
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00b      	beq.n	8006922 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800690a:	4b49      	ldr	r3, [pc, #292]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f003 030c 	and.w	r3, r3, #12
 8006912:	2b08      	cmp	r3, #8
 8006914:	d11c      	bne.n	8006950 <HAL_RCC_OscConfig+0x18c>
 8006916:	4b46      	ldr	r3, [pc, #280]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d116      	bne.n	8006950 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006922:	4b43      	ldr	r3, [pc, #268]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d005      	beq.n	800693a <HAL_RCC_OscConfig+0x176>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d001      	beq.n	800693a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e1c0      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800693a:	4b3d      	ldr	r3, [pc, #244]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	4939      	ldr	r1, [pc, #228]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 800694a:	4313      	orrs	r3, r2
 800694c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800694e:	e03a      	b.n	80069c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d020      	beq.n	800699a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006958:	4b36      	ldr	r3, [pc, #216]	; (8006a34 <HAL_RCC_OscConfig+0x270>)
 800695a:	2201      	movs	r2, #1
 800695c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800695e:	f7ff fb8f 	bl	8006080 <HAL_GetTick>
 8006962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006964:	e008      	b.n	8006978 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006966:	f7ff fb8b 	bl	8006080 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e1a1      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006978:	4b2d      	ldr	r3, [pc, #180]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0f0      	beq.n	8006966 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006984:	4b2a      	ldr	r3, [pc, #168]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	4927      	ldr	r1, [pc, #156]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 8006994:	4313      	orrs	r3, r2
 8006996:	600b      	str	r3, [r1, #0]
 8006998:	e015      	b.n	80069c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800699a:	4b26      	ldr	r3, [pc, #152]	; (8006a34 <HAL_RCC_OscConfig+0x270>)
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a0:	f7ff fb6e 	bl	8006080 <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069a8:	f7ff fb6a 	bl	8006080 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e180      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ba:	4b1d      	ldr	r3, [pc, #116]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1f0      	bne.n	80069a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d03a      	beq.n	8006a48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d019      	beq.n	8006a0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069da:	4b17      	ldr	r3, [pc, #92]	; (8006a38 <HAL_RCC_OscConfig+0x274>)
 80069dc:	2201      	movs	r2, #1
 80069de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069e0:	f7ff fb4e 	bl	8006080 <HAL_GetTick>
 80069e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069e6:	e008      	b.n	80069fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069e8:	f7ff fb4a 	bl	8006080 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e160      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069fa:	4b0d      	ldr	r3, [pc, #52]	; (8006a30 <HAL_RCC_OscConfig+0x26c>)
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d0f0      	beq.n	80069e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006a06:	2001      	movs	r0, #1
 8006a08:	f000 face 	bl	8006fa8 <RCC_Delay>
 8006a0c:	e01c      	b.n	8006a48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a0e:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <HAL_RCC_OscConfig+0x274>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a14:	f7ff fb34 	bl	8006080 <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a1a:	e00f      	b.n	8006a3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a1c:	f7ff fb30 	bl	8006080 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d908      	bls.n	8006a3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e146      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>
 8006a2e:	bf00      	nop
 8006a30:	40021000 	.word	0x40021000
 8006a34:	42420000 	.word	0x42420000
 8006a38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a3c:	4b92      	ldr	r3, [pc, #584]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1e9      	bne.n	8006a1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 80a6 	beq.w	8006ba2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a56:	2300      	movs	r3, #0
 8006a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a5a:	4b8b      	ldr	r3, [pc, #556]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10d      	bne.n	8006a82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a66:	4b88      	ldr	r3, [pc, #544]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	4a87      	ldr	r2, [pc, #540]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a70:	61d3      	str	r3, [r2, #28]
 8006a72:	4b85      	ldr	r3, [pc, #532]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a7a:	60bb      	str	r3, [r7, #8]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a82:	4b82      	ldr	r3, [pc, #520]	; (8006c8c <HAL_RCC_OscConfig+0x4c8>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d118      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a8e:	4b7f      	ldr	r3, [pc, #508]	; (8006c8c <HAL_RCC_OscConfig+0x4c8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a7e      	ldr	r2, [pc, #504]	; (8006c8c <HAL_RCC_OscConfig+0x4c8>)
 8006a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a9a:	f7ff faf1 	bl	8006080 <HAL_GetTick>
 8006a9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aa2:	f7ff faed 	bl	8006080 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b64      	cmp	r3, #100	; 0x64
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e103      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab4:	4b75      	ldr	r3, [pc, #468]	; (8006c8c <HAL_RCC_OscConfig+0x4c8>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0f0      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d106      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x312>
 8006ac8:	4b6f      	ldr	r3, [pc, #444]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	4a6e      	ldr	r2, [pc, #440]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006ace:	f043 0301 	orr.w	r3, r3, #1
 8006ad2:	6213      	str	r3, [r2, #32]
 8006ad4:	e02d      	b.n	8006b32 <HAL_RCC_OscConfig+0x36e>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10c      	bne.n	8006af8 <HAL_RCC_OscConfig+0x334>
 8006ade:	4b6a      	ldr	r3, [pc, #424]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	4a69      	ldr	r2, [pc, #420]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006ae4:	f023 0301 	bic.w	r3, r3, #1
 8006ae8:	6213      	str	r3, [r2, #32]
 8006aea:	4b67      	ldr	r3, [pc, #412]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	4a66      	ldr	r2, [pc, #408]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006af0:	f023 0304 	bic.w	r3, r3, #4
 8006af4:	6213      	str	r3, [r2, #32]
 8006af6:	e01c      	b.n	8006b32 <HAL_RCC_OscConfig+0x36e>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	2b05      	cmp	r3, #5
 8006afe:	d10c      	bne.n	8006b1a <HAL_RCC_OscConfig+0x356>
 8006b00:	4b61      	ldr	r3, [pc, #388]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	4a60      	ldr	r2, [pc, #384]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006b06:	f043 0304 	orr.w	r3, r3, #4
 8006b0a:	6213      	str	r3, [r2, #32]
 8006b0c:	4b5e      	ldr	r3, [pc, #376]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	4a5d      	ldr	r2, [pc, #372]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006b12:	f043 0301 	orr.w	r3, r3, #1
 8006b16:	6213      	str	r3, [r2, #32]
 8006b18:	e00b      	b.n	8006b32 <HAL_RCC_OscConfig+0x36e>
 8006b1a:	4b5b      	ldr	r3, [pc, #364]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	4a5a      	ldr	r2, [pc, #360]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006b20:	f023 0301 	bic.w	r3, r3, #1
 8006b24:	6213      	str	r3, [r2, #32]
 8006b26:	4b58      	ldr	r3, [pc, #352]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	4a57      	ldr	r2, [pc, #348]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006b2c:	f023 0304 	bic.w	r3, r3, #4
 8006b30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d015      	beq.n	8006b66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b3a:	f7ff faa1 	bl	8006080 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b40:	e00a      	b.n	8006b58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b42:	f7ff fa9d 	bl	8006080 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d901      	bls.n	8006b58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e0b1      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b58:	4b4b      	ldr	r3, [pc, #300]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0ee      	beq.n	8006b42 <HAL_RCC_OscConfig+0x37e>
 8006b64:	e014      	b.n	8006b90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b66:	f7ff fa8b 	bl	8006080 <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b6c:	e00a      	b.n	8006b84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b6e:	f7ff fa87 	bl	8006080 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e09b      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b84:	4b40      	ldr	r3, [pc, #256]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1ee      	bne.n	8006b6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d105      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b96:	4b3c      	ldr	r3, [pc, #240]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	4a3b      	ldr	r2, [pc, #236]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ba0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 8087 	beq.w	8006cba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bac:	4b36      	ldr	r3, [pc, #216]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f003 030c 	and.w	r3, r3, #12
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	d061      	beq.n	8006c7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d146      	bne.n	8006c4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bc0:	4b33      	ldr	r3, [pc, #204]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc6:	f7ff fa5b 	bl	8006080 <HAL_GetTick>
 8006bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bcc:	e008      	b.n	8006be0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bce:	f7ff fa57 	bl	8006080 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e06d      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006be0:	4b29      	ldr	r3, [pc, #164]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1f0      	bne.n	8006bce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf4:	d108      	bne.n	8006c08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006bf6:	4b24      	ldr	r3, [pc, #144]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	4921      	ldr	r1, [pc, #132]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c08:	4b1f      	ldr	r3, [pc, #124]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a19      	ldr	r1, [r3, #32]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	491b      	ldr	r1, [pc, #108]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c20:	4b1b      	ldr	r3, [pc, #108]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006c22:	2201      	movs	r2, #1
 8006c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c26:	f7ff fa2b 	bl	8006080 <HAL_GetTick>
 8006c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c2c:	e008      	b.n	8006c40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c2e:	f7ff fa27 	bl	8006080 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e03d      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c40:	4b11      	ldr	r3, [pc, #68]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0f0      	beq.n	8006c2e <HAL_RCC_OscConfig+0x46a>
 8006c4c:	e035      	b.n	8006cba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c4e:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <HAL_RCC_OscConfig+0x4cc>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c54:	f7ff fa14 	bl	8006080 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c5c:	f7ff fa10 	bl	8006080 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e026      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c6e:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <HAL_RCC_OscConfig+0x4c4>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f0      	bne.n	8006c5c <HAL_RCC_OscConfig+0x498>
 8006c7a:	e01e      	b.n	8006cba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d107      	bne.n	8006c94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e019      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>
 8006c88:	40021000 	.word	0x40021000
 8006c8c:	40007000 	.word	0x40007000
 8006c90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c94:	4b0b      	ldr	r3, [pc, #44]	; (8006cc4 <HAL_RCC_OscConfig+0x500>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d106      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d001      	beq.n	8006cba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3718      	adds	r7, #24
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	40021000 	.word	0x40021000

08006cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e0d0      	b.n	8006e7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cdc:	4b6a      	ldr	r3, [pc, #424]	; (8006e88 <HAL_RCC_ClockConfig+0x1c0>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0307 	and.w	r3, r3, #7
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d910      	bls.n	8006d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cea:	4b67      	ldr	r3, [pc, #412]	; (8006e88 <HAL_RCC_ClockConfig+0x1c0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f023 0207 	bic.w	r2, r3, #7
 8006cf2:	4965      	ldr	r1, [pc, #404]	; (8006e88 <HAL_RCC_ClockConfig+0x1c0>)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cfa:	4b63      	ldr	r3, [pc, #396]	; (8006e88 <HAL_RCC_ClockConfig+0x1c0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0307 	and.w	r3, r3, #7
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d001      	beq.n	8006d0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e0b8      	b.n	8006e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d020      	beq.n	8006d5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d24:	4b59      	ldr	r3, [pc, #356]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	4a58      	ldr	r2, [pc, #352]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006d2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0308 	and.w	r3, r3, #8
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d3c:	4b53      	ldr	r3, [pc, #332]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	4a52      	ldr	r2, [pc, #328]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006d46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d48:	4b50      	ldr	r3, [pc, #320]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	494d      	ldr	r1, [pc, #308]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d040      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d107      	bne.n	8006d7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d6e:	4b47      	ldr	r3, [pc, #284]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d115      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e07f      	b.n	8006e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d107      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d86:	4b41      	ldr	r3, [pc, #260]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e073      	b.n	8006e7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d96:	4b3d      	ldr	r3, [pc, #244]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e06b      	b.n	8006e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006da6:	4b39      	ldr	r3, [pc, #228]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f023 0203 	bic.w	r2, r3, #3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	4936      	ldr	r1, [pc, #216]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006db8:	f7ff f962 	bl	8006080 <HAL_GetTick>
 8006dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dbe:	e00a      	b.n	8006dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc0:	f7ff f95e 	bl	8006080 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d901      	bls.n	8006dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e053      	b.n	8006e7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd6:	4b2d      	ldr	r3, [pc, #180]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f003 020c 	and.w	r2, r3, #12
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d1eb      	bne.n	8006dc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006de8:	4b27      	ldr	r3, [pc, #156]	; (8006e88 <HAL_RCC_ClockConfig+0x1c0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0307 	and.w	r3, r3, #7
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d210      	bcs.n	8006e18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df6:	4b24      	ldr	r3, [pc, #144]	; (8006e88 <HAL_RCC_ClockConfig+0x1c0>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f023 0207 	bic.w	r2, r3, #7
 8006dfe:	4922      	ldr	r1, [pc, #136]	; (8006e88 <HAL_RCC_ClockConfig+0x1c0>)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e06:	4b20      	ldr	r3, [pc, #128]	; (8006e88 <HAL_RCC_ClockConfig+0x1c0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d001      	beq.n	8006e18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e032      	b.n	8006e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d008      	beq.n	8006e36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e24:	4b19      	ldr	r3, [pc, #100]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	4916      	ldr	r1, [pc, #88]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0308 	and.w	r3, r3, #8
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d009      	beq.n	8006e56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e42:	4b12      	ldr	r3, [pc, #72]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	490e      	ldr	r1, [pc, #56]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e56:	f000 f821 	bl	8006e9c <HAL_RCC_GetSysClockFreq>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	091b      	lsrs	r3, r3, #4
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	490a      	ldr	r1, [pc, #40]	; (8006e90 <HAL_RCC_ClockConfig+0x1c8>)
 8006e68:	5ccb      	ldrb	r3, [r1, r3]
 8006e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6e:	4a09      	ldr	r2, [pc, #36]	; (8006e94 <HAL_RCC_ClockConfig+0x1cc>)
 8006e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e72:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <HAL_RCC_ClockConfig+0x1d0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff f8c0 	bl	8005ffc <HAL_InitTick>

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	40022000 	.word	0x40022000
 8006e8c:	40021000 	.word	0x40021000
 8006e90:	080085e4 	.word	0x080085e4
 8006e94:	20000280 	.word	0x20000280
 8006e98:	20000284 	.word	0x20000284

08006e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60bb      	str	r3, [r7, #8]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	617b      	str	r3, [r7, #20]
 8006eae:	2300      	movs	r3, #0
 8006eb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006eb6:	4b1e      	ldr	r3, [pc, #120]	; (8006f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f003 030c 	and.w	r3, r3, #12
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d002      	beq.n	8006ecc <HAL_RCC_GetSysClockFreq+0x30>
 8006ec6:	2b08      	cmp	r3, #8
 8006ec8:	d003      	beq.n	8006ed2 <HAL_RCC_GetSysClockFreq+0x36>
 8006eca:	e027      	b.n	8006f1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ecc:	4b19      	ldr	r3, [pc, #100]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8006ece:	613b      	str	r3, [r7, #16]
      break;
 8006ed0:	e027      	b.n	8006f22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	0c9b      	lsrs	r3, r3, #18
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	4a17      	ldr	r2, [pc, #92]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006edc:	5cd3      	ldrb	r3, [r2, r3]
 8006ede:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d010      	beq.n	8006f0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006eea:	4b11      	ldr	r3, [pc, #68]	; (8006f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	0c5b      	lsrs	r3, r3, #17
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	4a11      	ldr	r2, [pc, #68]	; (8006f3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006ef6:	5cd3      	ldrb	r3, [r2, r3]
 8006ef8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a0d      	ldr	r2, [pc, #52]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8006efe:	fb03 f202 	mul.w	r2, r3, r2
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	e004      	b.n	8006f16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a0c      	ldr	r2, [pc, #48]	; (8006f40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006f10:	fb02 f303 	mul.w	r3, r2, r3
 8006f14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	613b      	str	r3, [r7, #16]
      break;
 8006f1a:	e002      	b.n	8006f22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006f1c:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8006f1e:	613b      	str	r3, [r7, #16]
      break;
 8006f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f22:	693b      	ldr	r3, [r7, #16]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	371c      	adds	r7, #28
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bc80      	pop	{r7}
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	40021000 	.word	0x40021000
 8006f34:	007a1200 	.word	0x007a1200
 8006f38:	080085fc 	.word	0x080085fc
 8006f3c:	0800860c 	.word	0x0800860c
 8006f40:	003d0900 	.word	0x003d0900

08006f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f44:	b480      	push	{r7}
 8006f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f48:	4b02      	ldr	r3, [pc, #8]	; (8006f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bc80      	pop	{r7}
 8006f52:	4770      	bx	lr
 8006f54:	20000280 	.word	0x20000280

08006f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f5c:	f7ff fff2 	bl	8006f44 <HAL_RCC_GetHCLKFreq>
 8006f60:	4602      	mov	r2, r0
 8006f62:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	0a1b      	lsrs	r3, r3, #8
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	4903      	ldr	r1, [pc, #12]	; (8006f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f6e:	5ccb      	ldrb	r3, [r1, r3]
 8006f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	40021000 	.word	0x40021000
 8006f7c:	080085f4 	.word	0x080085f4

08006f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f84:	f7ff ffde 	bl	8006f44 <HAL_RCC_GetHCLKFreq>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	0adb      	lsrs	r3, r3, #11
 8006f90:	f003 0307 	and.w	r3, r3, #7
 8006f94:	4903      	ldr	r1, [pc, #12]	; (8006fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f96:	5ccb      	ldrb	r3, [r1, r3]
 8006f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	40021000 	.word	0x40021000
 8006fa4:	080085f4 	.word	0x080085f4

08006fa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006fb0:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <RCC_Delay+0x34>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a0a      	ldr	r2, [pc, #40]	; (8006fe0 <RCC_Delay+0x38>)
 8006fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fba:	0a5b      	lsrs	r3, r3, #9
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	fb02 f303 	mul.w	r3, r2, r3
 8006fc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006fc4:	bf00      	nop
  }
  while (Delay --);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	1e5a      	subs	r2, r3, #1
 8006fca:	60fa      	str	r2, [r7, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1f9      	bne.n	8006fc4 <RCC_Delay+0x1c>
}
 8006fd0:	bf00      	nop
 8006fd2:	bf00      	nop
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bc80      	pop	{r7}
 8006fda:	4770      	bx	lr
 8006fdc:	20000280 	.word	0x20000280
 8006fe0:	10624dd3 	.word	0x10624dd3

08006fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d101      	bne.n	8006ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e042      	b.n	800707c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d106      	bne.n	8007010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7fe fef8 	bl	8005e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2224      	movs	r2, #36	; 0x24
 8007014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fcdd 	bl	80079e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691a      	ldr	r2, [r3, #16]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800703c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	695a      	ldr	r2, [r3, #20]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800704c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800705c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2220      	movs	r2, #32
 8007070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	4613      	mov	r3, r2
 8007090:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b20      	cmp	r3, #32
 800709c:	d112      	bne.n	80070c4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <HAL_UART_Receive_IT+0x26>
 80070a4:	88fb      	ldrh	r3, [r7, #6]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e00b      	b.n	80070c6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070b4:	88fb      	ldrh	r3, [r7, #6]
 80070b6:	461a      	mov	r2, r3
 80070b8:	68b9      	ldr	r1, [r7, #8]
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 fac0 	bl	8007640 <UART_Start_Receive_IT>
 80070c0:	4603      	mov	r3, r0
 80070c2:	e000      	b.n	80070c6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80070c4:	2302      	movs	r3, #2
  }
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b0ba      	sub	sp, #232	; 0xe8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800710e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10f      	bne.n	8007136 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b00      	cmp	r3, #0
 8007120:	d009      	beq.n	8007136 <HAL_UART_IRQHandler+0x66>
 8007122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007126:	f003 0320 	and.w	r3, r3, #32
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fb9c 	bl	800786c <UART_Receive_IT>
      return;
 8007134:	e25b      	b.n	80075ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 80de 	beq.w	80072fc <HAL_UART_IRQHandler+0x22c>
 8007140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d106      	bne.n	800715a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800714c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007150:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 80d1 	beq.w	80072fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800715a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00b      	beq.n	800717e <HAL_UART_IRQHandler+0xae>
 8007166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800716a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716e:	2b00      	cmp	r3, #0
 8007170:	d005      	beq.n	800717e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007176:	f043 0201 	orr.w	r2, r3, #1
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800717e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00b      	beq.n	80071a2 <HAL_UART_IRQHandler+0xd2>
 800718a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d005      	beq.n	80071a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719a:	f043 0202 	orr.w	r2, r3, #2
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <HAL_UART_IRQHandler+0xf6>
 80071ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071be:	f043 0204 	orr.w	r2, r3, #4
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d011      	beq.n	80071f6 <HAL_UART_IRQHandler+0x126>
 80071d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d105      	bne.n	80071ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ee:	f043 0208 	orr.w	r2, r3, #8
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 81f2 	beq.w	80075e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007204:	f003 0320 	and.w	r3, r3, #32
 8007208:	2b00      	cmp	r3, #0
 800720a:	d008      	beq.n	800721e <HAL_UART_IRQHandler+0x14e>
 800720c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fb27 	bl	800786c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007228:	2b00      	cmp	r3, #0
 800722a:	bf14      	ite	ne
 800722c:	2301      	movne	r3, #1
 800722e:	2300      	moveq	r3, #0
 8007230:	b2db      	uxtb	r3, r3
 8007232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723a:	f003 0308 	and.w	r3, r3, #8
 800723e:	2b00      	cmp	r3, #0
 8007240:	d103      	bne.n	800724a <HAL_UART_IRQHandler+0x17a>
 8007242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007246:	2b00      	cmp	r3, #0
 8007248:	d04f      	beq.n	80072ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fa31 	bl	80076b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800725a:	2b00      	cmp	r3, #0
 800725c:	d041      	beq.n	80072e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3314      	adds	r3, #20
 8007264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007274:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800727c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3314      	adds	r3, #20
 8007286:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800728a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800728e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007296:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1d9      	bne.n	800725e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d013      	beq.n	80072da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b6:	4a7e      	ldr	r2, [pc, #504]	; (80074b0 <HAL_UART_IRQHandler+0x3e0>)
 80072b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072be:	4618      	mov	r0, r3
 80072c0:	f7ff f854 	bl	800636c <HAL_DMA_Abort_IT>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d016      	beq.n	80072f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80072d4:	4610      	mov	r0, r2
 80072d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d8:	e00e      	b.n	80072f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f99c 	bl	8007618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e0:	e00a      	b.n	80072f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f998 	bl	8007618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e8:	e006      	b.n	80072f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f994 	bl	8007618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80072f6:	e175      	b.n	80075e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f8:	bf00      	nop
    return;
 80072fa:	e173      	b.n	80075e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007300:	2b01      	cmp	r3, #1
 8007302:	f040 814f 	bne.w	80075a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800730a:	f003 0310 	and.w	r3, r3, #16
 800730e:	2b00      	cmp	r3, #0
 8007310:	f000 8148 	beq.w	80075a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007318:	f003 0310 	and.w	r3, r3, #16
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 8141 	beq.w	80075a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007322:	2300      	movs	r3, #0
 8007324:	60bb      	str	r3, [r7, #8]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	60bb      	str	r3, [r7, #8]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	60bb      	str	r3, [r7, #8]
 8007336:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 80b6 	beq.w	80074b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007354:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 8145 	beq.w	80075e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007366:	429a      	cmp	r2, r3
 8007368:	f080 813e 	bcs.w	80075e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007372:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	2b20      	cmp	r3, #32
 800737c:	f000 8088 	beq.w	8007490 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	330c      	adds	r3, #12
 8007386:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800738e:	e853 3f00 	ldrex	r3, [r3]
 8007392:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007396:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800739a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800739e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	330c      	adds	r3, #12
 80073a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073ac:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073bc:	e841 2300 	strex	r3, r2, [r1]
 80073c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1d9      	bne.n	8007380 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3314      	adds	r3, #20
 80073d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d6:	e853 3f00 	ldrex	r3, [r3]
 80073da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073de:	f023 0301 	bic.w	r3, r3, #1
 80073e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3314      	adds	r3, #20
 80073ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073fc:	e841 2300 	strex	r3, r2, [r1]
 8007400:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e1      	bne.n	80073cc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3314      	adds	r3, #20
 800740e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800741a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800741e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3314      	adds	r3, #20
 8007428:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800742c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800742e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007430:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007432:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007434:	e841 2300 	strex	r3, r2, [r1]
 8007438:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800743a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e3      	bne.n	8007408 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2220      	movs	r2, #32
 8007444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	330c      	adds	r3, #12
 8007454:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800745e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007460:	f023 0310 	bic.w	r3, r3, #16
 8007464:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	330c      	adds	r3, #12
 800746e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007472:	65ba      	str	r2, [r7, #88]	; 0x58
 8007474:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007478:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e3      	bne.n	800744e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748a:	4618      	mov	r0, r3
 800748c:	f7fe ff33 	bl	80062f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2202      	movs	r2, #2
 8007494:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800749e:	b29b      	uxth	r3, r3
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f8bf 	bl	800762a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074ac:	e09c      	b.n	80075e8 <HAL_UART_IRQHandler+0x518>
 80074ae:	bf00      	nop
 80074b0:	08007777 	.word	0x08007777
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074bc:	b29b      	uxth	r3, r3
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 808e 	beq.w	80075ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80074d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 8089 	beq.w	80075ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	330c      	adds	r3, #12
 80074e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	330c      	adds	r3, #12
 80074fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80074fe:	647a      	str	r2, [r7, #68]	; 0x44
 8007500:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007502:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007504:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800750c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e3      	bne.n	80074da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3314      	adds	r3, #20
 8007518:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	623b      	str	r3, [r7, #32]
   return(result);
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	f023 0301 	bic.w	r3, r3, #1
 8007528:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3314      	adds	r3, #20
 8007532:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007536:	633a      	str	r2, [r7, #48]	; 0x30
 8007538:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800753c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e3      	bne.n	8007512 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2220      	movs	r2, #32
 800754e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	330c      	adds	r3, #12
 800755e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	60fb      	str	r3, [r7, #12]
   return(result);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f023 0310 	bic.w	r3, r3, #16
 800756e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	330c      	adds	r3, #12
 8007578:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800757c:	61fa      	str	r2, [r7, #28]
 800757e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	69b9      	ldr	r1, [r7, #24]
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	e841 2300 	strex	r3, r2, [r1]
 8007588:	617b      	str	r3, [r7, #20]
   return(result);
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e3      	bne.n	8007558 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007596:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f844 	bl	800762a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075a2:	e023      	b.n	80075ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d009      	beq.n	80075c4 <HAL_UART_IRQHandler+0x4f4>
 80075b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d003      	beq.n	80075c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f8ee 	bl	800779e <UART_Transmit_IT>
    return;
 80075c2:	e014      	b.n	80075ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00e      	beq.n	80075ee <HAL_UART_IRQHandler+0x51e>
 80075d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d008      	beq.n	80075ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f92d 	bl	800783c <UART_EndTransmit_IT>
    return;
 80075e2:	e004      	b.n	80075ee <HAL_UART_IRQHandler+0x51e>
    return;
 80075e4:	bf00      	nop
 80075e6:	e002      	b.n	80075ee <HAL_UART_IRQHandler+0x51e>
      return;
 80075e8:	bf00      	nop
 80075ea:	e000      	b.n	80075ee <HAL_UART_IRQHandler+0x51e>
      return;
 80075ec:	bf00      	nop
  }
}
 80075ee:	37e8      	adds	r7, #232	; 0xe8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	bc80      	pop	{r7}
 8007604:	4770      	bx	lr

08007606 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800760e:	bf00      	nop
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	bc80      	pop	{r7}
 8007616:	4770      	bx	lr

08007618 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	bc80      	pop	{r7}
 8007628:	4770      	bx	lr

0800762a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	bc80      	pop	{r7}
 800763e:	4770      	bx	lr

08007640 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	4613      	mov	r3, r2
 800764c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	88fa      	ldrh	r2, [r7, #6]
 8007658:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	88fa      	ldrh	r2, [r7, #6]
 800765e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2222      	movs	r2, #34	; 0x22
 800766a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d007      	beq.n	8007686 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007684:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	695a      	ldr	r2, [r3, #20]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0201 	orr.w	r2, r2, #1
 8007694:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f042 0220 	orr.w	r2, r2, #32
 80076a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bc80      	pop	{r7}
 80076b0:	4770      	bx	lr

080076b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b095      	sub	sp, #84	; 0x54
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	330c      	adds	r3, #12
 80076c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	330c      	adds	r3, #12
 80076d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076da:	643a      	str	r2, [r7, #64]	; 0x40
 80076dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e5      	bne.n	80076ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3314      	adds	r3, #20
 80076f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	f023 0301 	bic.w	r3, r3, #1
 8007704:	64bb      	str	r3, [r7, #72]	; 0x48
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3314      	adds	r3, #20
 800770c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800770e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007710:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e5      	bne.n	80076ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	2b01      	cmp	r3, #1
 8007728:	d119      	bne.n	800775e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	330c      	adds	r3, #12
 8007730:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	e853 3f00 	ldrex	r3, [r3]
 8007738:	60bb      	str	r3, [r7, #8]
   return(result);
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	f023 0310 	bic.w	r3, r3, #16
 8007740:	647b      	str	r3, [r7, #68]	; 0x44
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	330c      	adds	r3, #12
 8007748:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800774a:	61ba      	str	r2, [r7, #24]
 800774c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774e:	6979      	ldr	r1, [r7, #20]
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	e841 2300 	strex	r3, r2, [r1]
 8007756:	613b      	str	r3, [r7, #16]
   return(result);
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1e5      	bne.n	800772a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2220      	movs	r2, #32
 8007762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800776c:	bf00      	nop
 800776e:	3754      	adds	r7, #84	; 0x54
 8007770:	46bd      	mov	sp, r7
 8007772:	bc80      	pop	{r7}
 8007774:	4770      	bx	lr

08007776 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f7ff ff41 	bl	8007618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007796:	bf00      	nop
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800779e:	b480      	push	{r7}
 80077a0:	b085      	sub	sp, #20
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b21      	cmp	r3, #33	; 0x21
 80077b0:	d13e      	bne.n	8007830 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ba:	d114      	bne.n	80077e6 <UART_Transmit_IT+0x48>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d110      	bne.n	80077e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a1b      	ldr	r3, [r3, #32]
 80077c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	1c9a      	adds	r2, r3, #2
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	621a      	str	r2, [r3, #32]
 80077e4:	e008      	b.n	80077f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	1c59      	adds	r1, r3, #1
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6211      	str	r1, [r2, #32]
 80077f0:	781a      	ldrb	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	3b01      	subs	r3, #1
 8007800:	b29b      	uxth	r3, r3
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	4619      	mov	r1, r3
 8007806:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10f      	bne.n	800782c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800781a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800782a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	e000      	b.n	8007832 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007830:	2302      	movs	r3, #2
  }
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr

0800783c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007852:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2220      	movs	r2, #32
 8007858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff fec9 	bl	80075f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08c      	sub	sp, #48	; 0x30
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b22      	cmp	r3, #34	; 0x22
 800787e:	f040 80ae 	bne.w	80079de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800788a:	d117      	bne.n	80078bc <UART_Receive_IT+0x50>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d113      	bne.n	80078bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007894:	2300      	movs	r3, #0
 8007896:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b4:	1c9a      	adds	r2, r3, #2
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	629a      	str	r2, [r3, #40]	; 0x28
 80078ba:	e026      	b.n	800790a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ce:	d007      	beq.n	80078e0 <UART_Receive_IT+0x74>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10a      	bne.n	80078ee <UART_Receive_IT+0x82>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d106      	bne.n	80078ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ea:	701a      	strb	r2, [r3, #0]
 80078ec:	e008      	b.n	8007900 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007904:	1c5a      	adds	r2, r3, #1
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800790e:	b29b      	uxth	r3, r3
 8007910:	3b01      	subs	r3, #1
 8007912:	b29b      	uxth	r3, r3
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	4619      	mov	r1, r3
 8007918:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800791a:	2b00      	cmp	r3, #0
 800791c:	d15d      	bne.n	80079da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f022 0220 	bic.w	r2, r2, #32
 800792c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800793c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	695a      	ldr	r2, [r3, #20]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0201 	bic.w	r2, r2, #1
 800794c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2220      	movs	r2, #32
 8007952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007960:	2b01      	cmp	r3, #1
 8007962:	d135      	bne.n	80079d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	330c      	adds	r3, #12
 8007970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	613b      	str	r3, [r7, #16]
   return(result);
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f023 0310 	bic.w	r3, r3, #16
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	330c      	adds	r3, #12
 8007988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800798a:	623a      	str	r2, [r7, #32]
 800798c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	69f9      	ldr	r1, [r7, #28]
 8007990:	6a3a      	ldr	r2, [r7, #32]
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	61bb      	str	r3, [r7, #24]
   return(result);
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e5      	bne.n	800796a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b10      	cmp	r3, #16
 80079aa:	d10a      	bne.n	80079c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079ac:	2300      	movs	r3, #0
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff fe2e 	bl	800762a <HAL_UARTEx_RxEventCallback>
 80079ce:	e002      	b.n	80079d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff fe18 	bl	8007606 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	e002      	b.n	80079e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	e000      	b.n	80079e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80079de:	2302      	movs	r3, #2
  }
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3730      	adds	r7, #48	; 0x30
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	689a      	ldr	r2, [r3, #8]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007a22:	f023 030c 	bic.w	r3, r3, #12
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	6812      	ldr	r2, [r2, #0]
 8007a2a:	68b9      	ldr	r1, [r7, #8]
 8007a2c:	430b      	orrs	r3, r1
 8007a2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699a      	ldr	r2, [r3, #24]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a2c      	ldr	r2, [pc, #176]	; (8007afc <UART_SetConfig+0x114>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d103      	bne.n	8007a58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007a50:	f7ff fa96 	bl	8006f80 <HAL_RCC_GetPCLK2Freq>
 8007a54:	60f8      	str	r0, [r7, #12]
 8007a56:	e002      	b.n	8007a5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007a58:	f7ff fa7e 	bl	8006f58 <HAL_RCC_GetPCLK1Freq>
 8007a5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009a      	lsls	r2, r3, #2
 8007a68:	441a      	add	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a74:	4a22      	ldr	r2, [pc, #136]	; (8007b00 <UART_SetConfig+0x118>)
 8007a76:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7a:	095b      	lsrs	r3, r3, #5
 8007a7c:	0119      	lsls	r1, r3, #4
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4613      	mov	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	009a      	lsls	r2, r3, #2
 8007a88:	441a      	add	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a94:	4b1a      	ldr	r3, [pc, #104]	; (8007b00 <UART_SetConfig+0x118>)
 8007a96:	fba3 0302 	umull	r0, r3, r3, r2
 8007a9a:	095b      	lsrs	r3, r3, #5
 8007a9c:	2064      	movs	r0, #100	; 0x64
 8007a9e:	fb00 f303 	mul.w	r3, r0, r3
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	3332      	adds	r3, #50	; 0x32
 8007aa8:	4a15      	ldr	r2, [pc, #84]	; (8007b00 <UART_SetConfig+0x118>)
 8007aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8007aae:	095b      	lsrs	r3, r3, #5
 8007ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ab4:	4419      	add	r1, r3
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009a      	lsls	r2, r3, #2
 8007ac0:	441a      	add	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007acc:	4b0c      	ldr	r3, [pc, #48]	; (8007b00 <UART_SetConfig+0x118>)
 8007ace:	fba3 0302 	umull	r0, r3, r3, r2
 8007ad2:	095b      	lsrs	r3, r3, #5
 8007ad4:	2064      	movs	r0, #100	; 0x64
 8007ad6:	fb00 f303 	mul.w	r3, r0, r3
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	3332      	adds	r3, #50	; 0x32
 8007ae0:	4a07      	ldr	r2, [pc, #28]	; (8007b00 <UART_SetConfig+0x118>)
 8007ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae6:	095b      	lsrs	r3, r3, #5
 8007ae8:	f003 020f 	and.w	r2, r3, #15
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	440a      	add	r2, r1
 8007af2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007af4:	bf00      	nop
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	40013800 	.word	0x40013800
 8007b00:	51eb851f 	.word	0x51eb851f

08007b04 <__errno>:
 8007b04:	4b01      	ldr	r3, [pc, #4]	; (8007b0c <__errno+0x8>)
 8007b06:	6818      	ldr	r0, [r3, #0]
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	2000028c 	.word	0x2000028c

08007b10 <__libc_init_array>:
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	2600      	movs	r6, #0
 8007b14:	4d0c      	ldr	r5, [pc, #48]	; (8007b48 <__libc_init_array+0x38>)
 8007b16:	4c0d      	ldr	r4, [pc, #52]	; (8007b4c <__libc_init_array+0x3c>)
 8007b18:	1b64      	subs	r4, r4, r5
 8007b1a:	10a4      	asrs	r4, r4, #2
 8007b1c:	42a6      	cmp	r6, r4
 8007b1e:	d109      	bne.n	8007b34 <__libc_init_array+0x24>
 8007b20:	f000 fc9c 	bl	800845c <_init>
 8007b24:	2600      	movs	r6, #0
 8007b26:	4d0a      	ldr	r5, [pc, #40]	; (8007b50 <__libc_init_array+0x40>)
 8007b28:	4c0a      	ldr	r4, [pc, #40]	; (8007b54 <__libc_init_array+0x44>)
 8007b2a:	1b64      	subs	r4, r4, r5
 8007b2c:	10a4      	asrs	r4, r4, #2
 8007b2e:	42a6      	cmp	r6, r4
 8007b30:	d105      	bne.n	8007b3e <__libc_init_array+0x2e>
 8007b32:	bd70      	pop	{r4, r5, r6, pc}
 8007b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b38:	4798      	blx	r3
 8007b3a:	3601      	adds	r6, #1
 8007b3c:	e7ee      	b.n	8007b1c <__libc_init_array+0xc>
 8007b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b42:	4798      	blx	r3
 8007b44:	3601      	adds	r6, #1
 8007b46:	e7f2      	b.n	8007b2e <__libc_init_array+0x1e>
 8007b48:	080086a4 	.word	0x080086a4
 8007b4c:	080086a4 	.word	0x080086a4
 8007b50:	080086a4 	.word	0x080086a4
 8007b54:	080086a8 	.word	0x080086a8

08007b58 <__retarget_lock_acquire_recursive>:
 8007b58:	4770      	bx	lr

08007b5a <__retarget_lock_release_recursive>:
 8007b5a:	4770      	bx	lr

08007b5c <memcpy>:
 8007b5c:	440a      	add	r2, r1
 8007b5e:	4291      	cmp	r1, r2
 8007b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b64:	d100      	bne.n	8007b68 <memcpy+0xc>
 8007b66:	4770      	bx	lr
 8007b68:	b510      	push	{r4, lr}
 8007b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b6e:	4291      	cmp	r1, r2
 8007b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b74:	d1f9      	bne.n	8007b6a <memcpy+0xe>
 8007b76:	bd10      	pop	{r4, pc}

08007b78 <memset>:
 8007b78:	4603      	mov	r3, r0
 8007b7a:	4402      	add	r2, r0
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d100      	bne.n	8007b82 <memset+0xa>
 8007b80:	4770      	bx	lr
 8007b82:	f803 1b01 	strb.w	r1, [r3], #1
 8007b86:	e7f9      	b.n	8007b7c <memset+0x4>

08007b88 <_free_r>:
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	2900      	cmp	r1, #0
 8007b8e:	d040      	beq.n	8007c12 <_free_r+0x8a>
 8007b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b94:	1f0c      	subs	r4, r1, #4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bfb8      	it	lt
 8007b9a:	18e4      	addlt	r4, r4, r3
 8007b9c:	f000 f900 	bl	8007da0 <__malloc_lock>
 8007ba0:	4a1c      	ldr	r2, [pc, #112]	; (8007c14 <_free_r+0x8c>)
 8007ba2:	6813      	ldr	r3, [r2, #0]
 8007ba4:	b933      	cbnz	r3, 8007bb4 <_free_r+0x2c>
 8007ba6:	6063      	str	r3, [r4, #4]
 8007ba8:	6014      	str	r4, [r2, #0]
 8007baa:	4628      	mov	r0, r5
 8007bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bb0:	f000 b8fc 	b.w	8007dac <__malloc_unlock>
 8007bb4:	42a3      	cmp	r3, r4
 8007bb6:	d908      	bls.n	8007bca <_free_r+0x42>
 8007bb8:	6820      	ldr	r0, [r4, #0]
 8007bba:	1821      	adds	r1, r4, r0
 8007bbc:	428b      	cmp	r3, r1
 8007bbe:	bf01      	itttt	eq
 8007bc0:	6819      	ldreq	r1, [r3, #0]
 8007bc2:	685b      	ldreq	r3, [r3, #4]
 8007bc4:	1809      	addeq	r1, r1, r0
 8007bc6:	6021      	streq	r1, [r4, #0]
 8007bc8:	e7ed      	b.n	8007ba6 <_free_r+0x1e>
 8007bca:	461a      	mov	r2, r3
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	b10b      	cbz	r3, 8007bd4 <_free_r+0x4c>
 8007bd0:	42a3      	cmp	r3, r4
 8007bd2:	d9fa      	bls.n	8007bca <_free_r+0x42>
 8007bd4:	6811      	ldr	r1, [r2, #0]
 8007bd6:	1850      	adds	r0, r2, r1
 8007bd8:	42a0      	cmp	r0, r4
 8007bda:	d10b      	bne.n	8007bf4 <_free_r+0x6c>
 8007bdc:	6820      	ldr	r0, [r4, #0]
 8007bde:	4401      	add	r1, r0
 8007be0:	1850      	adds	r0, r2, r1
 8007be2:	4283      	cmp	r3, r0
 8007be4:	6011      	str	r1, [r2, #0]
 8007be6:	d1e0      	bne.n	8007baa <_free_r+0x22>
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	4401      	add	r1, r0
 8007bee:	6011      	str	r1, [r2, #0]
 8007bf0:	6053      	str	r3, [r2, #4]
 8007bf2:	e7da      	b.n	8007baa <_free_r+0x22>
 8007bf4:	d902      	bls.n	8007bfc <_free_r+0x74>
 8007bf6:	230c      	movs	r3, #12
 8007bf8:	602b      	str	r3, [r5, #0]
 8007bfa:	e7d6      	b.n	8007baa <_free_r+0x22>
 8007bfc:	6820      	ldr	r0, [r4, #0]
 8007bfe:	1821      	adds	r1, r4, r0
 8007c00:	428b      	cmp	r3, r1
 8007c02:	bf01      	itttt	eq
 8007c04:	6819      	ldreq	r1, [r3, #0]
 8007c06:	685b      	ldreq	r3, [r3, #4]
 8007c08:	1809      	addeq	r1, r1, r0
 8007c0a:	6021      	streq	r1, [r4, #0]
 8007c0c:	6063      	str	r3, [r4, #4]
 8007c0e:	6054      	str	r4, [r2, #4]
 8007c10:	e7cb      	b.n	8007baa <_free_r+0x22>
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	20000360 	.word	0x20000360

08007c18 <sbrk_aligned>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	4e0e      	ldr	r6, [pc, #56]	; (8007c54 <sbrk_aligned+0x3c>)
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	6831      	ldr	r1, [r6, #0]
 8007c20:	4605      	mov	r5, r0
 8007c22:	b911      	cbnz	r1, 8007c2a <sbrk_aligned+0x12>
 8007c24:	f000 f88c 	bl	8007d40 <_sbrk_r>
 8007c28:	6030      	str	r0, [r6, #0]
 8007c2a:	4621      	mov	r1, r4
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	f000 f887 	bl	8007d40 <_sbrk_r>
 8007c32:	1c43      	adds	r3, r0, #1
 8007c34:	d00a      	beq.n	8007c4c <sbrk_aligned+0x34>
 8007c36:	1cc4      	adds	r4, r0, #3
 8007c38:	f024 0403 	bic.w	r4, r4, #3
 8007c3c:	42a0      	cmp	r0, r4
 8007c3e:	d007      	beq.n	8007c50 <sbrk_aligned+0x38>
 8007c40:	1a21      	subs	r1, r4, r0
 8007c42:	4628      	mov	r0, r5
 8007c44:	f000 f87c 	bl	8007d40 <_sbrk_r>
 8007c48:	3001      	adds	r0, #1
 8007c4a:	d101      	bne.n	8007c50 <sbrk_aligned+0x38>
 8007c4c:	f04f 34ff 	mov.w	r4, #4294967295
 8007c50:	4620      	mov	r0, r4
 8007c52:	bd70      	pop	{r4, r5, r6, pc}
 8007c54:	20000364 	.word	0x20000364

08007c58 <_malloc_r>:
 8007c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5c:	1ccd      	adds	r5, r1, #3
 8007c5e:	f025 0503 	bic.w	r5, r5, #3
 8007c62:	3508      	adds	r5, #8
 8007c64:	2d0c      	cmp	r5, #12
 8007c66:	bf38      	it	cc
 8007c68:	250c      	movcc	r5, #12
 8007c6a:	2d00      	cmp	r5, #0
 8007c6c:	4607      	mov	r7, r0
 8007c6e:	db01      	blt.n	8007c74 <_malloc_r+0x1c>
 8007c70:	42a9      	cmp	r1, r5
 8007c72:	d905      	bls.n	8007c80 <_malloc_r+0x28>
 8007c74:	230c      	movs	r3, #12
 8007c76:	2600      	movs	r6, #0
 8007c78:	603b      	str	r3, [r7, #0]
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c80:	4e2e      	ldr	r6, [pc, #184]	; (8007d3c <_malloc_r+0xe4>)
 8007c82:	f000 f88d 	bl	8007da0 <__malloc_lock>
 8007c86:	6833      	ldr	r3, [r6, #0]
 8007c88:	461c      	mov	r4, r3
 8007c8a:	bb34      	cbnz	r4, 8007cda <_malloc_r+0x82>
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	4638      	mov	r0, r7
 8007c90:	f7ff ffc2 	bl	8007c18 <sbrk_aligned>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	4604      	mov	r4, r0
 8007c98:	d14d      	bne.n	8007d36 <_malloc_r+0xde>
 8007c9a:	6834      	ldr	r4, [r6, #0]
 8007c9c:	4626      	mov	r6, r4
 8007c9e:	2e00      	cmp	r6, #0
 8007ca0:	d140      	bne.n	8007d24 <_malloc_r+0xcc>
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	4631      	mov	r1, r6
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	eb04 0803 	add.w	r8, r4, r3
 8007cac:	f000 f848 	bl	8007d40 <_sbrk_r>
 8007cb0:	4580      	cmp	r8, r0
 8007cb2:	d13a      	bne.n	8007d2a <_malloc_r+0xd2>
 8007cb4:	6821      	ldr	r1, [r4, #0]
 8007cb6:	3503      	adds	r5, #3
 8007cb8:	1a6d      	subs	r5, r5, r1
 8007cba:	f025 0503 	bic.w	r5, r5, #3
 8007cbe:	3508      	adds	r5, #8
 8007cc0:	2d0c      	cmp	r5, #12
 8007cc2:	bf38      	it	cc
 8007cc4:	250c      	movcc	r5, #12
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	4629      	mov	r1, r5
 8007cca:	f7ff ffa5 	bl	8007c18 <sbrk_aligned>
 8007cce:	3001      	adds	r0, #1
 8007cd0:	d02b      	beq.n	8007d2a <_malloc_r+0xd2>
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	442b      	add	r3, r5
 8007cd6:	6023      	str	r3, [r4, #0]
 8007cd8:	e00e      	b.n	8007cf8 <_malloc_r+0xa0>
 8007cda:	6822      	ldr	r2, [r4, #0]
 8007cdc:	1b52      	subs	r2, r2, r5
 8007cde:	d41e      	bmi.n	8007d1e <_malloc_r+0xc6>
 8007ce0:	2a0b      	cmp	r2, #11
 8007ce2:	d916      	bls.n	8007d12 <_malloc_r+0xba>
 8007ce4:	1961      	adds	r1, r4, r5
 8007ce6:	42a3      	cmp	r3, r4
 8007ce8:	6025      	str	r5, [r4, #0]
 8007cea:	bf18      	it	ne
 8007cec:	6059      	strne	r1, [r3, #4]
 8007cee:	6863      	ldr	r3, [r4, #4]
 8007cf0:	bf08      	it	eq
 8007cf2:	6031      	streq	r1, [r6, #0]
 8007cf4:	5162      	str	r2, [r4, r5]
 8007cf6:	604b      	str	r3, [r1, #4]
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	f104 060b 	add.w	r6, r4, #11
 8007cfe:	f000 f855 	bl	8007dac <__malloc_unlock>
 8007d02:	f026 0607 	bic.w	r6, r6, #7
 8007d06:	1d23      	adds	r3, r4, #4
 8007d08:	1af2      	subs	r2, r6, r3
 8007d0a:	d0b6      	beq.n	8007c7a <_malloc_r+0x22>
 8007d0c:	1b9b      	subs	r3, r3, r6
 8007d0e:	50a3      	str	r3, [r4, r2]
 8007d10:	e7b3      	b.n	8007c7a <_malloc_r+0x22>
 8007d12:	6862      	ldr	r2, [r4, #4]
 8007d14:	42a3      	cmp	r3, r4
 8007d16:	bf0c      	ite	eq
 8007d18:	6032      	streq	r2, [r6, #0]
 8007d1a:	605a      	strne	r2, [r3, #4]
 8007d1c:	e7ec      	b.n	8007cf8 <_malloc_r+0xa0>
 8007d1e:	4623      	mov	r3, r4
 8007d20:	6864      	ldr	r4, [r4, #4]
 8007d22:	e7b2      	b.n	8007c8a <_malloc_r+0x32>
 8007d24:	4634      	mov	r4, r6
 8007d26:	6876      	ldr	r6, [r6, #4]
 8007d28:	e7b9      	b.n	8007c9e <_malloc_r+0x46>
 8007d2a:	230c      	movs	r3, #12
 8007d2c:	4638      	mov	r0, r7
 8007d2e:	603b      	str	r3, [r7, #0]
 8007d30:	f000 f83c 	bl	8007dac <__malloc_unlock>
 8007d34:	e7a1      	b.n	8007c7a <_malloc_r+0x22>
 8007d36:	6025      	str	r5, [r4, #0]
 8007d38:	e7de      	b.n	8007cf8 <_malloc_r+0xa0>
 8007d3a:	bf00      	nop
 8007d3c:	20000360 	.word	0x20000360

08007d40 <_sbrk_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	2300      	movs	r3, #0
 8007d44:	4d05      	ldr	r5, [pc, #20]	; (8007d5c <_sbrk_r+0x1c>)
 8007d46:	4604      	mov	r4, r0
 8007d48:	4608      	mov	r0, r1
 8007d4a:	602b      	str	r3, [r5, #0]
 8007d4c:	f7fe f8de 	bl	8005f0c <_sbrk>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	d102      	bne.n	8007d5a <_sbrk_r+0x1a>
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	b103      	cbz	r3, 8007d5a <_sbrk_r+0x1a>
 8007d58:	6023      	str	r3, [r4, #0]
 8007d5a:	bd38      	pop	{r3, r4, r5, pc}
 8007d5c:	20000368 	.word	0x20000368

08007d60 <siprintf>:
 8007d60:	b40e      	push	{r1, r2, r3}
 8007d62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d66:	b500      	push	{lr}
 8007d68:	b09c      	sub	sp, #112	; 0x70
 8007d6a:	ab1d      	add	r3, sp, #116	; 0x74
 8007d6c:	9002      	str	r0, [sp, #8]
 8007d6e:	9006      	str	r0, [sp, #24]
 8007d70:	9107      	str	r1, [sp, #28]
 8007d72:	9104      	str	r1, [sp, #16]
 8007d74:	4808      	ldr	r0, [pc, #32]	; (8007d98 <siprintf+0x38>)
 8007d76:	4909      	ldr	r1, [pc, #36]	; (8007d9c <siprintf+0x3c>)
 8007d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d7c:	9105      	str	r1, [sp, #20]
 8007d7e:	6800      	ldr	r0, [r0, #0]
 8007d80:	a902      	add	r1, sp, #8
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	f000 f874 	bl	8007e70 <_svfiprintf_r>
 8007d88:	2200      	movs	r2, #0
 8007d8a:	9b02      	ldr	r3, [sp, #8]
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	b01c      	add	sp, #112	; 0x70
 8007d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d94:	b003      	add	sp, #12
 8007d96:	4770      	bx	lr
 8007d98:	2000028c 	.word	0x2000028c
 8007d9c:	ffff0208 	.word	0xffff0208

08007da0 <__malloc_lock>:
 8007da0:	4801      	ldr	r0, [pc, #4]	; (8007da8 <__malloc_lock+0x8>)
 8007da2:	f7ff bed9 	b.w	8007b58 <__retarget_lock_acquire_recursive>
 8007da6:	bf00      	nop
 8007da8:	2000035c 	.word	0x2000035c

08007dac <__malloc_unlock>:
 8007dac:	4801      	ldr	r0, [pc, #4]	; (8007db4 <__malloc_unlock+0x8>)
 8007dae:	f7ff bed4 	b.w	8007b5a <__retarget_lock_release_recursive>
 8007db2:	bf00      	nop
 8007db4:	2000035c 	.word	0x2000035c

08007db8 <__ssputs_r>:
 8007db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dbc:	688e      	ldr	r6, [r1, #8]
 8007dbe:	4682      	mov	sl, r0
 8007dc0:	429e      	cmp	r6, r3
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	4690      	mov	r8, r2
 8007dc6:	461f      	mov	r7, r3
 8007dc8:	d838      	bhi.n	8007e3c <__ssputs_r+0x84>
 8007dca:	898a      	ldrh	r2, [r1, #12]
 8007dcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007dd0:	d032      	beq.n	8007e38 <__ssputs_r+0x80>
 8007dd2:	6825      	ldr	r5, [r4, #0]
 8007dd4:	6909      	ldr	r1, [r1, #16]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	eba5 0901 	sub.w	r9, r5, r1
 8007ddc:	6965      	ldr	r5, [r4, #20]
 8007dde:	444b      	add	r3, r9
 8007de0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007de4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007de8:	106d      	asrs	r5, r5, #1
 8007dea:	429d      	cmp	r5, r3
 8007dec:	bf38      	it	cc
 8007dee:	461d      	movcc	r5, r3
 8007df0:	0553      	lsls	r3, r2, #21
 8007df2:	d531      	bpl.n	8007e58 <__ssputs_r+0xa0>
 8007df4:	4629      	mov	r1, r5
 8007df6:	f7ff ff2f 	bl	8007c58 <_malloc_r>
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	b950      	cbnz	r0, 8007e14 <__ssputs_r+0x5c>
 8007dfe:	230c      	movs	r3, #12
 8007e00:	f04f 30ff 	mov.w	r0, #4294967295
 8007e04:	f8ca 3000 	str.w	r3, [sl]
 8007e08:	89a3      	ldrh	r3, [r4, #12]
 8007e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e0e:	81a3      	strh	r3, [r4, #12]
 8007e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e14:	464a      	mov	r2, r9
 8007e16:	6921      	ldr	r1, [r4, #16]
 8007e18:	f7ff fea0 	bl	8007b5c <memcpy>
 8007e1c:	89a3      	ldrh	r3, [r4, #12]
 8007e1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e26:	81a3      	strh	r3, [r4, #12]
 8007e28:	6126      	str	r6, [r4, #16]
 8007e2a:	444e      	add	r6, r9
 8007e2c:	6026      	str	r6, [r4, #0]
 8007e2e:	463e      	mov	r6, r7
 8007e30:	6165      	str	r5, [r4, #20]
 8007e32:	eba5 0509 	sub.w	r5, r5, r9
 8007e36:	60a5      	str	r5, [r4, #8]
 8007e38:	42be      	cmp	r6, r7
 8007e3a:	d900      	bls.n	8007e3e <__ssputs_r+0x86>
 8007e3c:	463e      	mov	r6, r7
 8007e3e:	4632      	mov	r2, r6
 8007e40:	4641      	mov	r1, r8
 8007e42:	6820      	ldr	r0, [r4, #0]
 8007e44:	f000 fab8 	bl	80083b8 <memmove>
 8007e48:	68a3      	ldr	r3, [r4, #8]
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	1b9b      	subs	r3, r3, r6
 8007e4e:	60a3      	str	r3, [r4, #8]
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	4433      	add	r3, r6
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	e7db      	b.n	8007e10 <__ssputs_r+0x58>
 8007e58:	462a      	mov	r2, r5
 8007e5a:	f000 fac7 	bl	80083ec <_realloc_r>
 8007e5e:	4606      	mov	r6, r0
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d1e1      	bne.n	8007e28 <__ssputs_r+0x70>
 8007e64:	4650      	mov	r0, sl
 8007e66:	6921      	ldr	r1, [r4, #16]
 8007e68:	f7ff fe8e 	bl	8007b88 <_free_r>
 8007e6c:	e7c7      	b.n	8007dfe <__ssputs_r+0x46>
	...

08007e70 <_svfiprintf_r>:
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	4698      	mov	r8, r3
 8007e76:	898b      	ldrh	r3, [r1, #12]
 8007e78:	4607      	mov	r7, r0
 8007e7a:	061b      	lsls	r3, r3, #24
 8007e7c:	460d      	mov	r5, r1
 8007e7e:	4614      	mov	r4, r2
 8007e80:	b09d      	sub	sp, #116	; 0x74
 8007e82:	d50e      	bpl.n	8007ea2 <_svfiprintf_r+0x32>
 8007e84:	690b      	ldr	r3, [r1, #16]
 8007e86:	b963      	cbnz	r3, 8007ea2 <_svfiprintf_r+0x32>
 8007e88:	2140      	movs	r1, #64	; 0x40
 8007e8a:	f7ff fee5 	bl	8007c58 <_malloc_r>
 8007e8e:	6028      	str	r0, [r5, #0]
 8007e90:	6128      	str	r0, [r5, #16]
 8007e92:	b920      	cbnz	r0, 8007e9e <_svfiprintf_r+0x2e>
 8007e94:	230c      	movs	r3, #12
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	e0d1      	b.n	8008042 <_svfiprintf_r+0x1d2>
 8007e9e:	2340      	movs	r3, #64	; 0x40
 8007ea0:	616b      	str	r3, [r5, #20]
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ea6:	2320      	movs	r3, #32
 8007ea8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007eac:	2330      	movs	r3, #48	; 0x30
 8007eae:	f04f 0901 	mov.w	r9, #1
 8007eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800805c <_svfiprintf_r+0x1ec>
 8007eba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ebe:	4623      	mov	r3, r4
 8007ec0:	469a      	mov	sl, r3
 8007ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ec6:	b10a      	cbz	r2, 8007ecc <_svfiprintf_r+0x5c>
 8007ec8:	2a25      	cmp	r2, #37	; 0x25
 8007eca:	d1f9      	bne.n	8007ec0 <_svfiprintf_r+0x50>
 8007ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8007ed0:	d00b      	beq.n	8007eea <_svfiprintf_r+0x7a>
 8007ed2:	465b      	mov	r3, fp
 8007ed4:	4622      	mov	r2, r4
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	4638      	mov	r0, r7
 8007eda:	f7ff ff6d 	bl	8007db8 <__ssputs_r>
 8007ede:	3001      	adds	r0, #1
 8007ee0:	f000 80aa 	beq.w	8008038 <_svfiprintf_r+0x1c8>
 8007ee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ee6:	445a      	add	r2, fp
 8007ee8:	9209      	str	r2, [sp, #36]	; 0x24
 8007eea:	f89a 3000 	ldrb.w	r3, [sl]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 80a2 	beq.w	8008038 <_svfiprintf_r+0x1c8>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8007efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007efe:	f10a 0a01 	add.w	sl, sl, #1
 8007f02:	9304      	str	r3, [sp, #16]
 8007f04:	9307      	str	r3, [sp, #28]
 8007f06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f0a:	931a      	str	r3, [sp, #104]	; 0x68
 8007f0c:	4654      	mov	r4, sl
 8007f0e:	2205      	movs	r2, #5
 8007f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f14:	4851      	ldr	r0, [pc, #324]	; (800805c <_svfiprintf_r+0x1ec>)
 8007f16:	f000 fa41 	bl	800839c <memchr>
 8007f1a:	9a04      	ldr	r2, [sp, #16]
 8007f1c:	b9d8      	cbnz	r0, 8007f56 <_svfiprintf_r+0xe6>
 8007f1e:	06d0      	lsls	r0, r2, #27
 8007f20:	bf44      	itt	mi
 8007f22:	2320      	movmi	r3, #32
 8007f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f28:	0711      	lsls	r1, r2, #28
 8007f2a:	bf44      	itt	mi
 8007f2c:	232b      	movmi	r3, #43	; 0x2b
 8007f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f32:	f89a 3000 	ldrb.w	r3, [sl]
 8007f36:	2b2a      	cmp	r3, #42	; 0x2a
 8007f38:	d015      	beq.n	8007f66 <_svfiprintf_r+0xf6>
 8007f3a:	4654      	mov	r4, sl
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	f04f 0c0a 	mov.w	ip, #10
 8007f42:	9a07      	ldr	r2, [sp, #28]
 8007f44:	4621      	mov	r1, r4
 8007f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f4a:	3b30      	subs	r3, #48	; 0x30
 8007f4c:	2b09      	cmp	r3, #9
 8007f4e:	d94e      	bls.n	8007fee <_svfiprintf_r+0x17e>
 8007f50:	b1b0      	cbz	r0, 8007f80 <_svfiprintf_r+0x110>
 8007f52:	9207      	str	r2, [sp, #28]
 8007f54:	e014      	b.n	8007f80 <_svfiprintf_r+0x110>
 8007f56:	eba0 0308 	sub.w	r3, r0, r8
 8007f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	46a2      	mov	sl, r4
 8007f62:	9304      	str	r3, [sp, #16]
 8007f64:	e7d2      	b.n	8007f0c <_svfiprintf_r+0x9c>
 8007f66:	9b03      	ldr	r3, [sp, #12]
 8007f68:	1d19      	adds	r1, r3, #4
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	9103      	str	r1, [sp, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	bfbb      	ittet	lt
 8007f72:	425b      	neglt	r3, r3
 8007f74:	f042 0202 	orrlt.w	r2, r2, #2
 8007f78:	9307      	strge	r3, [sp, #28]
 8007f7a:	9307      	strlt	r3, [sp, #28]
 8007f7c:	bfb8      	it	lt
 8007f7e:	9204      	strlt	r2, [sp, #16]
 8007f80:	7823      	ldrb	r3, [r4, #0]
 8007f82:	2b2e      	cmp	r3, #46	; 0x2e
 8007f84:	d10c      	bne.n	8007fa0 <_svfiprintf_r+0x130>
 8007f86:	7863      	ldrb	r3, [r4, #1]
 8007f88:	2b2a      	cmp	r3, #42	; 0x2a
 8007f8a:	d135      	bne.n	8007ff8 <_svfiprintf_r+0x188>
 8007f8c:	9b03      	ldr	r3, [sp, #12]
 8007f8e:	3402      	adds	r4, #2
 8007f90:	1d1a      	adds	r2, r3, #4
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	9203      	str	r2, [sp, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	bfb8      	it	lt
 8007f9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f9e:	9305      	str	r3, [sp, #20]
 8007fa0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008060 <_svfiprintf_r+0x1f0>
 8007fa4:	2203      	movs	r2, #3
 8007fa6:	4650      	mov	r0, sl
 8007fa8:	7821      	ldrb	r1, [r4, #0]
 8007faa:	f000 f9f7 	bl	800839c <memchr>
 8007fae:	b140      	cbz	r0, 8007fc2 <_svfiprintf_r+0x152>
 8007fb0:	2340      	movs	r3, #64	; 0x40
 8007fb2:	eba0 000a 	sub.w	r0, r0, sl
 8007fb6:	fa03 f000 	lsl.w	r0, r3, r0
 8007fba:	9b04      	ldr	r3, [sp, #16]
 8007fbc:	3401      	adds	r4, #1
 8007fbe:	4303      	orrs	r3, r0
 8007fc0:	9304      	str	r3, [sp, #16]
 8007fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fc6:	2206      	movs	r2, #6
 8007fc8:	4826      	ldr	r0, [pc, #152]	; (8008064 <_svfiprintf_r+0x1f4>)
 8007fca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fce:	f000 f9e5 	bl	800839c <memchr>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d038      	beq.n	8008048 <_svfiprintf_r+0x1d8>
 8007fd6:	4b24      	ldr	r3, [pc, #144]	; (8008068 <_svfiprintf_r+0x1f8>)
 8007fd8:	bb1b      	cbnz	r3, 8008022 <_svfiprintf_r+0x1b2>
 8007fda:	9b03      	ldr	r3, [sp, #12]
 8007fdc:	3307      	adds	r3, #7
 8007fde:	f023 0307 	bic.w	r3, r3, #7
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	9303      	str	r3, [sp, #12]
 8007fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe8:	4433      	add	r3, r6
 8007fea:	9309      	str	r3, [sp, #36]	; 0x24
 8007fec:	e767      	b.n	8007ebe <_svfiprintf_r+0x4e>
 8007fee:	460c      	mov	r4, r1
 8007ff0:	2001      	movs	r0, #1
 8007ff2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ff6:	e7a5      	b.n	8007f44 <_svfiprintf_r+0xd4>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f04f 0c0a 	mov.w	ip, #10
 8007ffe:	4619      	mov	r1, r3
 8008000:	3401      	adds	r4, #1
 8008002:	9305      	str	r3, [sp, #20]
 8008004:	4620      	mov	r0, r4
 8008006:	f810 2b01 	ldrb.w	r2, [r0], #1
 800800a:	3a30      	subs	r2, #48	; 0x30
 800800c:	2a09      	cmp	r2, #9
 800800e:	d903      	bls.n	8008018 <_svfiprintf_r+0x1a8>
 8008010:	2b00      	cmp	r3, #0
 8008012:	d0c5      	beq.n	8007fa0 <_svfiprintf_r+0x130>
 8008014:	9105      	str	r1, [sp, #20]
 8008016:	e7c3      	b.n	8007fa0 <_svfiprintf_r+0x130>
 8008018:	4604      	mov	r4, r0
 800801a:	2301      	movs	r3, #1
 800801c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008020:	e7f0      	b.n	8008004 <_svfiprintf_r+0x194>
 8008022:	ab03      	add	r3, sp, #12
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	462a      	mov	r2, r5
 8008028:	4638      	mov	r0, r7
 800802a:	4b10      	ldr	r3, [pc, #64]	; (800806c <_svfiprintf_r+0x1fc>)
 800802c:	a904      	add	r1, sp, #16
 800802e:	f3af 8000 	nop.w
 8008032:	1c42      	adds	r2, r0, #1
 8008034:	4606      	mov	r6, r0
 8008036:	d1d6      	bne.n	8007fe6 <_svfiprintf_r+0x176>
 8008038:	89ab      	ldrh	r3, [r5, #12]
 800803a:	065b      	lsls	r3, r3, #25
 800803c:	f53f af2c 	bmi.w	8007e98 <_svfiprintf_r+0x28>
 8008040:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008042:	b01d      	add	sp, #116	; 0x74
 8008044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008048:	ab03      	add	r3, sp, #12
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	462a      	mov	r2, r5
 800804e:	4638      	mov	r0, r7
 8008050:	4b06      	ldr	r3, [pc, #24]	; (800806c <_svfiprintf_r+0x1fc>)
 8008052:	a904      	add	r1, sp, #16
 8008054:	f000 f87c 	bl	8008150 <_printf_i>
 8008058:	e7eb      	b.n	8008032 <_svfiprintf_r+0x1c2>
 800805a:	bf00      	nop
 800805c:	08008670 	.word	0x08008670
 8008060:	08008676 	.word	0x08008676
 8008064:	0800867a 	.word	0x0800867a
 8008068:	00000000 	.word	0x00000000
 800806c:	08007db9 	.word	0x08007db9

08008070 <_printf_common>:
 8008070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008074:	4616      	mov	r6, r2
 8008076:	4699      	mov	r9, r3
 8008078:	688a      	ldr	r2, [r1, #8]
 800807a:	690b      	ldr	r3, [r1, #16]
 800807c:	4607      	mov	r7, r0
 800807e:	4293      	cmp	r3, r2
 8008080:	bfb8      	it	lt
 8008082:	4613      	movlt	r3, r2
 8008084:	6033      	str	r3, [r6, #0]
 8008086:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800808a:	460c      	mov	r4, r1
 800808c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008090:	b10a      	cbz	r2, 8008096 <_printf_common+0x26>
 8008092:	3301      	adds	r3, #1
 8008094:	6033      	str	r3, [r6, #0]
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	0699      	lsls	r1, r3, #26
 800809a:	bf42      	ittt	mi
 800809c:	6833      	ldrmi	r3, [r6, #0]
 800809e:	3302      	addmi	r3, #2
 80080a0:	6033      	strmi	r3, [r6, #0]
 80080a2:	6825      	ldr	r5, [r4, #0]
 80080a4:	f015 0506 	ands.w	r5, r5, #6
 80080a8:	d106      	bne.n	80080b8 <_printf_common+0x48>
 80080aa:	f104 0a19 	add.w	sl, r4, #25
 80080ae:	68e3      	ldr	r3, [r4, #12]
 80080b0:	6832      	ldr	r2, [r6, #0]
 80080b2:	1a9b      	subs	r3, r3, r2
 80080b4:	42ab      	cmp	r3, r5
 80080b6:	dc28      	bgt.n	800810a <_printf_common+0x9a>
 80080b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080bc:	1e13      	subs	r3, r2, #0
 80080be:	6822      	ldr	r2, [r4, #0]
 80080c0:	bf18      	it	ne
 80080c2:	2301      	movne	r3, #1
 80080c4:	0692      	lsls	r2, r2, #26
 80080c6:	d42d      	bmi.n	8008124 <_printf_common+0xb4>
 80080c8:	4649      	mov	r1, r9
 80080ca:	4638      	mov	r0, r7
 80080cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080d0:	47c0      	blx	r8
 80080d2:	3001      	adds	r0, #1
 80080d4:	d020      	beq.n	8008118 <_printf_common+0xa8>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	68e5      	ldr	r5, [r4, #12]
 80080da:	f003 0306 	and.w	r3, r3, #6
 80080de:	2b04      	cmp	r3, #4
 80080e0:	bf18      	it	ne
 80080e2:	2500      	movne	r5, #0
 80080e4:	6832      	ldr	r2, [r6, #0]
 80080e6:	f04f 0600 	mov.w	r6, #0
 80080ea:	68a3      	ldr	r3, [r4, #8]
 80080ec:	bf08      	it	eq
 80080ee:	1aad      	subeq	r5, r5, r2
 80080f0:	6922      	ldr	r2, [r4, #16]
 80080f2:	bf08      	it	eq
 80080f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080f8:	4293      	cmp	r3, r2
 80080fa:	bfc4      	itt	gt
 80080fc:	1a9b      	subgt	r3, r3, r2
 80080fe:	18ed      	addgt	r5, r5, r3
 8008100:	341a      	adds	r4, #26
 8008102:	42b5      	cmp	r5, r6
 8008104:	d11a      	bne.n	800813c <_printf_common+0xcc>
 8008106:	2000      	movs	r0, #0
 8008108:	e008      	b.n	800811c <_printf_common+0xac>
 800810a:	2301      	movs	r3, #1
 800810c:	4652      	mov	r2, sl
 800810e:	4649      	mov	r1, r9
 8008110:	4638      	mov	r0, r7
 8008112:	47c0      	blx	r8
 8008114:	3001      	adds	r0, #1
 8008116:	d103      	bne.n	8008120 <_printf_common+0xb0>
 8008118:	f04f 30ff 	mov.w	r0, #4294967295
 800811c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008120:	3501      	adds	r5, #1
 8008122:	e7c4      	b.n	80080ae <_printf_common+0x3e>
 8008124:	2030      	movs	r0, #48	; 0x30
 8008126:	18e1      	adds	r1, r4, r3
 8008128:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008132:	4422      	add	r2, r4
 8008134:	3302      	adds	r3, #2
 8008136:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800813a:	e7c5      	b.n	80080c8 <_printf_common+0x58>
 800813c:	2301      	movs	r3, #1
 800813e:	4622      	mov	r2, r4
 8008140:	4649      	mov	r1, r9
 8008142:	4638      	mov	r0, r7
 8008144:	47c0      	blx	r8
 8008146:	3001      	adds	r0, #1
 8008148:	d0e6      	beq.n	8008118 <_printf_common+0xa8>
 800814a:	3601      	adds	r6, #1
 800814c:	e7d9      	b.n	8008102 <_printf_common+0x92>
	...

08008150 <_printf_i>:
 8008150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008154:	7e0f      	ldrb	r7, [r1, #24]
 8008156:	4691      	mov	r9, r2
 8008158:	2f78      	cmp	r7, #120	; 0x78
 800815a:	4680      	mov	r8, r0
 800815c:	460c      	mov	r4, r1
 800815e:	469a      	mov	sl, r3
 8008160:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008162:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008166:	d807      	bhi.n	8008178 <_printf_i+0x28>
 8008168:	2f62      	cmp	r7, #98	; 0x62
 800816a:	d80a      	bhi.n	8008182 <_printf_i+0x32>
 800816c:	2f00      	cmp	r7, #0
 800816e:	f000 80d9 	beq.w	8008324 <_printf_i+0x1d4>
 8008172:	2f58      	cmp	r7, #88	; 0x58
 8008174:	f000 80a4 	beq.w	80082c0 <_printf_i+0x170>
 8008178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800817c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008180:	e03a      	b.n	80081f8 <_printf_i+0xa8>
 8008182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008186:	2b15      	cmp	r3, #21
 8008188:	d8f6      	bhi.n	8008178 <_printf_i+0x28>
 800818a:	a101      	add	r1, pc, #4	; (adr r1, 8008190 <_printf_i+0x40>)
 800818c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008190:	080081e9 	.word	0x080081e9
 8008194:	080081fd 	.word	0x080081fd
 8008198:	08008179 	.word	0x08008179
 800819c:	08008179 	.word	0x08008179
 80081a0:	08008179 	.word	0x08008179
 80081a4:	08008179 	.word	0x08008179
 80081a8:	080081fd 	.word	0x080081fd
 80081ac:	08008179 	.word	0x08008179
 80081b0:	08008179 	.word	0x08008179
 80081b4:	08008179 	.word	0x08008179
 80081b8:	08008179 	.word	0x08008179
 80081bc:	0800830b 	.word	0x0800830b
 80081c0:	0800822d 	.word	0x0800822d
 80081c4:	080082ed 	.word	0x080082ed
 80081c8:	08008179 	.word	0x08008179
 80081cc:	08008179 	.word	0x08008179
 80081d0:	0800832d 	.word	0x0800832d
 80081d4:	08008179 	.word	0x08008179
 80081d8:	0800822d 	.word	0x0800822d
 80081dc:	08008179 	.word	0x08008179
 80081e0:	08008179 	.word	0x08008179
 80081e4:	080082f5 	.word	0x080082f5
 80081e8:	682b      	ldr	r3, [r5, #0]
 80081ea:	1d1a      	adds	r2, r3, #4
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	602a      	str	r2, [r5, #0]
 80081f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081f8:	2301      	movs	r3, #1
 80081fa:	e0a4      	b.n	8008346 <_printf_i+0x1f6>
 80081fc:	6820      	ldr	r0, [r4, #0]
 80081fe:	6829      	ldr	r1, [r5, #0]
 8008200:	0606      	lsls	r6, r0, #24
 8008202:	f101 0304 	add.w	r3, r1, #4
 8008206:	d50a      	bpl.n	800821e <_printf_i+0xce>
 8008208:	680e      	ldr	r6, [r1, #0]
 800820a:	602b      	str	r3, [r5, #0]
 800820c:	2e00      	cmp	r6, #0
 800820e:	da03      	bge.n	8008218 <_printf_i+0xc8>
 8008210:	232d      	movs	r3, #45	; 0x2d
 8008212:	4276      	negs	r6, r6
 8008214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008218:	230a      	movs	r3, #10
 800821a:	485e      	ldr	r0, [pc, #376]	; (8008394 <_printf_i+0x244>)
 800821c:	e019      	b.n	8008252 <_printf_i+0x102>
 800821e:	680e      	ldr	r6, [r1, #0]
 8008220:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008224:	602b      	str	r3, [r5, #0]
 8008226:	bf18      	it	ne
 8008228:	b236      	sxthne	r6, r6
 800822a:	e7ef      	b.n	800820c <_printf_i+0xbc>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	6820      	ldr	r0, [r4, #0]
 8008230:	1d19      	adds	r1, r3, #4
 8008232:	6029      	str	r1, [r5, #0]
 8008234:	0601      	lsls	r1, r0, #24
 8008236:	d501      	bpl.n	800823c <_printf_i+0xec>
 8008238:	681e      	ldr	r6, [r3, #0]
 800823a:	e002      	b.n	8008242 <_printf_i+0xf2>
 800823c:	0646      	lsls	r6, r0, #25
 800823e:	d5fb      	bpl.n	8008238 <_printf_i+0xe8>
 8008240:	881e      	ldrh	r6, [r3, #0]
 8008242:	2f6f      	cmp	r7, #111	; 0x6f
 8008244:	bf0c      	ite	eq
 8008246:	2308      	moveq	r3, #8
 8008248:	230a      	movne	r3, #10
 800824a:	4852      	ldr	r0, [pc, #328]	; (8008394 <_printf_i+0x244>)
 800824c:	2100      	movs	r1, #0
 800824e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008252:	6865      	ldr	r5, [r4, #4]
 8008254:	2d00      	cmp	r5, #0
 8008256:	bfa8      	it	ge
 8008258:	6821      	ldrge	r1, [r4, #0]
 800825a:	60a5      	str	r5, [r4, #8]
 800825c:	bfa4      	itt	ge
 800825e:	f021 0104 	bicge.w	r1, r1, #4
 8008262:	6021      	strge	r1, [r4, #0]
 8008264:	b90e      	cbnz	r6, 800826a <_printf_i+0x11a>
 8008266:	2d00      	cmp	r5, #0
 8008268:	d04d      	beq.n	8008306 <_printf_i+0x1b6>
 800826a:	4615      	mov	r5, r2
 800826c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008270:	fb03 6711 	mls	r7, r3, r1, r6
 8008274:	5dc7      	ldrb	r7, [r0, r7]
 8008276:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800827a:	4637      	mov	r7, r6
 800827c:	42bb      	cmp	r3, r7
 800827e:	460e      	mov	r6, r1
 8008280:	d9f4      	bls.n	800826c <_printf_i+0x11c>
 8008282:	2b08      	cmp	r3, #8
 8008284:	d10b      	bne.n	800829e <_printf_i+0x14e>
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	07de      	lsls	r6, r3, #31
 800828a:	d508      	bpl.n	800829e <_printf_i+0x14e>
 800828c:	6923      	ldr	r3, [r4, #16]
 800828e:	6861      	ldr	r1, [r4, #4]
 8008290:	4299      	cmp	r1, r3
 8008292:	bfde      	ittt	le
 8008294:	2330      	movle	r3, #48	; 0x30
 8008296:	f805 3c01 	strble.w	r3, [r5, #-1]
 800829a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800829e:	1b52      	subs	r2, r2, r5
 80082a0:	6122      	str	r2, [r4, #16]
 80082a2:	464b      	mov	r3, r9
 80082a4:	4621      	mov	r1, r4
 80082a6:	4640      	mov	r0, r8
 80082a8:	f8cd a000 	str.w	sl, [sp]
 80082ac:	aa03      	add	r2, sp, #12
 80082ae:	f7ff fedf 	bl	8008070 <_printf_common>
 80082b2:	3001      	adds	r0, #1
 80082b4:	d14c      	bne.n	8008350 <_printf_i+0x200>
 80082b6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ba:	b004      	add	sp, #16
 80082bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c0:	4834      	ldr	r0, [pc, #208]	; (8008394 <_printf_i+0x244>)
 80082c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082c6:	6829      	ldr	r1, [r5, #0]
 80082c8:	6823      	ldr	r3, [r4, #0]
 80082ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80082ce:	6029      	str	r1, [r5, #0]
 80082d0:	061d      	lsls	r5, r3, #24
 80082d2:	d514      	bpl.n	80082fe <_printf_i+0x1ae>
 80082d4:	07df      	lsls	r7, r3, #31
 80082d6:	bf44      	itt	mi
 80082d8:	f043 0320 	orrmi.w	r3, r3, #32
 80082dc:	6023      	strmi	r3, [r4, #0]
 80082de:	b91e      	cbnz	r6, 80082e8 <_printf_i+0x198>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	f023 0320 	bic.w	r3, r3, #32
 80082e6:	6023      	str	r3, [r4, #0]
 80082e8:	2310      	movs	r3, #16
 80082ea:	e7af      	b.n	800824c <_printf_i+0xfc>
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	f043 0320 	orr.w	r3, r3, #32
 80082f2:	6023      	str	r3, [r4, #0]
 80082f4:	2378      	movs	r3, #120	; 0x78
 80082f6:	4828      	ldr	r0, [pc, #160]	; (8008398 <_printf_i+0x248>)
 80082f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082fc:	e7e3      	b.n	80082c6 <_printf_i+0x176>
 80082fe:	0659      	lsls	r1, r3, #25
 8008300:	bf48      	it	mi
 8008302:	b2b6      	uxthmi	r6, r6
 8008304:	e7e6      	b.n	80082d4 <_printf_i+0x184>
 8008306:	4615      	mov	r5, r2
 8008308:	e7bb      	b.n	8008282 <_printf_i+0x132>
 800830a:	682b      	ldr	r3, [r5, #0]
 800830c:	6826      	ldr	r6, [r4, #0]
 800830e:	1d18      	adds	r0, r3, #4
 8008310:	6961      	ldr	r1, [r4, #20]
 8008312:	6028      	str	r0, [r5, #0]
 8008314:	0635      	lsls	r5, r6, #24
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	d501      	bpl.n	800831e <_printf_i+0x1ce>
 800831a:	6019      	str	r1, [r3, #0]
 800831c:	e002      	b.n	8008324 <_printf_i+0x1d4>
 800831e:	0670      	lsls	r0, r6, #25
 8008320:	d5fb      	bpl.n	800831a <_printf_i+0x1ca>
 8008322:	8019      	strh	r1, [r3, #0]
 8008324:	2300      	movs	r3, #0
 8008326:	4615      	mov	r5, r2
 8008328:	6123      	str	r3, [r4, #16]
 800832a:	e7ba      	b.n	80082a2 <_printf_i+0x152>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	2100      	movs	r1, #0
 8008330:	1d1a      	adds	r2, r3, #4
 8008332:	602a      	str	r2, [r5, #0]
 8008334:	681d      	ldr	r5, [r3, #0]
 8008336:	6862      	ldr	r2, [r4, #4]
 8008338:	4628      	mov	r0, r5
 800833a:	f000 f82f 	bl	800839c <memchr>
 800833e:	b108      	cbz	r0, 8008344 <_printf_i+0x1f4>
 8008340:	1b40      	subs	r0, r0, r5
 8008342:	6060      	str	r0, [r4, #4]
 8008344:	6863      	ldr	r3, [r4, #4]
 8008346:	6123      	str	r3, [r4, #16]
 8008348:	2300      	movs	r3, #0
 800834a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800834e:	e7a8      	b.n	80082a2 <_printf_i+0x152>
 8008350:	462a      	mov	r2, r5
 8008352:	4649      	mov	r1, r9
 8008354:	4640      	mov	r0, r8
 8008356:	6923      	ldr	r3, [r4, #16]
 8008358:	47d0      	blx	sl
 800835a:	3001      	adds	r0, #1
 800835c:	d0ab      	beq.n	80082b6 <_printf_i+0x166>
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	079b      	lsls	r3, r3, #30
 8008362:	d413      	bmi.n	800838c <_printf_i+0x23c>
 8008364:	68e0      	ldr	r0, [r4, #12]
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	4298      	cmp	r0, r3
 800836a:	bfb8      	it	lt
 800836c:	4618      	movlt	r0, r3
 800836e:	e7a4      	b.n	80082ba <_printf_i+0x16a>
 8008370:	2301      	movs	r3, #1
 8008372:	4632      	mov	r2, r6
 8008374:	4649      	mov	r1, r9
 8008376:	4640      	mov	r0, r8
 8008378:	47d0      	blx	sl
 800837a:	3001      	adds	r0, #1
 800837c:	d09b      	beq.n	80082b6 <_printf_i+0x166>
 800837e:	3501      	adds	r5, #1
 8008380:	68e3      	ldr	r3, [r4, #12]
 8008382:	9903      	ldr	r1, [sp, #12]
 8008384:	1a5b      	subs	r3, r3, r1
 8008386:	42ab      	cmp	r3, r5
 8008388:	dcf2      	bgt.n	8008370 <_printf_i+0x220>
 800838a:	e7eb      	b.n	8008364 <_printf_i+0x214>
 800838c:	2500      	movs	r5, #0
 800838e:	f104 0619 	add.w	r6, r4, #25
 8008392:	e7f5      	b.n	8008380 <_printf_i+0x230>
 8008394:	08008681 	.word	0x08008681
 8008398:	08008692 	.word	0x08008692

0800839c <memchr>:
 800839c:	4603      	mov	r3, r0
 800839e:	b510      	push	{r4, lr}
 80083a0:	b2c9      	uxtb	r1, r1
 80083a2:	4402      	add	r2, r0
 80083a4:	4293      	cmp	r3, r2
 80083a6:	4618      	mov	r0, r3
 80083a8:	d101      	bne.n	80083ae <memchr+0x12>
 80083aa:	2000      	movs	r0, #0
 80083ac:	e003      	b.n	80083b6 <memchr+0x1a>
 80083ae:	7804      	ldrb	r4, [r0, #0]
 80083b0:	3301      	adds	r3, #1
 80083b2:	428c      	cmp	r4, r1
 80083b4:	d1f6      	bne.n	80083a4 <memchr+0x8>
 80083b6:	bd10      	pop	{r4, pc}

080083b8 <memmove>:
 80083b8:	4288      	cmp	r0, r1
 80083ba:	b510      	push	{r4, lr}
 80083bc:	eb01 0402 	add.w	r4, r1, r2
 80083c0:	d902      	bls.n	80083c8 <memmove+0x10>
 80083c2:	4284      	cmp	r4, r0
 80083c4:	4623      	mov	r3, r4
 80083c6:	d807      	bhi.n	80083d8 <memmove+0x20>
 80083c8:	1e43      	subs	r3, r0, #1
 80083ca:	42a1      	cmp	r1, r4
 80083cc:	d008      	beq.n	80083e0 <memmove+0x28>
 80083ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083d6:	e7f8      	b.n	80083ca <memmove+0x12>
 80083d8:	4601      	mov	r1, r0
 80083da:	4402      	add	r2, r0
 80083dc:	428a      	cmp	r2, r1
 80083de:	d100      	bne.n	80083e2 <memmove+0x2a>
 80083e0:	bd10      	pop	{r4, pc}
 80083e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083ea:	e7f7      	b.n	80083dc <memmove+0x24>

080083ec <_realloc_r>:
 80083ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f0:	4680      	mov	r8, r0
 80083f2:	4614      	mov	r4, r2
 80083f4:	460e      	mov	r6, r1
 80083f6:	b921      	cbnz	r1, 8008402 <_realloc_r+0x16>
 80083f8:	4611      	mov	r1, r2
 80083fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083fe:	f7ff bc2b 	b.w	8007c58 <_malloc_r>
 8008402:	b92a      	cbnz	r2, 8008410 <_realloc_r+0x24>
 8008404:	f7ff fbc0 	bl	8007b88 <_free_r>
 8008408:	4625      	mov	r5, r4
 800840a:	4628      	mov	r0, r5
 800840c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008410:	f000 f81b 	bl	800844a <_malloc_usable_size_r>
 8008414:	4284      	cmp	r4, r0
 8008416:	4607      	mov	r7, r0
 8008418:	d802      	bhi.n	8008420 <_realloc_r+0x34>
 800841a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800841e:	d812      	bhi.n	8008446 <_realloc_r+0x5a>
 8008420:	4621      	mov	r1, r4
 8008422:	4640      	mov	r0, r8
 8008424:	f7ff fc18 	bl	8007c58 <_malloc_r>
 8008428:	4605      	mov	r5, r0
 800842a:	2800      	cmp	r0, #0
 800842c:	d0ed      	beq.n	800840a <_realloc_r+0x1e>
 800842e:	42bc      	cmp	r4, r7
 8008430:	4622      	mov	r2, r4
 8008432:	4631      	mov	r1, r6
 8008434:	bf28      	it	cs
 8008436:	463a      	movcs	r2, r7
 8008438:	f7ff fb90 	bl	8007b5c <memcpy>
 800843c:	4631      	mov	r1, r6
 800843e:	4640      	mov	r0, r8
 8008440:	f7ff fba2 	bl	8007b88 <_free_r>
 8008444:	e7e1      	b.n	800840a <_realloc_r+0x1e>
 8008446:	4635      	mov	r5, r6
 8008448:	e7df      	b.n	800840a <_realloc_r+0x1e>

0800844a <_malloc_usable_size_r>:
 800844a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844e:	1f18      	subs	r0, r3, #4
 8008450:	2b00      	cmp	r3, #0
 8008452:	bfbc      	itt	lt
 8008454:	580b      	ldrlt	r3, [r1, r0]
 8008456:	18c0      	addlt	r0, r0, r3
 8008458:	4770      	bx	lr
	...

0800845c <_init>:
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845e:	bf00      	nop
 8008460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008462:	bc08      	pop	{r3}
 8008464:	469e      	mov	lr, r3
 8008466:	4770      	bx	lr

08008468 <_fini>:
 8008468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846a:	bf00      	nop
 800846c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846e:	bc08      	pop	{r3}
 8008470:	469e      	mov	lr, r3
 8008472:	4770      	bx	lr
