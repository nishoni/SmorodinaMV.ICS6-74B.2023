
kursach_c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfc8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  0800d0d8  0800d0d8  0001d0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d714  0800d714  00020460  2**0
                  CONTENTS
  4 .ARM          00000000  0800d714  0800d714  00020460  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d714  0800d714  00020460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d714  0800d714  0001d714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d718  0800d718  0001d718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000460  20000000  0800d71c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000460  0800db7c  00020460  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800db7c  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009507  00000000  00000000  00020489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e17  00000000  00000000  00029990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  0002b7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  0002bff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001888f  00000000  00000000  0002c750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b22e  00000000  00000000  00044fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000842dc  00000000  00000000  0005020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d44e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003450  00000000  00000000  000d453c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000460 	.word	0x20000460
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d0c0 	.word	0x0800d0c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000464 	.word	0x20000464
 800014c:	0800d0c0 	.word	0x0800d0c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <do_algorithm>:
 *  Created on: Nov 28, 2023
 *      Author: Pizza Delivery
 */
#include "algorithm_interface.h"

void do_algorithm(int8_t* data, int algorithm_id) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b0b0      	sub	sp, #192	; 0xc0
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	// hashing data with chosen algorithm
	state = 2;
 8000be2:	4bc3      	ldr	r3, [pc, #780]	; (8000ef0 <do_algorithm+0x318>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	601a      	str	r2, [r3, #0]
	lcd_clear();
 8000be8:	f000 fb40 	bl	800126c <lcd_clear>
	lcd_init();
 8000bec:	f000 f9de 	bl	8000fac <lcd_init>
	switch (algorithm_id) {
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d019      	beq.n	8000c2a <do_algorithm+0x52>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	dc1e      	bgt.n	8000c3a <do_algorithm+0x62>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <do_algorithm+0x32>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d008      	beq.n	8000c1a <do_algorithm+0x42>
 8000c08:	e017      	b.n	8000c3a <do_algorithm+0x62>
		case 0:
			lcd_init();
 8000c0a:	f000 f9cf 	bl	8000fac <lcd_init>
			lcd_puts(0, 0, (int8_t*)"You chose sha256");
 8000c0e:	4ab9      	ldr	r2, [pc, #740]	; (8000ef4 <do_algorithm+0x31c>)
 8000c10:	2100      	movs	r1, #0
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 fad8 	bl	80011c8 <lcd_puts>
			break;
 8000c18:	e01f      	b.n	8000c5a <do_algorithm+0x82>
		case 1:
			lcd_init();
 8000c1a:	f000 f9c7 	bl	8000fac <lcd_init>
			lcd_puts(0, 0, (int8_t*)"You chose md5");
 8000c1e:	4ab6      	ldr	r2, [pc, #728]	; (8000ef8 <do_algorithm+0x320>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 fad0 	bl	80011c8 <lcd_puts>
			break;
 8000c28:	e017      	b.n	8000c5a <do_algorithm+0x82>
		case 2:
			lcd_init();
 8000c2a:	f000 f9bf 	bl	8000fac <lcd_init>
			lcd_puts(0, 0, (int8_t*)"You chose crc16");
 8000c2e:	4ab3      	ldr	r2, [pc, #716]	; (8000efc <do_algorithm+0x324>)
 8000c30:	2100      	movs	r1, #0
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 fac8 	bl	80011c8 <lcd_puts>
			break;
 8000c38:	e00f      	b.n	8000c5a <do_algorithm+0x82>
		default:
			lcd_init();
 8000c3a:	f000 f9b7 	bl	8000fac <lcd_init>
			int8_t *error_msg = "Unexpected algorithm chosen";
 8000c3e:	4bb0      	ldr	r3, [pc, #704]	; (8000f00 <do_algorithm+0x328>)
 8000c40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			lcd_puts(0, 0, (int8_t*) error_msg);
 8000c44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 fabc 	bl	80011c8 <lcd_puts>
			HAL_Delay(1000);
 8000c50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c54:	f005 fff8 	bl	8006c48 <HAL_Delay>
			break;
 8000c58:	bf00      	nop
	}

	HAL_Delay(1000);
 8000c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c5e:	f005 fff3 	bl	8006c48 <HAL_Delay>
	int8_t *result;
	char *output;
	int j = 0, i = 0, k = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	lcd_init();
 8000c74:	f000 f99a 	bl	8000fac <lcd_init>
	switch (algorithm_id) {
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	f000 80d8 	beq.w	8000e30 <do_algorithm+0x258>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	f300 8117 	bgt.w	8000eb6 <do_algorithm+0x2de>
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <do_algorithm+0xbe>
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d071      	beq.n	8000d78 <do_algorithm+0x1a0>
 8000c94:	e10f      	b.n	8000eb6 <do_algorithm+0x2de>
			case 0:
				// sha256

				lcd_clear();
 8000c96:	f000 fae9 	bl	800126c <lcd_clear>
				lcd_init();
 8000c9a:	f000 f987 	bl	8000fac <lcd_init>
				lcd_puts(0, 0, (uint8_t*)"Starting sha256");
 8000c9e:	4a99      	ldr	r2, [pc, #612]	; (8000f04 <do_algorithm+0x32c>)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 fa90 	bl	80011c8 <lcd_puts>
				sha256_context foo;
				unsigned char hash[32];

				sha256_init(&foo);
 8000ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 fea3 	bl	80019f8 <sha256_init>
				sha256_update(&foo, data, strlen(data));
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff fa4c 	bl	8000150 <strlen>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f005 fc3b 	bl	800653c <sha256_update>
				sha256_finish(&foo, hash);
 8000cc6:	f107 020c 	add.w	r2, r7, #12
 8000cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f005 fc9b 	bl	800660c <sha256_finish>

				HAL_Delay(1000);
 8000cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cda:	f005 ffb5 	bl	8006c48 <HAL_Delay>
				lcd_clear();
 8000cde:	f000 fac5 	bl	800126c <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Result of sha256:");
 8000ce2:	4a89      	ldr	r2, [pc, #548]	; (8000f08 <do_algorithm+0x330>)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 fa6e 	bl	80011c8 <lcd_puts>
				HAL_Delay(500);
 8000cec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cf0:	f005 ffaa 	bl	8006c48 <HAL_Delay>

				lcd_clear();
 8000cf4:	f000 faba 	bl	800126c <lcd_clear>
				while (k < 16) {
 8000cf8:	e02a      	b.n	8000d50 <do_algorithm+0x178>
					sprintf(output, "%02x", hash[k]);
 8000cfa:	f107 020c 	add.w	r2, r7, #12
 8000cfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d02:	4413      	add	r3, r2
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	4980      	ldr	r1, [pc, #512]	; (8000f0c <do_algorithm+0x334>)
 8000d0a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000d0e:	f008 fd1f 	bl	8009750 <siprintf>
					if (i == 16) {
 8000d12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000d16:	2b10      	cmp	r3, #16
 8000d18:	d105      	bne.n	8000d26 <do_algorithm+0x14e>
						i = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						j = 1;
 8000d20:	2301      	movs	r3, #1
 8000d22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					}
					lcd_puts(j, i, (uint8_t*)output);
 8000d26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000d2a:	b25b      	sxtb	r3, r3
 8000d2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000d30:	b251      	sxtb	r1, r2
 8000d32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fa46 	bl	80011c8 <lcd_puts>
					++k;
 8000d3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d40:	3301      	adds	r3, #1
 8000d42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					i += 2;
 8000d46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
				while (k < 16) {
 8000d50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	ddd0      	ble.n	8000cfa <do_algorithm+0x122>
				}

				HAL_Delay(1000);
 8000d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5c:	f005 ff74 	bl	8006c48 <HAL_Delay>
				lcd_clear();
 8000d60:	f000 fa84 	bl	800126c <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Finished sha256");
 8000d64:	4a6a      	ldr	r2, [pc, #424]	; (8000f10 <do_algorithm+0x338>)
 8000d66:	2100      	movs	r1, #0
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f000 fa2d 	bl	80011c8 <lcd_puts>
				HAL_Delay(1000);
 8000d6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d72:	f005 ff69 	bl	8006c48 <HAL_Delay>
				break;
 8000d76:	e0ae      	b.n	8000ed6 <do_algorithm+0x2fe>
			case 1:
				// md5
				lcd_clear();
 8000d78:	f000 fa78 	bl	800126c <lcd_clear>
				lcd_init();
 8000d7c:	f000 f916 	bl	8000fac <lcd_init>
				lcd_puts(0, 0, (uint8_t*)"Starting md5");
 8000d80:	4a64      	ldr	r2, [pc, #400]	; (8000f14 <do_algorithm+0x33c>)
 8000d82:	2100      	movs	r1, #0
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 fa1f 	bl	80011c8 <lcd_puts>
				uint8_t md5_result[16];
				md5String(data, md5_result);
 8000d8a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d8e:	4619      	mov	r1, r3
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f000 fe0b 	bl	80019ac <md5String>

				HAL_Delay(1000);
 8000d96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d9a:	f005 ff55 	bl	8006c48 <HAL_Delay>
				lcd_clear();
 8000d9e:	f000 fa65 	bl	800126c <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Result of md5:");
 8000da2:	4a5d      	ldr	r2, [pc, #372]	; (8000f18 <do_algorithm+0x340>)
 8000da4:	2100      	movs	r1, #0
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 fa0e 	bl	80011c8 <lcd_puts>
				HAL_Delay(500);
 8000dac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db0:	f005 ff4a 	bl	8006c48 <HAL_Delay>

				lcd_clear();
 8000db4:	f000 fa5a 	bl	800126c <lcd_clear>

				while (k < 16) {
 8000db8:	e02a      	b.n	8000e10 <do_algorithm+0x238>
					sprintf((char*)output, "%02x", md5_result[k]);
 8000dba:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000dc2:	4413      	add	r3, r2
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4950      	ldr	r1, [pc, #320]	; (8000f0c <do_algorithm+0x334>)
 8000dca:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000dce:	f008 fcbf 	bl	8009750 <siprintf>
					if (i == 8) {
 8000dd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000dd6:	2b08      	cmp	r3, #8
 8000dd8:	d105      	bne.n	8000de6 <do_algorithm+0x20e>
						i = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						j = 1;
 8000de0:	2301      	movs	r3, #1
 8000de2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					}


					lcd_puts(j, i, (uint8_t*)output);
 8000de6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000df0:	b251      	sxtb	r1, r2
 8000df2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f9e6 	bl	80011c8 <lcd_puts>
					k++;
 8000dfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e00:	3301      	adds	r3, #1
 8000e02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					i += 2;
 8000e06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
				while (k < 16) {
 8000e10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	ddd0      	ble.n	8000dba <do_algorithm+0x1e2>
				}

				HAL_Delay(1000);
 8000e18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e1c:	f005 ff14 	bl	8006c48 <HAL_Delay>
				lcd_clear();
 8000e20:	f000 fa24 	bl	800126c <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Finished md5");
 8000e24:	4a3d      	ldr	r2, [pc, #244]	; (8000f1c <do_algorithm+0x344>)
 8000e26:	2100      	movs	r1, #0
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f000 f9cd 	bl	80011c8 <lcd_puts>
				break;
 8000e2e:	e052      	b.n	8000ed6 <do_algorithm+0x2fe>
			case 2:
				// crc16

				lcd_clear();
 8000e30:	f000 fa1c 	bl	800126c <lcd_clear>
				lcd_init();
 8000e34:	f000 f8ba 	bl	8000fac <lcd_init>
				lcd_puts(0, 0, (uint8_t*)"Starting crc16");
 8000e38:	4a39      	ldr	r2, [pc, #228]	; (8000f20 <do_algorithm+0x348>)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f000 f9c3 	bl	80011c8 <lcd_puts>
				result = crc16(data, strlen(data));
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff f984 	bl	8000150 <strlen>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f000 f870 	bl	8000f34 <crc16>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

				HAL_Delay(1000);
 8000e5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5e:	f005 fef3 	bl	8006c48 <HAL_Delay>
				lcd_clear();
 8000e62:	f000 fa03 	bl	800126c <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Result of crc16:");
 8000e66:	4a2f      	ldr	r2, [pc, #188]	; (8000f24 <do_algorithm+0x34c>)
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f9ac 	bl	80011c8 <lcd_puts>
				HAL_Delay(500);
 8000e70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e74:	f005 fee8 	bl	8006c48 <HAL_Delay>

				sprintf(output, "%hX", result);
 8000e78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000e7c:	492a      	ldr	r1, [pc, #168]	; (8000f28 <do_algorithm+0x350>)
 8000e7e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000e82:	f008 fc65 	bl	8009750 <siprintf>
				HAL_Delay(1000);
 8000e86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e8a:	f005 fedd 	bl	8006c48 <HAL_Delay>
				lcd_clear();
 8000e8e:	f000 f9ed 	bl	800126c <lcd_clear>
				lcd_puts(0, 0, output);
 8000e92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000e96:	2100      	movs	r1, #0
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f000 f995 	bl	80011c8 <lcd_puts>

				HAL_Delay(1000);
 8000e9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea2:	f005 fed1 	bl	8006c48 <HAL_Delay>
				lcd_clear();
 8000ea6:	f000 f9e1 	bl	800126c <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Finished crc16");
 8000eaa:	4a20      	ldr	r2, [pc, #128]	; (8000f2c <do_algorithm+0x354>)
 8000eac:	2100      	movs	r1, #0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f98a 	bl	80011c8 <lcd_puts>
				break;
 8000eb4:	e00f      	b.n	8000ed6 <do_algorithm+0x2fe>
			default:
				lcd_init();
 8000eb6:	f000 f879 	bl	8000fac <lcd_init>
				int8_t *error_msg = "Unexpected error in algorithms\r\n";
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <do_algorithm+0x358>)
 8000ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				lcd_puts(0, 0, (int8_t*) error_msg);
 8000ec0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f97e 	bl	80011c8 <lcd_puts>
				HAL_Delay(1000);
 8000ecc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed0:	f005 feba 	bl	8006c48 <HAL_Delay>
				break;
 8000ed4:	bf00      	nop
		}
	HAL_Delay(1000);
 8000ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eda:	f005 feb5 	bl	8006c48 <HAL_Delay>
	state = 0;
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <do_algorithm+0x318>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
	lcd_clear();
 8000ee4:	f000 f9c2 	bl	800126c <lcd_clear>
}
 8000ee8:	bf00      	nop
 8000eea:	37c0      	adds	r7, #192	; 0xc0
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200004c4 	.word	0x200004c4
 8000ef4:	0800d0d8 	.word	0x0800d0d8
 8000ef8:	0800d0ec 	.word	0x0800d0ec
 8000efc:	0800d0fc 	.word	0x0800d0fc
 8000f00:	0800d10c 	.word	0x0800d10c
 8000f04:	0800d128 	.word	0x0800d128
 8000f08:	0800d138 	.word	0x0800d138
 8000f0c:	0800d14c 	.word	0x0800d14c
 8000f10:	0800d154 	.word	0x0800d154
 8000f14:	0800d164 	.word	0x0800d164
 8000f18:	0800d174 	.word	0x0800d174
 8000f1c:	0800d184 	.word	0x0800d184
 8000f20:	0800d194 	.word	0x0800d194
 8000f24:	0800d1a4 	.word	0x0800d1a4
 8000f28:	0800d1b8 	.word	0x0800d1b8
 8000f2c:	0800d1bc 	.word	0x0800d1bc
 8000f30:	0800d1cc 	.word	0x0800d1cc

08000f34 <crc16>:
  Check : 0x29B1 ("123456789")
  MaxLen: 4095 байт (32767 бит) - обнаружение
    одинарных, двойных, тройных и всех нечетных ошибок
*/
unsigned short crc16(unsigned char *data, unsigned short len)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8000f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f44:	81fb      	strh	r3, [r7, #14]
    unsigned char i;

    while (len--)
 8000f46:	e025      	b.n	8000f94 <crc16+0x60>
    {
        crc ^= *data++ << 8;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f58:	4053      	eors	r3, r2
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	737b      	strb	r3, [r7, #13]
 8000f62:	e014      	b.n	8000f8e <crc16+0x5a>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 8000f64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	da09      	bge.n	8000f80 <crc16+0x4c>
 8000f6c:	89fb      	ldrh	r3, [r7, #14]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000f76:	f083 0301 	eor.w	r3, r3, #1
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	e002      	b.n	8000f86 <crc16+0x52>
 8000f80:	89fb      	ldrh	r3, [r7, #14]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 8000f88:	7b7b      	ldrb	r3, [r7, #13]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	737b      	strb	r3, [r7, #13]
 8000f8e:	7b7b      	ldrb	r3, [r7, #13]
 8000f90:	2b07      	cmp	r3, #7
 8000f92:	d9e7      	bls.n	8000f64 <crc16+0x30>
    while (len--)
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	1e5a      	subs	r2, r3, #1
 8000f98:	807a      	strh	r2, [r7, #2]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1d4      	bne.n	8000f48 <crc16+0x14>
    }
    return crc;
 8000f9e:	89fb      	ldrh	r3, [r7, #14]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
	...

08000fac <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 8000fb0:	201e      	movs	r0, #30
 8000fb2:	f005 fe49 	bl	8006c48 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbc:	481c      	ldr	r0, [pc, #112]	; (8001030 <lcd_init+0x84>)
 8000fbe:	f006 f9c2 	bl	8007346 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc8:	4819      	ldr	r0, [pc, #100]	; (8001030 <lcd_init+0x84>)
 8000fca:	f006 f9bc 	bl	8007346 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd4:	4816      	ldr	r0, [pc, #88]	; (8001030 <lcd_init+0x84>)
 8000fd6:	f006 f9b6 	bl	8007346 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe0:	4813      	ldr	r0, [pc, #76]	; (8001030 <lcd_init+0x84>)
 8000fe2:	f006 f9b0 	bl	8007346 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fec:	4810      	ldr	r0, [pc, #64]	; (8001030 <lcd_init+0x84>)
 8000fee:	f006 f9aa 	bl	8007346 <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <lcd_init+0x84>)
 8000ffa:	f006 f9a4 	bl	8007346 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <lcd_init+0x84>)
 8001006:	f006 f99e 	bl	8007346 <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 800100a:	2128      	movs	r1, #40	; 0x28
 800100c:	2000      	movs	r0, #0
 800100e:	f000 f811 	bl	8001034 <lcd_write>
	lcd_write(0,0x0c);
 8001012:	210c      	movs	r1, #12
 8001014:	2000      	movs	r0, #0
 8001016:	f000 f80d 	bl	8001034 <lcd_write>
	lcd_write(0,0x06);
 800101a:	2106      	movs	r1, #6
 800101c:	2000      	movs	r0, #0
 800101e:	f000 f809 	bl	8001034 <lcd_write>
	lcd_write(0,0x01);
 8001022:	2101      	movs	r1, #1
 8001024:	2000      	movs	r0, #0
 8001026:	f000 f805 	bl	8001034 <lcd_write>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40010c00 	.word	0x40010c00

08001034 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(int8_t type, int8_t data)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(2);
 8001044:	2002      	movs	r0, #2
 8001046:	f005 fdff 	bl	8006c48 <HAL_Delay>
	if(type)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <lcd_write+0x2c>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001058:	485a      	ldr	r0, [pc, #360]	; (80011c4 <lcd_write+0x190>)
 800105a:	f006 f974 	bl	8007346 <HAL_GPIO_WritePin>
 800105e:	e005      	b.n	800106c <lcd_write+0x38>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001066:	4857      	ldr	r0, [pc, #348]	; (80011c4 <lcd_write+0x190>)
 8001068:	f006 f96d 	bl	8007346 <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 800106c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001070:	2b00      	cmp	r3, #0
 8001072:	da06      	bge.n	8001082 <lcd_write+0x4e>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107a:	4852      	ldr	r0, [pc, #328]	; (80011c4 <lcd_write+0x190>)
 800107c:	f006 f963 	bl	8007346 <HAL_GPIO_WritePin>
 8001080:	e005      	b.n	800108e <lcd_write+0x5a>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001088:	484e      	ldr	r0, [pc, #312]	; (80011c4 <lcd_write+0x190>)
 800108a:	f006 f95c 	bl	8007346 <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001094:	2b00      	cmp	r3, #0
 8001096:	d006      	beq.n	80010a6 <lcd_write+0x72>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800109e:	4849      	ldr	r0, [pc, #292]	; (80011c4 <lcd_write+0x190>)
 80010a0:	f006 f951 	bl	8007346 <HAL_GPIO_WritePin>
 80010a4:	e005      	b.n	80010b2 <lcd_write+0x7e>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ac:	4845      	ldr	r0, [pc, #276]	; (80011c4 <lcd_write+0x190>)
 80010ae:	f006 f94a 	bl	8007346 <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 80010b2:	79bb      	ldrb	r3, [r7, #6]
 80010b4:	f003 0320 	and.w	r3, r3, #32
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d006      	beq.n	80010ca <lcd_write+0x96>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c2:	4840      	ldr	r0, [pc, #256]	; (80011c4 <lcd_write+0x190>)
 80010c4:	f006 f93f 	bl	8007346 <HAL_GPIO_WritePin>
 80010c8:	e005      	b.n	80010d6 <lcd_write+0xa2>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d0:	483c      	ldr	r0, [pc, #240]	; (80011c4 <lcd_write+0x190>)
 80010d2:	f006 f938 	bl	8007346 <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d006      	beq.n	80010ee <lcd_write+0xba>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 80010e0:	2201      	movs	r2, #1
 80010e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e6:	4837      	ldr	r0, [pc, #220]	; (80011c4 <lcd_write+0x190>)
 80010e8:	f006 f92d 	bl	8007346 <HAL_GPIO_WritePin>
 80010ec:	e005      	b.n	80010fa <lcd_write+0xc6>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f4:	4833      	ldr	r0, [pc, #204]	; (80011c4 <lcd_write+0x190>)
 80010f6:	f006 f926 	bl	8007346 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 80010fa:	2201      	movs	r2, #1
 80010fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001100:	4830      	ldr	r0, [pc, #192]	; (80011c4 <lcd_write+0x190>)
 8001102:	f006 f920 	bl	8007346 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800110c:	482d      	ldr	r0, [pc, #180]	; (80011c4 <lcd_write+0x190>)
 800110e:	f006 f91a 	bl	8007346 <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 8001112:	79bb      	ldrb	r3, [r7, #6]
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <lcd_write+0xf6>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001122:	4828      	ldr	r0, [pc, #160]	; (80011c4 <lcd_write+0x190>)
 8001124:	f006 f90f 	bl	8007346 <HAL_GPIO_WritePin>
 8001128:	e005      	b.n	8001136 <lcd_write+0x102>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001130:	4824      	ldr	r0, [pc, #144]	; (80011c4 <lcd_write+0x190>)
 8001132:	f006 f908 	bl	8007346 <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	d006      	beq.n	800114e <lcd_write+0x11a>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8001140:	2201      	movs	r2, #1
 8001142:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001146:	481f      	ldr	r0, [pc, #124]	; (80011c4 <lcd_write+0x190>)
 8001148:	f006 f8fd 	bl	8007346 <HAL_GPIO_WritePin>
 800114c:	e005      	b.n	800115a <lcd_write+0x126>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001154:	481b      	ldr	r0, [pc, #108]	; (80011c4 <lcd_write+0x190>)
 8001156:	f006 f8f6 	bl	8007346 <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <lcd_write+0x13e>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116a:	4816      	ldr	r0, [pc, #88]	; (80011c4 <lcd_write+0x190>)
 800116c:	f006 f8eb 	bl	8007346 <HAL_GPIO_WritePin>
 8001170:	e005      	b.n	800117e <lcd_write+0x14a>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001178:	4812      	ldr	r0, [pc, #72]	; (80011c4 <lcd_write+0x190>)
 800117a:	f006 f8e4 	bl	8007346 <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 800117e:	79bb      	ldrb	r3, [r7, #6]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <lcd_write+0x162>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118e:	480d      	ldr	r0, [pc, #52]	; (80011c4 <lcd_write+0x190>)
 8001190:	f006 f8d9 	bl	8007346 <HAL_GPIO_WritePin>
 8001194:	e005      	b.n	80011a2 <lcd_write+0x16e>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <lcd_write+0x190>)
 800119e:	f006 f8d2 	bl	8007346 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <lcd_write+0x190>)
 80011aa:	f006 f8cc 	bl	8007346 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <lcd_write+0x190>)
 80011b6:	f006 f8c6 	bl	8007346 <HAL_GPIO_WritePin>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40010c00 	.word	0x40010c00

080011c8 <lcd_puts>:

void lcd_puts(int8_t x, int8_t y, int8_t *string)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	603a      	str	r2, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	460b      	mov	r3, r1
 80011d6:	71bb      	strb	r3, [r7, #6]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d83a      	bhi.n	8001256 <lcd_puts+0x8e>
 80011e0:	a201      	add	r2, pc, #4	; (adr r2, 80011e8 <lcd_puts+0x20>)
 80011e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e6:	bf00      	nop
 80011e8:	080011f9 	.word	0x080011f9
 80011ec:	0800120b 	.word	0x0800120b
 80011f0:	0800121d 	.word	0x0800121d
 80011f4:	0800122f 	.word	0x0800122f
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	3b80      	subs	r3, #128	; 0x80
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	4619      	mov	r1, r3
 8001202:	2000      	movs	r0, #0
 8001204:	f7ff ff16 	bl	8001034 <lcd_write>
			break;
 8001208:	e01a      	b.n	8001240 <lcd_puts+0x78>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	3b40      	subs	r3, #64	; 0x40
 800120e:	b2db      	uxtb	r3, r3
 8001210:	b25b      	sxtb	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff ff0d 	bl	8001034 <lcd_write>
			break;
 800121a:	e011      	b.n	8001240 <lcd_puts+0x78>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	3b70      	subs	r3, #112	; 0x70
 8001220:	b2db      	uxtb	r3, r3
 8001222:	b25b      	sxtb	r3, r3
 8001224:	4619      	mov	r1, r3
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff ff04 	bl	8001034 <lcd_write>
			break;
 800122c:	e008      	b.n	8001240 <lcd_puts+0x78>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 800122e:	79bb      	ldrb	r3, [r7, #6]
 8001230:	3b30      	subs	r3, #48	; 0x30
 8001232:	b2db      	uxtb	r3, r3
 8001234:	b25b      	sxtb	r3, r3
 8001236:	4619      	mov	r1, r3
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fefb 	bl	8001034 <lcd_write>
			break;
 800123e:	bf00      	nop
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 8001240:	e009      	b.n	8001256 <lcd_puts+0x8e>
	{
		lcd_write(1,*string);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	f993 3000 	ldrsb.w	r3, [r3]
 8001248:	4619      	mov	r1, r3
 800124a:	2001      	movs	r0, #1
 800124c:	f7ff fef2 	bl	8001034 <lcd_write>
		string++;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	603b      	str	r3, [r7, #0]
	while(*string)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f993 3000 	ldrsb.w	r3, [r3]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f0      	bne.n	8001242 <lcd_puts+0x7a>
	}
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop

0800126c <lcd_clear>:
void lcd_clear(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 8001270:	2101      	movs	r1, #1
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff fede 	bl	8001034 <lcd_write>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <chosen_algorithm>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int8_t* chosen_algorithm(int id) {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	switch (id) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d00d      	beq.n	80012a6 <chosen_algorithm+0x2a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b02      	cmp	r3, #2
 800128e:	dc0c      	bgt.n	80012aa <chosen_algorithm+0x2e>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <chosen_algorithm+0x22>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d002      	beq.n	80012a2 <chosen_algorithm+0x26>
 800129c:	e005      	b.n	80012aa <chosen_algorithm+0x2e>
		case 0:
			return "sha256";
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <chosen_algorithm+0x3c>)
 80012a0:	e004      	b.n	80012ac <chosen_algorithm+0x30>
		case 1:
			return "md5";
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <chosen_algorithm+0x40>)
 80012a4:	e002      	b.n	80012ac <chosen_algorithm+0x30>
		case 2:
			return "crc16";
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <chosen_algorithm+0x44>)
 80012a8:	e000      	b.n	80012ac <chosen_algorithm+0x30>
		default:
			return "Invalid algorithm";
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <chosen_algorithm+0x48>)
			break;
	}
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	0800d1f0 	.word	0x0800d1f0
 80012bc:	0800d1f8 	.word	0x0800d1f8
 80012c0:	0800d1fc 	.word	0x0800d1fc
 80012c4:	0800d204 	.word	0x0800d204

080012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ce:	f005 fc59 	bl	8006b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d2:	f000 f8ad 	bl	8001430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d6:	f000 f911 	bl	80014fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80012da:	f000 f8e5 	bl	80014a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  int8_t *output, data;
  int alg_id = 0, not_asked_for_input = 1;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	2301      	movs	r3, #1
 80012e4:	60bb      	str	r3, [r7, #8]
  lcd_init();
 80012e6:	f7ff fe61 	bl	8000fac <lcd_init>

    /* USER CODE BEGIN 3 */
	  /* scrolling through algorithms
	  			ids: 0 - sha, 1 - md, 2 - crc
	  	  */
	  if (state == 0) {
 80012ea:	4b4c      	ldr	r3, [pc, #304]	; (800141c <main+0x154>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d12d      	bne.n	800134e <main+0x86>
		  if (not_asked_for_input == 1) {
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d106      	bne.n	8001306 <main+0x3e>
			  lcd_puts(0, 0, "Input data");
 80012f8:	4a49      	ldr	r2, [pc, #292]	; (8001420 <main+0x158>)
 80012fa:	2100      	movs	r1, #0
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff ff63 	bl	80011c8 <lcd_puts>
			  not_asked_for_input = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
		  }

		  HAL_UART_Receive(&huart1, (int8_t*)data, 10, 5000);
 8001306:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800130a:	4619      	mov	r1, r3
 800130c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001310:	220a      	movs	r2, #10
 8001312:	4844      	ldr	r0, [pc, #272]	; (8001424 <main+0x15c>)
 8001314:	f006 fc90 	bl	8007c38 <HAL_UART_Receive>

		  if (strlen(data) != 2) {
 8001318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800131c:	4618      	mov	r0, r3
 800131e:	f7fe ff17 	bl	8000150 <strlen>
 8001322:	4603      	mov	r3, r0
 8001324:	2b02      	cmp	r3, #2
 8001326:	d0e0      	beq.n	80012ea <main+0x22>
			  lcd_clear();
 8001328:	f7ff ffa0 	bl	800126c <lcd_clear>
			  lcd_puts(0, 0, data);
 800132c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001330:	461a      	mov	r2, r3
 8001332:	2100      	movs	r1, #0
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff ff47 	bl	80011c8 <lcd_puts>
			  HAL_Delay(1000);
 800133a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800133e:	f005 fc83 	bl	8006c48 <HAL_Delay>
			  lcd_clear();
 8001342:	f7ff ff93 	bl	800126c <lcd_clear>
			  state = 1;
 8001346:	4b35      	ldr	r3, [pc, #212]	; (800141c <main+0x154>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e7cd      	b.n	80012ea <main+0x22>
		  }
	  } else if (state == 1) {
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <main+0x154>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d152      	bne.n	80013fc <main+0x134>
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 8001356:	2108      	movs	r1, #8
 8001358:	4833      	ldr	r0, [pc, #204]	; (8001428 <main+0x160>)
 800135a:	f005 ffdd 	bl	8007318 <HAL_GPIO_ReadPin>
 800135e:	4603      	mov	r3, r0
 8001360:	2b01      	cmp	r3, #1
 8001362:	d10b      	bne.n	800137c <main+0xb4>
			  if (alg_id < 2) {
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2b01      	cmp	r3, #1
 8001368:	dc03      	bgt.n	8001372 <main+0xaa>
				  alg_id++;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3301      	adds	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	e001      	b.n	8001376 <main+0xae>
			  } else {
				  alg_id = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
			  }
			  lcd_clear();
 8001376:	f7ff ff79 	bl	800126c <lcd_clear>
 800137a:	e02e      	b.n	80013da <main+0x112>
		  } else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1) {
 800137c:	2104      	movs	r1, #4
 800137e:	482a      	ldr	r0, [pc, #168]	; (8001428 <main+0x160>)
 8001380:	f005 ffca 	bl	8007318 <HAL_GPIO_ReadPin>
 8001384:	4603      	mov	r3, r0
 8001386:	2b01      	cmp	r3, #1
 8001388:	d10b      	bne.n	80013a2 <main+0xda>
			  if (alg_id > 0) {
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	dd03      	ble.n	8001398 <main+0xd0>
				  alg_id--;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3b01      	subs	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	e001      	b.n	800139c <main+0xd4>
			  } else {
				alg_id = 2;
 8001398:	2302      	movs	r3, #2
 800139a:	60fb      	str	r3, [r7, #12]
			  }
			  lcd_clear();
 800139c:	f7ff ff66 	bl	800126c <lcd_clear>
 80013a0:	e01b      	b.n	80013da <main+0x112>
		  } else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) {
 80013a2:	2102      	movs	r1, #2
 80013a4:	4820      	ldr	r0, [pc, #128]	; (8001428 <main+0x160>)
 80013a6:	f005 ffb7 	bl	8007318 <HAL_GPIO_ReadPin>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d114      	bne.n	80013da <main+0x112>
			  lcd_clear();
 80013b0:	f7ff ff5c 	bl	800126c <lcd_clear>
			  output = chosen_algorithm(alg_id);
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f7ff ff61 	bl	800127c <chosen_algorithm>
 80013ba:	6078      	str	r0, [r7, #4]
			  lcd_puts(0, 0, (int8_t*) output);
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	2100      	movs	r1, #0
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff ff01 	bl	80011c8 <lcd_puts>
			  lcd_clear();
 80013c6:	f7ff ff51 	bl	800126c <lcd_clear>
			  do_algorithm(data, alg_id);
 80013ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013ce:	68f9      	ldr	r1, [r7, #12]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fc01 	bl	8000bd8 <do_algorithm>
			  not_asked_for_input = 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
		  }

		  if (state != 0) {
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <main+0x154>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d083      	beq.n	80012ea <main+0x22>
			  output = chosen_algorithm(alg_id);
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f7ff ff4a 	bl	800127c <chosen_algorithm>
 80013e8:	6078      	str	r0, [r7, #4]
			  lcd_puts(0, 0, (int8_t*) output);
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	2100      	movs	r1, #0
 80013ee:	2000      	movs	r0, #0
 80013f0:	f7ff feea 	bl	80011c8 <lcd_puts>
			  HAL_Delay(200);
 80013f4:	20c8      	movs	r0, #200	; 0xc8
 80013f6:	f005 fc27 	bl	8006c48 <HAL_Delay>
 80013fa:	e776      	b.n	80012ea <main+0x22>
		  }
	  } else if (state != 2) {
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <main+0x154>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b02      	cmp	r3, #2
 8001402:	f43f af72 	beq.w	80012ea <main+0x22>
		  lcd_clear();
 8001406:	f7ff ff31 	bl	800126c <lcd_clear>
		  lcd_init();
 800140a:	f7ff fdcf 	bl	8000fac <lcd_init>
		  lcd_puts(0, 0, "Unexpected state");
 800140e:	4a07      	ldr	r2, [pc, #28]	; (800142c <main+0x164>)
 8001410:	2100      	movs	r1, #0
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff fed8 	bl	80011c8 <lcd_puts>
	  if (state == 0) {
 8001418:	e767      	b.n	80012ea <main+0x22>
 800141a:	bf00      	nop
 800141c:	200004c4 	.word	0x200004c4
 8001420:	0800d218 	.word	0x0800d218
 8001424:	2000047c 	.word	0x2000047c
 8001428:	40010800 	.word	0x40010800
 800142c:	0800d224 	.word	0x0800d224

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b090      	sub	sp, #64	; 0x40
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	f107 0318 	add.w	r3, r7, #24
 800143a:	2228      	movs	r2, #40	; 0x28
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f007 fa20 	bl	8008884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001456:	2301      	movs	r3, #1
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145a:	2310      	movs	r3, #16
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800145e:	2300      	movs	r3, #0
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f107 0318 	add.w	r3, r7, #24
 8001466:	4618      	mov	r0, r3
 8001468:	f005 ff86 	bl	8007378 <HAL_RCC_OscConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001472:	f000 f883 	bl	800157c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
 8001478:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f006 f9f4 	bl	800787c <HAL_RCC_ClockConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800149a:	f000 f86f 	bl	800157c <Error_Handler>
  }
}
 800149e:	bf00      	nop
 80014a0:	3740      	adds	r7, #64	; 0x40
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <MX_USART1_UART_Init+0x50>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014e0:	f006 fb5a 	bl	8007b98 <HAL_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ea:	f000 f847 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000047c 	.word	0x2000047c
 80014f8:	40013800 	.word	0x40013800

080014fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_GPIO_Init+0x78>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a17      	ldr	r2, [pc, #92]	; (8001574 <MX_GPIO_Init+0x78>)
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <MX_GPIO_Init+0x78>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_GPIO_Init+0x78>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a11      	ldr	r2, [pc, #68]	; (8001574 <MX_GPIO_Init+0x78>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_GPIO_Init+0x78>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001546:	480c      	ldr	r0, [pc, #48]	; (8001578 <MX_GPIO_Init+0x7c>)
 8001548:	f005 fefd 	bl	8007346 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800154c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001550:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2302      	movs	r3, #2
 800155c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	4619      	mov	r1, r3
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_GPIO_Init+0x7c>)
 8001566:	f005 fd53 	bl	8007010 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000
 8001578:	40010c00 	.word	0x40010c00

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001584:	e7fe      	b.n	8001584 <Error_Handler+0x8>

08001586 <rotateLeft>:
#define I(X, Y, Z) (Y ^ (X | ~Z))

/*
 * Rotates a 32-bit word left by n bits
 */
uint32_t rotateLeft(uint32_t x, uint32_t n){
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	6039      	str	r1, [r7, #0]
    return (x << n) | (x >> (32 - n));
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f1c3 0320 	rsb	r3, r3, #32
 8001598:	fa62 f303 	ror.w	r3, r2, r3
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
	...

080015a8 <md5Init>:


/*
 * Initialize a context
 */
void md5Init(MD5Context *ctx){
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
    ctx->size = (uint64_t)0;
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9c1 2300 	strd	r2, r3, [r1]

    ctx->buffer[0] = (uint32_t)A;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <md5Init+0x38>)
 80015c2:	609a      	str	r2, [r3, #8]
    ctx->buffer[1] = (uint32_t)B;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <md5Init+0x3c>)
 80015c8:	60da      	str	r2, [r3, #12]
    ctx->buffer[2] = (uint32_t)C;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <md5Init+0x40>)
 80015ce:	611a      	str	r2, [r3, #16]
    ctx->buffer[3] = (uint32_t)D;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a06      	ldr	r2, [pc, #24]	; (80015ec <md5Init+0x44>)
 80015d4:	615a      	str	r2, [r3, #20]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	67452301 	.word	0x67452301
 80015e4:	efcdab89 	.word	0xefcdab89
 80015e8:	98badcfe 	.word	0x98badcfe
 80015ec:	10325476 	.word	0x10325476

080015f0 <md5Update>:
 * Add some amount of input to the context
 *
 * If the input fills out a block of 512 bits, apply the algorithm (md5Step)
 * and save the result in the buffer. Also updates the overall size.
 */
void md5Update(MD5Context *ctx, uint8_t *input_buffer, size_t input_len){
 80015f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015f4:	b098      	sub	sp, #96	; 0x60
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
    uint32_t input[16];
    unsigned int offset = ctx->size % 64;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	4613      	mov	r3, r2
 8001606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800160a:	65fb      	str	r3, [r7, #92]	; 0x5c
    ctx->size += (uint64_t)input_len;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	2000      	movs	r0, #0
 8001616:	460c      	mov	r4, r1
 8001618:	4605      	mov	r5, r0
 800161a:	eb12 0804 	adds.w	r8, r2, r4
 800161e:	eb43 0905 	adc.w	r9, r3, r5
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	e9c3 8900 	strd	r8, r9, [r3]

    // Copy each byte in input_buffer into the next space in our context input
    for(unsigned int i = 0; i < input_len; ++i){
 8001628:	2300      	movs	r3, #0
 800162a:	65bb      	str	r3, [r7, #88]	; 0x58
 800162c:	e048      	b.n	80016c0 <md5Update+0xd0>
        ctx->input[offset++] = (uint8_t)*(input_buffer + i);
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001632:	441a      	add	r2, r3
 8001634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001636:	1c59      	adds	r1, r3, #1
 8001638:	65f9      	str	r1, [r7, #92]	; 0x5c
 800163a:	7811      	ldrb	r1, [r2, #0]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	460a      	mov	r2, r1
 8001642:	761a      	strb	r2, [r3, #24]

        // If we've filled our context input, copy it into our local array input
        // then reset the offset to 0 and fill in a new buffer.
        // Every time we fill out a chunk, we run it through the algorithm
        // to enable some back and forth between cpu and i/o
        if(offset % 64 == 0){
 8001644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001646:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800164a:	2b00      	cmp	r3, #0
 800164c:	d135      	bne.n	80016ba <md5Update+0xca>
            for(unsigned int j = 0; j < 16; ++j){
 800164e:	2300      	movs	r3, #0
 8001650:	657b      	str	r3, [r7, #84]	; 0x54
 8001652:	e025      	b.n	80016a0 <md5Update+0xb0>
                // Convert to little-endian
                // The local variable `input` our 512-bit chunk separated into 32-bit words
                // we can use in calculations
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8001654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	3303      	adds	r3, #3
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4413      	add	r3, r2
 800165e:	7e1b      	ldrb	r3, [r3, #24]
 8001660:	061a      	lsls	r2, r3, #24
                           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8001662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	68f9      	ldr	r1, [r7, #12]
 800166a:	440b      	add	r3, r1
 800166c:	7e1b      	ldrb	r3, [r3, #24]
 800166e:	041b      	lsls	r3, r3, #16
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8001670:	431a      	orrs	r2, r3
                           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8001672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	3301      	adds	r3, #1
 8001678:	68f9      	ldr	r1, [r7, #12]
 800167a:	440b      	add	r3, r1
 800167c:	7e1b      	ldrb	r3, [r3, #24]
 800167e:	021b      	lsls	r3, r3, #8
                           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8001680:	4313      	orrs	r3, r2
                           (uint32_t)(ctx->input[(j * 4)]);
 8001682:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001684:	0092      	lsls	r2, r2, #2
 8001686:	68f9      	ldr	r1, [r7, #12]
 8001688:	440a      	add	r2, r1
 800168a:	7e12      	ldrb	r2, [r2, #24]
                           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 800168c:	431a      	orrs	r2, r3
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 800168e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	3360      	adds	r3, #96	; 0x60
 8001694:	443b      	add	r3, r7
 8001696:	f843 2c4c 	str.w	r2, [r3, #-76]
            for(unsigned int j = 0; j < 16; ++j){
 800169a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800169c:	3301      	adds	r3, #1
 800169e:	657b      	str	r3, [r7, #84]	; 0x54
 80016a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a2:	2b0f      	cmp	r3, #15
 80016a4:	d9d6      	bls.n	8001654 <md5Update+0x64>
            }
            md5Step(ctx->buffer, input);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3308      	adds	r3, #8
 80016aa:	f107 0214 	add.w	r2, r7, #20
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 f8d1 	bl	8001858 <md5Step>
            offset = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(unsigned int i = 0; i < input_len; ++i){
 80016ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016bc:	3301      	adds	r3, #1
 80016be:	65bb      	str	r3, [r7, #88]	; 0x58
 80016c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d3b2      	bcc.n	800162e <md5Update+0x3e>
        }
    }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3760      	adds	r7, #96	; 0x60
 80016ce:	46bd      	mov	sp, r7
 80016d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080016d4 <md5Finalize>:

/*
 * Pad the current input to get to 448 bytes, append the size in bits to the very end,
 * and save the result of the final iteration into digest.
 */
void md5Finalize(MD5Context *ctx){
 80016d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016d8:	b096      	sub	sp, #88	; 0x58
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
    uint32_t input[16];
    unsigned int offset = ctx->size % 64;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	4613      	mov	r3, r2
 80016e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    unsigned int padding_length = offset < 56 ? 56 - offset : (56 + 64) - offset;
 80016ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016ee:	2b37      	cmp	r3, #55	; 0x37
 80016f0:	d803      	bhi.n	80016fa <md5Finalize+0x26>
 80016f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016f4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80016f8:	e002      	b.n	8001700 <md5Finalize+0x2c>
 80016fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016fc:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8001700:	64bb      	str	r3, [r7, #72]	; 0x48

    // Fill in the padding and undo the changes to size that resulted from the update
    md5Update(ctx, PADDING, padding_length);
 8001702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001704:	4953      	ldr	r1, [pc, #332]	; (8001854 <md5Finalize+0x180>)
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ff72 	bl	80015f0 <md5Update>
    ctx->size -= (uint64_t)padding_length;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001714:	2000      	movs	r0, #0
 8001716:	460c      	mov	r4, r1
 8001718:	4605      	mov	r5, r0
 800171a:	ebb2 0804 	subs.w	r8, r2, r4
 800171e:	eb63 0905 	sbc.w	r9, r3, r5
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	e9c3 8900 	strd	r8, r9, [r3]

    // Do a final update (internal to this function)
    // Last two 32-bit words are the two halves of the size (converted from bytes to bits)
    for(unsigned int j = 0; j < 14; ++j){
 8001728:	2300      	movs	r3, #0
 800172a:	657b      	str	r3, [r7, #84]	; 0x54
 800172c:	e025      	b.n	800177a <md5Finalize+0xa6>
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 800172e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	3303      	adds	r3, #3
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	4413      	add	r3, r2
 8001738:	7e1b      	ldrb	r3, [r3, #24]
 800173a:	061a      	lsls	r2, r3, #24
                   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 800173c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	440b      	add	r3, r1
 8001746:	7e1b      	ldrb	r3, [r3, #24]
 8001748:	041b      	lsls	r3, r3, #16
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 800174a:	431a      	orrs	r2, r3
                   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 800174c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	3301      	adds	r3, #1
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	440b      	add	r3, r1
 8001756:	7e1b      	ldrb	r3, [r3, #24]
 8001758:	021b      	lsls	r3, r3, #8
                   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 800175a:	4313      	orrs	r3, r2
                   (uint32_t)(ctx->input[(j * 4)]);
 800175c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800175e:	0092      	lsls	r2, r2, #2
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	440a      	add	r2, r1
 8001764:	7e12      	ldrb	r2, [r2, #24]
                   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8001766:	431a      	orrs	r2, r3
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8001768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	3358      	adds	r3, #88	; 0x58
 800176e:	443b      	add	r3, r7
 8001770:	f843 2c50 	str.w	r2, [r3, #-80]
    for(unsigned int j = 0; j < 14; ++j){
 8001774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001776:	3301      	adds	r3, #1
 8001778:	657b      	str	r3, [r7, #84]	; 0x54
 800177a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800177c:	2b0d      	cmp	r3, #13
 800177e:	d9d6      	bls.n	800172e <md5Finalize+0x5a>
    }
    input[14] = (uint32_t)(ctx->size * 8);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	4613      	mov	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	643b      	str	r3, [r7, #64]	; 0x40
    input[15] = (uint32_t)((ctx->size * 8) >> 32);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	00cb      	lsls	r3, r1, #3
 800179c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80017a0:	00c2      	lsls	r2, r0, #3
 80017a2:	f04f 0000 	mov.w	r0, #0
 80017a6:	f04f 0100 	mov.w	r1, #0
 80017aa:	0018      	movs	r0, r3
 80017ac:	2100      	movs	r1, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	647b      	str	r3, [r7, #68]	; 0x44

    md5Step(ctx->buffer, input);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3308      	adds	r3, #8
 80017b6:	f107 0208 	add.w	r2, r7, #8
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f84b 	bl	8001858 <md5Step>

    // Move the result into digest (convert from little-endian)
    for(unsigned int i = 0; i < 4; ++i){
 80017c2:	2300      	movs	r3, #0
 80017c4:	653b      	str	r3, [r7, #80]	; 0x50
 80017c6:	e03c      	b.n	8001842 <md5Finalize+0x16e>
        ctx->digest[(i * 4) + 0] = (uint8_t)((ctx->buffer[i] & 0x000000FF));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017cc:	3202      	adds	r2, #2
 80017ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	b2d1      	uxtb	r1, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	460a      	mov	r2, r1
 80017de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        ctx->digest[(i * 4) + 1] = (uint8_t)((ctx->buffer[i] & 0x0000FF00) >>  8);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017e6:	3202      	adds	r2, #2
 80017e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ec:	0a1a      	lsrs	r2, r3, #8
 80017ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	3301      	adds	r3, #1
 80017f4:	b2d1      	uxtb	r1, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	460a      	mov	r2, r1
 80017fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        ctx->digest[(i * 4) + 2] = (uint8_t)((ctx->buffer[i] & 0x00FF0000) >> 16);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001804:	3202      	adds	r2, #2
 8001806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180a:	0c1a      	lsrs	r2, r3, #16
 800180c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	3302      	adds	r3, #2
 8001812:	b2d1      	uxtb	r1, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	460a      	mov	r2, r1
 800181a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        ctx->digest[(i * 4) + 3] = (uint8_t)((ctx->buffer[i] & 0xFF000000) >> 24);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001822:	3202      	adds	r2, #2
 8001824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001828:	0e1a      	lsrs	r2, r3, #24
 800182a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	3303      	adds	r3, #3
 8001830:	b2d1      	uxtb	r1, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	460a      	mov	r2, r1
 8001838:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    for(unsigned int i = 0; i < 4; ++i){
 800183c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800183e:	3301      	adds	r3, #1
 8001840:	653b      	str	r3, [r7, #80]	; 0x50
 8001842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001844:	2b03      	cmp	r3, #3
 8001846:	d9bf      	bls.n	80017c8 <md5Finalize+0xf4>
    }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3758      	adds	r7, #88	; 0x58
 800184e:	46bd      	mov	sp, r7
 8001850:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001854:	20000200 	.word	0x20000200

08001858 <md5Step>:

/*
 * Step on 512 bits of input with the main MD5 algorithm.
 */
void md5Step(uint32_t *buffer, uint32_t *input){
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
    uint32_t AA = buffer[0];
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t BB = buffer[1];
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	623b      	str	r3, [r7, #32]
    uint32_t CC = buffer[2];
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	61fb      	str	r3, [r7, #28]
    uint32_t DD = buffer[3];
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	61bb      	str	r3, [r7, #24]

    uint32_t E;

    unsigned int j;

    for(unsigned int i = 0; i < 64; ++i){
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	e06b      	b.n	8001958 <md5Step+0x100>
        switch(i / 16){
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	2b02      	cmp	r3, #2
 8001886:	d024      	beq.n	80018d2 <md5Step+0x7a>
 8001888:	2b02      	cmp	r3, #2
 800188a:	d831      	bhi.n	80018f0 <md5Step+0x98>
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <md5Step+0x3e>
 8001890:	2b01      	cmp	r3, #1
 8001892:	d00c      	beq.n	80018ae <md5Step+0x56>
 8001894:	e02c      	b.n	80018f0 <md5Step+0x98>
            case 0:
                E = F(BB, CC, DD);
 8001896:	6a3a      	ldr	r2, [r7, #32]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	401a      	ands	r2, r3
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	43d9      	mvns	r1, r3
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	400b      	ands	r3, r1
 80018a4:	4313      	orrs	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]
                j = i;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	613b      	str	r3, [r7, #16]
                break;
 80018ac:	e02f      	b.n	800190e <md5Step+0xb6>
            case 1:
                E = G(BB, CC, DD);
 80018ae:	6a3a      	ldr	r2, [r7, #32]
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	401a      	ands	r2, r3
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	400b      	ands	r3, r1
 80018bc:	4313      	orrs	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
                j = ((i * 5) + 1) % 16;
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	3301      	adds	r3, #1
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	613b      	str	r3, [r7, #16]
                break;
 80018d0:	e01d      	b.n	800190e <md5Step+0xb6>
            case 2:
                E = H(BB, CC, DD);
 80018d2:	6a3a      	ldr	r2, [r7, #32]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	4053      	eors	r3, r2
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4053      	eors	r3, r2
 80018dc:	617b      	str	r3, [r7, #20]
                j = ((i * 3) + 5) % 16;
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	3305      	adds	r3, #5
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	613b      	str	r3, [r7, #16]
                break;
 80018ee:	e00e      	b.n	800190e <md5Step+0xb6>
            default:
                E = I(BB, CC, DD);
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	43da      	mvns	r2, r3
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	4053      	eors	r3, r2
 80018fc:	617b      	str	r3, [r7, #20]
                j = (i * 7) % 16;
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	4613      	mov	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	613b      	str	r3, [r7, #16]
                break;
 800190c:	bf00      	nop
        }

        uint32_t temp = DD;
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	60bb      	str	r3, [r7, #8]
        DD = CC;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	61bb      	str	r3, [r7, #24]
        CC = BB;
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	61fb      	str	r3, [r7, #28]
        BB = BB + rotateLeft(AA + E + K[i] + input[j], S[i]);
 800191a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	441a      	add	r2, r3
 8001920:	4920      	ldr	r1, [pc, #128]	; (80019a4 <md5Step+0x14c>)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001928:	441a      	add	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	6839      	ldr	r1, [r7, #0]
 8001930:	440b      	add	r3, r1
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	441a      	add	r2, r3
 8001936:	491c      	ldr	r1, [pc, #112]	; (80019a8 <md5Step+0x150>)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800193e:	4619      	mov	r1, r3
 8001940:	4610      	mov	r0, r2
 8001942:	f7ff fe20 	bl	8001586 <rotateLeft>
 8001946:	4602      	mov	r2, r0
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	4413      	add	r3, r2
 800194c:	623b      	str	r3, [r7, #32]
        AA = temp;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    for(unsigned int i = 0; i < 64; ++i){
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3301      	adds	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b3f      	cmp	r3, #63	; 0x3f
 800195c:	d990      	bls.n	8001880 <md5Step+0x28>
    }

    buffer[0] += AA;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	441a      	add	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	601a      	str	r2, [r3, #0]
    buffer[1] += BB;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3304      	adds	r3, #4
 800196e:	6819      	ldr	r1, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3304      	adds	r3, #4
 8001974:	6a3a      	ldr	r2, [r7, #32]
 8001976:	440a      	add	r2, r1
 8001978:	601a      	str	r2, [r3, #0]
    buffer[2] += CC;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3308      	adds	r3, #8
 800197e:	6819      	ldr	r1, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3308      	adds	r3, #8
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	440a      	add	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
    buffer[3] += DD;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	330c      	adds	r3, #12
 800198e:	6819      	ldr	r1, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	330c      	adds	r3, #12
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	440a      	add	r2, r1
 8001998:	601a      	str	r2, [r3, #0]
}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000100 	.word	0x20000100
 80019a8:	20000000 	.word	0x20000000

080019ac <md5String>:

/*
 * Functions that run the algorithm on the provided input and put the digest into result.
 * result should be able to store 16 bytes.
 */
void md5String(char *input, uint8_t *result){
 80019ac:	b5b0      	push	{r4, r5, r7, lr}
 80019ae:	b09c      	sub	sp, #112	; 0x70
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
    MD5Context ctx;
    md5Init(&ctx);
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fdf4 	bl	80015a8 <md5Init>
    md5Update(&ctx, (uint8_t *)input, strlen(input));
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7fe fbc5 	bl	8000150 <strlen>
 80019c6:	4602      	mov	r2, r0
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fe0e 	bl	80015f0 <md5Update>
    md5Finalize(&ctx);
 80019d4:	f107 0308 	add.w	r3, r7, #8
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fe7b 	bl	80016d4 <md5Finalize>

    memcpy(result, ctx.digest, 16);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	461d      	mov	r5, r3
 80019e2:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80019e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e8:	6028      	str	r0, [r5, #0]
 80019ea:	6069      	str	r1, [r5, #4]
 80019ec:	60aa      	str	r2, [r5, #8]
 80019ee:	60eb      	str	r3, [r5, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3770      	adds	r7, #112	; 0x70
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdb0      	pop	{r4, r5, r7, pc}

080019f8 <sha256_init>:
    (b)[(i) + 2] = (uint8) ( (n) >>  8 );       \
    (b)[(i) + 3] = (uint8) ( (n)       );       \
}

void sha256_init( sha256_context *ctx )
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x6A09E667;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <sha256_init+0x50>)
 8001a10:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xBB67AE85;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <sha256_init+0x54>)
 8001a16:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x3C6EF372;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <sha256_init+0x58>)
 8001a1c:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0xA54FF53A;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <sha256_init+0x5c>)
 8001a22:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0x510E527F;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <sha256_init+0x60>)
 8001a28:	619a      	str	r2, [r3, #24]
    ctx->state[5] = 0x9B05688C;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sha256_init+0x64>)
 8001a2e:	61da      	str	r2, [r3, #28]
    ctx->state[6] = 0x1F83D9AB;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <sha256_init+0x68>)
 8001a34:	621a      	str	r2, [r3, #32]
    ctx->state[7] = 0x5BE0CD19;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <sha256_init+0x6c>)
 8001a3a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	6a09e667 	.word	0x6a09e667
 8001a4c:	bb67ae85 	.word	0xbb67ae85
 8001a50:	3c6ef372 	.word	0x3c6ef372
 8001a54:	a54ff53a 	.word	0xa54ff53a
 8001a58:	510e527f 	.word	0x510e527f
 8001a5c:	9b05688c 	.word	0x9b05688c
 8001a60:	1f83d9ab 	.word	0x1f83d9ab
 8001a64:	5be0cd19 	.word	0x5be0cd19

08001a68 <sha256_process>:

void sha256_process( sha256_context *ctx, uint8 data[64] )
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b0cd      	sub	sp, #308	; 0x134
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001a72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a76:	6018      	str	r0, [r3, #0]
 8001a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001a7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a80:	6019      	str	r1, [r3, #0]
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 8001a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	061a      	lsls	r2, r3, #24
 8001a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	041b      	lsls	r3, r3, #16
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001aa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3302      	adds	r3, #2
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001ab8:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	3203      	adds	r2, #3
 8001ac0:	7812      	ldrb	r2, [r2, #0]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ac8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001acc:	601a      	str	r2, [r3, #0]
    GET_UINT32( W[1],  data,  4 );
 8001ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	061a      	lsls	r2, r3, #24
 8001ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ae2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3305      	adds	r3, #5
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	041b      	lsls	r3, r3, #16
 8001aee:	431a      	orrs	r2, r3
 8001af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001af4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3306      	adds	r3, #6
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	4313      	orrs	r3, r2
 8001b02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001b06:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	3207      	adds	r2, #7
 8001b0e:	7812      	ldrb	r2, [r2, #0]
 8001b10:	431a      	orrs	r2, r3
 8001b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b1a:	605a      	str	r2, [r3, #4]
    GET_UINT32( W[2],  data,  8 );
 8001b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	3308      	adds	r3, #8
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	061a      	lsls	r2, r3, #24
 8001b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3309      	adds	r3, #9
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	041b      	lsls	r3, r3, #16
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	330a      	adds	r3, #10
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001b54:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	320b      	adds	r2, #11
 8001b5c:	7812      	ldrb	r2, [r2, #0]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b64:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b68:	609a      	str	r2, [r3, #8]
    GET_UINT32( W[3],  data, 12 );
 8001b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	330c      	adds	r3, #12
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	061a      	lsls	r2, r3, #24
 8001b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	330d      	adds	r3, #13
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	041b      	lsls	r3, r3, #16
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	330e      	adds	r3, #14
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001ba2:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	320f      	adds	r2, #15
 8001baa:	7812      	ldrb	r2, [r2, #0]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bb2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bb6:	60da      	str	r2, [r3, #12]
    GET_UINT32( W[4],  data, 16 );
 8001bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	3310      	adds	r3, #16
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	061a      	lsls	r2, r3, #24
 8001bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3311      	adds	r3, #17
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	041b      	lsls	r3, r3, #16
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3312      	adds	r3, #18
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	4313      	orrs	r3, r2
 8001bec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001bf0:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	3213      	adds	r2, #19
 8001bf8:	7812      	ldrb	r2, [r2, #0]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c00:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c04:	611a      	str	r2, [r3, #16]
    GET_UINT32( W[5],  data, 20 );
 8001c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3314      	adds	r3, #20
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	061a      	lsls	r2, r3, #24
 8001c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3315      	adds	r3, #21
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	041b      	lsls	r3, r3, #16
 8001c26:	431a      	orrs	r2, r3
 8001c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3316      	adds	r3, #22
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001c3e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	3217      	adds	r2, #23
 8001c46:	7812      	ldrb	r2, [r2, #0]
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c4e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c52:	615a      	str	r2, [r3, #20]
    GET_UINT32( W[6],  data, 24 );
 8001c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3318      	adds	r3, #24
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	061a      	lsls	r2, r3, #24
 8001c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3319      	adds	r3, #25
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	041b      	lsls	r3, r3, #16
 8001c74:	431a      	orrs	r2, r3
 8001c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	331a      	adds	r3, #26
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	4313      	orrs	r3, r2
 8001c88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001c8c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	321b      	adds	r2, #27
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c9c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ca0:	619a      	str	r2, [r3, #24]
    GET_UINT32( W[7],  data, 28 );
 8001ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	331c      	adds	r3, #28
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	061a      	lsls	r2, r3, #24
 8001cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	331d      	adds	r3, #29
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	041b      	lsls	r3, r3, #16
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	331e      	adds	r3, #30
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001cda:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	321f      	adds	r2, #31
 8001ce2:	7812      	ldrb	r2, [r2, #0]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001cee:	61da      	str	r2, [r3, #28]
    GET_UINT32( W[8],  data, 32 );
 8001cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	3320      	adds	r3, #32
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	061a      	lsls	r2, r3, #24
 8001d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3321      	adds	r3, #33	; 0x21
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	041b      	lsls	r3, r3, #16
 8001d10:	431a      	orrs	r2, r3
 8001d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3322      	adds	r3, #34	; 0x22
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001d28:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	3223      	adds	r2, #35	; 0x23
 8001d30:	7812      	ldrb	r2, [r2, #0]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d38:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d3c:	621a      	str	r2, [r3, #32]
    GET_UINT32( W[9],  data, 36 );
 8001d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3324      	adds	r3, #36	; 0x24
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	061a      	lsls	r2, r3, #24
 8001d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3325      	adds	r3, #37	; 0x25
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	041b      	lsls	r3, r3, #16
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3326      	adds	r3, #38	; 0x26
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	4313      	orrs	r3, r2
 8001d72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001d76:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	3227      	adds	r2, #39	; 0x27
 8001d7e:	7812      	ldrb	r2, [r2, #0]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d86:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24
    GET_UINT32( W[10], data, 40 );
 8001d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3328      	adds	r3, #40	; 0x28
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	061a      	lsls	r2, r3, #24
 8001d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	3329      	adds	r3, #41	; 0x29
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	041b      	lsls	r3, r3, #16
 8001dac:	431a      	orrs	r2, r3
 8001dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001db2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	332a      	adds	r3, #42	; 0x2a
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001dc4:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	322b      	adds	r2, #43	; 0x2b
 8001dcc:	7812      	ldrb	r2, [r2, #0]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001dd4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28
    GET_UINT32( W[11], data, 44 );
 8001dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	332c      	adds	r3, #44	; 0x2c
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	061a      	lsls	r2, r3, #24
 8001dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	332d      	adds	r3, #45	; 0x2d
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	041b      	lsls	r3, r3, #16
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	332e      	adds	r3, #46	; 0x2e
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001e12:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	322f      	adds	r2, #47	; 0x2f
 8001e1a:	7812      	ldrb	r2, [r2, #0]
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
    GET_UINT32( W[12], data, 48 );
 8001e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3330      	adds	r3, #48	; 0x30
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	061a      	lsls	r2, r3, #24
 8001e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	3331      	adds	r3, #49	; 0x31
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	041b      	lsls	r3, r3, #16
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3332      	adds	r3, #50	; 0x32
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001e60:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	3233      	adds	r2, #51	; 0x33
 8001e68:	7812      	ldrb	r2, [r2, #0]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e70:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
    GET_UINT32( W[13], data, 52 );
 8001e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	3334      	adds	r3, #52	; 0x34
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	061a      	lsls	r2, r3, #24
 8001e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3335      	adds	r3, #53	; 0x35
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	041b      	lsls	r3, r3, #16
 8001e96:	431a      	orrs	r2, r3
 8001e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	3336      	adds	r3, #54	; 0x36
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001eae:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	3237      	adds	r2, #55	; 0x37
 8001eb6:	7812      	ldrb	r2, [r2, #0]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ebe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ec2:	635a      	str	r2, [r3, #52]	; 0x34
    GET_UINT32( W[14], data, 56 );
 8001ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ec8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3338      	adds	r3, #56	; 0x38
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	061a      	lsls	r2, r3, #24
 8001ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3339      	adds	r3, #57	; 0x39
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	041b      	lsls	r3, r3, #16
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	333a      	adds	r3, #58	; 0x3a
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001efc:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	323b      	adds	r2, #59	; 0x3b
 8001f04:	7812      	ldrb	r2, [r2, #0]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f0c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f10:	639a      	str	r2, [r3, #56]	; 0x38
    GET_UINT32( W[15], data, 60 );
 8001f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	333c      	adds	r3, #60	; 0x3c
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	061a      	lsls	r2, r3, #24
 8001f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	333d      	adds	r3, #61	; 0x3d
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	041b      	lsls	r3, r3, #16
 8001f32:	431a      	orrs	r2, r3
 8001f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	333e      	adds	r3, #62	; 0x3e
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	021b      	lsls	r3, r3, #8
 8001f44:	4313      	orrs	r3, r2
 8001f46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8001f4a:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	323f      	adds	r2, #63	; 0x3f
 8001f52:	7812      	ldrb	r2, [r2, #0]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f5e:	63da      	str	r2, [r3, #60]	; 0x3c
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
 8001f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    B = ctx->state[1];
 8001f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    C = ctx->state[2];
 8001f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    D = ctx->state[3];
 8001f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    E = ctx->state[4];
 8001fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001fa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    F = ctx->state[5];
 8001fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001fb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    G = ctx->state[6];
 8001fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001fc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    H = ctx->state[7];
 8001fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001fd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8001fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001fe4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8001fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001fec:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001ff0:	405a      	eors	r2, r3
 8001ff2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001ff6:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001ffa:	405a      	eors	r2, r3
 8001ffc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002000:	441a      	add	r2, r3
 8002002:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8002006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800200a:	4059      	eors	r1, r3
 800200c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002010:	4019      	ands	r1, r3
 8002012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002016:	404b      	eors	r3, r1
 8002018:	441a      	add	r2, r3
 800201a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800201e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	441a      	add	r2, r3
 8002026:	4bf9      	ldr	r3, [pc, #996]	; (800240c <sha256_process+0x9a4>)
 8002028:	4413      	add	r3, r2
 800202a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800202e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002032:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800203a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800203e:	405a      	eors	r2, r3
 8002040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002044:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002048:	405a      	eors	r2, r3
 800204a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800204e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002052:	4019      	ands	r1, r3
 8002054:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002058:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800205c:	4318      	orrs	r0, r3
 800205e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002062:	4003      	ands	r3, r0
 8002064:	430b      	orrs	r3, r1
 8002066:	4413      	add	r3, r2
 8002068:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800206c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002074:	4413      	add	r3, r2
 8002076:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800207a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800207e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002082:	4413      	add	r3, r2
 8002084:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 8002088:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800208c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002090:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002094:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002098:	405a      	eors	r2, r3
 800209a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800209e:	ea4f 6373 	mov.w	r3, r3, ror #25
 80020a2:	405a      	eors	r2, r3
 80020a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020a8:	441a      	add	r2, r3
 80020aa:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80020ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80020b2:	4059      	eors	r1, r3
 80020b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80020b8:	4019      	ands	r1, r3
 80020ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80020be:	404b      	eors	r3, r1
 80020c0:	441a      	add	r2, r3
 80020c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80020c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	441a      	add	r2, r3
 80020ce:	4bd0      	ldr	r3, [pc, #832]	; (8002410 <sha256_process+0x9a8>)
 80020d0:	4413      	add	r3, r2
 80020d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80020d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80020da:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80020de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80020e2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80020e6:	405a      	eors	r2, r3
 80020e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80020ec:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80020f0:	405a      	eors	r2, r3
 80020f2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80020f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020fa:	4019      	ands	r1, r3
 80020fc:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8002100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002104:	4318      	orrs	r0, r3
 8002106:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800210a:	4003      	ands	r3, r0
 800210c:	430b      	orrs	r3, r1
 800210e:	4413      	add	r3, r2
 8002110:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002114:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800211c:	4413      	add	r3, r2
 800211e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002122:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002126:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800212a:	4413      	add	r3, r2
 800212c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8002130:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002134:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002138:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800213c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002140:	405a      	eors	r2, r3
 8002142:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002146:	ea4f 6373 	mov.w	r3, r3, ror #25
 800214a:	405a      	eors	r2, r3
 800214c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002150:	441a      	add	r2, r3
 8002152:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8002156:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800215a:	4059      	eors	r1, r3
 800215c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002160:	4019      	ands	r1, r3
 8002162:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002166:	404b      	eors	r3, r1
 8002168:	441a      	add	r2, r3
 800216a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800216e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	441a      	add	r2, r3
 8002176:	4ba7      	ldr	r3, [pc, #668]	; (8002414 <sha256_process+0x9ac>)
 8002178:	4413      	add	r3, r2
 800217a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800217e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002182:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800218a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800218e:	405a      	eors	r2, r3
 8002190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002194:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002198:	405a      	eors	r2, r3
 800219a:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800219e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80021a2:	4019      	ands	r1, r3
 80021a4:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80021a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80021ac:	4318      	orrs	r0, r3
 80021ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021b2:	4003      	ands	r3, r0
 80021b4:	430b      	orrs	r3, r1
 80021b6:	4413      	add	r3, r2
 80021b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80021bc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80021c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021c4:	4413      	add	r3, r2
 80021c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80021ca:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80021ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80021d2:	4413      	add	r3, r2
 80021d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80021d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80021dc:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80021e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80021e4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80021e8:	405a      	eors	r2, r3
 80021ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80021ee:	ea4f 6373 	mov.w	r3, r3, ror #25
 80021f2:	405a      	eors	r2, r3
 80021f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80021f8:	441a      	add	r2, r3
 80021fa:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80021fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002202:	4059      	eors	r1, r3
 8002204:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002208:	4019      	ands	r1, r3
 800220a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800220e:	404b      	eors	r3, r1
 8002210:	441a      	add	r2, r3
 8002212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002216:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	441a      	add	r2, r3
 800221e:	4b7e      	ldr	r3, [pc, #504]	; (8002418 <sha256_process+0x9b0>)
 8002220:	4413      	add	r3, r2
 8002222:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002226:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800222a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800222e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002232:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002236:	405a      	eors	r2, r3
 8002238:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800223c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002240:	405a      	eors	r2, r3
 8002242:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8002246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800224a:	4019      	ands	r1, r3
 800224c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8002250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002254:	4318      	orrs	r0, r3
 8002256:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800225a:	4003      	ands	r3, r0
 800225c:	430b      	orrs	r3, r1
 800225e:	4413      	add	r3, r2
 8002260:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002264:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800226c:	4413      	add	r3, r2
 800226e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002272:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002276:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800227a:	4413      	add	r3, r2
 800227c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8002280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002284:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800228c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002290:	405a      	eors	r2, r3
 8002292:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002296:	ea4f 6373 	mov.w	r3, r3, ror #25
 800229a:	405a      	eors	r2, r3
 800229c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80022a0:	441a      	add	r2, r3
 80022a2:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80022a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80022aa:	4059      	eors	r1, r3
 80022ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022b0:	4019      	ands	r1, r3
 80022b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80022b6:	404b      	eors	r3, r1
 80022b8:	441a      	add	r2, r3
 80022ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	441a      	add	r2, r3
 80022c6:	4b55      	ldr	r3, [pc, #340]	; (800241c <sha256_process+0x9b4>)
 80022c8:	4413      	add	r3, r2
 80022ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80022ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80022d2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80022d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80022da:	ea4f 3373 	mov.w	r3, r3, ror #13
 80022de:	405a      	eors	r2, r3
 80022e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80022e4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80022e8:	405a      	eors	r2, r3
 80022ea:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80022ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80022f2:	4019      	ands	r1, r3
 80022f4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80022f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80022fc:	4318      	orrs	r0, r3
 80022fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002302:	4003      	ands	r3, r0
 8002304:	430b      	orrs	r3, r1
 8002306:	4413      	add	r3, r2
 8002308:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800230c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002314:	4413      	add	r3, r2
 8002316:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800231a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800231e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002322:	4413      	add	r3, r2
 8002324:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8002328:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800232c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002330:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002334:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002338:	405a      	eors	r2, r3
 800233a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800233e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002342:	405a      	eors	r2, r3
 8002344:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002348:	441a      	add	r2, r3
 800234a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800234e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002352:	4059      	eors	r1, r3
 8002354:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002358:	4019      	ands	r1, r3
 800235a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800235e:	404b      	eors	r3, r1
 8002360:	441a      	add	r2, r3
 8002362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002366:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	441a      	add	r2, r3
 800236e:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <sha256_process+0x9b8>)
 8002370:	4413      	add	r3, r2
 8002372:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002376:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800237a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800237e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002382:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002386:	405a      	eors	r2, r3
 8002388:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800238c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002390:	405a      	eors	r2, r3
 8002392:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8002396:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800239a:	4019      	ands	r1, r3
 800239c:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80023a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80023a4:	4318      	orrs	r0, r3
 80023a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80023aa:	4003      	ands	r3, r0
 80023ac:	430b      	orrs	r3, r1
 80023ae:	4413      	add	r3, r2
 80023b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80023b4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80023b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023bc:	4413      	add	r3, r2
 80023be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80023c2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80023c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023ca:	4413      	add	r3, r2
 80023cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80023d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023d4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80023d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023dc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80023e0:	405a      	eors	r2, r3
 80023e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023e6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80023ea:	405a      	eors	r2, r3
 80023ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80023f0:	441a      	add	r2, r3
 80023f2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80023f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80023fa:	4059      	eors	r1, r3
 80023fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002400:	4019      	ands	r1, r3
 8002402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002406:	404b      	eors	r3, r1
 8002408:	e00c      	b.n	8002424 <sha256_process+0x9bc>
 800240a:	bf00      	nop
 800240c:	428a2f98 	.word	0x428a2f98
 8002410:	71374491 	.word	0x71374491
 8002414:	b5c0fbcf 	.word	0xb5c0fbcf
 8002418:	e9b5dba5 	.word	0xe9b5dba5
 800241c:	3956c25b 	.word	0x3956c25b
 8002420:	59f111f1 	.word	0x59f111f1
 8002424:	441a      	add	r2, r3
 8002426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800242a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	441a      	add	r2, r3
 8002432:	4bf9      	ldr	r3, [pc, #996]	; (8002818 <sha256_process+0xdb0>)
 8002434:	4413      	add	r3, r2
 8002436:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800243a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800243e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002442:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002446:	ea4f 3373 	mov.w	r3, r3, ror #13
 800244a:	405a      	eors	r2, r3
 800244c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002450:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002454:	405a      	eors	r2, r3
 8002456:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800245a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800245e:	4019      	ands	r1, r3
 8002460:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8002464:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002468:	4318      	orrs	r0, r3
 800246a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800246e:	4003      	ands	r3, r0
 8002470:	430b      	orrs	r3, r1
 8002472:	4413      	add	r3, r2
 8002474:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002478:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800247c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002480:	4413      	add	r3, r2
 8002482:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002486:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800248a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800248e:	4413      	add	r3, r2
 8002490:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 8002494:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002498:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800249c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80024a0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80024a4:	405a      	eors	r2, r3
 80024a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80024aa:	ea4f 6373 	mov.w	r3, r3, ror #25
 80024ae:	405a      	eors	r2, r3
 80024b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80024b4:	441a      	add	r2, r3
 80024b6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80024ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80024be:	4059      	eors	r1, r3
 80024c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80024c4:	4019      	ands	r1, r3
 80024c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80024ca:	404b      	eors	r3, r1
 80024cc:	441a      	add	r2, r3
 80024ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80024d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	441a      	add	r2, r3
 80024da:	4bd0      	ldr	r3, [pc, #832]	; (800281c <sha256_process+0xdb4>)
 80024dc:	4413      	add	r3, r2
 80024de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80024e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80024e6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80024ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80024ee:	ea4f 3373 	mov.w	r3, r3, ror #13
 80024f2:	405a      	eors	r2, r3
 80024f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80024f8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80024fc:	405a      	eors	r2, r3
 80024fe:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8002502:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002506:	4019      	ands	r1, r3
 8002508:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800250c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002510:	4318      	orrs	r0, r3
 8002512:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002516:	4003      	ands	r3, r0
 8002518:	430b      	orrs	r3, r1
 800251a:	4413      	add	r3, r2
 800251c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002520:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002528:	4413      	add	r3, r2
 800252a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800252e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002532:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002536:	4413      	add	r3, r2
 8002538:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 800253c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002540:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002544:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002548:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800254c:	405a      	eors	r2, r3
 800254e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002552:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002556:	405a      	eors	r2, r3
 8002558:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800255c:	441a      	add	r2, r3
 800255e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8002562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002566:	4059      	eors	r1, r3
 8002568:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800256c:	4019      	ands	r1, r3
 800256e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002572:	404b      	eors	r3, r1
 8002574:	441a      	add	r2, r3
 8002576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800257a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	441a      	add	r2, r3
 8002582:	4ba7      	ldr	r3, [pc, #668]	; (8002820 <sha256_process+0xdb8>)
 8002584:	4413      	add	r3, r2
 8002586:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800258a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800258e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002596:	ea4f 3373 	mov.w	r3, r3, ror #13
 800259a:	405a      	eors	r2, r3
 800259c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80025a0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80025a4:	405a      	eors	r2, r3
 80025a6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80025aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80025ae:	4019      	ands	r1, r3
 80025b0:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80025b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80025b8:	4318      	orrs	r0, r3
 80025ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80025be:	4003      	ands	r3, r0
 80025c0:	430b      	orrs	r3, r1
 80025c2:	4413      	add	r3, r2
 80025c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80025c8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80025cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025d0:	4413      	add	r3, r2
 80025d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80025d6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80025da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80025de:	4413      	add	r3, r2
 80025e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80025e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80025e8:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80025ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80025f0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80025f4:	405a      	eors	r2, r3
 80025f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80025fa:	ea4f 6373 	mov.w	r3, r3, ror #25
 80025fe:	405a      	eors	r2, r3
 8002600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002604:	441a      	add	r2, r3
 8002606:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800260a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800260e:	4059      	eors	r1, r3
 8002610:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002614:	4019      	ands	r1, r3
 8002616:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800261a:	404b      	eors	r3, r1
 800261c:	441a      	add	r2, r3
 800261e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002622:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	441a      	add	r2, r3
 800262a:	4b7e      	ldr	r3, [pc, #504]	; (8002824 <sha256_process+0xdbc>)
 800262c:	4413      	add	r3, r2
 800262e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002632:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002636:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800263a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800263e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002642:	405a      	eors	r2, r3
 8002644:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002648:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800264c:	405a      	eors	r2, r3
 800264e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8002652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002656:	4019      	ands	r1, r3
 8002658:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800265c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002660:	4318      	orrs	r0, r3
 8002662:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002666:	4003      	ands	r3, r0
 8002668:	430b      	orrs	r3, r1
 800266a:	4413      	add	r3, r2
 800266c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002670:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002678:	4413      	add	r3, r2
 800267a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800267e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002682:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002686:	4413      	add	r3, r2
 8002688:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 800268c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002690:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002694:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002698:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800269c:	405a      	eors	r2, r3
 800269e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80026a2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80026a6:	405a      	eors	r2, r3
 80026a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80026ac:	441a      	add	r2, r3
 80026ae:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80026b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026b6:	4059      	eors	r1, r3
 80026b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80026bc:	4019      	ands	r1, r3
 80026be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026c2:	404b      	eors	r3, r1
 80026c4:	441a      	add	r2, r3
 80026c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80026ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	441a      	add	r2, r3
 80026d2:	4b55      	ldr	r3, [pc, #340]	; (8002828 <sha256_process+0xdc0>)
 80026d4:	4413      	add	r3, r2
 80026d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80026da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026de:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80026e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026e6:	ea4f 3373 	mov.w	r3, r3, ror #13
 80026ea:	405a      	eors	r2, r3
 80026ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026f0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80026f4:	405a      	eors	r2, r3
 80026f6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80026fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80026fe:	4019      	ands	r1, r3
 8002700:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002704:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002708:	4318      	orrs	r0, r3
 800270a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800270e:	4003      	ands	r3, r0
 8002710:	430b      	orrs	r3, r1
 8002712:	4413      	add	r3, r2
 8002714:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002718:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800271c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002720:	4413      	add	r3, r2
 8002722:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002726:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800272a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800272e:	4413      	add	r3, r2
 8002730:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8002734:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002738:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800273c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002740:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002744:	405a      	eors	r2, r3
 8002746:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800274a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800274e:	405a      	eors	r2, r3
 8002750:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002754:	441a      	add	r2, r3
 8002756:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800275a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800275e:	4059      	eors	r1, r3
 8002760:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002764:	4019      	ands	r1, r3
 8002766:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800276a:	404b      	eors	r3, r1
 800276c:	441a      	add	r2, r3
 800276e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002772:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	441a      	add	r2, r3
 800277a:	4b2c      	ldr	r3, [pc, #176]	; (800282c <sha256_process+0xdc4>)
 800277c:	4413      	add	r3, r2
 800277e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002782:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002786:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800278a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800278e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002792:	405a      	eors	r2, r3
 8002794:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002798:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800279c:	405a      	eors	r2, r3
 800279e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80027a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027a6:	4019      	ands	r1, r3
 80027a8:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80027ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027b0:	4318      	orrs	r0, r3
 80027b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80027b6:	4003      	ands	r3, r0
 80027b8:	430b      	orrs	r3, r1
 80027ba:	4413      	add	r3, r2
 80027bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80027c0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80027c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027c8:	4413      	add	r3, r2
 80027ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80027ce:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80027d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80027d6:	4413      	add	r3, r2
 80027d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 80027dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80027e0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80027e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80027e8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80027ec:	405a      	eors	r2, r3
 80027ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80027f2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80027f6:	405a      	eors	r2, r3
 80027f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027fc:	441a      	add	r2, r3
 80027fe:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8002802:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002806:	4059      	eors	r1, r3
 8002808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800280c:	4019      	ands	r1, r3
 800280e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002812:	404b      	eors	r3, r1
 8002814:	e00c      	b.n	8002830 <sha256_process+0xdc8>
 8002816:	bf00      	nop
 8002818:	923f82a4 	.word	0x923f82a4
 800281c:	ab1c5ed5 	.word	0xab1c5ed5
 8002820:	d807aa98 	.word	0xd807aa98
 8002824:	12835b01 	.word	0x12835b01
 8002828:	243185be 	.word	0x243185be
 800282c:	550c7dc3 	.word	0x550c7dc3
 8002830:	441a      	add	r2, r3
 8002832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002836:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	441a      	add	r2, r3
 800283e:	4bf4      	ldr	r3, [pc, #976]	; (8002c10 <sha256_process+0x11a8>)
 8002840:	4413      	add	r3, r2
 8002842:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002846:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800284a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800284e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002852:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002856:	405a      	eors	r2, r3
 8002858:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800285c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002860:	405a      	eors	r2, r3
 8002862:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8002866:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800286a:	4019      	ands	r1, r3
 800286c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002870:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002874:	4318      	orrs	r0, r3
 8002876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800287a:	4003      	ands	r3, r0
 800287c:	430b      	orrs	r3, r1
 800287e:	4413      	add	r3, r2
 8002880:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002884:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800288c:	4413      	add	r3, r2
 800288e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002892:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002896:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800289a:	4413      	add	r3, r2
 800289c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 80028a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80028a4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80028a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80028ac:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80028b0:	405a      	eors	r2, r3
 80028b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80028b6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80028ba:	405a      	eors	r2, r3
 80028bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80028c0:	441a      	add	r2, r3
 80028c2:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80028c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80028ca:	4059      	eors	r1, r3
 80028cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80028d0:	4019      	ands	r1, r3
 80028d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80028d6:	404b      	eors	r3, r1
 80028d8:	441a      	add	r2, r3
 80028da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80028de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e4:	441a      	add	r2, r3
 80028e6:	4bcb      	ldr	r3, [pc, #812]	; (8002c14 <sha256_process+0x11ac>)
 80028e8:	4413      	add	r3, r2
 80028ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80028ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80028f2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80028f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80028fa:	ea4f 3373 	mov.w	r3, r3, ror #13
 80028fe:	405a      	eors	r2, r3
 8002900:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002904:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002908:	405a      	eors	r2, r3
 800290a:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800290e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002912:	4019      	ands	r1, r3
 8002914:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002918:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800291c:	4318      	orrs	r0, r3
 800291e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002922:	4003      	ands	r3, r0
 8002924:	430b      	orrs	r3, r1
 8002926:	4413      	add	r3, r2
 8002928:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800292c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002934:	4413      	add	r3, r2
 8002936:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800293a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800293e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002942:	4413      	add	r3, r2
 8002944:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8002948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800294c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002954:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002958:	405a      	eors	r2, r3
 800295a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800295e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002962:	405a      	eors	r2, r3
 8002964:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002968:	441a      	add	r2, r3
 800296a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800296e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002972:	4059      	eors	r1, r3
 8002974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002978:	4019      	ands	r1, r3
 800297a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800297e:	404b      	eors	r3, r1
 8002980:	441a      	add	r2, r3
 8002982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002986:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	441a      	add	r2, r3
 800298e:	4ba2      	ldr	r3, [pc, #648]	; (8002c18 <sha256_process+0x11b0>)
 8002990:	4413      	add	r3, r2
 8002992:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002996:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800299a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800299e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80029a2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80029a6:	405a      	eors	r2, r3
 80029a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80029ac:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80029b0:	405a      	eors	r2, r3
 80029b2:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80029b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029ba:	4019      	ands	r1, r3
 80029bc:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80029c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029c4:	4318      	orrs	r0, r3
 80029c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029ca:	4003      	ands	r3, r0
 80029cc:	430b      	orrs	r3, r1
 80029ce:	4413      	add	r3, r2
 80029d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80029d4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80029d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029dc:	4413      	add	r3, r2
 80029de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80029e2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80029e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80029ea:	4413      	add	r3, r2
 80029ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 80029f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80029f4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80029f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80029fc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002a00:	405a      	eors	r2, r3
 8002a02:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002a06:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002a0a:	405a      	eors	r2, r3
 8002a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a10:	441a      	add	r2, r3
 8002a12:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8002a16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a1a:	4059      	eors	r1, r3
 8002a1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002a20:	4019      	ands	r1, r3
 8002a22:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a26:	404b      	eors	r3, r1
 8002a28:	441a      	add	r2, r3
 8002a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a34:	441a      	add	r2, r3
 8002a36:	4b79      	ldr	r3, [pc, #484]	; (8002c1c <sha256_process+0x11b4>)
 8002a38:	4413      	add	r3, r2
 8002a3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002a3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002a42:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002a46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002a4a:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002a4e:	405a      	eors	r2, r3
 8002a50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002a54:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002a58:	405a      	eors	r2, r3
 8002a5a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8002a5e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a62:	4019      	ands	r1, r3
 8002a64:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8002a68:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a6c:	4318      	orrs	r0, r3
 8002a6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a72:	4003      	ands	r3, r0
 8002a74:	430b      	orrs	r3, r1
 8002a76:	4413      	add	r3, r2
 8002a78:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002a7c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a84:	4413      	add	r3, r2
 8002a86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002a8a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002a8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a92:	4413      	add	r3, r2
 8002a94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8002a98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a9c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002aa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002aa4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002aa8:	405a      	eors	r2, r3
 8002aaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002aae:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002ab2:	405a      	eors	r2, r3
 8002ab4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ab8:	441a      	add	r2, r3
 8002aba:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8002abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ac2:	4059      	eors	r1, r3
 8002ac4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ac8:	4019      	ands	r1, r3
 8002aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ace:	404b      	eors	r3, r1
 8002ad0:	441a      	add	r2, r3
 8002ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ad6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ae4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002aee:	4059      	eors	r1, r3
 8002af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002af4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	0a9b      	lsrs	r3, r3, #10
 8002afc:	4059      	eors	r1, r3
 8002afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b02:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	4419      	add	r1, r3
 8002b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b0e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b1c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002b26:	4058      	eors	r0, r3
 8002b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b2c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	08db      	lsrs	r3, r3, #3
 8002b34:	4043      	eors	r3, r0
 8002b36:	4419      	add	r1, r3
 8002b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b3c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4419      	add	r1, r3
 8002b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b48:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b4c:	6419      	str	r1, [r3, #64]	; 0x40
 8002b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002b52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	441a      	add	r2, r3
 8002b5a:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <sha256_process+0x11b8>)
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002b66:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002b6e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002b72:	405a      	eors	r2, r3
 8002b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002b78:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002b7c:	405a      	eors	r2, r3
 8002b7e:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8002b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b86:	4019      	ands	r1, r3
 8002b88:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002b8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002b90:	4318      	orrs	r0, r3
 8002b92:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002b96:	4003      	ands	r3, r0
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002ba0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ba8:	4413      	add	r3, r2
 8002baa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002bae:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002bb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8002bbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bc0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002bc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bc8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002bcc:	405a      	eors	r2, r3
 8002bce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bd2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002bd6:	405a      	eors	r2, r3
 8002bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bdc:	441a      	add	r2, r3
 8002bde:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8002be2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002be6:	4059      	eors	r1, r3
 8002be8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002bec:	4019      	ands	r1, r3
 8002bee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002bf2:	404b      	eors	r3, r1
 8002bf4:	441a      	add	r2, r3
 8002bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002bfa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c00:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c08:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0e:	e009      	b.n	8002c24 <sha256_process+0x11bc>
 8002c10:	72be5d74 	.word	0x72be5d74
 8002c14:	80deb1fe 	.word	0x80deb1fe
 8002c18:	9bdc06a7 	.word	0x9bdc06a7
 8002c1c:	c19bf174 	.word	0xc19bf174
 8002c20:	e49b69c1 	.word	0xe49b69c1
 8002c24:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002c28:	4059      	eors	r1, r3
 8002c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c34:	0a9b      	lsrs	r3, r3, #10
 8002c36:	4059      	eors	r1, r3
 8002c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c3c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	4419      	add	r1, r3
 8002c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c48:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002c60:	4058      	eors	r0, r3
 8002c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c66:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	08db      	lsrs	r3, r3, #3
 8002c6e:	4043      	eors	r3, r0
 8002c70:	4419      	add	r1, r3
 8002c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4419      	add	r1, r3
 8002c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c86:	6459      	str	r1, [r3, #68]	; 0x44
 8002c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002c8c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	441a      	add	r2, r3
 8002c94:	4bec      	ldr	r3, [pc, #944]	; (8003048 <sha256_process+0x15e0>)
 8002c96:	4413      	add	r3, r2
 8002c98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002c9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ca0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002ca4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ca8:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002cac:	405a      	eors	r2, r3
 8002cae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002cb2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002cb6:	405a      	eors	r2, r3
 8002cb8:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8002cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002cc0:	4019      	ands	r1, r3
 8002cc2:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8002cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002cca:	4318      	orrs	r0, r3
 8002ccc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002cd0:	4003      	ands	r3, r0
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002cda:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ce8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002cec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8002cf6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002cfa:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002cfe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002d02:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002d06:	405a      	eors	r2, r3
 8002d08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002d0c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002d10:	405a      	eors	r2, r3
 8002d12:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002d16:	441a      	add	r2, r3
 8002d18:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8002d1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d20:	4059      	eors	r1, r3
 8002d22:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002d26:	4019      	ands	r1, r3
 8002d28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d2c:	404b      	eors	r3, r1
 8002d2e:	441a      	add	r2, r3
 8002d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d34:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d42:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002d4c:	4059      	eors	r1, r3
 8002d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	0a9b      	lsrs	r3, r3, #10
 8002d5a:	4059      	eors	r1, r3
 8002d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d60:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	4419      	add	r1, r3
 8002d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d6c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002d84:	4058      	eors	r0, r3
 8002d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	08db      	lsrs	r3, r3, #3
 8002d92:	4043      	eors	r3, r0
 8002d94:	4419      	add	r1, r3
 8002d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4419      	add	r1, r3
 8002da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002da6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002daa:	6499      	str	r1, [r3, #72]	; 0x48
 8002dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002db0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db6:	441a      	add	r2, r3
 8002db8:	4ba4      	ldr	r3, [pc, #656]	; (800304c <sha256_process+0x15e4>)
 8002dba:	4413      	add	r3, r2
 8002dbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dc4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dcc:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002dd0:	405a      	eors	r2, r3
 8002dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dd6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002dda:	405a      	eors	r2, r3
 8002ddc:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8002de0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002de4:	4019      	ands	r1, r3
 8002de6:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002dea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002dee:	4318      	orrs	r0, r3
 8002df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002df4:	4003      	ands	r3, r0
 8002df6:	430b      	orrs	r3, r1
 8002df8:	4413      	add	r3, r2
 8002dfa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002dfe:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e06:	4413      	add	r3, r2
 8002e08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002e0c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002e10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e14:	4413      	add	r3, r2
 8002e16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8002e1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e1e:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002e22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e26:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002e2a:	405a      	eors	r2, r3
 8002e2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e30:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002e34:	405a      	eors	r2, r3
 8002e36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e3a:	441a      	add	r2, r3
 8002e3c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8002e40:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e44:	4059      	eors	r1, r3
 8002e46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e4a:	4019      	ands	r1, r3
 8002e4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e50:	404b      	eors	r3, r1
 8002e52:	441a      	add	r2, r3
 8002e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e58:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e66:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002e70:	4059      	eors	r1, r3
 8002e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	0a9b      	lsrs	r3, r3, #10
 8002e7e:	4059      	eors	r1, r3
 8002e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e84:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4419      	add	r1, r3
 8002e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e90:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002e9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002ea8:	4058      	eors	r0, r3
 8002eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002eae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	08db      	lsrs	r3, r3, #3
 8002eb6:	4043      	eors	r3, r0
 8002eb8:	4419      	add	r1, r3
 8002eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ebe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4419      	add	r1, r3
 8002ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002eca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ece:	64d9      	str	r1, [r3, #76]	; 0x4c
 8002ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ed4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eda:	441a      	add	r2, r3
 8002edc:	4b5c      	ldr	r3, [pc, #368]	; (8003050 <sha256_process+0x15e8>)
 8002ede:	4413      	add	r3, r2
 8002ee0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002ee4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002ee8:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002eec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002ef0:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002ef4:	405a      	eors	r2, r3
 8002ef6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002efa:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002efe:	405a      	eors	r2, r3
 8002f00:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8002f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f08:	4019      	ands	r1, r3
 8002f0a:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8002f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f12:	4318      	orrs	r0, r3
 8002f14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f18:	4003      	ands	r3, r0
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002f22:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002f30:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002f34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f38:	4413      	add	r3, r2
 8002f3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8002f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002f42:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002f4a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002f4e:	405a      	eors	r2, r3
 8002f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002f54:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002f58:	405a      	eors	r2, r3
 8002f5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f5e:	441a      	add	r2, r3
 8002f60:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8002f64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002f68:	4059      	eors	r1, r3
 8002f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002f6e:	4019      	ands	r1, r3
 8002f70:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002f74:	404b      	eors	r3, r1
 8002f76:	441a      	add	r2, r3
 8002f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002f7c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f82:	ea4f 4173 	mov.w	r1, r3, ror #17
 8002f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002f8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f90:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002f94:	4059      	eors	r1, r3
 8002f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002f9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa0:	0a9b      	lsrs	r3, r3, #10
 8002fa2:	4059      	eors	r1, r3
 8002fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fa8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fae:	4419      	add	r1, r3
 8002fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fb4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8002fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fc2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002fcc:	4058      	eors	r0, r3
 8002fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fd2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	08db      	lsrs	r3, r3, #3
 8002fda:	4043      	eors	r3, r0
 8002fdc:	4419      	add	r1, r3
 8002fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fe2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	4419      	add	r1, r3
 8002fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002fee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ff2:	6519      	str	r1, [r3, #80]	; 0x50
 8002ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002ff8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffe:	441a      	add	r2, r3
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <sha256_process+0x15ec>)
 8003002:	4413      	add	r3, r2
 8003004:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003008:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800300c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003010:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003014:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003018:	405a      	eors	r2, r3
 800301a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800301e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003022:	405a      	eors	r2, r3
 8003024:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8003028:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800302c:	4019      	ands	r1, r3
 800302e:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8003032:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003036:	4318      	orrs	r0, r3
 8003038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800303c:	4003      	ands	r3, r0
 800303e:	430b      	orrs	r3, r1
 8003040:	4413      	add	r3, r2
 8003042:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003046:	e007      	b.n	8003058 <sha256_process+0x15f0>
 8003048:	efbe4786 	.word	0xefbe4786
 800304c:	0fc19dc6 	.word	0x0fc19dc6
 8003050:	240ca1cc 	.word	0x240ca1cc
 8003054:	2de92c6f 	.word	0x2de92c6f
 8003058:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800305c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003060:	4413      	add	r3, r2
 8003062:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003066:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800306a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800306e:	4413      	add	r3, r2
 8003070:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003074:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003078:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800307c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003080:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003084:	405a      	eors	r2, r3
 8003086:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800308a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800308e:	405a      	eors	r2, r3
 8003090:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003094:	441a      	add	r2, r3
 8003096:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800309a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800309e:	4059      	eors	r1, r3
 80030a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030a4:	4019      	ands	r1, r3
 80030a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80030aa:	404b      	eors	r3, r1
 80030ac:	441a      	add	r2, r3
 80030ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b8:	ea4f 4173 	mov.w	r1, r3, ror #17
 80030bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80030ca:	4059      	eors	r1, r3
 80030cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030d0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d6:	0a9b      	lsrs	r3, r3, #10
 80030d8:	4059      	eors	r1, r3
 80030da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	4419      	add	r1, r3
 80030e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80030f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003102:	4058      	eors	r0, r3
 8003104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003108:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	08db      	lsrs	r3, r3, #3
 8003110:	4043      	eors	r3, r0
 8003112:	4419      	add	r1, r3
 8003114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003118:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	4419      	add	r1, r3
 8003120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003124:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003128:	6559      	str	r1, [r3, #84]	; 0x54
 800312a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800312e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	441a      	add	r2, r3
 8003136:	4bed      	ldr	r3, [pc, #948]	; (80034ec <sha256_process+0x1a84>)
 8003138:	4413      	add	r3, r2
 800313a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800313e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003142:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003146:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800314a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800314e:	405a      	eors	r2, r3
 8003150:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003154:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003158:	405a      	eors	r2, r3
 800315a:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800315e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003162:	4019      	ands	r1, r3
 8003164:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8003168:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800316c:	4318      	orrs	r0, r3
 800316e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003172:	4003      	ands	r3, r0
 8003174:	430b      	orrs	r3, r1
 8003176:	4413      	add	r3, r2
 8003178:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800317c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003184:	4413      	add	r3, r2
 8003186:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800318a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800318e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003192:	4413      	add	r3, r2
 8003194:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800319c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80031a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80031a8:	405a      	eors	r2, r3
 80031aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031ae:	ea4f 6373 	mov.w	r3, r3, ror #25
 80031b2:	405a      	eors	r2, r3
 80031b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80031b8:	441a      	add	r2, r3
 80031ba:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80031be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80031c2:	4059      	eors	r1, r3
 80031c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c8:	4019      	ands	r1, r3
 80031ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80031ce:	404b      	eors	r3, r1
 80031d0:	441a      	add	r2, r3
 80031d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80031d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031dc:	ea4f 4173 	mov.w	r1, r3, ror #17
 80031e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80031e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ea:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80031ee:	4059      	eors	r1, r3
 80031f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80031f4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031fa:	0a9b      	lsrs	r3, r3, #10
 80031fc:	4059      	eors	r1, r3
 80031fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003202:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	4419      	add	r1, r3
 800320a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800320e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800321c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003226:	4058      	eors	r0, r3
 8003228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800322c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	08db      	lsrs	r3, r3, #3
 8003234:	4043      	eors	r3, r0
 8003236:	4419      	add	r1, r3
 8003238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800323c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	4419      	add	r1, r3
 8003244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003248:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800324c:	6599      	str	r1, [r3, #88]	; 0x58
 800324e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003252:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	441a      	add	r2, r3
 800325a:	4ba5      	ldr	r3, [pc, #660]	; (80034f0 <sha256_process+0x1a88>)
 800325c:	4413      	add	r3, r2
 800325e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003262:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003266:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800326a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800326e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003272:	405a      	eors	r2, r3
 8003274:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003278:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800327c:	405a      	eors	r2, r3
 800327e:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8003282:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003286:	4019      	ands	r1, r3
 8003288:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800328c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003290:	4318      	orrs	r0, r3
 8003292:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003296:	4003      	ands	r3, r0
 8003298:	430b      	orrs	r3, r1
 800329a:	4413      	add	r3, r2
 800329c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80032a0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80032a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032a8:	4413      	add	r3, r2
 80032aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80032ae:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80032b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80032b6:	4413      	add	r3, r2
 80032b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 80032bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80032c0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80032c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80032c8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80032cc:	405a      	eors	r2, r3
 80032ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80032d2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80032d6:	405a      	eors	r2, r3
 80032d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80032dc:	441a      	add	r2, r3
 80032de:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80032e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80032e6:	4059      	eors	r1, r3
 80032e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80032ec:	4019      	ands	r1, r3
 80032ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80032f2:	404b      	eors	r3, r1
 80032f4:	441a      	add	r2, r3
 80032f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80032fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80032fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003300:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003308:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800330c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003312:	4059      	eors	r1, r3
 8003314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003318:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800331c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331e:	0a9b      	lsrs	r3, r3, #10
 8003320:	4059      	eors	r1, r3
 8003322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003326:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	4419      	add	r1, r3
 800332e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003332:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800333c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003340:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800334a:	4058      	eors	r0, r3
 800334c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003350:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	08db      	lsrs	r3, r3, #3
 8003358:	4043      	eors	r3, r0
 800335a:	4419      	add	r1, r3
 800335c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003360:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	4419      	add	r1, r3
 8003368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800336c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003370:	65d9      	str	r1, [r3, #92]	; 0x5c
 8003372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003376:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	441a      	add	r2, r3
 800337e:	4b5d      	ldr	r3, [pc, #372]	; (80034f4 <sha256_process+0x1a8c>)
 8003380:	4413      	add	r3, r2
 8003382:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003386:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800338a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800338e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003392:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003396:	405a      	eors	r2, r3
 8003398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800339c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80033a0:	405a      	eors	r2, r3
 80033a2:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80033a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80033aa:	4019      	ands	r1, r3
 80033ac:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80033b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80033b4:	4318      	orrs	r0, r3
 80033b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80033ba:	4003      	ands	r3, r0
 80033bc:	430b      	orrs	r3, r1
 80033be:	4413      	add	r3, r2
 80033c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80033c4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80033c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033cc:	4413      	add	r3, r2
 80033ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80033d2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80033d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80033da:	4413      	add	r3, r2
 80033dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 80033e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033e4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80033e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033ec:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80033f0:	405a      	eors	r2, r3
 80033f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033f6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80033fa:	405a      	eors	r2, r3
 80033fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003400:	441a      	add	r2, r3
 8003402:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8003406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800340a:	4059      	eors	r1, r3
 800340c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003410:	4019      	ands	r1, r3
 8003412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003416:	404b      	eors	r3, r1
 8003418:	441a      	add	r2, r3
 800341a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800341e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003424:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800342c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003436:	4059      	eors	r1, r3
 8003438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800343c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003442:	0a9b      	lsrs	r3, r3, #10
 8003444:	4059      	eors	r1, r3
 8003446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800344a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003450:	4419      	add	r1, r3
 8003452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003456:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003464:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800346e:	4058      	eors	r0, r3
 8003470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003474:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	08db      	lsrs	r3, r3, #3
 800347c:	4043      	eors	r3, r0
 800347e:	4419      	add	r1, r3
 8003480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003484:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	4419      	add	r1, r3
 800348c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003490:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003494:	6619      	str	r1, [r3, #96]	; 0x60
 8003496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800349a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800349e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a0:	441a      	add	r2, r3
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <sha256_process+0x1a90>)
 80034a4:	4413      	add	r3, r2
 80034a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80034aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80034ae:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80034b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80034b6:	ea4f 3373 	mov.w	r3, r3, ror #13
 80034ba:	405a      	eors	r2, r3
 80034bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80034c0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80034c4:	405a      	eors	r2, r3
 80034c6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80034ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80034ce:	4019      	ands	r1, r3
 80034d0:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80034d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80034d8:	4318      	orrs	r0, r3
 80034da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80034de:	4003      	ands	r3, r0
 80034e0:	430b      	orrs	r3, r1
 80034e2:	4413      	add	r3, r2
 80034e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80034e8:	e008      	b.n	80034fc <sha256_process+0x1a94>
 80034ea:	bf00      	nop
 80034ec:	4a7484aa 	.word	0x4a7484aa
 80034f0:	5cb0a9dc 	.word	0x5cb0a9dc
 80034f4:	76f988da 	.word	0x76f988da
 80034f8:	983e5152 	.word	0x983e5152
 80034fc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003500:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003504:	4413      	add	r3, r2
 8003506:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800350a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800350e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003512:	4413      	add	r3, r2
 8003514:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8003518:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800351c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003520:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003524:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003528:	405a      	eors	r2, r3
 800352a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800352e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003532:	405a      	eors	r2, r3
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003538:	441a      	add	r2, r3
 800353a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800353e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003542:	4059      	eors	r1, r3
 8003544:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003548:	4019      	ands	r1, r3
 800354a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800354e:	404b      	eors	r3, r1
 8003550:	441a      	add	r2, r3
 8003552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003556:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800355a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003564:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800356e:	4059      	eors	r1, r3
 8003570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003574:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357a:	0a9b      	lsrs	r3, r3, #10
 800357c:	4059      	eors	r1, r3
 800357e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003582:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003588:	4419      	add	r1, r3
 800358a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800358e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003594:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800359c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80035a6:	4058      	eors	r0, r3
 80035a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035ac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	08db      	lsrs	r3, r3, #3
 80035b4:	4043      	eors	r3, r0
 80035b6:	4419      	add	r1, r3
 80035b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035bc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	4419      	add	r1, r3
 80035c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035c8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80035cc:	6659      	str	r1, [r3, #100]	; 0x64
 80035ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80035d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035d8:	441a      	add	r2, r3
 80035da:	4bed      	ldr	r3, [pc, #948]	; (8003990 <sha256_process+0x1f28>)
 80035dc:	4413      	add	r3, r2
 80035de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80035e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035e6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80035ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035ee:	ea4f 3373 	mov.w	r3, r3, ror #13
 80035f2:	405a      	eors	r2, r3
 80035f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035f8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80035fc:	405a      	eors	r2, r3
 80035fe:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8003602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003606:	4019      	ands	r1, r3
 8003608:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800360c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003610:	4318      	orrs	r0, r3
 8003612:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003616:	4003      	ands	r3, r0
 8003618:	430b      	orrs	r3, r1
 800361a:	4413      	add	r3, r2
 800361c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003620:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003628:	4413      	add	r3, r2
 800362a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800362e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003632:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003636:	4413      	add	r3, r2
 8003638:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 800363c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003640:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003644:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003648:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800364c:	405a      	eors	r2, r3
 800364e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003652:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003656:	405a      	eors	r2, r3
 8003658:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800365c:	441a      	add	r2, r3
 800365e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8003662:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003666:	4059      	eors	r1, r3
 8003668:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800366c:	4019      	ands	r1, r3
 800366e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003672:	404b      	eors	r3, r1
 8003674:	441a      	add	r2, r3
 8003676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800367a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800367e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003680:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003688:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800368c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003692:	4059      	eors	r1, r3
 8003694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003698:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800369c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369e:	0a9b      	lsrs	r3, r3, #10
 80036a0:	4059      	eors	r1, r3
 80036a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80036aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ac:	4419      	add	r1, r3
 80036ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80036bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80036ca:	4058      	eors	r0, r3
 80036cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036d0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	08db      	lsrs	r3, r3, #3
 80036d8:	4043      	eors	r3, r0
 80036da:	4419      	add	r1, r3
 80036dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036e0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	4419      	add	r1, r3
 80036e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036ec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80036f0:	6699      	str	r1, [r3, #104]	; 0x68
 80036f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80036f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80036fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036fc:	441a      	add	r2, r3
 80036fe:	4ba5      	ldr	r3, [pc, #660]	; (8003994 <sha256_process+0x1f2c>)
 8003700:	4413      	add	r3, r2
 8003702:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800370a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800370e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003712:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003716:	405a      	eors	r2, r3
 8003718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800371c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003720:	405a      	eors	r2, r3
 8003722:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8003726:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800372a:	4019      	ands	r1, r3
 800372c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8003730:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003734:	4318      	orrs	r0, r3
 8003736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800373a:	4003      	ands	r3, r0
 800373c:	430b      	orrs	r3, r1
 800373e:	4413      	add	r3, r2
 8003740:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003744:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800374c:	4413      	add	r3, r2
 800374e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003752:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003756:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800375a:	4413      	add	r3, r2
 800375c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8003760:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003764:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003768:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800376c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003770:	405a      	eors	r2, r3
 8003772:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003776:	ea4f 6373 	mov.w	r3, r3, ror #25
 800377a:	405a      	eors	r2, r3
 800377c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003780:	441a      	add	r2, r3
 8003782:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8003786:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800378a:	4059      	eors	r1, r3
 800378c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003790:	4019      	ands	r1, r3
 8003792:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003796:	404b      	eors	r3, r1
 8003798:	441a      	add	r2, r3
 800379a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800379e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a4:	ea4f 4173 	mov.w	r1, r3, ror #17
 80037a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037ac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037b2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80037b6:	4059      	eors	r1, r3
 80037b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037bc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037c2:	0a9b      	lsrs	r3, r3, #10
 80037c4:	4059      	eors	r1, r3
 80037c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d0:	4419      	add	r1, r3
 80037d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80037e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80037ee:	4058      	eors	r0, r3
 80037f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80037f4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	08db      	lsrs	r3, r3, #3
 80037fc:	4043      	eors	r3, r0
 80037fe:	4419      	add	r1, r3
 8003800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003804:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	4419      	add	r1, r3
 800380c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003810:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003814:	66d9      	str	r1, [r3, #108]	; 0x6c
 8003816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800381a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800381e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003820:	441a      	add	r2, r3
 8003822:	4b5d      	ldr	r3, [pc, #372]	; (8003998 <sha256_process+0x1f30>)
 8003824:	4413      	add	r3, r2
 8003826:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800382a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800382e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003832:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003836:	ea4f 3373 	mov.w	r3, r3, ror #13
 800383a:	405a      	eors	r2, r3
 800383c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003840:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003844:	405a      	eors	r2, r3
 8003846:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384e:	4019      	ands	r1, r3
 8003850:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003858:	4318      	orrs	r0, r3
 800385a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800385e:	4003      	ands	r3, r0
 8003860:	430b      	orrs	r3, r1
 8003862:	4413      	add	r3, r2
 8003864:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003868:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800386c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003870:	4413      	add	r3, r2
 8003872:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003876:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800387a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800387e:	4413      	add	r3, r2
 8003880:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8003884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003888:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800388c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003890:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003894:	405a      	eors	r2, r3
 8003896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800389a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800389e:	405a      	eors	r2, r3
 80038a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80038a4:	441a      	add	r2, r3
 80038a6:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80038aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80038ae:	4059      	eors	r1, r3
 80038b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038b4:	4019      	ands	r1, r3
 80038b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80038ba:	404b      	eors	r3, r1
 80038bc:	441a      	add	r2, r3
 80038be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038c8:	ea4f 4173 	mov.w	r1, r3, ror #17
 80038cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038d0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038d6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80038da:	4059      	eors	r1, r3
 80038dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038e0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038e6:	0a9b      	lsrs	r3, r3, #10
 80038e8:	4059      	eors	r1, r3
 80038ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f4:	4419      	add	r1, r3
 80038f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003900:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003908:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800390c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003912:	4058      	eors	r0, r3
 8003914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003918:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800391c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391e:	08db      	lsrs	r3, r3, #3
 8003920:	4043      	eors	r3, r0
 8003922:	4419      	add	r1, r3
 8003924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003928:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	4419      	add	r1, r3
 8003930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003934:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003938:	6719      	str	r1, [r3, #112]	; 0x70
 800393a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800393e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	441a      	add	r2, r3
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <sha256_process+0x1f34>)
 8003948:	4413      	add	r3, r2
 800394a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800394e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003952:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003956:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800395a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800395e:	405a      	eors	r2, r3
 8003960:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003964:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003968:	405a      	eors	r2, r3
 800396a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800396e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003972:	4019      	ands	r1, r3
 8003974:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8003978:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800397c:	4318      	orrs	r0, r3
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003982:	4003      	ands	r3, r0
 8003984:	430b      	orrs	r3, r1
 8003986:	4413      	add	r3, r2
 8003988:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800398c:	e008      	b.n	80039a0 <sha256_process+0x1f38>
 800398e:	bf00      	nop
 8003990:	a831c66d 	.word	0xa831c66d
 8003994:	b00327c8 	.word	0xb00327c8
 8003998:	bf597fc7 	.word	0xbf597fc7
 800399c:	c6e00bf3 	.word	0xc6e00bf3
 80039a0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80039a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039a8:	4413      	add	r3, r2
 80039aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80039ae:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80039b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039b6:	4413      	add	r3, r2
 80039b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80039bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80039c0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80039c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80039c8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80039cc:	405a      	eors	r2, r3
 80039ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80039d2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80039d6:	405a      	eors	r2, r3
 80039d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80039dc:	441a      	add	r2, r3
 80039de:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80039e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039e6:	4059      	eors	r1, r3
 80039e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80039ec:	4019      	ands	r1, r3
 80039ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80039f2:	404b      	eors	r3, r1
 80039f4:	441a      	add	r2, r3
 80039f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80039fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a00:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a08:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a0e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003a12:	4059      	eors	r1, r3
 8003a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a18:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a1e:	0a9b      	lsrs	r3, r3, #10
 8003a20:	4059      	eors	r1, r3
 8003a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	4419      	add	r1, r3
 8003a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a32:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a40:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003a4a:	4058      	eors	r0, r3
 8003a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a50:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	08db      	lsrs	r3, r3, #3
 8003a58:	4043      	eors	r3, r0
 8003a5a:	4419      	add	r1, r3
 8003a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a60:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a66:	4419      	add	r1, r3
 8003a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a6c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a70:	6759      	str	r1, [r3, #116]	; 0x74
 8003a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7c:	441a      	add	r2, r3
 8003a7e:	4bee      	ldr	r3, [pc, #952]	; (8003e38 <sha256_process+0x23d0>)
 8003a80:	4413      	add	r3, r2
 8003a82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003a86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a8a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003a8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a92:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003a96:	405a      	eors	r2, r3
 8003a98:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a9c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003aa0:	405a      	eors	r2, r3
 8003aa2:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8003aa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003aaa:	4019      	ands	r1, r3
 8003aac:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8003ab0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ab4:	4318      	orrs	r0, r3
 8003ab6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003aba:	4003      	ands	r3, r0
 8003abc:	430b      	orrs	r3, r1
 8003abe:	4413      	add	r3, r2
 8003ac0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003ac4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003acc:	4413      	add	r3, r2
 8003ace:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003ad2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003ad6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ada:	4413      	add	r3, r2
 8003adc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aec:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003af0:	405a      	eors	r2, r3
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af6:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003afa:	405a      	eors	r2, r3
 8003afc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b00:	441a      	add	r2, r3
 8003b02:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8003b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b0a:	4059      	eors	r1, r3
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b10:	4019      	ands	r1, r3
 8003b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b16:	404b      	eors	r3, r1
 8003b18:	441a      	add	r2, r3
 8003b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b1e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b24:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b2c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003b36:	4059      	eors	r1, r3
 8003b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b3c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	0a9b      	lsrs	r3, r3, #10
 8003b44:	4059      	eors	r1, r3
 8003b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b50:	4419      	add	r1, r3
 8003b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b56:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5c:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b64:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003b6e:	4058      	eors	r0, r3
 8003b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b74:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7a:	08db      	lsrs	r3, r3, #3
 8003b7c:	4043      	eors	r3, r0
 8003b7e:	4419      	add	r1, r3
 8003b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b84:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	4419      	add	r1, r3
 8003b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b90:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b94:	6799      	str	r1, [r3, #120]	; 0x78
 8003b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003b9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ba0:	441a      	add	r2, r3
 8003ba2:	4ba6      	ldr	r3, [pc, #664]	; (8003e3c <sha256_process+0x23d4>)
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003baa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003bae:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003bb2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003bb6:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003bba:	405a      	eors	r2, r3
 8003bbc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003bc0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003bc4:	405a      	eors	r2, r3
 8003bc6:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8003bca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003bce:	4019      	ands	r1, r3
 8003bd0:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8003bd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003bd8:	4318      	orrs	r0, r3
 8003bda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bde:	4003      	ands	r3, r0
 8003be0:	430b      	orrs	r3, r1
 8003be2:	4413      	add	r3, r2
 8003be4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003be8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003bf6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003bfa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003bfe:	4413      	add	r3, r2
 8003c00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8003c04:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003c08:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003c0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003c10:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003c14:	405a      	eors	r2, r3
 8003c16:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003c1a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003c1e:	405a      	eors	r2, r3
 8003c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c24:	441a      	add	r2, r3
 8003c26:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8003c2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003c2e:	4059      	eors	r1, r3
 8003c30:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003c34:	4019      	ands	r1, r3
 8003c36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003c3a:	404b      	eors	r3, r1
 8003c3c:	441a      	add	r2, r3
 8003c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c42:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c48:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c50:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c56:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003c5a:	4059      	eors	r1, r3
 8003c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c60:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c66:	0a9b      	lsrs	r3, r3, #10
 8003c68:	4059      	eors	r1, r3
 8003c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c74:	4419      	add	r1, r3
 8003c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c88:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003c92:	4058      	eors	r0, r3
 8003c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003c98:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	08db      	lsrs	r3, r3, #3
 8003ca0:	4043      	eors	r3, r0
 8003ca2:	4419      	add	r1, r3
 8003ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ca8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cae:	4419      	add	r1, r3
 8003cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cb4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003cb8:	67d9      	str	r1, [r3, #124]	; 0x7c
 8003cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003cbe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003cc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cc4:	441a      	add	r2, r3
 8003cc6:	4b5e      	ldr	r3, [pc, #376]	; (8003e40 <sha256_process+0x23d8>)
 8003cc8:	4413      	add	r3, r2
 8003cca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003cce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cd2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003cd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cda:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003cde:	405a      	eors	r2, r3
 8003ce0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ce4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003ce8:	405a      	eors	r2, r3
 8003cea:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8003cee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003cf2:	4019      	ands	r1, r3
 8003cf4:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8003cf8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003cfc:	4318      	orrs	r0, r3
 8003cfe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d02:	4003      	ands	r3, r0
 8003d04:	430b      	orrs	r3, r1
 8003d06:	4413      	add	r3, r2
 8003d08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003d0c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d14:	4413      	add	r3, r2
 8003d16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003d1a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003d1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003d22:	4413      	add	r3, r2
 8003d24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8003d28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d2c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003d30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d34:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003d38:	405a      	eors	r2, r3
 8003d3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d3e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003d42:	405a      	eors	r2, r3
 8003d44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d48:	441a      	add	r2, r3
 8003d4a:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8003d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d52:	4059      	eors	r1, r3
 8003d54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d58:	4019      	ands	r1, r3
 8003d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d5e:	404b      	eors	r3, r1
 8003d60:	441a      	add	r2, r3
 8003d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d66:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003d6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d6c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d74:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d7a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003d7e:	4059      	eors	r1, r3
 8003d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d84:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003d88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d8a:	0a9b      	lsrs	r3, r3, #10
 8003d8c:	4059      	eors	r1, r3
 8003d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d98:	4419      	add	r1, r3
 8003d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003d9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003db6:	4058      	eors	r0, r3
 8003db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dbc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	08db      	lsrs	r3, r3, #3
 8003dc4:	4043      	eors	r3, r0
 8003dc6:	4419      	add	r1, r3
 8003dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dcc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4419      	add	r1, r3
 8003dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003dd8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ddc:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
 8003de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003de4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dec:	441a      	add	r2, r3
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <sha256_process+0x23dc>)
 8003df0:	4413      	add	r3, r2
 8003df2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dfa:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e02:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003e06:	405a      	eors	r2, r3
 8003e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e0c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003e10:	405a      	eors	r2, r3
 8003e12:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8003e16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e1a:	4019      	ands	r1, r3
 8003e1c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8003e20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e24:	4318      	orrs	r0, r3
 8003e26:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003e2a:	4003      	ands	r3, r0
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	4413      	add	r3, r2
 8003e30:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003e34:	e008      	b.n	8003e48 <sha256_process+0x23e0>
 8003e36:	bf00      	nop
 8003e38:	d5a79147 	.word	0xd5a79147
 8003e3c:	06ca6351 	.word	0x06ca6351
 8003e40:	14292967 	.word	0x14292967
 8003e44:	27b70a85 	.word	0x27b70a85
 8003e48:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e50:	4413      	add	r3, r2
 8003e52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e56:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003e5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e5e:	4413      	add	r3, r2
 8003e60:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8003e64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e68:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003e6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e70:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003e74:	405a      	eors	r2, r3
 8003e76:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e7a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003e7e:	405a      	eors	r2, r3
 8003e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e84:	441a      	add	r2, r3
 8003e86:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8003e8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e8e:	4059      	eors	r1, r3
 8003e90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e94:	4019      	ands	r1, r3
 8003e96:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e9a:	404b      	eors	r3, r1
 8003e9c:	441a      	add	r2, r3
 8003e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ea2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ea8:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003eb0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eb6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003eba:	4059      	eors	r1, r3
 8003ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ec0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec6:	0a9b      	lsrs	r3, r3, #10
 8003ec8:	4059      	eors	r1, r3
 8003eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ece:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ed4:	4419      	add	r1, r3
 8003ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003eda:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee0:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8003ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ee8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eee:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003ef2:	4058      	eors	r0, r3
 8003ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ef8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efe:	08db      	lsrs	r3, r3, #3
 8003f00:	4043      	eors	r3, r0
 8003f02:	4419      	add	r1, r3
 8003f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f08:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	4419      	add	r1, r3
 8003f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f14:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f18:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
 8003f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f20:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f28:	441a      	add	r2, r3
 8003f2a:	4bf4      	ldr	r3, [pc, #976]	; (80042fc <sha256_process+0x2894>)
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003f32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f36:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003f3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f3e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003f42:	405a      	eors	r2, r3
 8003f44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f48:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003f4c:	405a      	eors	r2, r3
 8003f4e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8003f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f56:	4019      	ands	r1, r3
 8003f58:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8003f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f60:	4318      	orrs	r0, r3
 8003f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f66:	4003      	ands	r3, r0
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003f70:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f78:	4413      	add	r3, r2
 8003f7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003f7e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003f82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003f86:	4413      	add	r3, r2
 8003f88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8003f8c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003f90:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8003f94:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003f98:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8003f9c:	405a      	eors	r2, r3
 8003f9e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003fa2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8003fa6:	405a      	eors	r2, r3
 8003fa8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003fac:	441a      	add	r2, r3
 8003fae:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8003fb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fb6:	4059      	eors	r1, r3
 8003fb8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003fbc:	4019      	ands	r1, r3
 8003fbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fc2:	404b      	eors	r3, r1
 8003fc4:	441a      	add	r2, r3
 8003fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fd2:	ea4f 4173 	mov.w	r1, r3, ror #17
 8003fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fda:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8003fe6:	4059      	eors	r1, r3
 8003fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ff4:	0a9b      	lsrs	r3, r3, #10
 8003ff6:	4059      	eors	r1, r3
 8003ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ffc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004002:	4419      	add	r1, r3
 8004004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004008:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800400c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004016:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800401a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004020:	4058      	eors	r0, r3
 8004022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004026:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800402a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402c:	08db      	lsrs	r3, r3, #3
 800402e:	4043      	eors	r3, r0
 8004030:	4419      	add	r1, r3
 8004032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004036:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800403a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800403c:	4419      	add	r1, r3
 800403e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004042:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004046:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
 800404a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800404e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	441a      	add	r2, r3
 8004058:	4ba9      	ldr	r3, [pc, #676]	; (8004300 <sha256_process+0x2898>)
 800405a:	4413      	add	r3, r2
 800405c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004064:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004070:	405a      	eors	r2, r3
 8004072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004076:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800407a:	405a      	eors	r2, r3
 800407c:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8004080:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004084:	4019      	ands	r1, r3
 8004086:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800408a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800408e:	4318      	orrs	r0, r3
 8004090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004094:	4003      	ands	r3, r0
 8004096:	430b      	orrs	r3, r1
 8004098:	4413      	add	r3, r2
 800409a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800409e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80040a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a6:	4413      	add	r3, r2
 80040a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80040ac:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80040b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80040b4:	4413      	add	r3, r2
 80040b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80040ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040be:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80040c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040c6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80040ca:	405a      	eors	r2, r3
 80040cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040d0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80040d4:	405a      	eors	r2, r3
 80040d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040da:	441a      	add	r2, r3
 80040dc:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80040e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040e4:	4059      	eors	r1, r3
 80040e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80040ea:	4019      	ands	r1, r3
 80040ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80040f0:	404b      	eors	r3, r1
 80040f2:	441a      	add	r2, r3
 80040f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80040fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004100:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004108:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800410c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004110:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004114:	4059      	eors	r1, r3
 8004116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800411a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800411e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004122:	0a9b      	lsrs	r3, r3, #10
 8004124:	4059      	eors	r1, r3
 8004126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800412a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	4419      	add	r1, r3
 8004132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004136:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800413a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413c:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004144:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800414e:	4058      	eors	r0, r3
 8004150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004154:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415a:	08db      	lsrs	r3, r3, #3
 800415c:	4043      	eors	r3, r0
 800415e:	4419      	add	r1, r3
 8004160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004164:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416a:	4419      	add	r1, r3
 800416c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004170:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004174:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
 8004178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800417c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004184:	441a      	add	r2, r3
 8004186:	4b5f      	ldr	r3, [pc, #380]	; (8004304 <sha256_process+0x289c>)
 8004188:	4413      	add	r3, r2
 800418a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800418e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004192:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004196:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800419a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800419e:	405a      	eors	r2, r3
 80041a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80041a4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80041a8:	405a      	eors	r2, r3
 80041aa:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80041ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b2:	4019      	ands	r1, r3
 80041b4:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80041b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041bc:	4318      	orrs	r0, r3
 80041be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80041c2:	4003      	ands	r3, r0
 80041c4:	430b      	orrs	r3, r1
 80041c6:	4413      	add	r3, r2
 80041c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80041cc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80041d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d4:	4413      	add	r3, r2
 80041d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80041da:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80041de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80041e2:	4413      	add	r3, r2
 80041e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80041e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041ec:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80041f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041f4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80041f8:	405a      	eors	r2, r3
 80041fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041fe:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004202:	405a      	eors	r2, r3
 8004204:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004208:	441a      	add	r2, r3
 800420a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800420e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004212:	4059      	eors	r1, r3
 8004214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004218:	4019      	ands	r1, r3
 800421a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800421e:	404b      	eors	r3, r1
 8004220:	441a      	add	r2, r3
 8004222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004226:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004236:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004242:	4059      	eors	r1, r3
 8004244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004248:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004250:	0a9b      	lsrs	r3, r3, #10
 8004252:	4059      	eors	r1, r3
 8004254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004258:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800425c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425e:	4419      	add	r1, r3
 8004260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004264:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800426e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004272:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004278:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800427c:	4058      	eors	r0, r3
 800427e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004282:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	08db      	lsrs	r3, r3, #3
 800428a:	4043      	eors	r3, r0
 800428c:	4419      	add	r1, r3
 800428e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004292:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004298:	4419      	add	r1, r3
 800429a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800429e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80042a2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 80042a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	441a      	add	r2, r3
 80042b4:	4b14      	ldr	r3, [pc, #80]	; (8004308 <sha256_process+0x28a0>)
 80042b6:	4413      	add	r3, r2
 80042b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80042bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042c0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80042c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042c8:	ea4f 3373 	mov.w	r3, r3, ror #13
 80042cc:	405a      	eors	r2, r3
 80042ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042d2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80042d6:	405a      	eors	r2, r3
 80042d8:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80042dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80042e0:	4019      	ands	r1, r3
 80042e2:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80042e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80042ea:	4318      	orrs	r0, r3
 80042ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f0:	4003      	ands	r3, r0
 80042f2:	430b      	orrs	r3, r1
 80042f4:	4413      	add	r3, r2
 80042f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80042fa:	e007      	b.n	800430c <sha256_process+0x28a4>
 80042fc:	2e1b2138 	.word	0x2e1b2138
 8004300:	4d2c6dfc 	.word	0x4d2c6dfc
 8004304:	53380d13 	.word	0x53380d13
 8004308:	650a7354 	.word	0x650a7354
 800430c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004314:	4413      	add	r3, r2
 8004316:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800431a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800431e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004322:	4413      	add	r3, r2
 8004324:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004328:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800432c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004330:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004334:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004338:	405a      	eors	r2, r3
 800433a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800433e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004342:	405a      	eors	r2, r3
 8004344:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004348:	441a      	add	r2, r3
 800434a:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800434e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004352:	4059      	eors	r1, r3
 8004354:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004358:	4019      	ands	r1, r3
 800435a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800435e:	404b      	eors	r3, r1
 8004360:	441a      	add	r2, r3
 8004362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004366:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800436a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800436e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004376:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800437a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800437e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004382:	4059      	eors	r1, r3
 8004384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004388:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800438c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004390:	0a9b      	lsrs	r3, r3, #10
 8004392:	4059      	eors	r1, r3
 8004394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004398:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800439c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800439e:	4419      	add	r1, r3
 80043a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043a4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80043ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b8:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80043bc:	4058      	eors	r0, r3
 80043be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c8:	08db      	lsrs	r3, r3, #3
 80043ca:	4043      	eors	r3, r0
 80043cc:	4419      	add	r1, r3
 80043ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	4419      	add	r1, r3
 80043da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043e2:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
 80043e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f2:	441a      	add	r2, r3
 80043f4:	4bf5      	ldr	r3, [pc, #980]	; (80047cc <sha256_process+0x2d64>)
 80043f6:	4413      	add	r3, r2
 80043f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80043fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004400:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004404:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004408:	ea4f 3373 	mov.w	r3, r3, ror #13
 800440c:	405a      	eors	r2, r3
 800440e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004412:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004416:	405a      	eors	r2, r3
 8004418:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800441c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004420:	4019      	ands	r1, r3
 8004422:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004426:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800442a:	4318      	orrs	r0, r3
 800442c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004430:	4003      	ands	r3, r0
 8004432:	430b      	orrs	r3, r1
 8004434:	4413      	add	r3, r2
 8004436:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800443a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800443e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004442:	4413      	add	r3, r2
 8004444:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004448:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800444c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004450:	4413      	add	r3, r2
 8004452:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445a:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800445e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004462:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004466:	405a      	eors	r2, r3
 8004468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004470:	405a      	eors	r2, r3
 8004472:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004476:	441a      	add	r2, r3
 8004478:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800447c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004480:	4059      	eors	r1, r3
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004486:	4019      	ands	r1, r3
 8004488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800448c:	404b      	eors	r3, r1
 800448e:	441a      	add	r2, r3
 8004490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004494:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449c:	ea4f 4173 	mov.w	r1, r3, ror #17
 80044a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044a4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80044a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ac:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80044b0:	4059      	eors	r1, r3
 80044b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80044ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044be:	0a9b      	lsrs	r3, r3, #10
 80044c0:	4059      	eors	r1, r3
 80044c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80044ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044cc:	4419      	add	r1, r3
 80044ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80044d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d8:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80044dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044e0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80044e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80044ea:	4058      	eors	r0, r3
 80044ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80044f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f6:	08db      	lsrs	r3, r3, #3
 80044f8:	4043      	eors	r3, r0
 80044fa:	4419      	add	r1, r3
 80044fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004500:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004506:	4419      	add	r1, r3
 8004508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800450c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004510:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 8004514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004518:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800451c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004520:	441a      	add	r2, r3
 8004522:	4bab      	ldr	r3, [pc, #684]	; (80047d0 <sha256_process+0x2d68>)
 8004524:	4413      	add	r3, r2
 8004526:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800452a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800452e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004532:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004536:	ea4f 3373 	mov.w	r3, r3, ror #13
 800453a:	405a      	eors	r2, r3
 800453c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004540:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004544:	405a      	eors	r2, r3
 8004546:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800454a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800454e:	4019      	ands	r1, r3
 8004550:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004554:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004558:	4318      	orrs	r0, r3
 800455a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800455e:	4003      	ands	r3, r0
 8004560:	430b      	orrs	r3, r1
 8004562:	4413      	add	r3, r2
 8004564:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004568:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800456c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004570:	4413      	add	r3, r2
 8004572:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004576:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800457a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800457e:	4413      	add	r3, r2
 8004580:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004584:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004588:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800458c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004590:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004594:	405a      	eors	r2, r3
 8004596:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800459a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800459e:	405a      	eors	r2, r3
 80045a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045a4:	441a      	add	r2, r3
 80045a6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80045aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80045ae:	4059      	eors	r1, r3
 80045b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80045b4:	4019      	ands	r1, r3
 80045b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80045ba:	404b      	eors	r3, r1
 80045bc:	441a      	add	r2, r3
 80045be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80045c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ca:	ea4f 4173 	mov.w	r1, r3, ror #17
 80045ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80045d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045da:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80045de:	4059      	eors	r1, r3
 80045e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80045e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ec:	0a9b      	lsrs	r3, r3, #10
 80045ee:	4059      	eors	r1, r3
 80045f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045f4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80045f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045fc:	4419      	add	r1, r3
 80045fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004602:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004608:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800460c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004610:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004616:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800461a:	4058      	eors	r0, r3
 800461c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004620:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004626:	08db      	lsrs	r3, r3, #3
 8004628:	4043      	eors	r3, r0
 800462a:	4419      	add	r1, r3
 800462c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004630:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004636:	4419      	add	r1, r3
 8004638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800463c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004640:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
 8004644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004648:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800464c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004650:	441a      	add	r2, r3
 8004652:	4b60      	ldr	r3, [pc, #384]	; (80047d4 <sha256_process+0x2d6c>)
 8004654:	4413      	add	r3, r2
 8004656:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800465a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800465e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004662:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004666:	ea4f 3373 	mov.w	r3, r3, ror #13
 800466a:	405a      	eors	r2, r3
 800466c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004670:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004674:	405a      	eors	r2, r3
 8004676:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800467a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800467e:	4019      	ands	r1, r3
 8004680:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8004684:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004688:	4318      	orrs	r0, r3
 800468a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800468e:	4003      	ands	r3, r0
 8004690:	430b      	orrs	r3, r1
 8004692:	4413      	add	r3, r2
 8004694:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004698:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800469c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046a0:	4413      	add	r3, r2
 80046a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80046a6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80046aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80046ae:	4413      	add	r3, r2
 80046b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80046b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046b8:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80046bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046c0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80046c4:	405a      	eors	r2, r3
 80046c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046ca:	ea4f 6373 	mov.w	r3, r3, ror #25
 80046ce:	405a      	eors	r2, r3
 80046d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80046d4:	441a      	add	r2, r3
 80046d6:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80046da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046de:	4059      	eors	r1, r3
 80046e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046e4:	4019      	ands	r1, r3
 80046e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ea:	404b      	eors	r3, r1
 80046ec:	441a      	add	r2, r3
 80046ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80046f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046fa:	ea4f 4173 	mov.w	r1, r3, ror #17
 80046fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004702:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800470a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800470e:	4059      	eors	r1, r3
 8004710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004714:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800471c:	0a9b      	lsrs	r3, r3, #10
 800471e:	4059      	eors	r1, r3
 8004720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004724:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800472c:	4419      	add	r1, r3
 800472e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004732:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004738:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800473c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004740:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004746:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800474a:	4058      	eors	r0, r3
 800474c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004750:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004756:	08db      	lsrs	r3, r3, #3
 8004758:	4043      	eors	r3, r0
 800475a:	4419      	add	r1, r3
 800475c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004760:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004766:	4419      	add	r1, r3
 8004768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800476c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004770:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
 8004774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004778:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800477c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004780:	441a      	add	r2, r3
 8004782:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <sha256_process+0x2d70>)
 8004784:	4413      	add	r3, r2
 8004786:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800478a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800478e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004796:	ea4f 3373 	mov.w	r3, r3, ror #13
 800479a:	405a      	eors	r2, r3
 800479c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047a0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80047a4:	405a      	eors	r2, r3
 80047a6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80047aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047ae:	4019      	ands	r1, r3
 80047b0:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80047b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80047b8:	4318      	orrs	r0, r3
 80047ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80047be:	4003      	ands	r3, r0
 80047c0:	430b      	orrs	r3, r1
 80047c2:	4413      	add	r3, r2
 80047c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80047c8:	e008      	b.n	80047dc <sha256_process+0x2d74>
 80047ca:	bf00      	nop
 80047cc:	766a0abb 	.word	0x766a0abb
 80047d0:	81c2c92e 	.word	0x81c2c92e
 80047d4:	92722c85 	.word	0x92722c85
 80047d8:	a2bfe8a1 	.word	0xa2bfe8a1
 80047dc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80047e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e4:	4413      	add	r3, r2
 80047e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047ea:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80047ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80047f2:	4413      	add	r3, r2
 80047f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80047f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80047fc:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004800:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004804:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004808:	405a      	eors	r2, r3
 800480a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800480e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004812:	405a      	eors	r2, r3
 8004814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004818:	441a      	add	r2, r3
 800481a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800481e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004822:	4059      	eors	r1, r3
 8004824:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004828:	4019      	ands	r1, r3
 800482a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800482e:	404b      	eors	r3, r1
 8004830:	441a      	add	r2, r3
 8004832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004836:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800483a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800483e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004846:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800484a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800484e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004852:	4059      	eors	r1, r3
 8004854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004858:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800485c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004860:	0a9b      	lsrs	r3, r3, #10
 8004862:	4059      	eors	r1, r3
 8004864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004868:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004870:	4419      	add	r1, r3
 8004872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004876:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800487a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800487c:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004884:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800488a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800488e:	4058      	eors	r0, r3
 8004890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004894:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800489a:	08db      	lsrs	r3, r3, #3
 800489c:	4043      	eors	r3, r0
 800489e:	4419      	add	r1, r3
 80048a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80048a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048aa:	4419      	add	r1, r3
 80048ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80048b4:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
 80048b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048bc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80048c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048c4:	441a      	add	r2, r3
 80048c6:	4bf6      	ldr	r3, [pc, #984]	; (8004ca0 <sha256_process+0x3238>)
 80048c8:	4413      	add	r3, r2
 80048ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80048ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80048d2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80048d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80048da:	ea4f 3373 	mov.w	r3, r3, ror #13
 80048de:	405a      	eors	r2, r3
 80048e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80048e4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80048e8:	405a      	eors	r2, r3
 80048ea:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80048ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f2:	4019      	ands	r1, r3
 80048f4:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80048f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048fc:	4318      	orrs	r0, r3
 80048fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004902:	4003      	ands	r3, r0
 8004904:	430b      	orrs	r3, r1
 8004906:	4413      	add	r3, r2
 8004908:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800490c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004914:	4413      	add	r3, r2
 8004916:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800491a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800491e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004922:	4413      	add	r3, r2
 8004924:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004928:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800492c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004930:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004934:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004938:	405a      	eors	r2, r3
 800493a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800493e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004942:	405a      	eors	r2, r3
 8004944:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004948:	441a      	add	r2, r3
 800494a:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800494e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004952:	4059      	eors	r1, r3
 8004954:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004958:	4019      	ands	r1, r3
 800495a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800495e:	404b      	eors	r3, r1
 8004960:	441a      	add	r2, r3
 8004962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004966:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800496a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800496e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004976:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800497a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800497e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004982:	4059      	eors	r1, r3
 8004984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004988:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800498c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004990:	0a9b      	lsrs	r3, r3, #10
 8004992:	4059      	eors	r1, r3
 8004994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004998:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800499c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a0:	4419      	add	r1, r3
 80049a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80049aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ac:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80049b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80049b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ba:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80049be:	4058      	eors	r0, r3
 80049c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80049c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ca:	08db      	lsrs	r3, r3, #3
 80049cc:	4043      	eors	r3, r0
 80049ce:	4419      	add	r1, r3
 80049d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049d4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80049d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049da:	4419      	add	r1, r3
 80049dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049e0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80049e4:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
 80049e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80049f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049f4:	441a      	add	r2, r3
 80049f6:	4bab      	ldr	r3, [pc, #684]	; (8004ca4 <sha256_process+0x323c>)
 80049f8:	4413      	add	r3, r2
 80049fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80049fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a02:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a0a:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004a0e:	405a      	eors	r2, r3
 8004a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a14:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004a18:	405a      	eors	r2, r3
 8004a1a:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8004a1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a22:	4019      	ands	r1, r3
 8004a24:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8004a28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a2c:	4318      	orrs	r0, r3
 8004a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a32:	4003      	ands	r3, r0
 8004a34:	430b      	orrs	r3, r1
 8004a36:	4413      	add	r3, r2
 8004a38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004a3c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a44:	4413      	add	r3, r2
 8004a46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004a4a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004a4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a52:	4413      	add	r3, r2
 8004a54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004a58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a5c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004a60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a64:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004a68:	405a      	eors	r2, r3
 8004a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a6e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004a72:	405a      	eors	r2, r3
 8004a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a78:	441a      	add	r2, r3
 8004a7a:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8004a7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a82:	4059      	eors	r1, r3
 8004a84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a88:	4019      	ands	r1, r3
 8004a8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a8e:	404b      	eors	r3, r1
 8004a90:	441a      	add	r2, r3
 8004a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a9e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004aaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004aae:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004ab2:	4059      	eors	r1, r3
 8004ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004abc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ac0:	0a9b      	lsrs	r3, r3, #10
 8004ac2:	4059      	eors	r1, r3
 8004ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad0:	4419      	add	r1, r3
 8004ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004adc:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ae4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004aee:	4058      	eors	r0, r3
 8004af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	08db      	lsrs	r3, r3, #3
 8004afc:	4043      	eors	r3, r0
 8004afe:	4419      	add	r1, r3
 8004b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b04:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b0a:	4419      	add	r1, r3
 8004b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b10:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b14:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
 8004b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b24:	441a      	add	r2, r3
 8004b26:	4b60      	ldr	r3, [pc, #384]	; (8004ca8 <sha256_process+0x3240>)
 8004b28:	4413      	add	r3, r2
 8004b2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004b2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004b32:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004b36:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004b3a:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004b3e:	405a      	eors	r2, r3
 8004b40:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004b44:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004b48:	405a      	eors	r2, r3
 8004b4a:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8004b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b52:	4019      	ands	r1, r3
 8004b54:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8004b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b5c:	4318      	orrs	r0, r3
 8004b5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b62:	4003      	ands	r3, r0
 8004b64:	430b      	orrs	r3, r1
 8004b66:	4413      	add	r3, r2
 8004b68:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004b6c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b74:	4413      	add	r3, r2
 8004b76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004b7a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004b7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b82:	4413      	add	r3, r2
 8004b84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b8c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b94:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004b98:	405a      	eors	r2, r3
 8004b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b9e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004ba2:	405a      	eors	r2, r3
 8004ba4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ba8:	441a      	add	r2, r3
 8004baa:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8004bae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004bb2:	4059      	eors	r1, r3
 8004bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bb8:	4019      	ands	r1, r3
 8004bba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004bbe:	404b      	eors	r3, r1
 8004bc0:	441a      	add	r2, r3
 8004bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004bca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004bce:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004bda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004bde:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004be2:	4059      	eors	r1, r3
 8004be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004bec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004bf0:	0a9b      	lsrs	r3, r3, #10
 8004bf2:	4059      	eors	r1, r3
 8004bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c00:	4419      	add	r1, r3
 8004c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c0c:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c14:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c1a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004c1e:	4058      	eors	r0, r3
 8004c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c24:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2a:	08db      	lsrs	r3, r3, #3
 8004c2c:	4043      	eors	r3, r0
 8004c2e:	4419      	add	r1, r3
 8004c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c34:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	4419      	add	r1, r3
 8004c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c40:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c44:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 8004c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c54:	441a      	add	r2, r3
 8004c56:	4b15      	ldr	r3, [pc, #84]	; (8004cac <sha256_process+0x3244>)
 8004c58:	4413      	add	r3, r2
 8004c5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c62:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c6a:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004c6e:	405a      	eors	r2, r3
 8004c70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c74:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004c78:	405a      	eors	r2, r3
 8004c7a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8004c7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004c82:	4019      	ands	r1, r3
 8004c84:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8004c88:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004c8c:	4318      	orrs	r0, r3
 8004c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c92:	4003      	ands	r3, r0
 8004c94:	430b      	orrs	r3, r1
 8004c96:	4413      	add	r3, r2
 8004c98:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004c9c:	e008      	b.n	8004cb0 <sha256_process+0x3248>
 8004c9e:	bf00      	nop
 8004ca0:	a81a664b 	.word	0xa81a664b
 8004ca4:	c24b8b70 	.word	0xc24b8b70
 8004ca8:	c76c51a3 	.word	0xc76c51a3
 8004cac:	d192e819 	.word	0xd192e819
 8004cb0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb8:	4413      	add	r3, r2
 8004cba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004cbe:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004cc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004ccc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004cd0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004cd8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004cdc:	405a      	eors	r2, r3
 8004cde:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ce2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004ce6:	405a      	eors	r2, r3
 8004ce8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004cec:	441a      	add	r2, r3
 8004cee:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8004cf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cf6:	4059      	eors	r1, r3
 8004cf8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004cfc:	4019      	ands	r1, r3
 8004cfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d02:	404b      	eors	r3, r1
 8004d04:	441a      	add	r2, r3
 8004d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d12:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d22:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004d26:	4059      	eors	r1, r3
 8004d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d34:	0a9b      	lsrs	r3, r3, #10
 8004d36:	4059      	eors	r1, r3
 8004d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d44:	4419      	add	r1, r3
 8004d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d50:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d58:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d5e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004d62:	4058      	eors	r0, r3
 8004d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d68:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d6e:	08db      	lsrs	r3, r3, #3
 8004d70:	4043      	eors	r3, r0
 8004d72:	4419      	add	r1, r3
 8004d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d78:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d7e:	4419      	add	r1, r3
 8004d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d84:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d88:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 8004d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d90:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d98:	441a      	add	r2, r3
 8004d9a:	4bf9      	ldr	r3, [pc, #996]	; (8005180 <sha256_process+0x3718>)
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004da2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004da6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004daa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004dae:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004db2:	405a      	eors	r2, r3
 8004db4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004db8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004dbc:	405a      	eors	r2, r3
 8004dbe:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8004dc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004dc6:	4019      	ands	r1, r3
 8004dc8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004dcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004dd0:	4318      	orrs	r0, r3
 8004dd2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004dd6:	4003      	ands	r3, r0
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	4413      	add	r3, r2
 8004ddc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004de0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de8:	4413      	add	r3, r2
 8004dea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004dee:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004df2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004df6:	4413      	add	r3, r2
 8004df8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e00:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e08:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004e0c:	405a      	eors	r2, r3
 8004e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e12:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004e16:	405a      	eors	r2, r3
 8004e18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e1c:	441a      	add	r2, r3
 8004e1e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8004e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e26:	4059      	eors	r1, r3
 8004e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e2c:	4019      	ands	r1, r3
 8004e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e32:	404b      	eors	r3, r1
 8004e34:	441a      	add	r2, r3
 8004e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004e3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e42:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004e4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e52:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004e56:	4059      	eors	r1, r3
 8004e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004e60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e64:	0a9b      	lsrs	r3, r3, #10
 8004e66:	4059      	eors	r1, r3
 8004e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004e70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e74:	4419      	add	r1, r3
 8004e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004e7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e80:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e88:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004e8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e8e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004e92:	4058      	eors	r0, r3
 8004e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e98:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e9e:	08db      	lsrs	r3, r3, #3
 8004ea0:	4043      	eors	r3, r0
 8004ea2:	4419      	add	r1, r3
 8004ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eae:	4419      	add	r1, r3
 8004eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004eb8:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
 8004ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ec4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ec8:	441a      	add	r2, r3
 8004eca:	4bae      	ldr	r3, [pc, #696]	; (8005184 <sha256_process+0x371c>)
 8004ecc:	4413      	add	r3, r2
 8004ece:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004ed2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ed6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8004eda:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ede:	ea4f 3373 	mov.w	r3, r3, ror #13
 8004ee2:	405a      	eors	r2, r3
 8004ee4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ee8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8004eec:	405a      	eors	r2, r3
 8004eee:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8004ef2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ef6:	4019      	ands	r1, r3
 8004ef8:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004efc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f00:	4318      	orrs	r0, r3
 8004f02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f06:	4003      	ands	r3, r0
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004f10:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f18:	4413      	add	r3, r2
 8004f1a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f1e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004f22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f26:	4413      	add	r3, r2
 8004f28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004f2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f30:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8004f34:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f38:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8004f3c:	405a      	eors	r2, r3
 8004f3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f42:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004f46:	405a      	eors	r2, r3
 8004f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f4c:	441a      	add	r2, r3
 8004f4e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8004f52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f56:	4059      	eors	r1, r3
 8004f58:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f5c:	4019      	ands	r1, r3
 8004f5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f62:	404b      	eors	r3, r1
 8004f64:	441a      	add	r2, r3
 8004f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f72:	ea4f 4173 	mov.w	r1, r3, ror #17
 8004f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f82:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004f86:	4059      	eors	r1, r3
 8004f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f94:	0a9b      	lsrs	r3, r3, #10
 8004f96:	4059      	eors	r1, r3
 8004f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f9c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004fa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004fa4:	4419      	add	r1, r3
 8004fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004faa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb2:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8004fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fc2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8004fc6:	4058      	eors	r0, r3
 8004fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fcc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fd4:	08db      	lsrs	r3, r3, #3
 8004fd6:	4043      	eors	r3, r0
 8004fd8:	4419      	add	r1, r3
 8004fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fde:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe4:	4419      	add	r1, r3
 8004fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004fee:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 8004ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ffa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ffe:	441a      	add	r2, r3
 8005000:	4b61      	ldr	r3, [pc, #388]	; (8005188 <sha256_process+0x3720>)
 8005002:	4413      	add	r3, r2
 8005004:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005008:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800500c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005010:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005014:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005018:	405a      	eors	r2, r3
 800501a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800501e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005022:	405a      	eors	r2, r3
 8005024:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8005028:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800502c:	4019      	ands	r1, r3
 800502e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8005032:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005036:	4318      	orrs	r0, r3
 8005038:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800503c:	4003      	ands	r3, r0
 800503e:	430b      	orrs	r3, r1
 8005040:	4413      	add	r3, r2
 8005042:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005046:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800504a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800504e:	4413      	add	r3, r2
 8005050:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005054:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005058:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800505c:	4413      	add	r3, r2
 800505e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8005062:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005066:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800506a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800506e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005072:	405a      	eors	r2, r3
 8005074:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005078:	ea4f 6373 	mov.w	r3, r3, ror #25
 800507c:	405a      	eors	r2, r3
 800507e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005082:	441a      	add	r2, r3
 8005084:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8005088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800508c:	4059      	eors	r1, r3
 800508e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005092:	4019      	ands	r1, r3
 8005094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005098:	404b      	eors	r3, r1
 800509a:	441a      	add	r2, r3
 800509c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80050a8:	ea4f 4173 	mov.w	r1, r3, ror #17
 80050ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80050b8:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80050bc:	4059      	eors	r1, r3
 80050be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80050ca:	0a9b      	lsrs	r3, r3, #10
 80050cc:	4059      	eors	r1, r3
 80050ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80050da:	4419      	add	r1, r3
 80050dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e8:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80050ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050f8:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80050fc:	4058      	eors	r0, r3
 80050fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005102:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800510a:	08db      	lsrs	r3, r3, #3
 800510c:	4043      	eors	r3, r0
 800510e:	4419      	add	r1, r3
 8005110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005114:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800511c:	4419      	add	r1, r3
 800511e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005122:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005126:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
 800512a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800512e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005132:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005136:	441a      	add	r2, r3
 8005138:	4b14      	ldr	r3, [pc, #80]	; (800518c <sha256_process+0x3724>)
 800513a:	4413      	add	r3, r2
 800513c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005144:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800514c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005150:	405a      	eors	r2, r3
 8005152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005156:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800515a:	405a      	eors	r2, r3
 800515c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8005160:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005164:	4019      	ands	r1, r3
 8005166:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800516a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800516e:	4318      	orrs	r0, r3
 8005170:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005174:	4003      	ands	r3, r0
 8005176:	430b      	orrs	r3, r1
 8005178:	4413      	add	r3, r2
 800517a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800517e:	e007      	b.n	8005190 <sha256_process+0x3728>
 8005180:	d6990624 	.word	0xd6990624
 8005184:	f40e3585 	.word	0xf40e3585
 8005188:	106aa070 	.word	0x106aa070
 800518c:	19a4c116 	.word	0x19a4c116
 8005190:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005198:	4413      	add	r3, r2
 800519a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800519e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80051a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80051a6:	4413      	add	r3, r2
 80051a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 80051ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80051b0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80051b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80051b8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80051bc:	405a      	eors	r2, r3
 80051be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80051c2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80051c6:	405a      	eors	r2, r3
 80051c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051cc:	441a      	add	r2, r3
 80051ce:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80051d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80051d6:	4059      	eors	r1, r3
 80051d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80051dc:	4019      	ands	r1, r3
 80051de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80051e2:	404b      	eors	r3, r1
 80051e4:	441a      	add	r2, r3
 80051e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80051ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80051f2:	ea4f 4173 	mov.w	r1, r3, ror #17
 80051f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80051fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005202:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005206:	4059      	eors	r1, r3
 8005208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800520c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005210:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005214:	0a9b      	lsrs	r3, r3, #10
 8005216:	4059      	eors	r1, r3
 8005218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800521c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005220:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005224:	4419      	add	r1, r3
 8005226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005232:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005246:	4058      	eors	r0, r3
 8005248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005254:	08db      	lsrs	r3, r3, #3
 8005256:	4043      	eors	r3, r0
 8005258:	4419      	add	r1, r3
 800525a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005266:	4419      	add	r1, r3
 8005268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005270:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
 8005274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005278:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800527c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005280:	441a      	add	r2, r3
 8005282:	4bfc      	ldr	r3, [pc, #1008]	; (8005674 <sha256_process+0x3c0c>)
 8005284:	4413      	add	r3, r2
 8005286:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800528a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800528e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005292:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005296:	ea4f 3373 	mov.w	r3, r3, ror #13
 800529a:	405a      	eors	r2, r3
 800529c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052a0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80052a4:	405a      	eors	r2, r3
 80052a6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80052aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ae:	4019      	ands	r1, r3
 80052b0:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80052b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b8:	4318      	orrs	r0, r3
 80052ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052be:	4003      	ands	r3, r0
 80052c0:	430b      	orrs	r3, r1
 80052c2:	4413      	add	r3, r2
 80052c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80052c8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80052cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d0:	4413      	add	r3, r2
 80052d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80052d6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80052da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052de:	4413      	add	r3, r2
 80052e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 80052e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80052e8:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80052ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80052f0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80052f4:	405a      	eors	r2, r3
 80052f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80052fa:	ea4f 6373 	mov.w	r3, r3, ror #25
 80052fe:	405a      	eors	r2, r3
 8005300:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005304:	441a      	add	r2, r3
 8005306:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800530a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800530e:	4059      	eors	r1, r3
 8005310:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005314:	4019      	ands	r1, r3
 8005316:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800531a:	404b      	eors	r3, r1
 800531c:	441a      	add	r2, r3
 800531e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005322:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005326:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800532a:	ea4f 4173 	mov.w	r1, r3, ror #17
 800532e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005332:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005336:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800533a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800533e:	4059      	eors	r1, r3
 8005340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005344:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005348:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800534c:	0a9b      	lsrs	r3, r3, #10
 800534e:	4059      	eors	r1, r3
 8005350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005354:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005358:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800535c:	4419      	add	r1, r3
 800535e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005362:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800536a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800536e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005372:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800537a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800537e:	4058      	eors	r0, r3
 8005380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005384:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800538c:	08db      	lsrs	r3, r3, #3
 800538e:	4043      	eors	r3, r0
 8005390:	4419      	add	r1, r3
 8005392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005396:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	4419      	add	r1, r3
 80053a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80053a8:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 80053ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80053b4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80053b8:	441a      	add	r2, r3
 80053ba:	4baf      	ldr	r3, [pc, #700]	; (8005678 <sha256_process+0x3c10>)
 80053bc:	4413      	add	r3, r2
 80053be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80053c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80053ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ce:	ea4f 3373 	mov.w	r3, r3, ror #13
 80053d2:	405a      	eors	r2, r3
 80053d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053d8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80053dc:	405a      	eors	r2, r3
 80053de:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80053e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80053e6:	4019      	ands	r1, r3
 80053e8:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80053ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80053f0:	4318      	orrs	r0, r3
 80053f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f6:	4003      	ands	r3, r0
 80053f8:	430b      	orrs	r3, r1
 80053fa:	4413      	add	r3, r2
 80053fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005400:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005408:	4413      	add	r3, r2
 800540a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800540e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005412:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005416:	4413      	add	r3, r2
 8005418:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 800541c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005420:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005424:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005428:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800542c:	405a      	eors	r2, r3
 800542e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005432:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005436:	405a      	eors	r2, r3
 8005438:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800543c:	441a      	add	r2, r3
 800543e:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8005442:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005446:	4059      	eors	r1, r3
 8005448:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800544c:	4019      	ands	r1, r3
 800544e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005452:	404b      	eors	r3, r1
 8005454:	441a      	add	r2, r3
 8005456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800545e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005462:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800546a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800546e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005472:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005476:	4059      	eors	r1, r3
 8005478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005480:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005484:	0a9b      	lsrs	r3, r3, #10
 8005486:	4059      	eors	r1, r3
 8005488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005490:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005494:	4419      	add	r1, r3
 8005496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a2:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80054a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80054ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80054b6:	4058      	eors	r0, r3
 80054b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054bc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c4:	08db      	lsrs	r3, r3, #3
 80054c6:	4043      	eors	r3, r0
 80054c8:	4419      	add	r1, r3
 80054ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80054d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054d6:	4419      	add	r1, r3
 80054d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054dc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80054e0:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 80054e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80054ec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80054f0:	441a      	add	r2, r3
 80054f2:	4b62      	ldr	r3, [pc, #392]	; (800567c <sha256_process+0x3c14>)
 80054f4:	4413      	add	r3, r2
 80054f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80054fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80054fe:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005502:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005506:	ea4f 3373 	mov.w	r3, r3, ror #13
 800550a:	405a      	eors	r2, r3
 800550c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005510:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005514:	405a      	eors	r2, r3
 8005516:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800551a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800551e:	4019      	ands	r1, r3
 8005520:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8005524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005528:	4318      	orrs	r0, r3
 800552a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800552e:	4003      	ands	r3, r0
 8005530:	430b      	orrs	r3, r1
 8005532:	4413      	add	r3, r2
 8005534:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005538:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800553c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005540:	4413      	add	r3, r2
 8005542:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005546:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800554a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800554e:	4413      	add	r3, r2
 8005550:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8005554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005558:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800555c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005560:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005564:	405a      	eors	r2, r3
 8005566:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800556a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800556e:	405a      	eors	r2, r3
 8005570:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005574:	441a      	add	r2, r3
 8005576:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800557a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800557e:	4059      	eors	r1, r3
 8005580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005584:	4019      	ands	r1, r3
 8005586:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800558a:	404b      	eors	r3, r1
 800558c:	441a      	add	r2, r3
 800558e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005592:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005596:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800559a:	ea4f 4173 	mov.w	r1, r3, ror #17
 800559e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80055a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80055aa:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80055ae:	4059      	eors	r1, r3
 80055b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80055b8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80055bc:	0a9b      	lsrs	r3, r3, #10
 80055be:	4059      	eors	r1, r3
 80055c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80055c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80055cc:	4419      	add	r1, r3
 80055ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80055d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055da:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80055de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80055e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ea:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80055ee:	4058      	eors	r0, r3
 80055f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80055f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055fc:	08db      	lsrs	r3, r3, #3
 80055fe:	4043      	eors	r3, r0
 8005600:	4419      	add	r1, r3
 8005602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005606:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800560a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560e:	4419      	add	r1, r3
 8005610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005614:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005618:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
 800561c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005620:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005624:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005628:	441a      	add	r2, r3
 800562a:	4b15      	ldr	r3, [pc, #84]	; (8005680 <sha256_process+0x3c18>)
 800562c:	4413      	add	r3, r2
 800562e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005632:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005636:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800563a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800563e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005642:	405a      	eors	r2, r3
 8005644:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005648:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800564c:	405a      	eors	r2, r3
 800564e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8005652:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005656:	4019      	ands	r1, r3
 8005658:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800565c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005660:	4318      	orrs	r0, r3
 8005662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005666:	4003      	ands	r3, r0
 8005668:	430b      	orrs	r3, r1
 800566a:	4413      	add	r3, r2
 800566c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005670:	e008      	b.n	8005684 <sha256_process+0x3c1c>
 8005672:	bf00      	nop
 8005674:	1e376c08 	.word	0x1e376c08
 8005678:	2748774c 	.word	0x2748774c
 800567c:	34b0bcb5 	.word	0x34b0bcb5
 8005680:	391c0cb3 	.word	0x391c0cb3
 8005684:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800568c:	4413      	add	r3, r2
 800568e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005692:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005696:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800569a:	4413      	add	r3, r2
 800569c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 80056a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80056a4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80056a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80056ac:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80056b0:	405a      	eors	r2, r3
 80056b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80056b6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80056ba:	405a      	eors	r2, r3
 80056bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056c0:	441a      	add	r2, r3
 80056c2:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80056c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056ca:	4059      	eors	r1, r3
 80056cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80056d0:	4019      	ands	r1, r3
 80056d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056d6:	404b      	eors	r3, r1
 80056d8:	441a      	add	r2, r3
 80056da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80056e2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80056e6:	ea4f 4173 	mov.w	r1, r3, ror #17
 80056ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80056f2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80056f6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80056fa:	4059      	eors	r1, r3
 80056fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005700:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005704:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005708:	0a9b      	lsrs	r3, r3, #10
 800570a:	4059      	eors	r1, r3
 800570c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005710:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005714:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005718:	4419      	add	r1, r3
 800571a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005722:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005726:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800572a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005732:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005736:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800573a:	4058      	eors	r0, r3
 800573c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005740:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005744:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005748:	08db      	lsrs	r3, r3, #3
 800574a:	4043      	eors	r3, r0
 800574c:	4419      	add	r1, r3
 800574e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005752:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800575a:	4419      	add	r1, r3
 800575c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005760:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005764:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
 8005768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005770:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005774:	441a      	add	r2, r3
 8005776:	4bfc      	ldr	r3, [pc, #1008]	; (8005b68 <sha256_process+0x4100>)
 8005778:	4413      	add	r3, r2
 800577a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800577e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005782:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005786:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800578a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800578e:	405a      	eors	r2, r3
 8005790:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005794:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005798:	405a      	eors	r2, r3
 800579a:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800579e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057a2:	4019      	ands	r1, r3
 80057a4:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80057a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057ac:	4318      	orrs	r0, r3
 80057ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80057b2:	4003      	ands	r3, r0
 80057b4:	430b      	orrs	r3, r1
 80057b6:	4413      	add	r3, r2
 80057b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80057bc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80057c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057c4:	4413      	add	r3, r2
 80057c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057ca:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80057ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057d2:	4413      	add	r3, r2
 80057d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 80057d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057dc:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80057e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80057e8:	405a      	eors	r2, r3
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ee:	ea4f 6373 	mov.w	r3, r3, ror #25
 80057f2:	405a      	eors	r2, r3
 80057f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057f8:	441a      	add	r2, r3
 80057fa:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80057fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005802:	4059      	eors	r1, r3
 8005804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005808:	4019      	ands	r1, r3
 800580a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800580e:	404b      	eors	r3, r1
 8005810:	441a      	add	r2, r3
 8005812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005816:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800581a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800581e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005826:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800582a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800582e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005832:	4059      	eors	r1, r3
 8005834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005838:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800583c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005840:	0a9b      	lsrs	r3, r3, #10
 8005842:	4059      	eors	r1, r3
 8005844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005848:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800584c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005850:	4419      	add	r1, r3
 8005852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005856:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800585a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800585e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005866:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800586a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800586e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005872:	4058      	eors	r0, r3
 8005874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005878:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800587c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005880:	08db      	lsrs	r3, r3, #3
 8005882:	4043      	eors	r3, r0
 8005884:	4419      	add	r1, r3
 8005886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800588e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005892:	4419      	add	r1, r3
 8005894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005898:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800589c:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
 80058a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80058a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80058ac:	441a      	add	r2, r3
 80058ae:	4baf      	ldr	r3, [pc, #700]	; (8005b6c <sha256_process+0x4104>)
 80058b0:	4413      	add	r3, r2
 80058b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80058b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058ba:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80058be:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058c2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80058c6:	405a      	eors	r2, r3
 80058c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058cc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80058d0:	405a      	eors	r2, r3
 80058d2:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80058d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058da:	4019      	ands	r1, r3
 80058dc:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80058e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058e4:	4318      	orrs	r0, r3
 80058e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058ea:	4003      	ands	r3, r0
 80058ec:	430b      	orrs	r3, r1
 80058ee:	4413      	add	r3, r2
 80058f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80058f4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80058f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058fc:	4413      	add	r3, r2
 80058fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005902:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005906:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800590a:	4413      	add	r3, r2
 800590c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8005910:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005914:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005918:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800591c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005920:	405a      	eors	r2, r3
 8005922:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005926:	ea4f 6373 	mov.w	r3, r3, ror #25
 800592a:	405a      	eors	r2, r3
 800592c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005930:	441a      	add	r2, r3
 8005932:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8005936:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800593a:	4059      	eors	r1, r3
 800593c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005940:	4019      	ands	r1, r3
 8005942:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005946:	404b      	eors	r3, r1
 8005948:	441a      	add	r2, r3
 800594a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005952:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005956:	ea4f 4173 	mov.w	r1, r3, ror #17
 800595a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800595e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005962:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005966:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800596a:	4059      	eors	r1, r3
 800596c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005970:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005974:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005978:	0a9b      	lsrs	r3, r3, #10
 800597a:	4059      	eors	r1, r3
 800597c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005980:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005984:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005988:	4419      	add	r1, r3
 800598a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005992:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005996:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800599a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80059a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059a6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80059aa:	4058      	eors	r0, r3
 80059ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80059b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059b8:	08db      	lsrs	r3, r3, #3
 80059ba:	4043      	eors	r3, r0
 80059bc:	4419      	add	r1, r3
 80059be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80059c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059ca:	4419      	add	r1, r3
 80059cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80059d4:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
 80059d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059dc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80059e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80059e4:	441a      	add	r2, r3
 80059e6:	4b62      	ldr	r3, [pc, #392]	; (8005b70 <sha256_process+0x4108>)
 80059e8:	4413      	add	r3, r2
 80059ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059f2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80059f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059fa:	ea4f 3373 	mov.w	r3, r3, ror #13
 80059fe:	405a      	eors	r2, r3
 8005a00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a04:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005a08:	405a      	eors	r2, r3
 8005a0a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8005a0e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a12:	4019      	ands	r1, r3
 8005a14:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8005a18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a1c:	4318      	orrs	r0, r3
 8005a1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a22:	4003      	ands	r3, r0
 8005a24:	430b      	orrs	r3, r1
 8005a26:	4413      	add	r3, r2
 8005a28:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a2c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a34:	4413      	add	r3, r2
 8005a36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a3a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005a3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a42:	4413      	add	r3, r2
 8005a44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8005a48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a4c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005a50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a54:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005a58:	405a      	eors	r2, r3
 8005a5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a5e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005a62:	405a      	eors	r2, r3
 8005a64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a68:	441a      	add	r2, r3
 8005a6a:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8005a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a72:	4059      	eors	r1, r3
 8005a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a78:	4019      	ands	r1, r3
 8005a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a7e:	404b      	eors	r3, r1
 8005a80:	441a      	add	r2, r3
 8005a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a86:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005a8e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005a9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005a9e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005aa2:	4059      	eors	r1, r3
 8005aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005ab0:	0a9b      	lsrs	r3, r3, #10
 8005ab2:	4059      	eors	r1, r3
 8005ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005abc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005ac0:	4419      	add	r1, r3
 8005ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005aca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ace:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005ada:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ade:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005ae2:	4058      	eors	r0, r3
 8005ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005aec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005af0:	08db      	lsrs	r3, r3, #3
 8005af2:	4043      	eors	r3, r0
 8005af4:	4419      	add	r1, r3
 8005af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005afe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b02:	4419      	add	r1, r3
 8005b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b08:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005b0c:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 8005b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b14:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b1c:	441a      	add	r2, r3
 8005b1e:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <sha256_process+0x410c>)
 8005b20:	4413      	add	r3, r2
 8005b22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b2a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b32:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005b36:	405a      	eors	r2, r3
 8005b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b3c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005b40:	405a      	eors	r2, r3
 8005b42:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8005b46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b4a:	4019      	ands	r1, r3
 8005b4c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8005b50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b54:	4318      	orrs	r0, r3
 8005b56:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b5a:	4003      	ands	r3, r0
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	4413      	add	r3, r2
 8005b60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005b64:	e008      	b.n	8005b78 <sha256_process+0x4110>
 8005b66:	bf00      	nop
 8005b68:	4ed8aa4a 	.word	0x4ed8aa4a
 8005b6c:	5b9cca4f 	.word	0x5b9cca4f
 8005b70:	682e6ff3 	.word	0x682e6ff3
 8005b74:	748f82ee 	.word	0x748f82ee
 8005b78:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b80:	4413      	add	r3, r2
 8005b82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b86:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005b8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b8e:	4413      	add	r3, r2
 8005b90:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8005b94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b98:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005b9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ba0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005ba4:	405a      	eors	r2, r3
 8005ba6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005baa:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005bae:	405a      	eors	r2, r3
 8005bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb4:	441a      	add	r2, r3
 8005bb6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8005bba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bbe:	4059      	eors	r1, r3
 8005bc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005bc4:	4019      	ands	r1, r3
 8005bc6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bca:	404b      	eors	r3, r1
 8005bcc:	441a      	add	r2, r3
 8005bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005bd6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005bda:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005be6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005bea:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005bee:	4059      	eors	r1, r3
 8005bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005bf8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005bfc:	0a9b      	lsrs	r3, r3, #10
 8005bfe:	4059      	eors	r1, r3
 8005c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c04:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005c08:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005c0c:	4419      	add	r1, r3
 8005c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005c16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c1a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005c26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c2a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005c2e:	4058      	eors	r0, r3
 8005c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c34:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005c38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c3c:	08db      	lsrs	r3, r3, #3
 8005c3e:	4043      	eors	r3, r0
 8005c40:	4419      	add	r1, r3
 8005c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c46:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005c4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c4e:	4419      	add	r1, r3
 8005c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c54:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005c58:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 8005c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c60:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005c64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c68:	441a      	add	r2, r3
 8005c6a:	4bfc      	ldr	r3, [pc, #1008]	; (800605c <sha256_process+0x45f4>)
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c76:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005c7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c7e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005c82:	405a      	eors	r2, r3
 8005c84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c88:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005c8c:	405a      	eors	r2, r3
 8005c8e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8005c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c96:	4019      	ands	r1, r3
 8005c98:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8005c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca0:	4318      	orrs	r0, r3
 8005ca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ca6:	4003      	ands	r3, r0
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	4413      	add	r3, r2
 8005cac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005cb0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8005cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb8:	4413      	add	r3, r2
 8005cba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005cbe:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005cc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005ccc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005cd0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005cd4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005cd8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005cdc:	405a      	eors	r2, r3
 8005cde:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ce2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005ce6:	405a      	eors	r2, r3
 8005ce8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005cec:	441a      	add	r2, r3
 8005cee:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8005cf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cf6:	4059      	eors	r1, r3
 8005cf8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005cfc:	4019      	ands	r1, r3
 8005cfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d02:	404b      	eors	r3, r1
 8005d04:	441a      	add	r2, r3
 8005d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d12:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d22:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005d26:	4059      	eors	r1, r3
 8005d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d34:	0a9b      	lsrs	r3, r3, #10
 8005d36:	4059      	eors	r1, r3
 8005d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d40:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005d44:	4419      	add	r1, r3
 8005d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d52:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d62:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005d66:	4058      	eors	r0, r3
 8005d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d74:	08db      	lsrs	r3, r3, #3
 8005d76:	4043      	eors	r3, r0
 8005d78:	4419      	add	r1, r3
 8005d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d86:	4419      	add	r1, r3
 8005d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d90:	f8c3 10e8 	str.w	r1, [r3, #232]	; 0xe8
 8005d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d98:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005da0:	441a      	add	r2, r3
 8005da2:	4baf      	ldr	r3, [pc, #700]	; (8006060 <sha256_process+0x45f8>)
 8005da4:	4413      	add	r3, r2
 8005da6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dae:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db6:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005dba:	405a      	eors	r2, r3
 8005dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005dc4:	405a      	eors	r2, r3
 8005dc6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8005dca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005dce:	4019      	ands	r1, r3
 8005dd0:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8005dd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005dd8:	4318      	orrs	r0, r3
 8005dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dde:	4003      	ands	r3, r0
 8005de0:	430b      	orrs	r3, r1
 8005de2:	4413      	add	r3, r2
 8005de4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005de8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df0:	4413      	add	r3, r2
 8005df2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005df6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005dfa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dfe:	4413      	add	r3, r2
 8005e00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005e04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e08:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005e0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e10:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005e14:	405a      	eors	r2, r3
 8005e16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e1a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005e1e:	405a      	eors	r2, r3
 8005e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e24:	441a      	add	r2, r3
 8005e26:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8005e2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e2e:	4059      	eors	r1, r3
 8005e30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e34:	4019      	ands	r1, r3
 8005e36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e3a:	404b      	eors	r3, r1
 8005e3c:	441a      	add	r2, r3
 8005e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e42:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005e46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e4a:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005e56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e5a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005e5e:	4059      	eors	r1, r3
 8005e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e64:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005e68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e6c:	0a9b      	lsrs	r3, r3, #10
 8005e6e:	4059      	eors	r1, r3
 8005e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e74:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005e78:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005e7c:	4419      	add	r1, r3
 8005e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005e86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e8a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005e96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e9a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005e9e:	4058      	eors	r0, r3
 8005ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005ea8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005eac:	08db      	lsrs	r3, r3, #3
 8005eae:	4043      	eors	r3, r0
 8005eb0:	4419      	add	r1, r3
 8005eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005eba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ebe:	4419      	add	r1, r3
 8005ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005ec8:	f8c3 10ec 	str.w	r1, [r3, #236]	; 0xec
 8005ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005ed4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005ed8:	441a      	add	r2, r3
 8005eda:	4b62      	ldr	r3, [pc, #392]	; (8006064 <sha256_process+0x45fc>)
 8005edc:	4413      	add	r3, r2
 8005ede:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005ee2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ee6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8005eea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005eee:	ea4f 3373 	mov.w	r3, r3, ror #13
 8005ef2:	405a      	eors	r2, r3
 8005ef4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005ef8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8005efc:	405a      	eors	r2, r3
 8005efe:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8005f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f06:	4019      	ands	r1, r3
 8005f08:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8005f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f10:	4318      	orrs	r0, r3
 8005f12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005f16:	4003      	ands	r3, r0
 8005f18:	430b      	orrs	r3, r1
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005f20:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8005f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f28:	4413      	add	r3, r2
 8005f2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005f2e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005f32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f36:	4413      	add	r3, r2
 8005f38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f40:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8005f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f48:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8005f4c:	405a      	eors	r2, r3
 8005f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f52:	ea4f 6373 	mov.w	r3, r3, ror #25
 8005f56:	405a      	eors	r2, r3
 8005f58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f5c:	441a      	add	r2, r3
 8005f5e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8005f62:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005f66:	4059      	eors	r1, r3
 8005f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f6c:	4019      	ands	r1, r3
 8005f6e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005f72:	404b      	eors	r3, r1
 8005f74:	441a      	add	r2, r3
 8005f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005f7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f82:	ea4f 4173 	mov.w	r1, r3, ror #17
 8005f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005f8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f92:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8005f96:	4059      	eors	r1, r3
 8005f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f9c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fa4:	0a9b      	lsrs	r3, r3, #10
 8005fa6:	4059      	eors	r1, r3
 8005fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005fb0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005fb4:	4419      	add	r1, r3
 8005fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005fbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fc2:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8005fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005fce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fd2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8005fd6:	4058      	eors	r0, r3
 8005fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fdc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005fe0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fe4:	08db      	lsrs	r3, r3, #3
 8005fe6:	4043      	eors	r3, r0
 8005fe8:	4419      	add	r1, r3
 8005fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005ff2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ff6:	4419      	add	r1, r3
 8005ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006000:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
 8006004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006008:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800600c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006010:	441a      	add	r2, r3
 8006012:	4b15      	ldr	r3, [pc, #84]	; (8006068 <sha256_process+0x4600>)
 8006014:	4413      	add	r3, r2
 8006016:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800601a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800601e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8006022:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006026:	ea4f 3373 	mov.w	r3, r3, ror #13
 800602a:	405a      	eors	r2, r3
 800602c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006030:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8006034:	405a      	eors	r2, r3
 8006036:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800603a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800603e:	4019      	ands	r1, r3
 8006040:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8006044:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006048:	4318      	orrs	r0, r3
 800604a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800604e:	4003      	ands	r3, r0
 8006050:	430b      	orrs	r3, r1
 8006052:	4413      	add	r3, r2
 8006054:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006058:	e008      	b.n	800606c <sha256_process+0x4604>
 800605a:	bf00      	nop
 800605c:	78a5636f 	.word	0x78a5636f
 8006060:	84c87814 	.word	0x84c87814
 8006064:	8cc70208 	.word	0x8cc70208
 8006068:	90befffa 	.word	0x90befffa
 800606c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8006070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006074:	4413      	add	r3, r2
 8006076:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800607a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800607e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006082:	4413      	add	r3, r2
 8006084:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8006088:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800608c:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8006090:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006094:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006098:	405a      	eors	r2, r3
 800609a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800609e:	ea4f 6373 	mov.w	r3, r3, ror #25
 80060a2:	405a      	eors	r2, r3
 80060a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80060a8:	441a      	add	r2, r3
 80060aa:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80060ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060b2:	4059      	eors	r1, r3
 80060b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80060b8:	4019      	ands	r1, r3
 80060ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060be:	404b      	eors	r3, r1
 80060c0:	441a      	add	r2, r3
 80060c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80060ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80060ce:	ea4f 4173 	mov.w	r1, r3, ror #17
 80060d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80060da:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80060de:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80060e2:	4059      	eors	r1, r3
 80060e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80060ec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80060f0:	0a9b      	lsrs	r3, r3, #10
 80060f2:	4059      	eors	r1, r3
 80060f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80060fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006100:	4419      	add	r1, r3
 8006102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006106:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800610a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800610e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8006112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006116:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800611a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800611e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8006122:	4058      	eors	r0, r3
 8006124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006128:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800612c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006130:	08db      	lsrs	r3, r3, #3
 8006132:	4043      	eors	r3, r0
 8006134:	4419      	add	r1, r3
 8006136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800613e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006142:	4419      	add	r1, r3
 8006144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006148:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800614c:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
 8006150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006154:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006158:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800615c:	441a      	add	r2, r3
 800615e:	4bee      	ldr	r3, [pc, #952]	; (8006518 <sha256_process+0x4ab0>)
 8006160:	4413      	add	r3, r2
 8006162:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006166:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800616a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800616e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006172:	ea4f 3373 	mov.w	r3, r3, ror #13
 8006176:	405a      	eors	r2, r3
 8006178:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800617c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8006180:	405a      	eors	r2, r3
 8006182:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8006186:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800618a:	4019      	ands	r1, r3
 800618c:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8006190:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006194:	4318      	orrs	r0, r3
 8006196:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800619a:	4003      	ands	r3, r0
 800619c:	430b      	orrs	r3, r1
 800619e:	4413      	add	r3, r2
 80061a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061a4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80061a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ac:	4413      	add	r3, r2
 80061ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80061b2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80061b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061ba:	4413      	add	r3, r2
 80061bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80061c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80061c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061cc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80061d0:	405a      	eors	r2, r3
 80061d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80061da:	405a      	eors	r2, r3
 80061dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061e0:	441a      	add	r2, r3
 80061e2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80061e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ea:	4059      	eors	r1, r3
 80061ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061f0:	4019      	ands	r1, r3
 80061f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f6:	404b      	eors	r3, r1
 80061f8:	441a      	add	r2, r3
 80061fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006206:	ea4f 4173 	mov.w	r1, r3, ror #17
 800620a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006216:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800621a:	4059      	eors	r1, r3
 800621c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006220:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006224:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006228:	0a9b      	lsrs	r3, r3, #10
 800622a:	4059      	eors	r1, r3
 800622c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006230:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006234:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006238:	4419      	add	r1, r3
 800623a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006242:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006246:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800624a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006252:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006256:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800625a:	4058      	eors	r0, r3
 800625c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006260:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006264:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006268:	08db      	lsrs	r3, r3, #3
 800626a:	4043      	eors	r3, r0
 800626c:	4419      	add	r1, r3
 800626e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006272:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006276:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800627a:	4419      	add	r1, r3
 800627c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006280:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006284:	f8c3 10f8 	str.w	r1, [r3, #248]	; 0xf8
 8006288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006290:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8006294:	441a      	add	r2, r3
 8006296:	4ba1      	ldr	r3, [pc, #644]	; (800651c <sha256_process+0x4ab4>)
 8006298:	4413      	add	r3, r2
 800629a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800629e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80062a2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80062a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80062aa:	ea4f 3373 	mov.w	r3, r3, ror #13
 80062ae:	405a      	eors	r2, r3
 80062b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80062b4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80062b8:	405a      	eors	r2, r3
 80062ba:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80062be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80062c2:	4019      	ands	r1, r3
 80062c4:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80062c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80062cc:	4318      	orrs	r0, r3
 80062ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062d2:	4003      	ands	r3, r0
 80062d4:	430b      	orrs	r3, r1
 80062d6:	4413      	add	r3, r2
 80062d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062dc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80062e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e4:	4413      	add	r3, r2
 80062e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80062ea:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80062ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062f2:	4413      	add	r3, r2
 80062f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80062f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80062fc:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8006300:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006304:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006308:	405a      	eors	r2, r3
 800630a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800630e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8006312:	405a      	eors	r2, r3
 8006314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006318:	441a      	add	r2, r3
 800631a:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800631e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006322:	4059      	eors	r1, r3
 8006324:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006328:	4019      	ands	r1, r3
 800632a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800632e:	404b      	eors	r3, r1
 8006330:	441a      	add	r2, r3
 8006332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006336:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800633a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800633e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8006342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006346:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800634a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800634e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8006352:	4059      	eors	r1, r3
 8006354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006358:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800635c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006360:	0a9b      	lsrs	r3, r3, #10
 8006362:	4059      	eors	r1, r3
 8006364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006368:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800636c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006370:	4419      	add	r1, r3
 8006372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006376:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800637a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800637e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8006382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006386:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800638a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800638e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8006392:	4058      	eors	r0, r3
 8006394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006398:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800639c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80063a0:	08db      	lsrs	r3, r3, #3
 80063a2:	4043      	eors	r3, r0
 80063a4:	4419      	add	r1, r3
 80063a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80063ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80063b2:	4419      	add	r1, r3
 80063b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80063bc:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
 80063c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80063c8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80063cc:	441a      	add	r2, r3
 80063ce:	4b54      	ldr	r3, [pc, #336]	; (8006520 <sha256_process+0x4ab8>)
 80063d0:	4413      	add	r3, r2
 80063d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80063d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063da:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80063de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063e2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80063e6:	405a      	eors	r2, r3
 80063e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063ec:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80063f0:	405a      	eors	r2, r3
 80063f2:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80063f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80063fa:	4019      	ands	r1, r3
 80063fc:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8006400:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006404:	4318      	orrs	r0, r3
 8006406:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800640a:	4003      	ands	r3, r0
 800640c:	430b      	orrs	r3, r1
 800640e:	4413      	add	r3, r2
 8006410:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006414:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800641c:	4413      	add	r3, r2
 800641e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006422:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006426:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800642a:	4413      	add	r3, r2
 800642c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    ctx->state[0] += A;
 8006430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006434:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006440:	441a      	add	r2, r3
 8006442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006446:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	609a      	str	r2, [r3, #8]
    ctx->state[1] += B;
 800644e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006452:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800645e:	441a      	add	r2, r3
 8006460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006464:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60da      	str	r2, [r3, #12]
    ctx->state[2] += C;
 800646c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006470:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	691a      	ldr	r2, [r3, #16]
 8006478:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800647c:	441a      	add	r2, r3
 800647e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006482:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	611a      	str	r2, [r3, #16]
    ctx->state[3] += D;
 800648a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695a      	ldr	r2, [r3, #20]
 8006496:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800649a:	441a      	add	r2, r3
 800649c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	615a      	str	r2, [r3, #20]
    ctx->state[4] += E;
 80064a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	699a      	ldr	r2, [r3, #24]
 80064b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064b8:	441a      	add	r2, r3
 80064ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	619a      	str	r2, [r3, #24]
    ctx->state[5] += F;
 80064c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	69da      	ldr	r2, [r3, #28]
 80064d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80064d6:	441a      	add	r2, r3
 80064d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	61da      	str	r2, [r3, #28]
    ctx->state[6] += G;
 80064e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6a1a      	ldr	r2, [r3, #32]
 80064f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f4:	441a      	add	r2, r3
 80064f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	621a      	str	r2, [r3, #32]
    ctx->state[7] += H;
 8006502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006506:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800650e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006512:	441a      	add	r2, r3
 8006514:	e006      	b.n	8006524 <sha256_process+0x4abc>
 8006516:	bf00      	nop
 8006518:	a4506ceb 	.word	0xa4506ceb
 800651c:	bef9a3f7 	.word	0xbef9a3f7
 8006520:	c67178f2 	.word	0xc67178f2
 8006524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006530:	bf00      	nop
 8006532:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006536:	46bd      	mov	sp, r7
 8006538:	bc80      	pop	{r7}
 800653a:	4770      	bx	lr

0800653c <sha256_update>:

void sha256_update( sha256_context *ctx, uint8 *input, uint32 length )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
    uint32 left, fill;

    if( ! length ) return;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d059      	beq.n	8006602 <sha256_update+0xc6>

    left = ctx->total[0] & 0x3F;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006556:	617b      	str	r3, [r7, #20]
    fill = 64 - left;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800655e:	613b      	str	r3, [r7, #16]

    ctx->total[0] += length;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	441a      	add	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < length )
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	429a      	cmp	r2, r3
 800657c:	d904      	bls.n	8006588 <sha256_update+0x4c>
        ctx->total[1]++;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	605a      	str	r2, [r3, #4]

    if( left && length >= fill )
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d028      	beq.n	80065e0 <sha256_update+0xa4>
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	429a      	cmp	r2, r3
 8006594:	d324      	bcc.n	80065e0 <sha256_update+0xa4>
    {
        memcpy( (void *) (ctx->buffer + left),
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	4413      	add	r3, r2
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f002 f95f 	bl	8008868 <memcpy>
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3328      	adds	r3, #40	; 0x28
 80065ae:	4619      	mov	r1, r3
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f7fb fa59 	bl	8001a68 <sha256_process>
        length -= fill;
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	607b      	str	r3, [r7, #4]
        input  += fill;
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	4413      	add	r3, r2
 80065c4:	60bb      	str	r3, [r7, #8]
        left = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	617b      	str	r3, [r7, #20]
    }

    while( length >= 64 )
 80065ca:	e009      	b.n	80065e0 <sha256_update+0xa4>
    {
        sha256_process( ctx, input );
 80065cc:	68b9      	ldr	r1, [r7, #8]
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f7fb fa4a 	bl	8001a68 <sha256_process>
        length -= 64;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3b40      	subs	r3, #64	; 0x40
 80065d8:	607b      	str	r3, [r7, #4]
        input  += 64;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	3340      	adds	r3, #64	; 0x40
 80065de:	60bb      	str	r3, [r7, #8]
    while( length >= 64 )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b3f      	cmp	r3, #63	; 0x3f
 80065e4:	d8f2      	bhi.n	80065cc <sha256_update+0x90>
    }

    if( length )
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00b      	beq.n	8006604 <sha256_update+0xc8>
    {
        memcpy( (void *) (ctx->buffer + left),
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	4413      	add	r3, r2
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	68b9      	ldr	r1, [r7, #8]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f002 f934 	bl	8008868 <memcpy>
 8006600:	e000      	b.n	8006604 <sha256_update+0xc8>
    if( ! length ) return;
 8006602:	bf00      	nop
                (void *) input, length );
    }
}
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <sha256_finish>:
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
    uint32 last, padn;
    uint32 high, low;
    uint8 msglen[8];

    high = ( ctx->total[0] >> 29 )
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 8006622:	4313      	orrs	r3, r2
 8006624:	61fb      	str	r3, [r7, #28]
    low  = ( ctx->total[0] <<  3 );
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	61bb      	str	r3, [r7, #24]

    PUT_UINT32( high, msglen, 0 );
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	0e1b      	lsrs	r3, r3, #24
 8006632:	b2db      	uxtb	r3, r3
 8006634:	723b      	strb	r3, [r7, #8]
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	0c1b      	lsrs	r3, r3, #16
 800663a:	b2db      	uxtb	r3, r3
 800663c:	727b      	strb	r3, [r7, #9]
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	0a1b      	lsrs	r3, r3, #8
 8006642:	b2db      	uxtb	r3, r3
 8006644:	72bb      	strb	r3, [r7, #10]
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	72fb      	strb	r3, [r7, #11]
    PUT_UINT32( low,  msglen, 4 );
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	0e1b      	lsrs	r3, r3, #24
 8006650:	b2db      	uxtb	r3, r3
 8006652:	733b      	strb	r3, [r7, #12]
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	0c1b      	lsrs	r3, r3, #16
 8006658:	b2db      	uxtb	r3, r3
 800665a:	737b      	strb	r3, [r7, #13]
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	0a1b      	lsrs	r3, r3, #8
 8006660:	b2db      	uxtb	r3, r3
 8006662:	73bb      	strb	r3, [r7, #14]
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	73fb      	strb	r3, [r7, #15]

    last = ctx->total[0] & 0x3F;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006672:	617b      	str	r3, [r7, #20]
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2b37      	cmp	r3, #55	; 0x37
 8006678:	d803      	bhi.n	8006682 <sha256_finish+0x76>
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006680:	e002      	b.n	8006688 <sha256_finish+0x7c>
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8006688:	613b      	str	r3, [r7, #16]

    sha256_update( ctx, sha256_padding, padn );
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4972      	ldr	r1, [pc, #456]	; (8006858 <sha256_finish+0x24c>)
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff ff54 	bl	800653c <sha256_update>
    sha256_update( ctx, msglen, 8 );
 8006694:	f107 0308 	add.w	r3, r7, #8
 8006698:	2208      	movs	r2, #8
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff ff4d 	bl	800653c <sha256_update>

    PUT_UINT32( ctx->state[0], digest,  0 );
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	0e1b      	lsrs	r3, r3, #24
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	0c1a      	lsrs	r2, r3, #16
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	3301      	adds	r3, #1
 80066b8:	b2d2      	uxtb	r2, r2
 80066ba:	701a      	strb	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	0a1a      	lsrs	r2, r3, #8
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	3302      	adds	r3, #2
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689a      	ldr	r2, [r3, #8]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	3303      	adds	r3, #3
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]
    PUT_UINT32( ctx->state[1], digest,  4 );
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	0e1a      	lsrs	r2, r3, #24
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	3304      	adds	r3, #4
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	701a      	strb	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	0c1a      	lsrs	r2, r3, #16
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	3305      	adds	r3, #5
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	0a1a      	lsrs	r2, r3, #8
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	3306      	adds	r3, #6
 80066fc:	b2d2      	uxtb	r2, r2
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	3307      	adds	r3, #7
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32( ctx->state[2], digest,  8 );
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	0e1a      	lsrs	r2, r3, #24
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	3308      	adds	r3, #8
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	0c1a      	lsrs	r2, r3, #16
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	3309      	adds	r3, #9
 8006724:	b2d2      	uxtb	r2, r2
 8006726:	701a      	strb	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	0a1a      	lsrs	r2, r3, #8
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	330a      	adds	r3, #10
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	330b      	adds	r3, #11
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]
    PUT_UINT32( ctx->state[3], digest, 12 );
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	0e1a      	lsrs	r2, r3, #24
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	330c      	adds	r3, #12
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	0c1a      	lsrs	r2, r3, #16
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	330d      	adds	r3, #13
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	0a1a      	lsrs	r2, r3, #8
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	330e      	adds	r3, #14
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	695a      	ldr	r2, [r3, #20]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	330f      	adds	r3, #15
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	701a      	strb	r2, [r3, #0]
    PUT_UINT32( ctx->state[4], digest, 16 );
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	0e1a      	lsrs	r2, r3, #24
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	3310      	adds	r3, #16
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	0c1a      	lsrs	r2, r3, #16
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	3311      	adds	r3, #17
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	0a1a      	lsrs	r2, r3, #8
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	3312      	adds	r3, #18
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	3313      	adds	r3, #19
 80067aa:	b2d2      	uxtb	r2, r2
 80067ac:	701a      	strb	r2, [r3, #0]
    PUT_UINT32( ctx->state[5], digest, 20 );
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	0e1a      	lsrs	r2, r3, #24
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	3314      	adds	r3, #20
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	0c1a      	lsrs	r2, r3, #16
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	3315      	adds	r3, #21
 80067c6:	b2d2      	uxtb	r2, r2
 80067c8:	701a      	strb	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	0a1a      	lsrs	r2, r3, #8
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	3316      	adds	r3, #22
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	69da      	ldr	r2, [r3, #28]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	3317      	adds	r3, #23
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
    PUT_UINT32( ctx->state[6], digest, 24 );
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	0e1a      	lsrs	r2, r3, #24
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	3318      	adds	r3, #24
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	0c1a      	lsrs	r2, r3, #16
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	3319      	adds	r3, #25
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	0a1a      	lsrs	r2, r3, #8
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	331a      	adds	r3, #26
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1a      	ldr	r2, [r3, #32]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	331b      	adds	r3, #27
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]
    PUT_UINT32( ctx->state[7], digest, 28 );
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	0e1a      	lsrs	r2, r3, #24
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	331c      	adds	r3, #28
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	701a      	strb	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	0c1a      	lsrs	r2, r3, #16
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	331d      	adds	r3, #29
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	0a1a      	lsrs	r2, r3, #8
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	331e      	adds	r3, #30
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	331f      	adds	r3, #31
 800684c:	b2d2      	uxtb	r2, r2
 800684e:	701a      	strb	r2, [r3, #0]
}
 8006850:	bf00      	nop
 8006852:	3720      	adds	r7, #32
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	20000240 	.word	0x20000240

0800685c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006862:	4b0e      	ldr	r3, [pc, #56]	; (800689c <HAL_MspInit+0x40>)
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	4a0d      	ldr	r2, [pc, #52]	; (800689c <HAL_MspInit+0x40>)
 8006868:	f043 0301 	orr.w	r3, r3, #1
 800686c:	6193      	str	r3, [r2, #24]
 800686e:	4b0b      	ldr	r3, [pc, #44]	; (800689c <HAL_MspInit+0x40>)
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	607b      	str	r3, [r7, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800687a:	4b08      	ldr	r3, [pc, #32]	; (800689c <HAL_MspInit+0x40>)
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	4a07      	ldr	r2, [pc, #28]	; (800689c <HAL_MspInit+0x40>)
 8006880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006884:	61d3      	str	r3, [r2, #28]
 8006886:	4b05      	ldr	r3, [pc, #20]	; (800689c <HAL_MspInit+0x40>)
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688e:	603b      	str	r3, [r7, #0]
 8006890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	bc80      	pop	{r7}
 800689a:	4770      	bx	lr
 800689c:	40021000 	.word	0x40021000

080068a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068a8:	f107 0310 	add.w	r3, r7, #16
 80068ac:	2200      	movs	r2, #0
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	605a      	str	r2, [r3, #4]
 80068b2:	609a      	str	r2, [r3, #8]
 80068b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a20      	ldr	r2, [pc, #128]	; (800693c <HAL_UART_MspInit+0x9c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d139      	bne.n	8006934 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80068c0:	4b1f      	ldr	r3, [pc, #124]	; (8006940 <HAL_UART_MspInit+0xa0>)
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	4a1e      	ldr	r2, [pc, #120]	; (8006940 <HAL_UART_MspInit+0xa0>)
 80068c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068ca:	6193      	str	r3, [r2, #24]
 80068cc:	4b1c      	ldr	r3, [pc, #112]	; (8006940 <HAL_UART_MspInit+0xa0>)
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068d8:	4b19      	ldr	r3, [pc, #100]	; (8006940 <HAL_UART_MspInit+0xa0>)
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	4a18      	ldr	r2, [pc, #96]	; (8006940 <HAL_UART_MspInit+0xa0>)
 80068de:	f043 0304 	orr.w	r3, r3, #4
 80068e2:	6193      	str	r3, [r2, #24]
 80068e4:	4b16      	ldr	r3, [pc, #88]	; (8006940 <HAL_UART_MspInit+0xa0>)
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	60bb      	str	r3, [r7, #8]
 80068ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80068f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f6:	2302      	movs	r3, #2
 80068f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80068fa:	2303      	movs	r3, #3
 80068fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068fe:	f107 0310 	add.w	r3, r7, #16
 8006902:	4619      	mov	r1, r3
 8006904:	480f      	ldr	r0, [pc, #60]	; (8006944 <HAL_UART_MspInit+0xa4>)
 8006906:	f000 fb83 	bl	8007010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800690a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800690e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006910:	2300      	movs	r3, #0
 8006912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006914:	2300      	movs	r3, #0
 8006916:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006918:	f107 0310 	add.w	r3, r7, #16
 800691c:	4619      	mov	r1, r3
 800691e:	4809      	ldr	r0, [pc, #36]	; (8006944 <HAL_UART_MspInit+0xa4>)
 8006920:	f000 fb76 	bl	8007010 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006924:	2200      	movs	r2, #0
 8006926:	2100      	movs	r1, #0
 8006928:	2025      	movs	r0, #37	; 0x25
 800692a:	f000 fa88 	bl	8006e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800692e:	2025      	movs	r0, #37	; 0x25
 8006930:	f000 faa1 	bl	8006e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006934:	bf00      	nop
 8006936:	3720      	adds	r7, #32
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	40013800 	.word	0x40013800
 8006940:	40021000 	.word	0x40021000
 8006944:	40010800 	.word	0x40010800

08006948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800694c:	e7fe      	b.n	800694c <NMI_Handler+0x4>

0800694e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800694e:	b480      	push	{r7}
 8006950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006952:	e7fe      	b.n	8006952 <HardFault_Handler+0x4>

08006954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006958:	e7fe      	b.n	8006958 <MemManage_Handler+0x4>

0800695a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800695a:	b480      	push	{r7}
 800695c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800695e:	e7fe      	b.n	800695e <BusFault_Handler+0x4>

08006960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006960:	b480      	push	{r7}
 8006962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006964:	e7fe      	b.n	8006964 <UsageFault_Handler+0x4>

08006966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006966:	b480      	push	{r7}
 8006968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800696a:	bf00      	nop
 800696c:	46bd      	mov	sp, r7
 800696e:	bc80      	pop	{r7}
 8006970:	4770      	bx	lr

08006972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006972:	b480      	push	{r7}
 8006974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006976:	bf00      	nop
 8006978:	46bd      	mov	sp, r7
 800697a:	bc80      	pop	{r7}
 800697c:	4770      	bx	lr

0800697e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800697e:	b480      	push	{r7}
 8006980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006982:	bf00      	nop
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr

0800698a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800698e:	f000 f93f 	bl	8006c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006992:	bf00      	nop
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800699c:	4802      	ldr	r0, [pc, #8]	; (80069a8 <USART1_IRQHandler+0x10>)
 800699e:	f001 f9dd 	bl	8007d5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80069a2:	bf00      	nop
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	2000047c 	.word	0x2000047c

080069ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  return 1;
 80069b0:	2301      	movs	r3, #1
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bc80      	pop	{r7}
 80069b8:	4770      	bx	lr

080069ba <_kill>:

int _kill(int pid, int sig)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b082      	sub	sp, #8
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80069c4:	f001 ff1a 	bl	80087fc <__errno>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2216      	movs	r2, #22
 80069cc:	601a      	str	r2, [r3, #0]
  return -1;
 80069ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <_exit>:

void _exit (int status)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80069e2:	f04f 31ff 	mov.w	r1, #4294967295
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7ff ffe7 	bl	80069ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80069ec:	e7fe      	b.n	80069ec <_exit+0x12>

080069ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b086      	sub	sp, #24
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	60b9      	str	r1, [r7, #8]
 80069f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069fa:	2300      	movs	r3, #0
 80069fc:	617b      	str	r3, [r7, #20]
 80069fe:	e00a      	b.n	8006a16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006a00:	f3af 8000 	nop.w
 8006a04:	4601      	mov	r1, r0
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	60ba      	str	r2, [r7, #8]
 8006a0c:	b2ca      	uxtb	r2, r1
 8006a0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	3301      	adds	r3, #1
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	dbf0      	blt.n	8006a00 <_read+0x12>
  }

  return len;
 8006a1e:	687b      	ldr	r3, [r7, #4]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a34:	2300      	movs	r3, #0
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	e009      	b.n	8006a4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	60ba      	str	r2, [r7, #8]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	dbf1      	blt.n	8006a3a <_write+0x12>
  }
  return len;
 8006a56:	687b      	ldr	r3, [r7, #4]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <_close>:

int _close(int file)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr

08006a76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a86:	605a      	str	r2, [r3, #4]
  return 0;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr

08006a94 <_isatty>:

int _isatty(int file)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006a9c:	2301      	movs	r3, #1
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bc80      	pop	{r7}
 8006aa6:	4770      	bx	lr

08006aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bc80      	pop	{r7}
 8006abe:	4770      	bx	lr

08006ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ac8:	4a14      	ldr	r2, [pc, #80]	; (8006b1c <_sbrk+0x5c>)
 8006aca:	4b15      	ldr	r3, [pc, #84]	; (8006b20 <_sbrk+0x60>)
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006ad4:	4b13      	ldr	r3, [pc, #76]	; (8006b24 <_sbrk+0x64>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d102      	bne.n	8006ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006adc:	4b11      	ldr	r3, [pc, #68]	; (8006b24 <_sbrk+0x64>)
 8006ade:	4a12      	ldr	r2, [pc, #72]	; (8006b28 <_sbrk+0x68>)
 8006ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006ae2:	4b10      	ldr	r3, [pc, #64]	; (8006b24 <_sbrk+0x64>)
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4413      	add	r3, r2
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d207      	bcs.n	8006b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006af0:	f001 fe84 	bl	80087fc <__errno>
 8006af4:	4603      	mov	r3, r0
 8006af6:	220c      	movs	r2, #12
 8006af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006afa:	f04f 33ff 	mov.w	r3, #4294967295
 8006afe:	e009      	b.n	8006b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b00:	4b08      	ldr	r3, [pc, #32]	; (8006b24 <_sbrk+0x64>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b06:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <_sbrk+0x64>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	4a05      	ldr	r2, [pc, #20]	; (8006b24 <_sbrk+0x64>)
 8006b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b12:	68fb      	ldr	r3, [r7, #12]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3718      	adds	r7, #24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	20005000 	.word	0x20005000
 8006b20:	00000400 	.word	0x00000400
 8006b24:	200004c8 	.word	0x200004c8
 8006b28:	200004e0 	.word	0x200004e0

08006b2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006b30:	bf00      	nop
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr

08006b38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006b38:	f7ff fff8 	bl	8006b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006b3c:	480b      	ldr	r0, [pc, #44]	; (8006b6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006b3e:	490c      	ldr	r1, [pc, #48]	; (8006b70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006b40:	4a0c      	ldr	r2, [pc, #48]	; (8006b74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8006b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b44:	e002      	b.n	8006b4c <LoopCopyDataInit>

08006b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b4a:	3304      	adds	r3, #4

08006b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b50:	d3f9      	bcc.n	8006b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b52:	4a09      	ldr	r2, [pc, #36]	; (8006b78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006b54:	4c09      	ldr	r4, [pc, #36]	; (8006b7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b58:	e001      	b.n	8006b5e <LoopFillZerobss>

08006b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b5c:	3204      	adds	r2, #4

08006b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b60:	d3fb      	bcc.n	8006b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006b62:	f001 fe51 	bl	8008808 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006b66:	f7fa fbaf 	bl	80012c8 <main>
  bx lr
 8006b6a:	4770      	bx	lr
  ldr r0, =_sdata
 8006b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b70:	20000460 	.word	0x20000460
  ldr r2, =_sidata
 8006b74:	0800d71c 	.word	0x0800d71c
  ldr r2, =_sbss
 8006b78:	20000460 	.word	0x20000460
  ldr r4, =_ebss
 8006b7c:	200004e0 	.word	0x200004e0

08006b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006b80:	e7fe      	b.n	8006b80 <ADC1_2_IRQHandler>
	...

08006b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b88:	4b08      	ldr	r3, [pc, #32]	; (8006bac <HAL_Init+0x28>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a07      	ldr	r2, [pc, #28]	; (8006bac <HAL_Init+0x28>)
 8006b8e:	f043 0310 	orr.w	r3, r3, #16
 8006b92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b94:	2003      	movs	r0, #3
 8006b96:	f000 f947 	bl	8006e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006b9a:	200f      	movs	r0, #15
 8006b9c:	f000 f808 	bl	8006bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ba0:	f7ff fe5c 	bl	800685c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40022000 	.word	0x40022000

08006bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006bb8:	4b12      	ldr	r3, [pc, #72]	; (8006c04 <HAL_InitTick+0x54>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	4b12      	ldr	r3, [pc, #72]	; (8006c08 <HAL_InitTick+0x58>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 f95f 	bl	8006e92 <HAL_SYSTICK_Config>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e00e      	b.n	8006bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b0f      	cmp	r3, #15
 8006be2:	d80a      	bhi.n	8006bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006be4:	2200      	movs	r2, #0
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	f000 f927 	bl	8006e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006bf0:	4a06      	ldr	r2, [pc, #24]	; (8006c0c <HAL_InitTick+0x5c>)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e000      	b.n	8006bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	20000280 	.word	0x20000280
 8006c08:	20000288 	.word	0x20000288
 8006c0c:	20000284 	.word	0x20000284

08006c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c14:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <HAL_IncTick+0x1c>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4b05      	ldr	r3, [pc, #20]	; (8006c30 <HAL_IncTick+0x20>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4413      	add	r3, r2
 8006c20:	4a03      	ldr	r2, [pc, #12]	; (8006c30 <HAL_IncTick+0x20>)
 8006c22:	6013      	str	r3, [r2, #0]
}
 8006c24:	bf00      	nop
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr
 8006c2c:	20000288 	.word	0x20000288
 8006c30:	200004cc 	.word	0x200004cc

08006c34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c34:	b480      	push	{r7}
 8006c36:	af00      	add	r7, sp, #0
  return uwTick;
 8006c38:	4b02      	ldr	r3, [pc, #8]	; (8006c44 <HAL_GetTick+0x10>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bc80      	pop	{r7}
 8006c42:	4770      	bx	lr
 8006c44:	200004cc 	.word	0x200004cc

08006c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c50:	f7ff fff0 	bl	8006c34 <HAL_GetTick>
 8006c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c60:	d005      	beq.n	8006c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c62:	4b0a      	ldr	r3, [pc, #40]	; (8006c8c <HAL_Delay+0x44>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	461a      	mov	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c6e:	bf00      	nop
 8006c70:	f7ff ffe0 	bl	8006c34 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d8f7      	bhi.n	8006c70 <HAL_Delay+0x28>
  {
  }
}
 8006c80:	bf00      	nop
 8006c82:	bf00      	nop
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000288 	.word	0x20000288

08006c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ca0:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006cac:	4013      	ands	r3, r2
 8006cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006cc2:	4a04      	ldr	r2, [pc, #16]	; (8006cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	60d3      	str	r3, [r2, #12]
}
 8006cc8:	bf00      	nop
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bc80      	pop	{r7}
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	e000ed00 	.word	0xe000ed00

08006cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cdc:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	0a1b      	lsrs	r3, r3, #8
 8006ce2:	f003 0307 	and.w	r3, r3, #7
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	e000ed00 	.word	0xe000ed00

08006cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	db0b      	blt.n	8006d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	f003 021f 	and.w	r2, r3, #31
 8006d0c:	4906      	ldr	r1, [pc, #24]	; (8006d28 <__NVIC_EnableIRQ+0x34>)
 8006d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	2001      	movs	r0, #1
 8006d16:	fa00 f202 	lsl.w	r2, r0, r2
 8006d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bc80      	pop	{r7}
 8006d26:	4770      	bx	lr
 8006d28:	e000e100 	.word	0xe000e100

08006d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	6039      	str	r1, [r7, #0]
 8006d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	db0a      	blt.n	8006d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	490c      	ldr	r1, [pc, #48]	; (8006d78 <__NVIC_SetPriority+0x4c>)
 8006d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d4a:	0112      	lsls	r2, r2, #4
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	440b      	add	r3, r1
 8006d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d54:	e00a      	b.n	8006d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	4908      	ldr	r1, [pc, #32]	; (8006d7c <__NVIC_SetPriority+0x50>)
 8006d5c:	79fb      	ldrb	r3, [r7, #7]
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	3b04      	subs	r3, #4
 8006d64:	0112      	lsls	r2, r2, #4
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	440b      	add	r3, r1
 8006d6a:	761a      	strb	r2, [r3, #24]
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bc80      	pop	{r7}
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	e000e100 	.word	0xe000e100
 8006d7c:	e000ed00 	.word	0xe000ed00

08006d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b089      	sub	sp, #36	; 0x24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	f1c3 0307 	rsb	r3, r3, #7
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	bf28      	it	cs
 8006d9e:	2304      	movcs	r3, #4
 8006da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	3304      	adds	r3, #4
 8006da6:	2b06      	cmp	r3, #6
 8006da8:	d902      	bls.n	8006db0 <NVIC_EncodePriority+0x30>
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	3b03      	subs	r3, #3
 8006dae:	e000      	b.n	8006db2 <NVIC_EncodePriority+0x32>
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006db4:	f04f 32ff 	mov.w	r2, #4294967295
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbe:	43da      	mvns	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	401a      	ands	r2, r3
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd2:	43d9      	mvns	r1, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dd8:	4313      	orrs	r3, r2
         );
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3724      	adds	r7, #36	; 0x24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr

08006de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006df4:	d301      	bcc.n	8006dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006df6:	2301      	movs	r3, #1
 8006df8:	e00f      	b.n	8006e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006dfa:	4a0a      	ldr	r2, [pc, #40]	; (8006e24 <SysTick_Config+0x40>)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e02:	210f      	movs	r1, #15
 8006e04:	f04f 30ff 	mov.w	r0, #4294967295
 8006e08:	f7ff ff90 	bl	8006d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e0c:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <SysTick_Config+0x40>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e12:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <SysTick_Config+0x40>)
 8006e14:	2207      	movs	r2, #7
 8006e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	e000e010 	.word	0xe000e010

08006e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff ff2d 	bl	8006c90 <__NVIC_SetPriorityGrouping>
}
 8006e36:	bf00      	nop
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b086      	sub	sp, #24
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	4603      	mov	r3, r0
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	607a      	str	r2, [r7, #4]
 8006e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006e50:	f7ff ff42 	bl	8006cd8 <__NVIC_GetPriorityGrouping>
 8006e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	68b9      	ldr	r1, [r7, #8]
 8006e5a:	6978      	ldr	r0, [r7, #20]
 8006e5c:	f7ff ff90 	bl	8006d80 <NVIC_EncodePriority>
 8006e60:	4602      	mov	r2, r0
 8006e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e66:	4611      	mov	r1, r2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff ff5f 	bl	8006d2c <__NVIC_SetPriority>
}
 8006e6e:	bf00      	nop
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff ff35 	bl	8006cf4 <__NVIC_EnableIRQ>
}
 8006e8a:	bf00      	nop
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b082      	sub	sp, #8
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff ffa2 	bl	8006de4 <SysTick_Config>
 8006ea0:	4603      	mov	r3, r0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b085      	sub	sp, #20
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d008      	beq.n	8006ed4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2204      	movs	r2, #4
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e020      	b.n	8006f16 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 020e 	bic.w	r2, r2, #14
 8006ee2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0201 	bic.w	r2, r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efc:	2101      	movs	r1, #1
 8006efe:	fa01 f202 	lsl.w	r2, r1, r2
 8006f02:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bc80      	pop	{r7}
 8006f1e:	4770      	bx	lr

08006f20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d005      	beq.n	8006f44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2204      	movs	r2, #4
 8006f3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	73fb      	strb	r3, [r7, #15]
 8006f42:	e051      	b.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 020e 	bic.w	r2, r2, #14
 8006f52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0201 	bic.w	r2, r2, #1
 8006f62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a22      	ldr	r2, [pc, #136]	; (8006ff4 <HAL_DMA_Abort_IT+0xd4>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d029      	beq.n	8006fc2 <HAL_DMA_Abort_IT+0xa2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a21      	ldr	r2, [pc, #132]	; (8006ff8 <HAL_DMA_Abort_IT+0xd8>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d022      	beq.n	8006fbe <HAL_DMA_Abort_IT+0x9e>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a1f      	ldr	r2, [pc, #124]	; (8006ffc <HAL_DMA_Abort_IT+0xdc>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d01a      	beq.n	8006fb8 <HAL_DMA_Abort_IT+0x98>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a1e      	ldr	r2, [pc, #120]	; (8007000 <HAL_DMA_Abort_IT+0xe0>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d012      	beq.n	8006fb2 <HAL_DMA_Abort_IT+0x92>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a1c      	ldr	r2, [pc, #112]	; (8007004 <HAL_DMA_Abort_IT+0xe4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d00a      	beq.n	8006fac <HAL_DMA_Abort_IT+0x8c>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a1b      	ldr	r2, [pc, #108]	; (8007008 <HAL_DMA_Abort_IT+0xe8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d102      	bne.n	8006fa6 <HAL_DMA_Abort_IT+0x86>
 8006fa0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006fa4:	e00e      	b.n	8006fc4 <HAL_DMA_Abort_IT+0xa4>
 8006fa6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006faa:	e00b      	b.n	8006fc4 <HAL_DMA_Abort_IT+0xa4>
 8006fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006fb0:	e008      	b.n	8006fc4 <HAL_DMA_Abort_IT+0xa4>
 8006fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fb6:	e005      	b.n	8006fc4 <HAL_DMA_Abort_IT+0xa4>
 8006fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fbc:	e002      	b.n	8006fc4 <HAL_DMA_Abort_IT+0xa4>
 8006fbe:	2310      	movs	r3, #16
 8006fc0:	e000      	b.n	8006fc4 <HAL_DMA_Abort_IT+0xa4>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	4a11      	ldr	r2, [pc, #68]	; (800700c <HAL_DMA_Abort_IT+0xec>)
 8006fc6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	4798      	blx	r3
    } 
  }
  return status;
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	40020008 	.word	0x40020008
 8006ff8:	4002001c 	.word	0x4002001c
 8006ffc:	40020030 	.word	0x40020030
 8007000:	40020044 	.word	0x40020044
 8007004:	40020058 	.word	0x40020058
 8007008:	4002006c 	.word	0x4002006c
 800700c:	40020000 	.word	0x40020000

08007010 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007010:	b480      	push	{r7}
 8007012:	b08b      	sub	sp, #44	; 0x2c
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800701a:	2300      	movs	r3, #0
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800701e:	2300      	movs	r3, #0
 8007020:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007022:	e169      	b.n	80072f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007024:	2201      	movs	r2, #1
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	fa02 f303 	lsl.w	r3, r2, r3
 800702c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69fa      	ldr	r2, [r7, #28]
 8007034:	4013      	ands	r3, r2
 8007036:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	429a      	cmp	r2, r3
 800703e:	f040 8158 	bne.w	80072f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	4a9a      	ldr	r2, [pc, #616]	; (80072b0 <HAL_GPIO_Init+0x2a0>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d05e      	beq.n	800710a <HAL_GPIO_Init+0xfa>
 800704c:	4a98      	ldr	r2, [pc, #608]	; (80072b0 <HAL_GPIO_Init+0x2a0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d875      	bhi.n	800713e <HAL_GPIO_Init+0x12e>
 8007052:	4a98      	ldr	r2, [pc, #608]	; (80072b4 <HAL_GPIO_Init+0x2a4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d058      	beq.n	800710a <HAL_GPIO_Init+0xfa>
 8007058:	4a96      	ldr	r2, [pc, #600]	; (80072b4 <HAL_GPIO_Init+0x2a4>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d86f      	bhi.n	800713e <HAL_GPIO_Init+0x12e>
 800705e:	4a96      	ldr	r2, [pc, #600]	; (80072b8 <HAL_GPIO_Init+0x2a8>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d052      	beq.n	800710a <HAL_GPIO_Init+0xfa>
 8007064:	4a94      	ldr	r2, [pc, #592]	; (80072b8 <HAL_GPIO_Init+0x2a8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d869      	bhi.n	800713e <HAL_GPIO_Init+0x12e>
 800706a:	4a94      	ldr	r2, [pc, #592]	; (80072bc <HAL_GPIO_Init+0x2ac>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d04c      	beq.n	800710a <HAL_GPIO_Init+0xfa>
 8007070:	4a92      	ldr	r2, [pc, #584]	; (80072bc <HAL_GPIO_Init+0x2ac>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d863      	bhi.n	800713e <HAL_GPIO_Init+0x12e>
 8007076:	4a92      	ldr	r2, [pc, #584]	; (80072c0 <HAL_GPIO_Init+0x2b0>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d046      	beq.n	800710a <HAL_GPIO_Init+0xfa>
 800707c:	4a90      	ldr	r2, [pc, #576]	; (80072c0 <HAL_GPIO_Init+0x2b0>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d85d      	bhi.n	800713e <HAL_GPIO_Init+0x12e>
 8007082:	2b12      	cmp	r3, #18
 8007084:	d82a      	bhi.n	80070dc <HAL_GPIO_Init+0xcc>
 8007086:	2b12      	cmp	r3, #18
 8007088:	d859      	bhi.n	800713e <HAL_GPIO_Init+0x12e>
 800708a:	a201      	add	r2, pc, #4	; (adr r2, 8007090 <HAL_GPIO_Init+0x80>)
 800708c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007090:	0800710b 	.word	0x0800710b
 8007094:	080070e5 	.word	0x080070e5
 8007098:	080070f7 	.word	0x080070f7
 800709c:	08007139 	.word	0x08007139
 80070a0:	0800713f 	.word	0x0800713f
 80070a4:	0800713f 	.word	0x0800713f
 80070a8:	0800713f 	.word	0x0800713f
 80070ac:	0800713f 	.word	0x0800713f
 80070b0:	0800713f 	.word	0x0800713f
 80070b4:	0800713f 	.word	0x0800713f
 80070b8:	0800713f 	.word	0x0800713f
 80070bc:	0800713f 	.word	0x0800713f
 80070c0:	0800713f 	.word	0x0800713f
 80070c4:	0800713f 	.word	0x0800713f
 80070c8:	0800713f 	.word	0x0800713f
 80070cc:	0800713f 	.word	0x0800713f
 80070d0:	0800713f 	.word	0x0800713f
 80070d4:	080070ed 	.word	0x080070ed
 80070d8:	08007101 	.word	0x08007101
 80070dc:	4a79      	ldr	r2, [pc, #484]	; (80072c4 <HAL_GPIO_Init+0x2b4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d013      	beq.n	800710a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80070e2:	e02c      	b.n	800713e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	623b      	str	r3, [r7, #32]
          break;
 80070ea:	e029      	b.n	8007140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	3304      	adds	r3, #4
 80070f2:	623b      	str	r3, [r7, #32]
          break;
 80070f4:	e024      	b.n	8007140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	3308      	adds	r3, #8
 80070fc:	623b      	str	r3, [r7, #32]
          break;
 80070fe:	e01f      	b.n	8007140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	330c      	adds	r3, #12
 8007106:	623b      	str	r3, [r7, #32]
          break;
 8007108:	e01a      	b.n	8007140 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d102      	bne.n	8007118 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007112:	2304      	movs	r3, #4
 8007114:	623b      	str	r3, [r7, #32]
          break;
 8007116:	e013      	b.n	8007140 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d105      	bne.n	800712c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007120:	2308      	movs	r3, #8
 8007122:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	69fa      	ldr	r2, [r7, #28]
 8007128:	611a      	str	r2, [r3, #16]
          break;
 800712a:	e009      	b.n	8007140 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800712c:	2308      	movs	r3, #8
 800712e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	69fa      	ldr	r2, [r7, #28]
 8007134:	615a      	str	r2, [r3, #20]
          break;
 8007136:	e003      	b.n	8007140 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007138:	2300      	movs	r3, #0
 800713a:	623b      	str	r3, [r7, #32]
          break;
 800713c:	e000      	b.n	8007140 <HAL_GPIO_Init+0x130>
          break;
 800713e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	2bff      	cmp	r3, #255	; 0xff
 8007144:	d801      	bhi.n	800714a <HAL_GPIO_Init+0x13a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	e001      	b.n	800714e <HAL_GPIO_Init+0x13e>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3304      	adds	r3, #4
 800714e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	2bff      	cmp	r3, #255	; 0xff
 8007154:	d802      	bhi.n	800715c <HAL_GPIO_Init+0x14c>
 8007156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	e002      	b.n	8007162 <HAL_GPIO_Init+0x152>
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	3b08      	subs	r3, #8
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	210f      	movs	r1, #15
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	fa01 f303 	lsl.w	r3, r1, r3
 8007170:	43db      	mvns	r3, r3
 8007172:	401a      	ands	r2, r3
 8007174:	6a39      	ldr	r1, [r7, #32]
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	fa01 f303 	lsl.w	r3, r1, r3
 800717c:	431a      	orrs	r2, r3
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 80b1 	beq.w	80072f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007190:	4b4d      	ldr	r3, [pc, #308]	; (80072c8 <HAL_GPIO_Init+0x2b8>)
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	4a4c      	ldr	r2, [pc, #304]	; (80072c8 <HAL_GPIO_Init+0x2b8>)
 8007196:	f043 0301 	orr.w	r3, r3, #1
 800719a:	6193      	str	r3, [r2, #24]
 800719c:	4b4a      	ldr	r3, [pc, #296]	; (80072c8 <HAL_GPIO_Init+0x2b8>)
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	60bb      	str	r3, [r7, #8]
 80071a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80071a8:	4a48      	ldr	r2, [pc, #288]	; (80072cc <HAL_GPIO_Init+0x2bc>)
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	089b      	lsrs	r3, r3, #2
 80071ae:	3302      	adds	r3, #2
 80071b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	f003 0303 	and.w	r3, r3, #3
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	220f      	movs	r2, #15
 80071c0:	fa02 f303 	lsl.w	r3, r2, r3
 80071c4:	43db      	mvns	r3, r3
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4013      	ands	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a40      	ldr	r2, [pc, #256]	; (80072d0 <HAL_GPIO_Init+0x2c0>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d013      	beq.n	80071fc <HAL_GPIO_Init+0x1ec>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a3f      	ldr	r2, [pc, #252]	; (80072d4 <HAL_GPIO_Init+0x2c4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d00d      	beq.n	80071f8 <HAL_GPIO_Init+0x1e8>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a3e      	ldr	r2, [pc, #248]	; (80072d8 <HAL_GPIO_Init+0x2c8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d007      	beq.n	80071f4 <HAL_GPIO_Init+0x1e4>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a3d      	ldr	r2, [pc, #244]	; (80072dc <HAL_GPIO_Init+0x2cc>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d101      	bne.n	80071f0 <HAL_GPIO_Init+0x1e0>
 80071ec:	2303      	movs	r3, #3
 80071ee:	e006      	b.n	80071fe <HAL_GPIO_Init+0x1ee>
 80071f0:	2304      	movs	r3, #4
 80071f2:	e004      	b.n	80071fe <HAL_GPIO_Init+0x1ee>
 80071f4:	2302      	movs	r3, #2
 80071f6:	e002      	b.n	80071fe <HAL_GPIO_Init+0x1ee>
 80071f8:	2301      	movs	r3, #1
 80071fa:	e000      	b.n	80071fe <HAL_GPIO_Init+0x1ee>
 80071fc:	2300      	movs	r3, #0
 80071fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007200:	f002 0203 	and.w	r2, r2, #3
 8007204:	0092      	lsls	r2, r2, #2
 8007206:	4093      	lsls	r3, r2
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	4313      	orrs	r3, r2
 800720c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800720e:	492f      	ldr	r1, [pc, #188]	; (80072cc <HAL_GPIO_Init+0x2bc>)
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	089b      	lsrs	r3, r3, #2
 8007214:	3302      	adds	r3, #2
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d006      	beq.n	8007236 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007228:	4b2d      	ldr	r3, [pc, #180]	; (80072e0 <HAL_GPIO_Init+0x2d0>)
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	492c      	ldr	r1, [pc, #176]	; (80072e0 <HAL_GPIO_Init+0x2d0>)
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	4313      	orrs	r3, r2
 8007232:	608b      	str	r3, [r1, #8]
 8007234:	e006      	b.n	8007244 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007236:	4b2a      	ldr	r3, [pc, #168]	; (80072e0 <HAL_GPIO_Init+0x2d0>)
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	43db      	mvns	r3, r3
 800723e:	4928      	ldr	r1, [pc, #160]	; (80072e0 <HAL_GPIO_Init+0x2d0>)
 8007240:	4013      	ands	r3, r2
 8007242:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d006      	beq.n	800725e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007250:	4b23      	ldr	r3, [pc, #140]	; (80072e0 <HAL_GPIO_Init+0x2d0>)
 8007252:	68da      	ldr	r2, [r3, #12]
 8007254:	4922      	ldr	r1, [pc, #136]	; (80072e0 <HAL_GPIO_Init+0x2d0>)
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	4313      	orrs	r3, r2
 800725a:	60cb      	str	r3, [r1, #12]
 800725c:	e006      	b.n	800726c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800725e:	4b20      	ldr	r3, [pc, #128]	; (80072e0 <HAL_GPIO_Init+0x2d0>)
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	43db      	mvns	r3, r3
 8007266:	491e      	ldr	r1, [pc, #120]	; (80072e0 <HAL_GPIO_Init+0x2d0>)
 8007268:	4013      	ands	r3, r2
 800726a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d006      	beq.n	8007286 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007278:	4b19      	ldr	r3, [pc, #100]	; (80072e0 <HAL_GPIO_Init+0x2d0>)
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	4918      	ldr	r1, [pc, #96]	; (80072e0 <HAL_GPIO_Init+0x2d0>)
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	4313      	orrs	r3, r2
 8007282:	604b      	str	r3, [r1, #4]
 8007284:	e006      	b.n	8007294 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007286:	4b16      	ldr	r3, [pc, #88]	; (80072e0 <HAL_GPIO_Init+0x2d0>)
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	43db      	mvns	r3, r3
 800728e:	4914      	ldr	r1, [pc, #80]	; (80072e0 <HAL_GPIO_Init+0x2d0>)
 8007290:	4013      	ands	r3, r2
 8007292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d021      	beq.n	80072e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80072a0:	4b0f      	ldr	r3, [pc, #60]	; (80072e0 <HAL_GPIO_Init+0x2d0>)
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	490e      	ldr	r1, [pc, #56]	; (80072e0 <HAL_GPIO_Init+0x2d0>)
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	600b      	str	r3, [r1, #0]
 80072ac:	e021      	b.n	80072f2 <HAL_GPIO_Init+0x2e2>
 80072ae:	bf00      	nop
 80072b0:	10320000 	.word	0x10320000
 80072b4:	10310000 	.word	0x10310000
 80072b8:	10220000 	.word	0x10220000
 80072bc:	10210000 	.word	0x10210000
 80072c0:	10120000 	.word	0x10120000
 80072c4:	10110000 	.word	0x10110000
 80072c8:	40021000 	.word	0x40021000
 80072cc:	40010000 	.word	0x40010000
 80072d0:	40010800 	.word	0x40010800
 80072d4:	40010c00 	.word	0x40010c00
 80072d8:	40011000 	.word	0x40011000
 80072dc:	40011400 	.word	0x40011400
 80072e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80072e4:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <HAL_GPIO_Init+0x304>)
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	43db      	mvns	r3, r3
 80072ec:	4909      	ldr	r1, [pc, #36]	; (8007314 <HAL_GPIO_Init+0x304>)
 80072ee:	4013      	ands	r3, r2
 80072f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80072f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f4:	3301      	adds	r3, #1
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	f47f ae8e 	bne.w	8007024 <HAL_GPIO_Init+0x14>
  }
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	372c      	adds	r7, #44	; 0x2c
 800730e:	46bd      	mov	sp, r7
 8007310:	bc80      	pop	{r7}
 8007312:	4770      	bx	lr
 8007314:	40010400 	.word	0x40010400

08007318 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	887b      	ldrh	r3, [r7, #2]
 800732a:	4013      	ands	r3, r2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007330:	2301      	movs	r3, #1
 8007332:	73fb      	strb	r3, [r7, #15]
 8007334:	e001      	b.n	800733a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800733a:	7bfb      	ldrb	r3, [r7, #15]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	bc80      	pop	{r7}
 8007344:	4770      	bx	lr

08007346 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	460b      	mov	r3, r1
 8007350:	807b      	strh	r3, [r7, #2]
 8007352:	4613      	mov	r3, r2
 8007354:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007356:	787b      	ldrb	r3, [r7, #1]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800735c:	887a      	ldrh	r2, [r7, #2]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007362:	e003      	b.n	800736c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007364:	887b      	ldrh	r3, [r7, #2]
 8007366:	041a      	lsls	r2, r3, #16
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	611a      	str	r2, [r3, #16]
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	bc80      	pop	{r7}
 8007374:	4770      	bx	lr
	...

08007378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e272      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 8087 	beq.w	80074a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007398:	4b92      	ldr	r3, [pc, #584]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f003 030c 	and.w	r3, r3, #12
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	d00c      	beq.n	80073be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80073a4:	4b8f      	ldr	r3, [pc, #572]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f003 030c 	and.w	r3, r3, #12
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d112      	bne.n	80073d6 <HAL_RCC_OscConfig+0x5e>
 80073b0:	4b8c      	ldr	r3, [pc, #560]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073bc:	d10b      	bne.n	80073d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073be:	4b89      	ldr	r3, [pc, #548]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d06c      	beq.n	80074a4 <HAL_RCC_OscConfig+0x12c>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d168      	bne.n	80074a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e24c      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073de:	d106      	bne.n	80073ee <HAL_RCC_OscConfig+0x76>
 80073e0:	4b80      	ldr	r3, [pc, #512]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a7f      	ldr	r2, [pc, #508]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 80073e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073ea:	6013      	str	r3, [r2, #0]
 80073ec:	e02e      	b.n	800744c <HAL_RCC_OscConfig+0xd4>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10c      	bne.n	8007410 <HAL_RCC_OscConfig+0x98>
 80073f6:	4b7b      	ldr	r3, [pc, #492]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a7a      	ldr	r2, [pc, #488]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 80073fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	4b78      	ldr	r3, [pc, #480]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a77      	ldr	r2, [pc, #476]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 8007408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800740c:	6013      	str	r3, [r2, #0]
 800740e:	e01d      	b.n	800744c <HAL_RCC_OscConfig+0xd4>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007418:	d10c      	bne.n	8007434 <HAL_RCC_OscConfig+0xbc>
 800741a:	4b72      	ldr	r3, [pc, #456]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a71      	ldr	r2, [pc, #452]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 8007420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	4b6f      	ldr	r3, [pc, #444]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a6e      	ldr	r2, [pc, #440]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 800742c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	e00b      	b.n	800744c <HAL_RCC_OscConfig+0xd4>
 8007434:	4b6b      	ldr	r3, [pc, #428]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a6a      	ldr	r2, [pc, #424]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 800743a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	4b68      	ldr	r3, [pc, #416]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a67      	ldr	r2, [pc, #412]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 8007446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800744a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d013      	beq.n	800747c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007454:	f7ff fbee 	bl	8006c34 <HAL_GetTick>
 8007458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800745a:	e008      	b.n	800746e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800745c:	f7ff fbea 	bl	8006c34 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	2b64      	cmp	r3, #100	; 0x64
 8007468:	d901      	bls.n	800746e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e200      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800746e:	4b5d      	ldr	r3, [pc, #372]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0f0      	beq.n	800745c <HAL_RCC_OscConfig+0xe4>
 800747a:	e014      	b.n	80074a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800747c:	f7ff fbda 	bl	8006c34 <HAL_GetTick>
 8007480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007482:	e008      	b.n	8007496 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007484:	f7ff fbd6 	bl	8006c34 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b64      	cmp	r3, #100	; 0x64
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e1ec      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007496:	4b53      	ldr	r3, [pc, #332]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f0      	bne.n	8007484 <HAL_RCC_OscConfig+0x10c>
 80074a2:	e000      	b.n	80074a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0302 	and.w	r3, r3, #2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d063      	beq.n	800757a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80074b2:	4b4c      	ldr	r3, [pc, #304]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f003 030c 	and.w	r3, r3, #12
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00b      	beq.n	80074d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80074be:	4b49      	ldr	r3, [pc, #292]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f003 030c 	and.w	r3, r3, #12
 80074c6:	2b08      	cmp	r3, #8
 80074c8:	d11c      	bne.n	8007504 <HAL_RCC_OscConfig+0x18c>
 80074ca:	4b46      	ldr	r3, [pc, #280]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d116      	bne.n	8007504 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074d6:	4b43      	ldr	r3, [pc, #268]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d005      	beq.n	80074ee <HAL_RCC_OscConfig+0x176>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d001      	beq.n	80074ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e1c0      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ee:	4b3d      	ldr	r3, [pc, #244]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	4939      	ldr	r1, [pc, #228]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007502:	e03a      	b.n	800757a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d020      	beq.n	800754e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800750c:	4b36      	ldr	r3, [pc, #216]	; (80075e8 <HAL_RCC_OscConfig+0x270>)
 800750e:	2201      	movs	r2, #1
 8007510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007512:	f7ff fb8f 	bl	8006c34 <HAL_GetTick>
 8007516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007518:	e008      	b.n	800752c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800751a:	f7ff fb8b 	bl	8006c34 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d901      	bls.n	800752c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e1a1      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800752c:	4b2d      	ldr	r3, [pc, #180]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d0f0      	beq.n	800751a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007538:	4b2a      	ldr	r3, [pc, #168]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	4927      	ldr	r1, [pc, #156]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 8007548:	4313      	orrs	r3, r2
 800754a:	600b      	str	r3, [r1, #0]
 800754c:	e015      	b.n	800757a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800754e:	4b26      	ldr	r3, [pc, #152]	; (80075e8 <HAL_RCC_OscConfig+0x270>)
 8007550:	2200      	movs	r2, #0
 8007552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007554:	f7ff fb6e 	bl	8006c34 <HAL_GetTick>
 8007558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800755a:	e008      	b.n	800756e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800755c:	f7ff fb6a 	bl	8006c34 <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b02      	cmp	r3, #2
 8007568:	d901      	bls.n	800756e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e180      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800756e:	4b1d      	ldr	r3, [pc, #116]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1f0      	bne.n	800755c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0308 	and.w	r3, r3, #8
 8007582:	2b00      	cmp	r3, #0
 8007584:	d03a      	beq.n	80075fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d019      	beq.n	80075c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800758e:	4b17      	ldr	r3, [pc, #92]	; (80075ec <HAL_RCC_OscConfig+0x274>)
 8007590:	2201      	movs	r2, #1
 8007592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007594:	f7ff fb4e 	bl	8006c34 <HAL_GetTick>
 8007598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800759a:	e008      	b.n	80075ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800759c:	f7ff fb4a 	bl	8006c34 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e160      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075ae:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <HAL_RCC_OscConfig+0x26c>)
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0f0      	beq.n	800759c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80075ba:	2001      	movs	r0, #1
 80075bc:	f000 face 	bl	8007b5c <RCC_Delay>
 80075c0:	e01c      	b.n	80075fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075c2:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <HAL_RCC_OscConfig+0x274>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075c8:	f7ff fb34 	bl	8006c34 <HAL_GetTick>
 80075cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075ce:	e00f      	b.n	80075f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075d0:	f7ff fb30 	bl	8006c34 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d908      	bls.n	80075f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e146      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>
 80075e2:	bf00      	nop
 80075e4:	40021000 	.word	0x40021000
 80075e8:	42420000 	.word	0x42420000
 80075ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075f0:	4b92      	ldr	r3, [pc, #584]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e9      	bne.n	80075d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0304 	and.w	r3, r3, #4
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 80a6 	beq.w	8007756 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800760a:	2300      	movs	r3, #0
 800760c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800760e:	4b8b      	ldr	r3, [pc, #556]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10d      	bne.n	8007636 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800761a:	4b88      	ldr	r3, [pc, #544]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	4a87      	ldr	r2, [pc, #540]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 8007620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007624:	61d3      	str	r3, [r2, #28]
 8007626:	4b85      	ldr	r3, [pc, #532]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800762e:	60bb      	str	r3, [r7, #8]
 8007630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007632:	2301      	movs	r3, #1
 8007634:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007636:	4b82      	ldr	r3, [pc, #520]	; (8007840 <HAL_RCC_OscConfig+0x4c8>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800763e:	2b00      	cmp	r3, #0
 8007640:	d118      	bne.n	8007674 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007642:	4b7f      	ldr	r3, [pc, #508]	; (8007840 <HAL_RCC_OscConfig+0x4c8>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a7e      	ldr	r2, [pc, #504]	; (8007840 <HAL_RCC_OscConfig+0x4c8>)
 8007648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800764c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800764e:	f7ff faf1 	bl	8006c34 <HAL_GetTick>
 8007652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007654:	e008      	b.n	8007668 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007656:	f7ff faed 	bl	8006c34 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b64      	cmp	r3, #100	; 0x64
 8007662:	d901      	bls.n	8007668 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e103      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007668:	4b75      	ldr	r3, [pc, #468]	; (8007840 <HAL_RCC_OscConfig+0x4c8>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007670:	2b00      	cmp	r3, #0
 8007672:	d0f0      	beq.n	8007656 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d106      	bne.n	800768a <HAL_RCC_OscConfig+0x312>
 800767c:	4b6f      	ldr	r3, [pc, #444]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	4a6e      	ldr	r2, [pc, #440]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 8007682:	f043 0301 	orr.w	r3, r3, #1
 8007686:	6213      	str	r3, [r2, #32]
 8007688:	e02d      	b.n	80076e6 <HAL_RCC_OscConfig+0x36e>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10c      	bne.n	80076ac <HAL_RCC_OscConfig+0x334>
 8007692:	4b6a      	ldr	r3, [pc, #424]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	4a69      	ldr	r2, [pc, #420]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 8007698:	f023 0301 	bic.w	r3, r3, #1
 800769c:	6213      	str	r3, [r2, #32]
 800769e:	4b67      	ldr	r3, [pc, #412]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	4a66      	ldr	r2, [pc, #408]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 80076a4:	f023 0304 	bic.w	r3, r3, #4
 80076a8:	6213      	str	r3, [r2, #32]
 80076aa:	e01c      	b.n	80076e6 <HAL_RCC_OscConfig+0x36e>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	2b05      	cmp	r3, #5
 80076b2:	d10c      	bne.n	80076ce <HAL_RCC_OscConfig+0x356>
 80076b4:	4b61      	ldr	r3, [pc, #388]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	4a60      	ldr	r2, [pc, #384]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 80076ba:	f043 0304 	orr.w	r3, r3, #4
 80076be:	6213      	str	r3, [r2, #32]
 80076c0:	4b5e      	ldr	r3, [pc, #376]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	4a5d      	ldr	r2, [pc, #372]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 80076c6:	f043 0301 	orr.w	r3, r3, #1
 80076ca:	6213      	str	r3, [r2, #32]
 80076cc:	e00b      	b.n	80076e6 <HAL_RCC_OscConfig+0x36e>
 80076ce:	4b5b      	ldr	r3, [pc, #364]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	4a5a      	ldr	r2, [pc, #360]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 80076d4:	f023 0301 	bic.w	r3, r3, #1
 80076d8:	6213      	str	r3, [r2, #32]
 80076da:	4b58      	ldr	r3, [pc, #352]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	4a57      	ldr	r2, [pc, #348]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 80076e0:	f023 0304 	bic.w	r3, r3, #4
 80076e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d015      	beq.n	800771a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076ee:	f7ff faa1 	bl	8006c34 <HAL_GetTick>
 80076f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076f4:	e00a      	b.n	800770c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076f6:	f7ff fa9d 	bl	8006c34 <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	f241 3288 	movw	r2, #5000	; 0x1388
 8007704:	4293      	cmp	r3, r2
 8007706:	d901      	bls.n	800770c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e0b1      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800770c:	4b4b      	ldr	r3, [pc, #300]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d0ee      	beq.n	80076f6 <HAL_RCC_OscConfig+0x37e>
 8007718:	e014      	b.n	8007744 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800771a:	f7ff fa8b 	bl	8006c34 <HAL_GetTick>
 800771e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007720:	e00a      	b.n	8007738 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007722:	f7ff fa87 	bl	8006c34 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007730:	4293      	cmp	r3, r2
 8007732:	d901      	bls.n	8007738 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e09b      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007738:	4b40      	ldr	r3, [pc, #256]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1ee      	bne.n	8007722 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007744:	7dfb      	ldrb	r3, [r7, #23]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d105      	bne.n	8007756 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800774a:	4b3c      	ldr	r3, [pc, #240]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	4a3b      	ldr	r2, [pc, #236]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 8007750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007754:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 8087 	beq.w	800786e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007760:	4b36      	ldr	r3, [pc, #216]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f003 030c 	and.w	r3, r3, #12
 8007768:	2b08      	cmp	r3, #8
 800776a:	d061      	beq.n	8007830 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	2b02      	cmp	r3, #2
 8007772:	d146      	bne.n	8007802 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007774:	4b33      	ldr	r3, [pc, #204]	; (8007844 <HAL_RCC_OscConfig+0x4cc>)
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800777a:	f7ff fa5b 	bl	8006c34 <HAL_GetTick>
 800777e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007780:	e008      	b.n	8007794 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007782:	f7ff fa57 	bl	8006c34 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2b02      	cmp	r3, #2
 800778e:	d901      	bls.n	8007794 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e06d      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007794:	4b29      	ldr	r3, [pc, #164]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1f0      	bne.n	8007782 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a8:	d108      	bne.n	80077bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80077aa:	4b24      	ldr	r3, [pc, #144]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	4921      	ldr	r1, [pc, #132]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80077bc:	4b1f      	ldr	r3, [pc, #124]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a19      	ldr	r1, [r3, #32]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	430b      	orrs	r3, r1
 80077ce:	491b      	ldr	r1, [pc, #108]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077d4:	4b1b      	ldr	r3, [pc, #108]	; (8007844 <HAL_RCC_OscConfig+0x4cc>)
 80077d6:	2201      	movs	r2, #1
 80077d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077da:	f7ff fa2b 	bl	8006c34 <HAL_GetTick>
 80077de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80077e0:	e008      	b.n	80077f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077e2:	f7ff fa27 	bl	8006c34 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d901      	bls.n	80077f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e03d      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80077f4:	4b11      	ldr	r3, [pc, #68]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0f0      	beq.n	80077e2 <HAL_RCC_OscConfig+0x46a>
 8007800:	e035      	b.n	800786e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007802:	4b10      	ldr	r3, [pc, #64]	; (8007844 <HAL_RCC_OscConfig+0x4cc>)
 8007804:	2200      	movs	r2, #0
 8007806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007808:	f7ff fa14 	bl	8006c34 <HAL_GetTick>
 800780c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800780e:	e008      	b.n	8007822 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007810:	f7ff fa10 	bl	8006c34 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	2b02      	cmp	r3, #2
 800781c:	d901      	bls.n	8007822 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e026      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007822:	4b06      	ldr	r3, [pc, #24]	; (800783c <HAL_RCC_OscConfig+0x4c4>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1f0      	bne.n	8007810 <HAL_RCC_OscConfig+0x498>
 800782e:	e01e      	b.n	800786e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d107      	bne.n	8007848 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e019      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>
 800783c:	40021000 	.word	0x40021000
 8007840:	40007000 	.word	0x40007000
 8007844:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007848:	4b0b      	ldr	r3, [pc, #44]	; (8007878 <HAL_RCC_OscConfig+0x500>)
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	429a      	cmp	r2, r3
 800785a:	d106      	bne.n	800786a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007866:	429a      	cmp	r2, r3
 8007868:	d001      	beq.n	800786e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e000      	b.n	8007870 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3718      	adds	r7, #24
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	40021000 	.word	0x40021000

0800787c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e0d0      	b.n	8007a32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007890:	4b6a      	ldr	r3, [pc, #424]	; (8007a3c <HAL_RCC_ClockConfig+0x1c0>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	683a      	ldr	r2, [r7, #0]
 800789a:	429a      	cmp	r2, r3
 800789c:	d910      	bls.n	80078c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800789e:	4b67      	ldr	r3, [pc, #412]	; (8007a3c <HAL_RCC_ClockConfig+0x1c0>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f023 0207 	bic.w	r2, r3, #7
 80078a6:	4965      	ldr	r1, [pc, #404]	; (8007a3c <HAL_RCC_ClockConfig+0x1c0>)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ae:	4b63      	ldr	r3, [pc, #396]	; (8007a3c <HAL_RCC_ClockConfig+0x1c0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d001      	beq.n	80078c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e0b8      	b.n	8007a32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d020      	beq.n	800790e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078d8:	4b59      	ldr	r3, [pc, #356]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	4a58      	ldr	r2, [pc, #352]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 80078de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80078e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0308 	and.w	r3, r3, #8
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d005      	beq.n	80078fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078f0:	4b53      	ldr	r3, [pc, #332]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	4a52      	ldr	r2, [pc, #328]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 80078f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80078fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078fc:	4b50      	ldr	r3, [pc, #320]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	494d      	ldr	r1, [pc, #308]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 800790a:	4313      	orrs	r3, r2
 800790c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b00      	cmp	r3, #0
 8007918:	d040      	beq.n	800799c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d107      	bne.n	8007932 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007922:	4b47      	ldr	r3, [pc, #284]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d115      	bne.n	800795a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e07f      	b.n	8007a32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	2b02      	cmp	r3, #2
 8007938:	d107      	bne.n	800794a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800793a:	4b41      	ldr	r3, [pc, #260]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d109      	bne.n	800795a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e073      	b.n	8007a32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800794a:	4b3d      	ldr	r3, [pc, #244]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e06b      	b.n	8007a32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800795a:	4b39      	ldr	r3, [pc, #228]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f023 0203 	bic.w	r2, r3, #3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	4936      	ldr	r1, [pc, #216]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 8007968:	4313      	orrs	r3, r2
 800796a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800796c:	f7ff f962 	bl	8006c34 <HAL_GetTick>
 8007970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007972:	e00a      	b.n	800798a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007974:	f7ff f95e 	bl	8006c34 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007982:	4293      	cmp	r3, r2
 8007984:	d901      	bls.n	800798a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e053      	b.n	8007a32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800798a:	4b2d      	ldr	r3, [pc, #180]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f003 020c 	and.w	r2, r3, #12
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	429a      	cmp	r2, r3
 800799a:	d1eb      	bne.n	8007974 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800799c:	4b27      	ldr	r3, [pc, #156]	; (8007a3c <HAL_RCC_ClockConfig+0x1c0>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0307 	and.w	r3, r3, #7
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d210      	bcs.n	80079cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079aa:	4b24      	ldr	r3, [pc, #144]	; (8007a3c <HAL_RCC_ClockConfig+0x1c0>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f023 0207 	bic.w	r2, r3, #7
 80079b2:	4922      	ldr	r1, [pc, #136]	; (8007a3c <HAL_RCC_ClockConfig+0x1c0>)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ba:	4b20      	ldr	r3, [pc, #128]	; (8007a3c <HAL_RCC_ClockConfig+0x1c0>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d001      	beq.n	80079cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e032      	b.n	8007a32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d008      	beq.n	80079ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079d8:	4b19      	ldr	r3, [pc, #100]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	4916      	ldr	r1, [pc, #88]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0308 	and.w	r3, r3, #8
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d009      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80079f6:	4b12      	ldr	r3, [pc, #72]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	490e      	ldr	r1, [pc, #56]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a0a:	f000 f821 	bl	8007a50 <HAL_RCC_GetSysClockFreq>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <HAL_RCC_ClockConfig+0x1c4>)
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	091b      	lsrs	r3, r3, #4
 8007a16:	f003 030f 	and.w	r3, r3, #15
 8007a1a:	490a      	ldr	r1, [pc, #40]	; (8007a44 <HAL_RCC_ClockConfig+0x1c8>)
 8007a1c:	5ccb      	ldrb	r3, [r1, r3]
 8007a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a22:	4a09      	ldr	r2, [pc, #36]	; (8007a48 <HAL_RCC_ClockConfig+0x1cc>)
 8007a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007a26:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <HAL_RCC_ClockConfig+0x1d0>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7ff f8c0 	bl	8006bb0 <HAL_InitTick>

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	40022000 	.word	0x40022000
 8007a40:	40021000 	.word	0x40021000
 8007a44:	0800d238 	.word	0x0800d238
 8007a48:	20000280 	.word	0x20000280
 8007a4c:	20000284 	.word	0x20000284

08007a50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b087      	sub	sp, #28
 8007a54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60bb      	str	r3, [r7, #8]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	617b      	str	r3, [r7, #20]
 8007a62:	2300      	movs	r3, #0
 8007a64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007a66:	2300      	movs	r3, #0
 8007a68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007a6a:	4b1e      	ldr	r3, [pc, #120]	; (8007ae4 <HAL_RCC_GetSysClockFreq+0x94>)
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f003 030c 	and.w	r3, r3, #12
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	d002      	beq.n	8007a80 <HAL_RCC_GetSysClockFreq+0x30>
 8007a7a:	2b08      	cmp	r3, #8
 8007a7c:	d003      	beq.n	8007a86 <HAL_RCC_GetSysClockFreq+0x36>
 8007a7e:	e027      	b.n	8007ad0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007a80:	4b19      	ldr	r3, [pc, #100]	; (8007ae8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007a82:	613b      	str	r3, [r7, #16]
      break;
 8007a84:	e027      	b.n	8007ad6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	0c9b      	lsrs	r3, r3, #18
 8007a8a:	f003 030f 	and.w	r3, r3, #15
 8007a8e:	4a17      	ldr	r2, [pc, #92]	; (8007aec <HAL_RCC_GetSysClockFreq+0x9c>)
 8007a90:	5cd3      	ldrb	r3, [r2, r3]
 8007a92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d010      	beq.n	8007ac0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007a9e:	4b11      	ldr	r3, [pc, #68]	; (8007ae4 <HAL_RCC_GetSysClockFreq+0x94>)
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	0c5b      	lsrs	r3, r3, #17
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	4a11      	ldr	r2, [pc, #68]	; (8007af0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007aaa:	5cd3      	ldrb	r3, [r2, r3]
 8007aac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a0d      	ldr	r2, [pc, #52]	; (8007ae8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007ab2:	fb03 f202 	mul.w	r2, r3, r2
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007abc:	617b      	str	r3, [r7, #20]
 8007abe:	e004      	b.n	8007aca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a0c      	ldr	r2, [pc, #48]	; (8007af4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007ac4:	fb02 f303 	mul.w	r3, r2, r3
 8007ac8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	613b      	str	r3, [r7, #16]
      break;
 8007ace:	e002      	b.n	8007ad6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007ad0:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007ad2:	613b      	str	r3, [r7, #16]
      break;
 8007ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ad6:	693b      	ldr	r3, [r7, #16]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	371c      	adds	r7, #28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bc80      	pop	{r7}
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	40021000 	.word	0x40021000
 8007ae8:	007a1200 	.word	0x007a1200
 8007aec:	0800d250 	.word	0x0800d250
 8007af0:	0800d260 	.word	0x0800d260
 8007af4:	003d0900 	.word	0x003d0900

08007af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007afc:	4b02      	ldr	r3, [pc, #8]	; (8007b08 <HAL_RCC_GetHCLKFreq+0x10>)
 8007afe:	681b      	ldr	r3, [r3, #0]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bc80      	pop	{r7}
 8007b06:	4770      	bx	lr
 8007b08:	20000280 	.word	0x20000280

08007b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b10:	f7ff fff2 	bl	8007af8 <HAL_RCC_GetHCLKFreq>
 8007b14:	4602      	mov	r2, r0
 8007b16:	4b05      	ldr	r3, [pc, #20]	; (8007b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	0a1b      	lsrs	r3, r3, #8
 8007b1c:	f003 0307 	and.w	r3, r3, #7
 8007b20:	4903      	ldr	r1, [pc, #12]	; (8007b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b22:	5ccb      	ldrb	r3, [r1, r3]
 8007b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	40021000 	.word	0x40021000
 8007b30:	0800d248 	.word	0x0800d248

08007b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b38:	f7ff ffde 	bl	8007af8 <HAL_RCC_GetHCLKFreq>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	0adb      	lsrs	r3, r3, #11
 8007b44:	f003 0307 	and.w	r3, r3, #7
 8007b48:	4903      	ldr	r1, [pc, #12]	; (8007b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b4a:	5ccb      	ldrb	r3, [r1, r3]
 8007b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	40021000 	.word	0x40021000
 8007b58:	0800d248 	.word	0x0800d248

08007b5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007b64:	4b0a      	ldr	r3, [pc, #40]	; (8007b90 <RCC_Delay+0x34>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a0a      	ldr	r2, [pc, #40]	; (8007b94 <RCC_Delay+0x38>)
 8007b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6e:	0a5b      	lsrs	r3, r3, #9
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	fb02 f303 	mul.w	r3, r2, r3
 8007b76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007b78:	bf00      	nop
  }
  while (Delay --);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	1e5a      	subs	r2, r3, #1
 8007b7e:	60fa      	str	r2, [r7, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1f9      	bne.n	8007b78 <RCC_Delay+0x1c>
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bc80      	pop	{r7}
 8007b8e:	4770      	bx	lr
 8007b90:	20000280 	.word	0x20000280
 8007b94:	10624dd3 	.word	0x10624dd3

08007b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e042      	b.n	8007c30 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d106      	bne.n	8007bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7fe fe6e 	bl	80068a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2224      	movs	r2, #36	; 0x24
 8007bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68da      	ldr	r2, [r3, #12]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 fd7f 	bl	80086e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	691a      	ldr	r2, [r3, #16]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	695a      	ldr	r2, [r3, #20]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08a      	sub	sp, #40	; 0x28
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	4613      	mov	r3, r2
 8007c46:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b20      	cmp	r3, #32
 8007c56:	d17c      	bne.n	8007d52 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <HAL_UART_Receive+0x2c>
 8007c5e:	88fb      	ldrh	r3, [r7, #6]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e075      	b.n	8007d54 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2222      	movs	r2, #34	; 0x22
 8007c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c7c:	f7fe ffda 	bl	8006c34 <HAL_GetTick>
 8007c80:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	88fa      	ldrh	r2, [r7, #6]
 8007c86:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	88fa      	ldrh	r2, [r7, #6]
 8007c8c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c96:	d108      	bne.n	8007caa <HAL_UART_Receive+0x72>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d104      	bne.n	8007caa <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	61bb      	str	r3, [r7, #24]
 8007ca8:	e003      	b.n	8007cb2 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007cb2:	e043      	b.n	8007d3c <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2120      	movs	r1, #32
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 fb04 	bl	80082cc <UART_WaitOnFlagUntilTimeout>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e042      	b.n	8007d54 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10c      	bne.n	8007cee <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	3302      	adds	r3, #2
 8007cea:	61bb      	str	r3, [r7, #24]
 8007cec:	e01f      	b.n	8007d2e <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cf6:	d007      	beq.n	8007d08 <HAL_UART_Receive+0xd0>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10a      	bne.n	8007d16 <HAL_UART_Receive+0xde>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d106      	bne.n	8007d16 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	701a      	strb	r2, [r3, #0]
 8007d14:	e008      	b.n	8007d28 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	3b01      	subs	r3, #1
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1b6      	bne.n	8007cb4 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e000      	b.n	8007d54 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d52:	2302      	movs	r3, #2
  }
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3720      	adds	r7, #32
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b0ba      	sub	sp, #232	; 0xe8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d92:	f003 030f 	and.w	r3, r3, #15
 8007d96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007d9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10f      	bne.n	8007dc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da6:	f003 0320 	and.w	r3, r3, #32
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d009      	beq.n	8007dc2 <HAL_UART_IRQHandler+0x66>
 8007dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007db2:	f003 0320 	and.w	r3, r3, #32
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fbd1 	bl	8008562 <UART_Receive_IT>
      return;
 8007dc0:	e25b      	b.n	800827a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 80de 	beq.w	8007f88 <HAL_UART_IRQHandler+0x22c>
 8007dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d106      	bne.n	8007de6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ddc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 80d1 	beq.w	8007f88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00b      	beq.n	8007e0a <HAL_UART_IRQHandler+0xae>
 8007df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d005      	beq.n	8007e0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e02:	f043 0201 	orr.w	r2, r3, #1
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e0e:	f003 0304 	and.w	r3, r3, #4
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00b      	beq.n	8007e2e <HAL_UART_IRQHandler+0xd2>
 8007e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d005      	beq.n	8007e2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e26:	f043 0202 	orr.w	r2, r3, #2
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e32:	f003 0302 	and.w	r3, r3, #2
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00b      	beq.n	8007e52 <HAL_UART_IRQHandler+0xf6>
 8007e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d005      	beq.n	8007e52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4a:	f043 0204 	orr.w	r2, r3, #4
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e56:	f003 0308 	and.w	r3, r3, #8
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d011      	beq.n	8007e82 <HAL_UART_IRQHandler+0x126>
 8007e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e62:	f003 0320 	and.w	r3, r3, #32
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d105      	bne.n	8007e76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d005      	beq.n	8007e82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7a:	f043 0208 	orr.w	r2, r3, #8
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 81f2 	beq.w	8008270 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e90:	f003 0320 	and.w	r3, r3, #32
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d008      	beq.n	8007eaa <HAL_UART_IRQHandler+0x14e>
 8007e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e9c:	f003 0320 	and.w	r3, r3, #32
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fb5c 	bl	8008562 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	bf14      	ite	ne
 8007eb8:	2301      	movne	r3, #1
 8007eba:	2300      	moveq	r3, #0
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec6:	f003 0308 	and.w	r3, r3, #8
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d103      	bne.n	8007ed6 <HAL_UART_IRQHandler+0x17a>
 8007ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d04f      	beq.n	8007f76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fa66 	bl	80083a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d041      	beq.n	8007f6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3314      	adds	r3, #20
 8007ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ef8:	e853 3f00 	ldrex	r3, [r3]
 8007efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3314      	adds	r3, #20
 8007f12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f26:	e841 2300 	strex	r3, r2, [r1]
 8007f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1d9      	bne.n	8007eea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d013      	beq.n	8007f66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f42:	4a7e      	ldr	r2, [pc, #504]	; (800813c <HAL_UART_IRQHandler+0x3e0>)
 8007f44:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe ffe8 	bl	8006f20 <HAL_DMA_Abort_IT>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d016      	beq.n	8007f84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007f60:	4610      	mov	r0, r2
 8007f62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f64:	e00e      	b.n	8007f84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f99c 	bl	80082a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f6c:	e00a      	b.n	8007f84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f998 	bl	80082a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f74:	e006      	b.n	8007f84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f994 	bl	80082a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007f82:	e175      	b.n	8008270 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f84:	bf00      	nop
    return;
 8007f86:	e173      	b.n	8008270 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	f040 814f 	bne.w	8008230 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f96:	f003 0310 	and.w	r3, r3, #16
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 8148 	beq.w	8008230 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fa4:	f003 0310 	and.w	r3, r3, #16
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 8141 	beq.w	8008230 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60bb      	str	r3, [r7, #8]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	60bb      	str	r3, [r7, #8]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	60bb      	str	r3, [r7, #8]
 8007fc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 80b6 	beq.w	8008140 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007fe0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 8145 	beq.w	8008274 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	f080 813e 	bcs.w	8008274 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ffe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	2b20      	cmp	r3, #32
 8008008:	f000 8088 	beq.w	800811c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	330c      	adds	r3, #12
 8008012:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008016:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800801a:	e853 3f00 	ldrex	r3, [r3]
 800801e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008026:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800802a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	330c      	adds	r3, #12
 8008034:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008038:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800803c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008044:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008048:	e841 2300 	strex	r3, r2, [r1]
 800804c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1d9      	bne.n	800800c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3314      	adds	r3, #20
 800805e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008068:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800806a:	f023 0301 	bic.w	r3, r3, #1
 800806e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3314      	adds	r3, #20
 8008078:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800807c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008080:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008082:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008084:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008088:	e841 2300 	strex	r3, r2, [r1]
 800808c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800808e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e1      	bne.n	8008058 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3314      	adds	r3, #20
 800809a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800809e:	e853 3f00 	ldrex	r3, [r3]
 80080a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80080a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3314      	adds	r3, #20
 80080b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80080b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80080be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80080c0:	e841 2300 	strex	r3, r2, [r1]
 80080c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80080c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1e3      	bne.n	8008094 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2220      	movs	r2, #32
 80080d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	330c      	adds	r3, #12
 80080e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e4:	e853 3f00 	ldrex	r3, [r3]
 80080e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80080ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ec:	f023 0310 	bic.w	r3, r3, #16
 80080f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	330c      	adds	r3, #12
 80080fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80080fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8008100:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008102:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008104:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800810c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e3      	bne.n	80080da <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008116:	4618      	mov	r0, r3
 8008118:	f7fe fec7 	bl	8006eaa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2202      	movs	r2, #2
 8008120:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800812a:	b29b      	uxth	r3, r3
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	b29b      	uxth	r3, r3
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f8bf 	bl	80082b6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008138:	e09c      	b.n	8008274 <HAL_UART_IRQHandler+0x518>
 800813a:	bf00      	nop
 800813c:	0800846d 	.word	0x0800846d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008148:	b29b      	uxth	r3, r3
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008154:	b29b      	uxth	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 808e 	beq.w	8008278 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800815c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 8089 	beq.w	8008278 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	330c      	adds	r3, #12
 800816c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008170:	e853 3f00 	ldrex	r3, [r3]
 8008174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008178:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800817c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	330c      	adds	r3, #12
 8008186:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800818a:	647a      	str	r2, [r7, #68]	; 0x44
 800818c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e3      	bne.n	8008166 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3314      	adds	r3, #20
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	623b      	str	r3, [r7, #32]
   return(result);
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	f023 0301 	bic.w	r3, r3, #1
 80081b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3314      	adds	r3, #20
 80081be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80081c2:	633a      	str	r2, [r7, #48]	; 0x30
 80081c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e3      	bne.n	800819e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2220      	movs	r2, #32
 80081da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	330c      	adds	r3, #12
 80081ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	e853 3f00 	ldrex	r3, [r3]
 80081f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f023 0310 	bic.w	r3, r3, #16
 80081fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	330c      	adds	r3, #12
 8008204:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008208:	61fa      	str	r2, [r7, #28]
 800820a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820c:	69b9      	ldr	r1, [r7, #24]
 800820e:	69fa      	ldr	r2, [r7, #28]
 8008210:	e841 2300 	strex	r3, r2, [r1]
 8008214:	617b      	str	r3, [r7, #20]
   return(result);
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e3      	bne.n	80081e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008222:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008226:	4619      	mov	r1, r3
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f844 	bl	80082b6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800822e:	e023      	b.n	8008278 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008238:	2b00      	cmp	r3, #0
 800823a:	d009      	beq.n	8008250 <HAL_UART_IRQHandler+0x4f4>
 800823c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008244:	2b00      	cmp	r3, #0
 8008246:	d003      	beq.n	8008250 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f923 	bl	8008494 <UART_Transmit_IT>
    return;
 800824e:	e014      	b.n	800827a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00e      	beq.n	800827a <HAL_UART_IRQHandler+0x51e>
 800825c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008264:	2b00      	cmp	r3, #0
 8008266:	d008      	beq.n	800827a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f962 	bl	8008532 <UART_EndTransmit_IT>
    return;
 800826e:	e004      	b.n	800827a <HAL_UART_IRQHandler+0x51e>
    return;
 8008270:	bf00      	nop
 8008272:	e002      	b.n	800827a <HAL_UART_IRQHandler+0x51e>
      return;
 8008274:	bf00      	nop
 8008276:	e000      	b.n	800827a <HAL_UART_IRQHandler+0x51e>
      return;
 8008278:	bf00      	nop
  }
}
 800827a:	37e8      	adds	r7, #232	; 0xe8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	bc80      	pop	{r7}
 8008290:	4770      	bx	lr

08008292 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800829a:	bf00      	nop
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	bc80      	pop	{r7}
 80082a2:	4770      	bx	lr

080082a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bc80      	pop	{r7}
 80082b4:	4770      	bx	lr

080082b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	460b      	mov	r3, r1
 80082c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082c2:	bf00      	nop
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bc80      	pop	{r7}
 80082ca:	4770      	bx	lr

080082cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b090      	sub	sp, #64	; 0x40
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	603b      	str	r3, [r7, #0]
 80082d8:	4613      	mov	r3, r2
 80082da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082dc:	e050      	b.n	8008380 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e4:	d04c      	beq.n	8008380 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80082e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d007      	beq.n	80082fc <UART_WaitOnFlagUntilTimeout+0x30>
 80082ec:	f7fe fca2 	bl	8006c34 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d241      	bcs.n	8008380 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	330c      	adds	r3, #12
 8008302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008306:	e853 3f00 	ldrex	r3, [r3]
 800830a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	330c      	adds	r3, #12
 800831a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800831c:	637a      	str	r2, [r7, #52]	; 0x34
 800831e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008324:	e841 2300 	strex	r3, r2, [r1]
 8008328:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800832a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e5      	bne.n	80082fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3314      	adds	r3, #20
 8008336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	e853 3f00 	ldrex	r3, [r3]
 800833e:	613b      	str	r3, [r7, #16]
   return(result);
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	f023 0301 	bic.w	r3, r3, #1
 8008346:	63bb      	str	r3, [r7, #56]	; 0x38
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3314      	adds	r3, #20
 800834e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008350:	623a      	str	r2, [r7, #32]
 8008352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008354:	69f9      	ldr	r1, [r7, #28]
 8008356:	6a3a      	ldr	r2, [r7, #32]
 8008358:	e841 2300 	strex	r3, r2, [r1]
 800835c:	61bb      	str	r3, [r7, #24]
   return(result);
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1e5      	bne.n	8008330 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2220      	movs	r2, #32
 8008368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2220      	movs	r2, #32
 8008370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e00f      	b.n	80083a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	4013      	ands	r3, r2
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	429a      	cmp	r2, r3
 800838e:	bf0c      	ite	eq
 8008390:	2301      	moveq	r3, #1
 8008392:	2300      	movne	r3, #0
 8008394:	b2db      	uxtb	r3, r3
 8008396:	461a      	mov	r2, r3
 8008398:	79fb      	ldrb	r3, [r7, #7]
 800839a:	429a      	cmp	r2, r3
 800839c:	d09f      	beq.n	80082de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3740      	adds	r7, #64	; 0x40
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b095      	sub	sp, #84	; 0x54
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	330c      	adds	r3, #12
 80083b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ba:	e853 3f00 	ldrex	r3, [r3]
 80083be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	330c      	adds	r3, #12
 80083ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083d0:	643a      	str	r2, [r7, #64]	; 0x40
 80083d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083d8:	e841 2300 	strex	r3, r2, [r1]
 80083dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1e5      	bne.n	80083b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3314      	adds	r3, #20
 80083ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	e853 3f00 	ldrex	r3, [r3]
 80083f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	f023 0301 	bic.w	r3, r3, #1
 80083fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3314      	adds	r3, #20
 8008402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008404:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800840a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800840c:	e841 2300 	strex	r3, r2, [r1]
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1e5      	bne.n	80083e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841c:	2b01      	cmp	r3, #1
 800841e:	d119      	bne.n	8008454 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	330c      	adds	r3, #12
 8008426:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	f023 0310 	bic.w	r3, r3, #16
 8008436:	647b      	str	r3, [r7, #68]	; 0x44
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	330c      	adds	r3, #12
 800843e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008440:	61ba      	str	r2, [r7, #24]
 8008442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008444:	6979      	ldr	r1, [r7, #20]
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	e841 2300 	strex	r3, r2, [r1]
 800844c:	613b      	str	r3, [r7, #16]
   return(result);
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e5      	bne.n	8008420 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2220      	movs	r2, #32
 8008458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008462:	bf00      	nop
 8008464:	3754      	adds	r7, #84	; 0x54
 8008466:	46bd      	mov	sp, r7
 8008468:	bc80      	pop	{r7}
 800846a:	4770      	bx	lr

0800846c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008478:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f7ff ff0c 	bl	80082a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800848c:	bf00      	nop
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b21      	cmp	r3, #33	; 0x21
 80084a6:	d13e      	bne.n	8008526 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b0:	d114      	bne.n	80084dc <UART_Transmit_IT+0x48>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d110      	bne.n	80084dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a1b      	ldr	r3, [r3, #32]
 80084d4:	1c9a      	adds	r2, r3, #2
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	621a      	str	r2, [r3, #32]
 80084da:	e008      	b.n	80084ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a1b      	ldr	r3, [r3, #32]
 80084e0:	1c59      	adds	r1, r3, #1
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	6211      	str	r1, [r2, #32]
 80084e6:	781a      	ldrb	r2, [r3, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	3b01      	subs	r3, #1
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	4619      	mov	r1, r3
 80084fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10f      	bne.n	8008522 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008510:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68da      	ldr	r2, [r3, #12]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008520:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	e000      	b.n	8008528 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008526:	2302      	movs	r3, #2
  }
}
 8008528:	4618      	mov	r0, r3
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	bc80      	pop	{r7}
 8008530:	4770      	bx	lr

08008532 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b082      	sub	sp, #8
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008548:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2220      	movs	r2, #32
 800854e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7ff fe94 	bl	8008280 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b08c      	sub	sp, #48	; 0x30
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b22      	cmp	r3, #34	; 0x22
 8008574:	f040 80ae 	bne.w	80086d4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008580:	d117      	bne.n	80085b2 <UART_Receive_IT+0x50>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d113      	bne.n	80085b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800858a:	2300      	movs	r3, #0
 800858c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008592:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	b29b      	uxth	r3, r3
 800859c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085aa:	1c9a      	adds	r2, r3, #2
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	629a      	str	r2, [r3, #40]	; 0x28
 80085b0:	e026      	b.n	8008600 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80085b8:	2300      	movs	r3, #0
 80085ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085c4:	d007      	beq.n	80085d6 <UART_Receive_IT+0x74>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10a      	bne.n	80085e4 <UART_Receive_IT+0x82>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d106      	bne.n	80085e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e0:	701a      	strb	r2, [r3, #0]
 80085e2:	e008      	b.n	80085f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008604:	b29b      	uxth	r3, r3
 8008606:	3b01      	subs	r3, #1
 8008608:	b29b      	uxth	r3, r3
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	4619      	mov	r1, r3
 800860e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008610:	2b00      	cmp	r3, #0
 8008612:	d15d      	bne.n	80086d0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68da      	ldr	r2, [r3, #12]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 0220 	bic.w	r2, r2, #32
 8008622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68da      	ldr	r2, [r3, #12]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	695a      	ldr	r2, [r3, #20]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f022 0201 	bic.w	r2, r2, #1
 8008642:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2220      	movs	r2, #32
 8008648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008656:	2b01      	cmp	r3, #1
 8008658:	d135      	bne.n	80086c6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	330c      	adds	r3, #12
 8008666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	e853 3f00 	ldrex	r3, [r3]
 800866e:	613b      	str	r3, [r7, #16]
   return(result);
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f023 0310 	bic.w	r3, r3, #16
 8008676:	627b      	str	r3, [r7, #36]	; 0x24
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	330c      	adds	r3, #12
 800867e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008680:	623a      	str	r2, [r7, #32]
 8008682:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008684:	69f9      	ldr	r1, [r7, #28]
 8008686:	6a3a      	ldr	r2, [r7, #32]
 8008688:	e841 2300 	strex	r3, r2, [r1]
 800868c:	61bb      	str	r3, [r7, #24]
   return(result);
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1e5      	bne.n	8008660 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0310 	and.w	r3, r3, #16
 800869e:	2b10      	cmp	r3, #16
 80086a0:	d10a      	bne.n	80086b8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086a2:	2300      	movs	r3, #0
 80086a4:	60fb      	str	r3, [r7, #12]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	60fb      	str	r3, [r7, #12]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7ff fdf9 	bl	80082b6 <HAL_UARTEx_RxEventCallback>
 80086c4:	e002      	b.n	80086cc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7ff fde3 	bl	8008292 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	e002      	b.n	80086d6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	e000      	b.n	80086d6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80086d4:	2302      	movs	r3, #2
  }
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3730      	adds	r7, #48	; 0x30
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
	...

080086e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68da      	ldr	r2, [r3, #12]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689a      	ldr	r2, [r3, #8]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	431a      	orrs	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	4313      	orrs	r3, r2
 800870e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800871a:	f023 030c 	bic.w	r3, r3, #12
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	6812      	ldr	r2, [r2, #0]
 8008722:	68b9      	ldr	r1, [r7, #8]
 8008724:	430b      	orrs	r3, r1
 8008726:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	699a      	ldr	r2, [r3, #24]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	430a      	orrs	r2, r1
 800873c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a2c      	ldr	r2, [pc, #176]	; (80087f4 <UART_SetConfig+0x114>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d103      	bne.n	8008750 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008748:	f7ff f9f4 	bl	8007b34 <HAL_RCC_GetPCLK2Freq>
 800874c:	60f8      	str	r0, [r7, #12]
 800874e:	e002      	b.n	8008756 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008750:	f7ff f9dc 	bl	8007b0c <HAL_RCC_GetPCLK1Freq>
 8008754:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	4613      	mov	r3, r2
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	009a      	lsls	r2, r3, #2
 8008760:	441a      	add	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	fbb2 f3f3 	udiv	r3, r2, r3
 800876c:	4a22      	ldr	r2, [pc, #136]	; (80087f8 <UART_SetConfig+0x118>)
 800876e:	fba2 2303 	umull	r2, r3, r2, r3
 8008772:	095b      	lsrs	r3, r3, #5
 8008774:	0119      	lsls	r1, r3, #4
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	4613      	mov	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	009a      	lsls	r2, r3, #2
 8008780:	441a      	add	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	fbb2 f2f3 	udiv	r2, r2, r3
 800878c:	4b1a      	ldr	r3, [pc, #104]	; (80087f8 <UART_SetConfig+0x118>)
 800878e:	fba3 0302 	umull	r0, r3, r3, r2
 8008792:	095b      	lsrs	r3, r3, #5
 8008794:	2064      	movs	r0, #100	; 0x64
 8008796:	fb00 f303 	mul.w	r3, r0, r3
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	011b      	lsls	r3, r3, #4
 800879e:	3332      	adds	r3, #50	; 0x32
 80087a0:	4a15      	ldr	r2, [pc, #84]	; (80087f8 <UART_SetConfig+0x118>)
 80087a2:	fba2 2303 	umull	r2, r3, r2, r3
 80087a6:	095b      	lsrs	r3, r3, #5
 80087a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087ac:	4419      	add	r1, r3
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	4613      	mov	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	009a      	lsls	r2, r3, #2
 80087b8:	441a      	add	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80087c4:	4b0c      	ldr	r3, [pc, #48]	; (80087f8 <UART_SetConfig+0x118>)
 80087c6:	fba3 0302 	umull	r0, r3, r3, r2
 80087ca:	095b      	lsrs	r3, r3, #5
 80087cc:	2064      	movs	r0, #100	; 0x64
 80087ce:	fb00 f303 	mul.w	r3, r0, r3
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	3332      	adds	r3, #50	; 0x32
 80087d8:	4a07      	ldr	r2, [pc, #28]	; (80087f8 <UART_SetConfig+0x118>)
 80087da:	fba2 2303 	umull	r2, r3, r2, r3
 80087de:	095b      	lsrs	r3, r3, #5
 80087e0:	f003 020f 	and.w	r2, r3, #15
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	440a      	add	r2, r1
 80087ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80087ec:	bf00      	nop
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	40013800 	.word	0x40013800
 80087f8:	51eb851f 	.word	0x51eb851f

080087fc <__errno>:
 80087fc:	4b01      	ldr	r3, [pc, #4]	; (8008804 <__errno+0x8>)
 80087fe:	6818      	ldr	r0, [r3, #0]
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	2000028c 	.word	0x2000028c

08008808 <__libc_init_array>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	2600      	movs	r6, #0
 800880c:	4d0c      	ldr	r5, [pc, #48]	; (8008840 <__libc_init_array+0x38>)
 800880e:	4c0d      	ldr	r4, [pc, #52]	; (8008844 <__libc_init_array+0x3c>)
 8008810:	1b64      	subs	r4, r4, r5
 8008812:	10a4      	asrs	r4, r4, #2
 8008814:	42a6      	cmp	r6, r4
 8008816:	d109      	bne.n	800882c <__libc_init_array+0x24>
 8008818:	f004 fc52 	bl	800d0c0 <_init>
 800881c:	2600      	movs	r6, #0
 800881e:	4d0a      	ldr	r5, [pc, #40]	; (8008848 <__libc_init_array+0x40>)
 8008820:	4c0a      	ldr	r4, [pc, #40]	; (800884c <__libc_init_array+0x44>)
 8008822:	1b64      	subs	r4, r4, r5
 8008824:	10a4      	asrs	r4, r4, #2
 8008826:	42a6      	cmp	r6, r4
 8008828:	d105      	bne.n	8008836 <__libc_init_array+0x2e>
 800882a:	bd70      	pop	{r4, r5, r6, pc}
 800882c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008830:	4798      	blx	r3
 8008832:	3601      	adds	r6, #1
 8008834:	e7ee      	b.n	8008814 <__libc_init_array+0xc>
 8008836:	f855 3b04 	ldr.w	r3, [r5], #4
 800883a:	4798      	blx	r3
 800883c:	3601      	adds	r6, #1
 800883e:	e7f2      	b.n	8008826 <__libc_init_array+0x1e>
 8008840:	0800d714 	.word	0x0800d714
 8008844:	0800d714 	.word	0x0800d714
 8008848:	0800d714 	.word	0x0800d714
 800884c:	0800d718 	.word	0x0800d718

08008850 <__retarget_lock_init_recursive>:
 8008850:	4770      	bx	lr

08008852 <__retarget_lock_acquire_recursive>:
 8008852:	4770      	bx	lr

08008854 <__retarget_lock_release_recursive>:
 8008854:	4770      	bx	lr
	...

08008858 <malloc>:
 8008858:	4b02      	ldr	r3, [pc, #8]	; (8008864 <malloc+0xc>)
 800885a:	4601      	mov	r1, r0
 800885c:	6818      	ldr	r0, [r3, #0]
 800885e:	f000 b881 	b.w	8008964 <_malloc_r>
 8008862:	bf00      	nop
 8008864:	2000028c 	.word	0x2000028c

08008868 <memcpy>:
 8008868:	440a      	add	r2, r1
 800886a:	4291      	cmp	r1, r2
 800886c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008870:	d100      	bne.n	8008874 <memcpy+0xc>
 8008872:	4770      	bx	lr
 8008874:	b510      	push	{r4, lr}
 8008876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800887a:	4291      	cmp	r1, r2
 800887c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008880:	d1f9      	bne.n	8008876 <memcpy+0xe>
 8008882:	bd10      	pop	{r4, pc}

08008884 <memset>:
 8008884:	4603      	mov	r3, r0
 8008886:	4402      	add	r2, r0
 8008888:	4293      	cmp	r3, r2
 800888a:	d100      	bne.n	800888e <memset+0xa>
 800888c:	4770      	bx	lr
 800888e:	f803 1b01 	strb.w	r1, [r3], #1
 8008892:	e7f9      	b.n	8008888 <memset+0x4>

08008894 <_free_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	4605      	mov	r5, r0
 8008898:	2900      	cmp	r1, #0
 800889a:	d040      	beq.n	800891e <_free_r+0x8a>
 800889c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088a0:	1f0c      	subs	r4, r1, #4
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	bfb8      	it	lt
 80088a6:	18e4      	addlt	r4, r4, r3
 80088a8:	f003 fa20 	bl	800bcec <__malloc_lock>
 80088ac:	4a1c      	ldr	r2, [pc, #112]	; (8008920 <_free_r+0x8c>)
 80088ae:	6813      	ldr	r3, [r2, #0]
 80088b0:	b933      	cbnz	r3, 80088c0 <_free_r+0x2c>
 80088b2:	6063      	str	r3, [r4, #4]
 80088b4:	6014      	str	r4, [r2, #0]
 80088b6:	4628      	mov	r0, r5
 80088b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088bc:	f003 ba1c 	b.w	800bcf8 <__malloc_unlock>
 80088c0:	42a3      	cmp	r3, r4
 80088c2:	d908      	bls.n	80088d6 <_free_r+0x42>
 80088c4:	6820      	ldr	r0, [r4, #0]
 80088c6:	1821      	adds	r1, r4, r0
 80088c8:	428b      	cmp	r3, r1
 80088ca:	bf01      	itttt	eq
 80088cc:	6819      	ldreq	r1, [r3, #0]
 80088ce:	685b      	ldreq	r3, [r3, #4]
 80088d0:	1809      	addeq	r1, r1, r0
 80088d2:	6021      	streq	r1, [r4, #0]
 80088d4:	e7ed      	b.n	80088b2 <_free_r+0x1e>
 80088d6:	461a      	mov	r2, r3
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	b10b      	cbz	r3, 80088e0 <_free_r+0x4c>
 80088dc:	42a3      	cmp	r3, r4
 80088de:	d9fa      	bls.n	80088d6 <_free_r+0x42>
 80088e0:	6811      	ldr	r1, [r2, #0]
 80088e2:	1850      	adds	r0, r2, r1
 80088e4:	42a0      	cmp	r0, r4
 80088e6:	d10b      	bne.n	8008900 <_free_r+0x6c>
 80088e8:	6820      	ldr	r0, [r4, #0]
 80088ea:	4401      	add	r1, r0
 80088ec:	1850      	adds	r0, r2, r1
 80088ee:	4283      	cmp	r3, r0
 80088f0:	6011      	str	r1, [r2, #0]
 80088f2:	d1e0      	bne.n	80088b6 <_free_r+0x22>
 80088f4:	6818      	ldr	r0, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	4401      	add	r1, r0
 80088fa:	6011      	str	r1, [r2, #0]
 80088fc:	6053      	str	r3, [r2, #4]
 80088fe:	e7da      	b.n	80088b6 <_free_r+0x22>
 8008900:	d902      	bls.n	8008908 <_free_r+0x74>
 8008902:	230c      	movs	r3, #12
 8008904:	602b      	str	r3, [r5, #0]
 8008906:	e7d6      	b.n	80088b6 <_free_r+0x22>
 8008908:	6820      	ldr	r0, [r4, #0]
 800890a:	1821      	adds	r1, r4, r0
 800890c:	428b      	cmp	r3, r1
 800890e:	bf01      	itttt	eq
 8008910:	6819      	ldreq	r1, [r3, #0]
 8008912:	685b      	ldreq	r3, [r3, #4]
 8008914:	1809      	addeq	r1, r1, r0
 8008916:	6021      	streq	r1, [r4, #0]
 8008918:	6063      	str	r3, [r4, #4]
 800891a:	6054      	str	r4, [r2, #4]
 800891c:	e7cb      	b.n	80088b6 <_free_r+0x22>
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	200004d4 	.word	0x200004d4

08008924 <sbrk_aligned>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	4e0e      	ldr	r6, [pc, #56]	; (8008960 <sbrk_aligned+0x3c>)
 8008928:	460c      	mov	r4, r1
 800892a:	6831      	ldr	r1, [r6, #0]
 800892c:	4605      	mov	r5, r0
 800892e:	b911      	cbnz	r1, 8008936 <sbrk_aligned+0x12>
 8008930:	f000 fefa 	bl	8009728 <_sbrk_r>
 8008934:	6030      	str	r0, [r6, #0]
 8008936:	4621      	mov	r1, r4
 8008938:	4628      	mov	r0, r5
 800893a:	f000 fef5 	bl	8009728 <_sbrk_r>
 800893e:	1c43      	adds	r3, r0, #1
 8008940:	d00a      	beq.n	8008958 <sbrk_aligned+0x34>
 8008942:	1cc4      	adds	r4, r0, #3
 8008944:	f024 0403 	bic.w	r4, r4, #3
 8008948:	42a0      	cmp	r0, r4
 800894a:	d007      	beq.n	800895c <sbrk_aligned+0x38>
 800894c:	1a21      	subs	r1, r4, r0
 800894e:	4628      	mov	r0, r5
 8008950:	f000 feea 	bl	8009728 <_sbrk_r>
 8008954:	3001      	adds	r0, #1
 8008956:	d101      	bne.n	800895c <sbrk_aligned+0x38>
 8008958:	f04f 34ff 	mov.w	r4, #4294967295
 800895c:	4620      	mov	r0, r4
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	200004d8 	.word	0x200004d8

08008964 <_malloc_r>:
 8008964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008968:	1ccd      	adds	r5, r1, #3
 800896a:	f025 0503 	bic.w	r5, r5, #3
 800896e:	3508      	adds	r5, #8
 8008970:	2d0c      	cmp	r5, #12
 8008972:	bf38      	it	cc
 8008974:	250c      	movcc	r5, #12
 8008976:	2d00      	cmp	r5, #0
 8008978:	4607      	mov	r7, r0
 800897a:	db01      	blt.n	8008980 <_malloc_r+0x1c>
 800897c:	42a9      	cmp	r1, r5
 800897e:	d905      	bls.n	800898c <_malloc_r+0x28>
 8008980:	230c      	movs	r3, #12
 8008982:	2600      	movs	r6, #0
 8008984:	603b      	str	r3, [r7, #0]
 8008986:	4630      	mov	r0, r6
 8008988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800898c:	4e2e      	ldr	r6, [pc, #184]	; (8008a48 <_malloc_r+0xe4>)
 800898e:	f003 f9ad 	bl	800bcec <__malloc_lock>
 8008992:	6833      	ldr	r3, [r6, #0]
 8008994:	461c      	mov	r4, r3
 8008996:	bb34      	cbnz	r4, 80089e6 <_malloc_r+0x82>
 8008998:	4629      	mov	r1, r5
 800899a:	4638      	mov	r0, r7
 800899c:	f7ff ffc2 	bl	8008924 <sbrk_aligned>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	4604      	mov	r4, r0
 80089a4:	d14d      	bne.n	8008a42 <_malloc_r+0xde>
 80089a6:	6834      	ldr	r4, [r6, #0]
 80089a8:	4626      	mov	r6, r4
 80089aa:	2e00      	cmp	r6, #0
 80089ac:	d140      	bne.n	8008a30 <_malloc_r+0xcc>
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	4631      	mov	r1, r6
 80089b2:	4638      	mov	r0, r7
 80089b4:	eb04 0803 	add.w	r8, r4, r3
 80089b8:	f000 feb6 	bl	8009728 <_sbrk_r>
 80089bc:	4580      	cmp	r8, r0
 80089be:	d13a      	bne.n	8008a36 <_malloc_r+0xd2>
 80089c0:	6821      	ldr	r1, [r4, #0]
 80089c2:	3503      	adds	r5, #3
 80089c4:	1a6d      	subs	r5, r5, r1
 80089c6:	f025 0503 	bic.w	r5, r5, #3
 80089ca:	3508      	adds	r5, #8
 80089cc:	2d0c      	cmp	r5, #12
 80089ce:	bf38      	it	cc
 80089d0:	250c      	movcc	r5, #12
 80089d2:	4638      	mov	r0, r7
 80089d4:	4629      	mov	r1, r5
 80089d6:	f7ff ffa5 	bl	8008924 <sbrk_aligned>
 80089da:	3001      	adds	r0, #1
 80089dc:	d02b      	beq.n	8008a36 <_malloc_r+0xd2>
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	442b      	add	r3, r5
 80089e2:	6023      	str	r3, [r4, #0]
 80089e4:	e00e      	b.n	8008a04 <_malloc_r+0xa0>
 80089e6:	6822      	ldr	r2, [r4, #0]
 80089e8:	1b52      	subs	r2, r2, r5
 80089ea:	d41e      	bmi.n	8008a2a <_malloc_r+0xc6>
 80089ec:	2a0b      	cmp	r2, #11
 80089ee:	d916      	bls.n	8008a1e <_malloc_r+0xba>
 80089f0:	1961      	adds	r1, r4, r5
 80089f2:	42a3      	cmp	r3, r4
 80089f4:	6025      	str	r5, [r4, #0]
 80089f6:	bf18      	it	ne
 80089f8:	6059      	strne	r1, [r3, #4]
 80089fa:	6863      	ldr	r3, [r4, #4]
 80089fc:	bf08      	it	eq
 80089fe:	6031      	streq	r1, [r6, #0]
 8008a00:	5162      	str	r2, [r4, r5]
 8008a02:	604b      	str	r3, [r1, #4]
 8008a04:	4638      	mov	r0, r7
 8008a06:	f104 060b 	add.w	r6, r4, #11
 8008a0a:	f003 f975 	bl	800bcf8 <__malloc_unlock>
 8008a0e:	f026 0607 	bic.w	r6, r6, #7
 8008a12:	1d23      	adds	r3, r4, #4
 8008a14:	1af2      	subs	r2, r6, r3
 8008a16:	d0b6      	beq.n	8008986 <_malloc_r+0x22>
 8008a18:	1b9b      	subs	r3, r3, r6
 8008a1a:	50a3      	str	r3, [r4, r2]
 8008a1c:	e7b3      	b.n	8008986 <_malloc_r+0x22>
 8008a1e:	6862      	ldr	r2, [r4, #4]
 8008a20:	42a3      	cmp	r3, r4
 8008a22:	bf0c      	ite	eq
 8008a24:	6032      	streq	r2, [r6, #0]
 8008a26:	605a      	strne	r2, [r3, #4]
 8008a28:	e7ec      	b.n	8008a04 <_malloc_r+0xa0>
 8008a2a:	4623      	mov	r3, r4
 8008a2c:	6864      	ldr	r4, [r4, #4]
 8008a2e:	e7b2      	b.n	8008996 <_malloc_r+0x32>
 8008a30:	4634      	mov	r4, r6
 8008a32:	6876      	ldr	r6, [r6, #4]
 8008a34:	e7b9      	b.n	80089aa <_malloc_r+0x46>
 8008a36:	230c      	movs	r3, #12
 8008a38:	4638      	mov	r0, r7
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	f003 f95c 	bl	800bcf8 <__malloc_unlock>
 8008a40:	e7a1      	b.n	8008986 <_malloc_r+0x22>
 8008a42:	6025      	str	r5, [r4, #0]
 8008a44:	e7de      	b.n	8008a04 <_malloc_r+0xa0>
 8008a46:	bf00      	nop
 8008a48:	200004d4 	.word	0x200004d4

08008a4c <__cvt>:
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a52:	461f      	mov	r7, r3
 8008a54:	bfbb      	ittet	lt
 8008a56:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008a5a:	461f      	movlt	r7, r3
 8008a5c:	2300      	movge	r3, #0
 8008a5e:	232d      	movlt	r3, #45	; 0x2d
 8008a60:	b088      	sub	sp, #32
 8008a62:	4614      	mov	r4, r2
 8008a64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a66:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008a68:	7013      	strb	r3, [r2, #0]
 8008a6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a6c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008a70:	f023 0820 	bic.w	r8, r3, #32
 8008a74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a78:	d005      	beq.n	8008a86 <__cvt+0x3a>
 8008a7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a7e:	d100      	bne.n	8008a82 <__cvt+0x36>
 8008a80:	3501      	adds	r5, #1
 8008a82:	2302      	movs	r3, #2
 8008a84:	e000      	b.n	8008a88 <__cvt+0x3c>
 8008a86:	2303      	movs	r3, #3
 8008a88:	aa07      	add	r2, sp, #28
 8008a8a:	9204      	str	r2, [sp, #16]
 8008a8c:	aa06      	add	r2, sp, #24
 8008a8e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008a92:	e9cd 3500 	strd	r3, r5, [sp]
 8008a96:	4622      	mov	r2, r4
 8008a98:	463b      	mov	r3, r7
 8008a9a:	f001 fd95 	bl	800a5c8 <_dtoa_r>
 8008a9e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	d102      	bne.n	8008aac <__cvt+0x60>
 8008aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008aa8:	07db      	lsls	r3, r3, #31
 8008aaa:	d522      	bpl.n	8008af2 <__cvt+0xa6>
 8008aac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ab0:	eb06 0905 	add.w	r9, r6, r5
 8008ab4:	d110      	bne.n	8008ad8 <__cvt+0x8c>
 8008ab6:	7833      	ldrb	r3, [r6, #0]
 8008ab8:	2b30      	cmp	r3, #48	; 0x30
 8008aba:	d10a      	bne.n	8008ad2 <__cvt+0x86>
 8008abc:	2200      	movs	r2, #0
 8008abe:	2300      	movs	r3, #0
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	4639      	mov	r1, r7
 8008ac4:	f7f7 ff70 	bl	80009a8 <__aeabi_dcmpeq>
 8008ac8:	b918      	cbnz	r0, 8008ad2 <__cvt+0x86>
 8008aca:	f1c5 0501 	rsb	r5, r5, #1
 8008ace:	f8ca 5000 	str.w	r5, [sl]
 8008ad2:	f8da 3000 	ldr.w	r3, [sl]
 8008ad6:	4499      	add	r9, r3
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2300      	movs	r3, #0
 8008adc:	4620      	mov	r0, r4
 8008ade:	4639      	mov	r1, r7
 8008ae0:	f7f7 ff62 	bl	80009a8 <__aeabi_dcmpeq>
 8008ae4:	b108      	cbz	r0, 8008aea <__cvt+0x9e>
 8008ae6:	f8cd 901c 	str.w	r9, [sp, #28]
 8008aea:	2230      	movs	r2, #48	; 0x30
 8008aec:	9b07      	ldr	r3, [sp, #28]
 8008aee:	454b      	cmp	r3, r9
 8008af0:	d307      	bcc.n	8008b02 <__cvt+0xb6>
 8008af2:	4630      	mov	r0, r6
 8008af4:	9b07      	ldr	r3, [sp, #28]
 8008af6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008af8:	1b9b      	subs	r3, r3, r6
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	b008      	add	sp, #32
 8008afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b02:	1c59      	adds	r1, r3, #1
 8008b04:	9107      	str	r1, [sp, #28]
 8008b06:	701a      	strb	r2, [r3, #0]
 8008b08:	e7f0      	b.n	8008aec <__cvt+0xa0>

08008b0a <__exponent>:
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b0e:	2900      	cmp	r1, #0
 8008b10:	f803 2b02 	strb.w	r2, [r3], #2
 8008b14:	bfb6      	itet	lt
 8008b16:	222d      	movlt	r2, #45	; 0x2d
 8008b18:	222b      	movge	r2, #43	; 0x2b
 8008b1a:	4249      	neglt	r1, r1
 8008b1c:	2909      	cmp	r1, #9
 8008b1e:	7042      	strb	r2, [r0, #1]
 8008b20:	dd2b      	ble.n	8008b7a <__exponent+0x70>
 8008b22:	f10d 0407 	add.w	r4, sp, #7
 8008b26:	46a4      	mov	ip, r4
 8008b28:	270a      	movs	r7, #10
 8008b2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b2e:	460a      	mov	r2, r1
 8008b30:	46a6      	mov	lr, r4
 8008b32:	fb07 1516 	mls	r5, r7, r6, r1
 8008b36:	2a63      	cmp	r2, #99	; 0x63
 8008b38:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008b42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b46:	dcf0      	bgt.n	8008b2a <__exponent+0x20>
 8008b48:	3130      	adds	r1, #48	; 0x30
 8008b4a:	f1ae 0502 	sub.w	r5, lr, #2
 8008b4e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b52:	4629      	mov	r1, r5
 8008b54:	1c44      	adds	r4, r0, #1
 8008b56:	4561      	cmp	r1, ip
 8008b58:	d30a      	bcc.n	8008b70 <__exponent+0x66>
 8008b5a:	f10d 0209 	add.w	r2, sp, #9
 8008b5e:	eba2 020e 	sub.w	r2, r2, lr
 8008b62:	4565      	cmp	r5, ip
 8008b64:	bf88      	it	hi
 8008b66:	2200      	movhi	r2, #0
 8008b68:	4413      	add	r3, r2
 8008b6a:	1a18      	subs	r0, r3, r0
 8008b6c:	b003      	add	sp, #12
 8008b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b74:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b78:	e7ed      	b.n	8008b56 <__exponent+0x4c>
 8008b7a:	2330      	movs	r3, #48	; 0x30
 8008b7c:	3130      	adds	r1, #48	; 0x30
 8008b7e:	7083      	strb	r3, [r0, #2]
 8008b80:	70c1      	strb	r1, [r0, #3]
 8008b82:	1d03      	adds	r3, r0, #4
 8008b84:	e7f1      	b.n	8008b6a <__exponent+0x60>
	...

08008b88 <_printf_float>:
 8008b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8c:	b091      	sub	sp, #68	; 0x44
 8008b8e:	460c      	mov	r4, r1
 8008b90:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008b94:	4616      	mov	r6, r2
 8008b96:	461f      	mov	r7, r3
 8008b98:	4605      	mov	r5, r0
 8008b9a:	f003 f81d 	bl	800bbd8 <_localeconv_r>
 8008b9e:	6803      	ldr	r3, [r0, #0]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ba4:	f7f7 fad4 	bl	8000150 <strlen>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	930e      	str	r3, [sp, #56]	; 0x38
 8008bac:	f8d8 3000 	ldr.w	r3, [r8]
 8008bb0:	900a      	str	r0, [sp, #40]	; 0x28
 8008bb2:	3307      	adds	r3, #7
 8008bb4:	f023 0307 	bic.w	r3, r3, #7
 8008bb8:	f103 0208 	add.w	r2, r3, #8
 8008bbc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008bc0:	f8d4 b000 	ldr.w	fp, [r4]
 8008bc4:	f8c8 2000 	str.w	r2, [r8]
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008bd0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008bd4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008bd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bda:	f04f 32ff 	mov.w	r2, #4294967295
 8008bde:	4640      	mov	r0, r8
 8008be0:	4b9c      	ldr	r3, [pc, #624]	; (8008e54 <_printf_float+0x2cc>)
 8008be2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008be4:	f7f7 ff12 	bl	8000a0c <__aeabi_dcmpun>
 8008be8:	bb70      	cbnz	r0, 8008c48 <_printf_float+0xc0>
 8008bea:	f04f 32ff 	mov.w	r2, #4294967295
 8008bee:	4640      	mov	r0, r8
 8008bf0:	4b98      	ldr	r3, [pc, #608]	; (8008e54 <_printf_float+0x2cc>)
 8008bf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bf4:	f7f7 feec 	bl	80009d0 <__aeabi_dcmple>
 8008bf8:	bb30      	cbnz	r0, 8008c48 <_printf_float+0xc0>
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	4640      	mov	r0, r8
 8008c00:	4651      	mov	r1, sl
 8008c02:	f7f7 fedb 	bl	80009bc <__aeabi_dcmplt>
 8008c06:	b110      	cbz	r0, 8008c0e <_printf_float+0x86>
 8008c08:	232d      	movs	r3, #45	; 0x2d
 8008c0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c0e:	4b92      	ldr	r3, [pc, #584]	; (8008e58 <_printf_float+0x2d0>)
 8008c10:	4892      	ldr	r0, [pc, #584]	; (8008e5c <_printf_float+0x2d4>)
 8008c12:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008c16:	bf94      	ite	ls
 8008c18:	4698      	movls	r8, r3
 8008c1a:	4680      	movhi	r8, r0
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	f04f 0a00 	mov.w	sl, #0
 8008c22:	6123      	str	r3, [r4, #16]
 8008c24:	f02b 0304 	bic.w	r3, fp, #4
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	4633      	mov	r3, r6
 8008c2c:	4621      	mov	r1, r4
 8008c2e:	4628      	mov	r0, r5
 8008c30:	9700      	str	r7, [sp, #0]
 8008c32:	aa0f      	add	r2, sp, #60	; 0x3c
 8008c34:	f000 f9d4 	bl	8008fe0 <_printf_common>
 8008c38:	3001      	adds	r0, #1
 8008c3a:	f040 8090 	bne.w	8008d5e <_printf_float+0x1d6>
 8008c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c42:	b011      	add	sp, #68	; 0x44
 8008c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c48:	4642      	mov	r2, r8
 8008c4a:	4653      	mov	r3, sl
 8008c4c:	4640      	mov	r0, r8
 8008c4e:	4651      	mov	r1, sl
 8008c50:	f7f7 fedc 	bl	8000a0c <__aeabi_dcmpun>
 8008c54:	b148      	cbz	r0, 8008c6a <_printf_float+0xe2>
 8008c56:	f1ba 0f00 	cmp.w	sl, #0
 8008c5a:	bfb8      	it	lt
 8008c5c:	232d      	movlt	r3, #45	; 0x2d
 8008c5e:	4880      	ldr	r0, [pc, #512]	; (8008e60 <_printf_float+0x2d8>)
 8008c60:	bfb8      	it	lt
 8008c62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c66:	4b7f      	ldr	r3, [pc, #508]	; (8008e64 <_printf_float+0x2dc>)
 8008c68:	e7d3      	b.n	8008c12 <_printf_float+0x8a>
 8008c6a:	6863      	ldr	r3, [r4, #4]
 8008c6c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	d142      	bne.n	8008cfa <_printf_float+0x172>
 8008c74:	2306      	movs	r3, #6
 8008c76:	6063      	str	r3, [r4, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	9206      	str	r2, [sp, #24]
 8008c7c:	aa0e      	add	r2, sp, #56	; 0x38
 8008c7e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008c82:	aa0d      	add	r2, sp, #52	; 0x34
 8008c84:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008c88:	9203      	str	r2, [sp, #12]
 8008c8a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008c8e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008c92:	6023      	str	r3, [r4, #0]
 8008c94:	6863      	ldr	r3, [r4, #4]
 8008c96:	4642      	mov	r2, r8
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	4653      	mov	r3, sl
 8008c9e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008ca0:	f7ff fed4 	bl	8008a4c <__cvt>
 8008ca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ca6:	4680      	mov	r8, r0
 8008ca8:	2947      	cmp	r1, #71	; 0x47
 8008caa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008cac:	d108      	bne.n	8008cc0 <_printf_float+0x138>
 8008cae:	1cc8      	adds	r0, r1, #3
 8008cb0:	db02      	blt.n	8008cb8 <_printf_float+0x130>
 8008cb2:	6863      	ldr	r3, [r4, #4]
 8008cb4:	4299      	cmp	r1, r3
 8008cb6:	dd40      	ble.n	8008d3a <_printf_float+0x1b2>
 8008cb8:	f1a9 0902 	sub.w	r9, r9, #2
 8008cbc:	fa5f f989 	uxtb.w	r9, r9
 8008cc0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008cc4:	d81f      	bhi.n	8008d06 <_printf_float+0x17e>
 8008cc6:	464a      	mov	r2, r9
 8008cc8:	3901      	subs	r1, #1
 8008cca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008cce:	910d      	str	r1, [sp, #52]	; 0x34
 8008cd0:	f7ff ff1b 	bl	8008b0a <__exponent>
 8008cd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cd6:	4682      	mov	sl, r0
 8008cd8:	1813      	adds	r3, r2, r0
 8008cda:	2a01      	cmp	r2, #1
 8008cdc:	6123      	str	r3, [r4, #16]
 8008cde:	dc02      	bgt.n	8008ce6 <_printf_float+0x15e>
 8008ce0:	6822      	ldr	r2, [r4, #0]
 8008ce2:	07d2      	lsls	r2, r2, #31
 8008ce4:	d501      	bpl.n	8008cea <_printf_float+0x162>
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	6123      	str	r3, [r4, #16]
 8008cea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d09b      	beq.n	8008c2a <_printf_float+0xa2>
 8008cf2:	232d      	movs	r3, #45	; 0x2d
 8008cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cf8:	e797      	b.n	8008c2a <_printf_float+0xa2>
 8008cfa:	2947      	cmp	r1, #71	; 0x47
 8008cfc:	d1bc      	bne.n	8008c78 <_printf_float+0xf0>
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1ba      	bne.n	8008c78 <_printf_float+0xf0>
 8008d02:	2301      	movs	r3, #1
 8008d04:	e7b7      	b.n	8008c76 <_printf_float+0xee>
 8008d06:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008d0a:	d118      	bne.n	8008d3e <_printf_float+0x1b6>
 8008d0c:	2900      	cmp	r1, #0
 8008d0e:	6863      	ldr	r3, [r4, #4]
 8008d10:	dd0b      	ble.n	8008d2a <_printf_float+0x1a2>
 8008d12:	6121      	str	r1, [r4, #16]
 8008d14:	b913      	cbnz	r3, 8008d1c <_printf_float+0x194>
 8008d16:	6822      	ldr	r2, [r4, #0]
 8008d18:	07d0      	lsls	r0, r2, #31
 8008d1a:	d502      	bpl.n	8008d22 <_printf_float+0x19a>
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	440b      	add	r3, r1
 8008d20:	6123      	str	r3, [r4, #16]
 8008d22:	f04f 0a00 	mov.w	sl, #0
 8008d26:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d28:	e7df      	b.n	8008cea <_printf_float+0x162>
 8008d2a:	b913      	cbnz	r3, 8008d32 <_printf_float+0x1aa>
 8008d2c:	6822      	ldr	r2, [r4, #0]
 8008d2e:	07d2      	lsls	r2, r2, #31
 8008d30:	d501      	bpl.n	8008d36 <_printf_float+0x1ae>
 8008d32:	3302      	adds	r3, #2
 8008d34:	e7f4      	b.n	8008d20 <_printf_float+0x198>
 8008d36:	2301      	movs	r3, #1
 8008d38:	e7f2      	b.n	8008d20 <_printf_float+0x198>
 8008d3a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d40:	4299      	cmp	r1, r3
 8008d42:	db05      	blt.n	8008d50 <_printf_float+0x1c8>
 8008d44:	6823      	ldr	r3, [r4, #0]
 8008d46:	6121      	str	r1, [r4, #16]
 8008d48:	07d8      	lsls	r0, r3, #31
 8008d4a:	d5ea      	bpl.n	8008d22 <_printf_float+0x19a>
 8008d4c:	1c4b      	adds	r3, r1, #1
 8008d4e:	e7e7      	b.n	8008d20 <_printf_float+0x198>
 8008d50:	2900      	cmp	r1, #0
 8008d52:	bfcc      	ite	gt
 8008d54:	2201      	movgt	r2, #1
 8008d56:	f1c1 0202 	rsble	r2, r1, #2
 8008d5a:	4413      	add	r3, r2
 8008d5c:	e7e0      	b.n	8008d20 <_printf_float+0x198>
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	055a      	lsls	r2, r3, #21
 8008d62:	d407      	bmi.n	8008d74 <_printf_float+0x1ec>
 8008d64:	6923      	ldr	r3, [r4, #16]
 8008d66:	4642      	mov	r2, r8
 8008d68:	4631      	mov	r1, r6
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	47b8      	blx	r7
 8008d6e:	3001      	adds	r0, #1
 8008d70:	d12b      	bne.n	8008dca <_printf_float+0x242>
 8008d72:	e764      	b.n	8008c3e <_printf_float+0xb6>
 8008d74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008d78:	f240 80dd 	bls.w	8008f36 <_printf_float+0x3ae>
 8008d7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d80:	2200      	movs	r2, #0
 8008d82:	2300      	movs	r3, #0
 8008d84:	f7f7 fe10 	bl	80009a8 <__aeabi_dcmpeq>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d033      	beq.n	8008df4 <_printf_float+0x26c>
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	4631      	mov	r1, r6
 8008d90:	4628      	mov	r0, r5
 8008d92:	4a35      	ldr	r2, [pc, #212]	; (8008e68 <_printf_float+0x2e0>)
 8008d94:	47b8      	blx	r7
 8008d96:	3001      	adds	r0, #1
 8008d98:	f43f af51 	beq.w	8008c3e <_printf_float+0xb6>
 8008d9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008da0:	429a      	cmp	r2, r3
 8008da2:	db02      	blt.n	8008daa <_printf_float+0x222>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	07d8      	lsls	r0, r3, #31
 8008da8:	d50f      	bpl.n	8008dca <_printf_float+0x242>
 8008daa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dae:	4631      	mov	r1, r6
 8008db0:	4628      	mov	r0, r5
 8008db2:	47b8      	blx	r7
 8008db4:	3001      	adds	r0, #1
 8008db6:	f43f af42 	beq.w	8008c3e <_printf_float+0xb6>
 8008dba:	f04f 0800 	mov.w	r8, #0
 8008dbe:	f104 091a 	add.w	r9, r4, #26
 8008dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	4543      	cmp	r3, r8
 8008dc8:	dc09      	bgt.n	8008dde <_printf_float+0x256>
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	079b      	lsls	r3, r3, #30
 8008dce:	f100 8102 	bmi.w	8008fd6 <_printf_float+0x44e>
 8008dd2:	68e0      	ldr	r0, [r4, #12]
 8008dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dd6:	4298      	cmp	r0, r3
 8008dd8:	bfb8      	it	lt
 8008dda:	4618      	movlt	r0, r3
 8008ddc:	e731      	b.n	8008c42 <_printf_float+0xba>
 8008dde:	2301      	movs	r3, #1
 8008de0:	464a      	mov	r2, r9
 8008de2:	4631      	mov	r1, r6
 8008de4:	4628      	mov	r0, r5
 8008de6:	47b8      	blx	r7
 8008de8:	3001      	adds	r0, #1
 8008dea:	f43f af28 	beq.w	8008c3e <_printf_float+0xb6>
 8008dee:	f108 0801 	add.w	r8, r8, #1
 8008df2:	e7e6      	b.n	8008dc2 <_printf_float+0x23a>
 8008df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	dc38      	bgt.n	8008e6c <_printf_float+0x2e4>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	4631      	mov	r1, r6
 8008dfe:	4628      	mov	r0, r5
 8008e00:	4a19      	ldr	r2, [pc, #100]	; (8008e68 <_printf_float+0x2e0>)
 8008e02:	47b8      	blx	r7
 8008e04:	3001      	adds	r0, #1
 8008e06:	f43f af1a 	beq.w	8008c3e <_printf_float+0xb6>
 8008e0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	d102      	bne.n	8008e18 <_printf_float+0x290>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	07d9      	lsls	r1, r3, #31
 8008e16:	d5d8      	bpl.n	8008dca <_printf_float+0x242>
 8008e18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e1c:	4631      	mov	r1, r6
 8008e1e:	4628      	mov	r0, r5
 8008e20:	47b8      	blx	r7
 8008e22:	3001      	adds	r0, #1
 8008e24:	f43f af0b 	beq.w	8008c3e <_printf_float+0xb6>
 8008e28:	f04f 0900 	mov.w	r9, #0
 8008e2c:	f104 0a1a 	add.w	sl, r4, #26
 8008e30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e32:	425b      	negs	r3, r3
 8008e34:	454b      	cmp	r3, r9
 8008e36:	dc01      	bgt.n	8008e3c <_printf_float+0x2b4>
 8008e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e3a:	e794      	b.n	8008d66 <_printf_float+0x1de>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	4652      	mov	r2, sl
 8008e40:	4631      	mov	r1, r6
 8008e42:	4628      	mov	r0, r5
 8008e44:	47b8      	blx	r7
 8008e46:	3001      	adds	r0, #1
 8008e48:	f43f aef9 	beq.w	8008c3e <_printf_float+0xb6>
 8008e4c:	f109 0901 	add.w	r9, r9, #1
 8008e50:	e7ee      	b.n	8008e30 <_printf_float+0x2a8>
 8008e52:	bf00      	nop
 8008e54:	7fefffff 	.word	0x7fefffff
 8008e58:	0800d268 	.word	0x0800d268
 8008e5c:	0800d26c 	.word	0x0800d26c
 8008e60:	0800d274 	.word	0x0800d274
 8008e64:	0800d270 	.word	0x0800d270
 8008e68:	0800d278 	.word	0x0800d278
 8008e6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e70:	429a      	cmp	r2, r3
 8008e72:	bfa8      	it	ge
 8008e74:	461a      	movge	r2, r3
 8008e76:	2a00      	cmp	r2, #0
 8008e78:	4691      	mov	r9, r2
 8008e7a:	dc37      	bgt.n	8008eec <_printf_float+0x364>
 8008e7c:	f04f 0b00 	mov.w	fp, #0
 8008e80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e84:	f104 021a 	add.w	r2, r4, #26
 8008e88:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008e8c:	ebaa 0309 	sub.w	r3, sl, r9
 8008e90:	455b      	cmp	r3, fp
 8008e92:	dc33      	bgt.n	8008efc <_printf_float+0x374>
 8008e94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	db3b      	blt.n	8008f14 <_printf_float+0x38c>
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	07da      	lsls	r2, r3, #31
 8008ea0:	d438      	bmi.n	8008f14 <_printf_float+0x38c>
 8008ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ea4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ea6:	eba3 020a 	sub.w	r2, r3, sl
 8008eaa:	eba3 0901 	sub.w	r9, r3, r1
 8008eae:	4591      	cmp	r9, r2
 8008eb0:	bfa8      	it	ge
 8008eb2:	4691      	movge	r9, r2
 8008eb4:	f1b9 0f00 	cmp.w	r9, #0
 8008eb8:	dc34      	bgt.n	8008f24 <_printf_float+0x39c>
 8008eba:	f04f 0800 	mov.w	r8, #0
 8008ebe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ec2:	f104 0a1a 	add.w	sl, r4, #26
 8008ec6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008eca:	1a9b      	subs	r3, r3, r2
 8008ecc:	eba3 0309 	sub.w	r3, r3, r9
 8008ed0:	4543      	cmp	r3, r8
 8008ed2:	f77f af7a 	ble.w	8008dca <_printf_float+0x242>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4652      	mov	r2, sl
 8008eda:	4631      	mov	r1, r6
 8008edc:	4628      	mov	r0, r5
 8008ede:	47b8      	blx	r7
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	f43f aeac 	beq.w	8008c3e <_printf_float+0xb6>
 8008ee6:	f108 0801 	add.w	r8, r8, #1
 8008eea:	e7ec      	b.n	8008ec6 <_printf_float+0x33e>
 8008eec:	4613      	mov	r3, r2
 8008eee:	4631      	mov	r1, r6
 8008ef0:	4642      	mov	r2, r8
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	47b8      	blx	r7
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	d1c0      	bne.n	8008e7c <_printf_float+0x2f4>
 8008efa:	e6a0      	b.n	8008c3e <_printf_float+0xb6>
 8008efc:	2301      	movs	r3, #1
 8008efe:	4631      	mov	r1, r6
 8008f00:	4628      	mov	r0, r5
 8008f02:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f04:	47b8      	blx	r7
 8008f06:	3001      	adds	r0, #1
 8008f08:	f43f ae99 	beq.w	8008c3e <_printf_float+0xb6>
 8008f0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f0e:	f10b 0b01 	add.w	fp, fp, #1
 8008f12:	e7b9      	b.n	8008e88 <_printf_float+0x300>
 8008f14:	4631      	mov	r1, r6
 8008f16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	47b8      	blx	r7
 8008f1e:	3001      	adds	r0, #1
 8008f20:	d1bf      	bne.n	8008ea2 <_printf_float+0x31a>
 8008f22:	e68c      	b.n	8008c3e <_printf_float+0xb6>
 8008f24:	464b      	mov	r3, r9
 8008f26:	4631      	mov	r1, r6
 8008f28:	4628      	mov	r0, r5
 8008f2a:	eb08 020a 	add.w	r2, r8, sl
 8008f2e:	47b8      	blx	r7
 8008f30:	3001      	adds	r0, #1
 8008f32:	d1c2      	bne.n	8008eba <_printf_float+0x332>
 8008f34:	e683      	b.n	8008c3e <_printf_float+0xb6>
 8008f36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f38:	2a01      	cmp	r2, #1
 8008f3a:	dc01      	bgt.n	8008f40 <_printf_float+0x3b8>
 8008f3c:	07db      	lsls	r3, r3, #31
 8008f3e:	d537      	bpl.n	8008fb0 <_printf_float+0x428>
 8008f40:	2301      	movs	r3, #1
 8008f42:	4642      	mov	r2, r8
 8008f44:	4631      	mov	r1, r6
 8008f46:	4628      	mov	r0, r5
 8008f48:	47b8      	blx	r7
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	f43f ae77 	beq.w	8008c3e <_printf_float+0xb6>
 8008f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f54:	4631      	mov	r1, r6
 8008f56:	4628      	mov	r0, r5
 8008f58:	47b8      	blx	r7
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	f43f ae6f 	beq.w	8008c3e <_printf_float+0xb6>
 8008f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f64:	2200      	movs	r2, #0
 8008f66:	2300      	movs	r3, #0
 8008f68:	f7f7 fd1e 	bl	80009a8 <__aeabi_dcmpeq>
 8008f6c:	b9d8      	cbnz	r0, 8008fa6 <_printf_float+0x41e>
 8008f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f70:	f108 0201 	add.w	r2, r8, #1
 8008f74:	3b01      	subs	r3, #1
 8008f76:	4631      	mov	r1, r6
 8008f78:	4628      	mov	r0, r5
 8008f7a:	47b8      	blx	r7
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	d10e      	bne.n	8008f9e <_printf_float+0x416>
 8008f80:	e65d      	b.n	8008c3e <_printf_float+0xb6>
 8008f82:	2301      	movs	r3, #1
 8008f84:	464a      	mov	r2, r9
 8008f86:	4631      	mov	r1, r6
 8008f88:	4628      	mov	r0, r5
 8008f8a:	47b8      	blx	r7
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	f43f ae56 	beq.w	8008c3e <_printf_float+0xb6>
 8008f92:	f108 0801 	add.w	r8, r8, #1
 8008f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	4543      	cmp	r3, r8
 8008f9c:	dcf1      	bgt.n	8008f82 <_printf_float+0x3fa>
 8008f9e:	4653      	mov	r3, sl
 8008fa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008fa4:	e6e0      	b.n	8008d68 <_printf_float+0x1e0>
 8008fa6:	f04f 0800 	mov.w	r8, #0
 8008faa:	f104 091a 	add.w	r9, r4, #26
 8008fae:	e7f2      	b.n	8008f96 <_printf_float+0x40e>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	4642      	mov	r2, r8
 8008fb4:	e7df      	b.n	8008f76 <_printf_float+0x3ee>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	464a      	mov	r2, r9
 8008fba:	4631      	mov	r1, r6
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	47b8      	blx	r7
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	f43f ae3c 	beq.w	8008c3e <_printf_float+0xb6>
 8008fc6:	f108 0801 	add.w	r8, r8, #1
 8008fca:	68e3      	ldr	r3, [r4, #12]
 8008fcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008fce:	1a5b      	subs	r3, r3, r1
 8008fd0:	4543      	cmp	r3, r8
 8008fd2:	dcf0      	bgt.n	8008fb6 <_printf_float+0x42e>
 8008fd4:	e6fd      	b.n	8008dd2 <_printf_float+0x24a>
 8008fd6:	f04f 0800 	mov.w	r8, #0
 8008fda:	f104 0919 	add.w	r9, r4, #25
 8008fde:	e7f4      	b.n	8008fca <_printf_float+0x442>

08008fe0 <_printf_common>:
 8008fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fe4:	4616      	mov	r6, r2
 8008fe6:	4699      	mov	r9, r3
 8008fe8:	688a      	ldr	r2, [r1, #8]
 8008fea:	690b      	ldr	r3, [r1, #16]
 8008fec:	4607      	mov	r7, r0
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	bfb8      	it	lt
 8008ff2:	4613      	movlt	r3, r2
 8008ff4:	6033      	str	r3, [r6, #0]
 8008ff6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009000:	b10a      	cbz	r2, 8009006 <_printf_common+0x26>
 8009002:	3301      	adds	r3, #1
 8009004:	6033      	str	r3, [r6, #0]
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	0699      	lsls	r1, r3, #26
 800900a:	bf42      	ittt	mi
 800900c:	6833      	ldrmi	r3, [r6, #0]
 800900e:	3302      	addmi	r3, #2
 8009010:	6033      	strmi	r3, [r6, #0]
 8009012:	6825      	ldr	r5, [r4, #0]
 8009014:	f015 0506 	ands.w	r5, r5, #6
 8009018:	d106      	bne.n	8009028 <_printf_common+0x48>
 800901a:	f104 0a19 	add.w	sl, r4, #25
 800901e:	68e3      	ldr	r3, [r4, #12]
 8009020:	6832      	ldr	r2, [r6, #0]
 8009022:	1a9b      	subs	r3, r3, r2
 8009024:	42ab      	cmp	r3, r5
 8009026:	dc28      	bgt.n	800907a <_printf_common+0x9a>
 8009028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800902c:	1e13      	subs	r3, r2, #0
 800902e:	6822      	ldr	r2, [r4, #0]
 8009030:	bf18      	it	ne
 8009032:	2301      	movne	r3, #1
 8009034:	0692      	lsls	r2, r2, #26
 8009036:	d42d      	bmi.n	8009094 <_printf_common+0xb4>
 8009038:	4649      	mov	r1, r9
 800903a:	4638      	mov	r0, r7
 800903c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009040:	47c0      	blx	r8
 8009042:	3001      	adds	r0, #1
 8009044:	d020      	beq.n	8009088 <_printf_common+0xa8>
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	68e5      	ldr	r5, [r4, #12]
 800904a:	f003 0306 	and.w	r3, r3, #6
 800904e:	2b04      	cmp	r3, #4
 8009050:	bf18      	it	ne
 8009052:	2500      	movne	r5, #0
 8009054:	6832      	ldr	r2, [r6, #0]
 8009056:	f04f 0600 	mov.w	r6, #0
 800905a:	68a3      	ldr	r3, [r4, #8]
 800905c:	bf08      	it	eq
 800905e:	1aad      	subeq	r5, r5, r2
 8009060:	6922      	ldr	r2, [r4, #16]
 8009062:	bf08      	it	eq
 8009064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009068:	4293      	cmp	r3, r2
 800906a:	bfc4      	itt	gt
 800906c:	1a9b      	subgt	r3, r3, r2
 800906e:	18ed      	addgt	r5, r5, r3
 8009070:	341a      	adds	r4, #26
 8009072:	42b5      	cmp	r5, r6
 8009074:	d11a      	bne.n	80090ac <_printf_common+0xcc>
 8009076:	2000      	movs	r0, #0
 8009078:	e008      	b.n	800908c <_printf_common+0xac>
 800907a:	2301      	movs	r3, #1
 800907c:	4652      	mov	r2, sl
 800907e:	4649      	mov	r1, r9
 8009080:	4638      	mov	r0, r7
 8009082:	47c0      	blx	r8
 8009084:	3001      	adds	r0, #1
 8009086:	d103      	bne.n	8009090 <_printf_common+0xb0>
 8009088:	f04f 30ff 	mov.w	r0, #4294967295
 800908c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009090:	3501      	adds	r5, #1
 8009092:	e7c4      	b.n	800901e <_printf_common+0x3e>
 8009094:	2030      	movs	r0, #48	; 0x30
 8009096:	18e1      	adds	r1, r4, r3
 8009098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090a2:	4422      	add	r2, r4
 80090a4:	3302      	adds	r3, #2
 80090a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090aa:	e7c5      	b.n	8009038 <_printf_common+0x58>
 80090ac:	2301      	movs	r3, #1
 80090ae:	4622      	mov	r2, r4
 80090b0:	4649      	mov	r1, r9
 80090b2:	4638      	mov	r0, r7
 80090b4:	47c0      	blx	r8
 80090b6:	3001      	adds	r0, #1
 80090b8:	d0e6      	beq.n	8009088 <_printf_common+0xa8>
 80090ba:	3601      	adds	r6, #1
 80090bc:	e7d9      	b.n	8009072 <_printf_common+0x92>
	...

080090c0 <_printf_i>:
 80090c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090c4:	7e0f      	ldrb	r7, [r1, #24]
 80090c6:	4691      	mov	r9, r2
 80090c8:	2f78      	cmp	r7, #120	; 0x78
 80090ca:	4680      	mov	r8, r0
 80090cc:	460c      	mov	r4, r1
 80090ce:	469a      	mov	sl, r3
 80090d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090d6:	d807      	bhi.n	80090e8 <_printf_i+0x28>
 80090d8:	2f62      	cmp	r7, #98	; 0x62
 80090da:	d80a      	bhi.n	80090f2 <_printf_i+0x32>
 80090dc:	2f00      	cmp	r7, #0
 80090de:	f000 80d9 	beq.w	8009294 <_printf_i+0x1d4>
 80090e2:	2f58      	cmp	r7, #88	; 0x58
 80090e4:	f000 80a4 	beq.w	8009230 <_printf_i+0x170>
 80090e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090f0:	e03a      	b.n	8009168 <_printf_i+0xa8>
 80090f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090f6:	2b15      	cmp	r3, #21
 80090f8:	d8f6      	bhi.n	80090e8 <_printf_i+0x28>
 80090fa:	a101      	add	r1, pc, #4	; (adr r1, 8009100 <_printf_i+0x40>)
 80090fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009100:	08009159 	.word	0x08009159
 8009104:	0800916d 	.word	0x0800916d
 8009108:	080090e9 	.word	0x080090e9
 800910c:	080090e9 	.word	0x080090e9
 8009110:	080090e9 	.word	0x080090e9
 8009114:	080090e9 	.word	0x080090e9
 8009118:	0800916d 	.word	0x0800916d
 800911c:	080090e9 	.word	0x080090e9
 8009120:	080090e9 	.word	0x080090e9
 8009124:	080090e9 	.word	0x080090e9
 8009128:	080090e9 	.word	0x080090e9
 800912c:	0800927b 	.word	0x0800927b
 8009130:	0800919d 	.word	0x0800919d
 8009134:	0800925d 	.word	0x0800925d
 8009138:	080090e9 	.word	0x080090e9
 800913c:	080090e9 	.word	0x080090e9
 8009140:	0800929d 	.word	0x0800929d
 8009144:	080090e9 	.word	0x080090e9
 8009148:	0800919d 	.word	0x0800919d
 800914c:	080090e9 	.word	0x080090e9
 8009150:	080090e9 	.word	0x080090e9
 8009154:	08009265 	.word	0x08009265
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	1d1a      	adds	r2, r3, #4
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	602a      	str	r2, [r5, #0]
 8009160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009168:	2301      	movs	r3, #1
 800916a:	e0a4      	b.n	80092b6 <_printf_i+0x1f6>
 800916c:	6820      	ldr	r0, [r4, #0]
 800916e:	6829      	ldr	r1, [r5, #0]
 8009170:	0606      	lsls	r6, r0, #24
 8009172:	f101 0304 	add.w	r3, r1, #4
 8009176:	d50a      	bpl.n	800918e <_printf_i+0xce>
 8009178:	680e      	ldr	r6, [r1, #0]
 800917a:	602b      	str	r3, [r5, #0]
 800917c:	2e00      	cmp	r6, #0
 800917e:	da03      	bge.n	8009188 <_printf_i+0xc8>
 8009180:	232d      	movs	r3, #45	; 0x2d
 8009182:	4276      	negs	r6, r6
 8009184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009188:	230a      	movs	r3, #10
 800918a:	485e      	ldr	r0, [pc, #376]	; (8009304 <_printf_i+0x244>)
 800918c:	e019      	b.n	80091c2 <_printf_i+0x102>
 800918e:	680e      	ldr	r6, [r1, #0]
 8009190:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009194:	602b      	str	r3, [r5, #0]
 8009196:	bf18      	it	ne
 8009198:	b236      	sxthne	r6, r6
 800919a:	e7ef      	b.n	800917c <_printf_i+0xbc>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	6820      	ldr	r0, [r4, #0]
 80091a0:	1d19      	adds	r1, r3, #4
 80091a2:	6029      	str	r1, [r5, #0]
 80091a4:	0601      	lsls	r1, r0, #24
 80091a6:	d501      	bpl.n	80091ac <_printf_i+0xec>
 80091a8:	681e      	ldr	r6, [r3, #0]
 80091aa:	e002      	b.n	80091b2 <_printf_i+0xf2>
 80091ac:	0646      	lsls	r6, r0, #25
 80091ae:	d5fb      	bpl.n	80091a8 <_printf_i+0xe8>
 80091b0:	881e      	ldrh	r6, [r3, #0]
 80091b2:	2f6f      	cmp	r7, #111	; 0x6f
 80091b4:	bf0c      	ite	eq
 80091b6:	2308      	moveq	r3, #8
 80091b8:	230a      	movne	r3, #10
 80091ba:	4852      	ldr	r0, [pc, #328]	; (8009304 <_printf_i+0x244>)
 80091bc:	2100      	movs	r1, #0
 80091be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091c2:	6865      	ldr	r5, [r4, #4]
 80091c4:	2d00      	cmp	r5, #0
 80091c6:	bfa8      	it	ge
 80091c8:	6821      	ldrge	r1, [r4, #0]
 80091ca:	60a5      	str	r5, [r4, #8]
 80091cc:	bfa4      	itt	ge
 80091ce:	f021 0104 	bicge.w	r1, r1, #4
 80091d2:	6021      	strge	r1, [r4, #0]
 80091d4:	b90e      	cbnz	r6, 80091da <_printf_i+0x11a>
 80091d6:	2d00      	cmp	r5, #0
 80091d8:	d04d      	beq.n	8009276 <_printf_i+0x1b6>
 80091da:	4615      	mov	r5, r2
 80091dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80091e0:	fb03 6711 	mls	r7, r3, r1, r6
 80091e4:	5dc7      	ldrb	r7, [r0, r7]
 80091e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091ea:	4637      	mov	r7, r6
 80091ec:	42bb      	cmp	r3, r7
 80091ee:	460e      	mov	r6, r1
 80091f0:	d9f4      	bls.n	80091dc <_printf_i+0x11c>
 80091f2:	2b08      	cmp	r3, #8
 80091f4:	d10b      	bne.n	800920e <_printf_i+0x14e>
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	07de      	lsls	r6, r3, #31
 80091fa:	d508      	bpl.n	800920e <_printf_i+0x14e>
 80091fc:	6923      	ldr	r3, [r4, #16]
 80091fe:	6861      	ldr	r1, [r4, #4]
 8009200:	4299      	cmp	r1, r3
 8009202:	bfde      	ittt	le
 8009204:	2330      	movle	r3, #48	; 0x30
 8009206:	f805 3c01 	strble.w	r3, [r5, #-1]
 800920a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800920e:	1b52      	subs	r2, r2, r5
 8009210:	6122      	str	r2, [r4, #16]
 8009212:	464b      	mov	r3, r9
 8009214:	4621      	mov	r1, r4
 8009216:	4640      	mov	r0, r8
 8009218:	f8cd a000 	str.w	sl, [sp]
 800921c:	aa03      	add	r2, sp, #12
 800921e:	f7ff fedf 	bl	8008fe0 <_printf_common>
 8009222:	3001      	adds	r0, #1
 8009224:	d14c      	bne.n	80092c0 <_printf_i+0x200>
 8009226:	f04f 30ff 	mov.w	r0, #4294967295
 800922a:	b004      	add	sp, #16
 800922c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009230:	4834      	ldr	r0, [pc, #208]	; (8009304 <_printf_i+0x244>)
 8009232:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009236:	6829      	ldr	r1, [r5, #0]
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	f851 6b04 	ldr.w	r6, [r1], #4
 800923e:	6029      	str	r1, [r5, #0]
 8009240:	061d      	lsls	r5, r3, #24
 8009242:	d514      	bpl.n	800926e <_printf_i+0x1ae>
 8009244:	07df      	lsls	r7, r3, #31
 8009246:	bf44      	itt	mi
 8009248:	f043 0320 	orrmi.w	r3, r3, #32
 800924c:	6023      	strmi	r3, [r4, #0]
 800924e:	b91e      	cbnz	r6, 8009258 <_printf_i+0x198>
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	f023 0320 	bic.w	r3, r3, #32
 8009256:	6023      	str	r3, [r4, #0]
 8009258:	2310      	movs	r3, #16
 800925a:	e7af      	b.n	80091bc <_printf_i+0xfc>
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	f043 0320 	orr.w	r3, r3, #32
 8009262:	6023      	str	r3, [r4, #0]
 8009264:	2378      	movs	r3, #120	; 0x78
 8009266:	4828      	ldr	r0, [pc, #160]	; (8009308 <_printf_i+0x248>)
 8009268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800926c:	e7e3      	b.n	8009236 <_printf_i+0x176>
 800926e:	0659      	lsls	r1, r3, #25
 8009270:	bf48      	it	mi
 8009272:	b2b6      	uxthmi	r6, r6
 8009274:	e7e6      	b.n	8009244 <_printf_i+0x184>
 8009276:	4615      	mov	r5, r2
 8009278:	e7bb      	b.n	80091f2 <_printf_i+0x132>
 800927a:	682b      	ldr	r3, [r5, #0]
 800927c:	6826      	ldr	r6, [r4, #0]
 800927e:	1d18      	adds	r0, r3, #4
 8009280:	6961      	ldr	r1, [r4, #20]
 8009282:	6028      	str	r0, [r5, #0]
 8009284:	0635      	lsls	r5, r6, #24
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	d501      	bpl.n	800928e <_printf_i+0x1ce>
 800928a:	6019      	str	r1, [r3, #0]
 800928c:	e002      	b.n	8009294 <_printf_i+0x1d4>
 800928e:	0670      	lsls	r0, r6, #25
 8009290:	d5fb      	bpl.n	800928a <_printf_i+0x1ca>
 8009292:	8019      	strh	r1, [r3, #0]
 8009294:	2300      	movs	r3, #0
 8009296:	4615      	mov	r5, r2
 8009298:	6123      	str	r3, [r4, #16]
 800929a:	e7ba      	b.n	8009212 <_printf_i+0x152>
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	2100      	movs	r1, #0
 80092a0:	1d1a      	adds	r2, r3, #4
 80092a2:	602a      	str	r2, [r5, #0]
 80092a4:	681d      	ldr	r5, [r3, #0]
 80092a6:	6862      	ldr	r2, [r4, #4]
 80092a8:	4628      	mov	r0, r5
 80092aa:	f002 fd11 	bl	800bcd0 <memchr>
 80092ae:	b108      	cbz	r0, 80092b4 <_printf_i+0x1f4>
 80092b0:	1b40      	subs	r0, r0, r5
 80092b2:	6060      	str	r0, [r4, #4]
 80092b4:	6863      	ldr	r3, [r4, #4]
 80092b6:	6123      	str	r3, [r4, #16]
 80092b8:	2300      	movs	r3, #0
 80092ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092be:	e7a8      	b.n	8009212 <_printf_i+0x152>
 80092c0:	462a      	mov	r2, r5
 80092c2:	4649      	mov	r1, r9
 80092c4:	4640      	mov	r0, r8
 80092c6:	6923      	ldr	r3, [r4, #16]
 80092c8:	47d0      	blx	sl
 80092ca:	3001      	adds	r0, #1
 80092cc:	d0ab      	beq.n	8009226 <_printf_i+0x166>
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	079b      	lsls	r3, r3, #30
 80092d2:	d413      	bmi.n	80092fc <_printf_i+0x23c>
 80092d4:	68e0      	ldr	r0, [r4, #12]
 80092d6:	9b03      	ldr	r3, [sp, #12]
 80092d8:	4298      	cmp	r0, r3
 80092da:	bfb8      	it	lt
 80092dc:	4618      	movlt	r0, r3
 80092de:	e7a4      	b.n	800922a <_printf_i+0x16a>
 80092e0:	2301      	movs	r3, #1
 80092e2:	4632      	mov	r2, r6
 80092e4:	4649      	mov	r1, r9
 80092e6:	4640      	mov	r0, r8
 80092e8:	47d0      	blx	sl
 80092ea:	3001      	adds	r0, #1
 80092ec:	d09b      	beq.n	8009226 <_printf_i+0x166>
 80092ee:	3501      	adds	r5, #1
 80092f0:	68e3      	ldr	r3, [r4, #12]
 80092f2:	9903      	ldr	r1, [sp, #12]
 80092f4:	1a5b      	subs	r3, r3, r1
 80092f6:	42ab      	cmp	r3, r5
 80092f8:	dcf2      	bgt.n	80092e0 <_printf_i+0x220>
 80092fa:	e7eb      	b.n	80092d4 <_printf_i+0x214>
 80092fc:	2500      	movs	r5, #0
 80092fe:	f104 0619 	add.w	r6, r4, #25
 8009302:	e7f5      	b.n	80092f0 <_printf_i+0x230>
 8009304:	0800d27a 	.word	0x0800d27a
 8009308:	0800d28b 	.word	0x0800d28b

0800930c <_scanf_float>:
 800930c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009310:	b087      	sub	sp, #28
 8009312:	9303      	str	r3, [sp, #12]
 8009314:	688b      	ldr	r3, [r1, #8]
 8009316:	4617      	mov	r7, r2
 8009318:	1e5a      	subs	r2, r3, #1
 800931a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800931e:	bf85      	ittet	hi
 8009320:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009324:	195b      	addhi	r3, r3, r5
 8009326:	2300      	movls	r3, #0
 8009328:	9302      	strhi	r3, [sp, #8]
 800932a:	bf88      	it	hi
 800932c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009330:	468b      	mov	fp, r1
 8009332:	f04f 0500 	mov.w	r5, #0
 8009336:	bf8c      	ite	hi
 8009338:	608b      	strhi	r3, [r1, #8]
 800933a:	9302      	strls	r3, [sp, #8]
 800933c:	680b      	ldr	r3, [r1, #0]
 800933e:	4680      	mov	r8, r0
 8009340:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009344:	f84b 3b1c 	str.w	r3, [fp], #28
 8009348:	460c      	mov	r4, r1
 800934a:	465e      	mov	r6, fp
 800934c:	46aa      	mov	sl, r5
 800934e:	46a9      	mov	r9, r5
 8009350:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009354:	9501      	str	r5, [sp, #4]
 8009356:	68a2      	ldr	r2, [r4, #8]
 8009358:	b152      	cbz	r2, 8009370 <_scanf_float+0x64>
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	2b4e      	cmp	r3, #78	; 0x4e
 8009360:	d864      	bhi.n	800942c <_scanf_float+0x120>
 8009362:	2b40      	cmp	r3, #64	; 0x40
 8009364:	d83c      	bhi.n	80093e0 <_scanf_float+0xd4>
 8009366:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800936a:	b2c8      	uxtb	r0, r1
 800936c:	280e      	cmp	r0, #14
 800936e:	d93a      	bls.n	80093e6 <_scanf_float+0xda>
 8009370:	f1b9 0f00 	cmp.w	r9, #0
 8009374:	d003      	beq.n	800937e <_scanf_float+0x72>
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009382:	f1ba 0f01 	cmp.w	sl, #1
 8009386:	f200 8113 	bhi.w	80095b0 <_scanf_float+0x2a4>
 800938a:	455e      	cmp	r6, fp
 800938c:	f200 8105 	bhi.w	800959a <_scanf_float+0x28e>
 8009390:	2501      	movs	r5, #1
 8009392:	4628      	mov	r0, r5
 8009394:	b007      	add	sp, #28
 8009396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800939a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800939e:	2a0d      	cmp	r2, #13
 80093a0:	d8e6      	bhi.n	8009370 <_scanf_float+0x64>
 80093a2:	a101      	add	r1, pc, #4	; (adr r1, 80093a8 <_scanf_float+0x9c>)
 80093a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80093a8:	080094e7 	.word	0x080094e7
 80093ac:	08009371 	.word	0x08009371
 80093b0:	08009371 	.word	0x08009371
 80093b4:	08009371 	.word	0x08009371
 80093b8:	08009547 	.word	0x08009547
 80093bc:	0800951f 	.word	0x0800951f
 80093c0:	08009371 	.word	0x08009371
 80093c4:	08009371 	.word	0x08009371
 80093c8:	080094f5 	.word	0x080094f5
 80093cc:	08009371 	.word	0x08009371
 80093d0:	08009371 	.word	0x08009371
 80093d4:	08009371 	.word	0x08009371
 80093d8:	08009371 	.word	0x08009371
 80093dc:	080094ad 	.word	0x080094ad
 80093e0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80093e4:	e7db      	b.n	800939e <_scanf_float+0x92>
 80093e6:	290e      	cmp	r1, #14
 80093e8:	d8c2      	bhi.n	8009370 <_scanf_float+0x64>
 80093ea:	a001      	add	r0, pc, #4	; (adr r0, 80093f0 <_scanf_float+0xe4>)
 80093ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80093f0:	0800949f 	.word	0x0800949f
 80093f4:	08009371 	.word	0x08009371
 80093f8:	0800949f 	.word	0x0800949f
 80093fc:	08009533 	.word	0x08009533
 8009400:	08009371 	.word	0x08009371
 8009404:	0800944d 	.word	0x0800944d
 8009408:	08009489 	.word	0x08009489
 800940c:	08009489 	.word	0x08009489
 8009410:	08009489 	.word	0x08009489
 8009414:	08009489 	.word	0x08009489
 8009418:	08009489 	.word	0x08009489
 800941c:	08009489 	.word	0x08009489
 8009420:	08009489 	.word	0x08009489
 8009424:	08009489 	.word	0x08009489
 8009428:	08009489 	.word	0x08009489
 800942c:	2b6e      	cmp	r3, #110	; 0x6e
 800942e:	d809      	bhi.n	8009444 <_scanf_float+0x138>
 8009430:	2b60      	cmp	r3, #96	; 0x60
 8009432:	d8b2      	bhi.n	800939a <_scanf_float+0x8e>
 8009434:	2b54      	cmp	r3, #84	; 0x54
 8009436:	d077      	beq.n	8009528 <_scanf_float+0x21c>
 8009438:	2b59      	cmp	r3, #89	; 0x59
 800943a:	d199      	bne.n	8009370 <_scanf_float+0x64>
 800943c:	2d07      	cmp	r5, #7
 800943e:	d197      	bne.n	8009370 <_scanf_float+0x64>
 8009440:	2508      	movs	r5, #8
 8009442:	e029      	b.n	8009498 <_scanf_float+0x18c>
 8009444:	2b74      	cmp	r3, #116	; 0x74
 8009446:	d06f      	beq.n	8009528 <_scanf_float+0x21c>
 8009448:	2b79      	cmp	r3, #121	; 0x79
 800944a:	e7f6      	b.n	800943a <_scanf_float+0x12e>
 800944c:	6821      	ldr	r1, [r4, #0]
 800944e:	05c8      	lsls	r0, r1, #23
 8009450:	d51a      	bpl.n	8009488 <_scanf_float+0x17c>
 8009452:	9b02      	ldr	r3, [sp, #8]
 8009454:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009458:	6021      	str	r1, [r4, #0]
 800945a:	f109 0901 	add.w	r9, r9, #1
 800945e:	b11b      	cbz	r3, 8009468 <_scanf_float+0x15c>
 8009460:	3b01      	subs	r3, #1
 8009462:	3201      	adds	r2, #1
 8009464:	9302      	str	r3, [sp, #8]
 8009466:	60a2      	str	r2, [r4, #8]
 8009468:	68a3      	ldr	r3, [r4, #8]
 800946a:	3b01      	subs	r3, #1
 800946c:	60a3      	str	r3, [r4, #8]
 800946e:	6923      	ldr	r3, [r4, #16]
 8009470:	3301      	adds	r3, #1
 8009472:	6123      	str	r3, [r4, #16]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	3b01      	subs	r3, #1
 8009478:	2b00      	cmp	r3, #0
 800947a:	607b      	str	r3, [r7, #4]
 800947c:	f340 8084 	ble.w	8009588 <_scanf_float+0x27c>
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	3301      	adds	r3, #1
 8009484:	603b      	str	r3, [r7, #0]
 8009486:	e766      	b.n	8009356 <_scanf_float+0x4a>
 8009488:	eb1a 0f05 	cmn.w	sl, r5
 800948c:	f47f af70 	bne.w	8009370 <_scanf_float+0x64>
 8009490:	6822      	ldr	r2, [r4, #0]
 8009492:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009496:	6022      	str	r2, [r4, #0]
 8009498:	f806 3b01 	strb.w	r3, [r6], #1
 800949c:	e7e4      	b.n	8009468 <_scanf_float+0x15c>
 800949e:	6822      	ldr	r2, [r4, #0]
 80094a0:	0610      	lsls	r0, r2, #24
 80094a2:	f57f af65 	bpl.w	8009370 <_scanf_float+0x64>
 80094a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094aa:	e7f4      	b.n	8009496 <_scanf_float+0x18a>
 80094ac:	f1ba 0f00 	cmp.w	sl, #0
 80094b0:	d10e      	bne.n	80094d0 <_scanf_float+0x1c4>
 80094b2:	f1b9 0f00 	cmp.w	r9, #0
 80094b6:	d10e      	bne.n	80094d6 <_scanf_float+0x1ca>
 80094b8:	6822      	ldr	r2, [r4, #0]
 80094ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80094be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80094c2:	d108      	bne.n	80094d6 <_scanf_float+0x1ca>
 80094c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80094c8:	f04f 0a01 	mov.w	sl, #1
 80094cc:	6022      	str	r2, [r4, #0]
 80094ce:	e7e3      	b.n	8009498 <_scanf_float+0x18c>
 80094d0:	f1ba 0f02 	cmp.w	sl, #2
 80094d4:	d055      	beq.n	8009582 <_scanf_float+0x276>
 80094d6:	2d01      	cmp	r5, #1
 80094d8:	d002      	beq.n	80094e0 <_scanf_float+0x1d4>
 80094da:	2d04      	cmp	r5, #4
 80094dc:	f47f af48 	bne.w	8009370 <_scanf_float+0x64>
 80094e0:	3501      	adds	r5, #1
 80094e2:	b2ed      	uxtb	r5, r5
 80094e4:	e7d8      	b.n	8009498 <_scanf_float+0x18c>
 80094e6:	f1ba 0f01 	cmp.w	sl, #1
 80094ea:	f47f af41 	bne.w	8009370 <_scanf_float+0x64>
 80094ee:	f04f 0a02 	mov.w	sl, #2
 80094f2:	e7d1      	b.n	8009498 <_scanf_float+0x18c>
 80094f4:	b97d      	cbnz	r5, 8009516 <_scanf_float+0x20a>
 80094f6:	f1b9 0f00 	cmp.w	r9, #0
 80094fa:	f47f af3c 	bne.w	8009376 <_scanf_float+0x6a>
 80094fe:	6822      	ldr	r2, [r4, #0]
 8009500:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009504:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009508:	f47f af39 	bne.w	800937e <_scanf_float+0x72>
 800950c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009510:	2501      	movs	r5, #1
 8009512:	6022      	str	r2, [r4, #0]
 8009514:	e7c0      	b.n	8009498 <_scanf_float+0x18c>
 8009516:	2d03      	cmp	r5, #3
 8009518:	d0e2      	beq.n	80094e0 <_scanf_float+0x1d4>
 800951a:	2d05      	cmp	r5, #5
 800951c:	e7de      	b.n	80094dc <_scanf_float+0x1d0>
 800951e:	2d02      	cmp	r5, #2
 8009520:	f47f af26 	bne.w	8009370 <_scanf_float+0x64>
 8009524:	2503      	movs	r5, #3
 8009526:	e7b7      	b.n	8009498 <_scanf_float+0x18c>
 8009528:	2d06      	cmp	r5, #6
 800952a:	f47f af21 	bne.w	8009370 <_scanf_float+0x64>
 800952e:	2507      	movs	r5, #7
 8009530:	e7b2      	b.n	8009498 <_scanf_float+0x18c>
 8009532:	6822      	ldr	r2, [r4, #0]
 8009534:	0591      	lsls	r1, r2, #22
 8009536:	f57f af1b 	bpl.w	8009370 <_scanf_float+0x64>
 800953a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800953e:	6022      	str	r2, [r4, #0]
 8009540:	f8cd 9004 	str.w	r9, [sp, #4]
 8009544:	e7a8      	b.n	8009498 <_scanf_float+0x18c>
 8009546:	6822      	ldr	r2, [r4, #0]
 8009548:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800954c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009550:	d006      	beq.n	8009560 <_scanf_float+0x254>
 8009552:	0550      	lsls	r0, r2, #21
 8009554:	f57f af0c 	bpl.w	8009370 <_scanf_float+0x64>
 8009558:	f1b9 0f00 	cmp.w	r9, #0
 800955c:	f43f af0f 	beq.w	800937e <_scanf_float+0x72>
 8009560:	0591      	lsls	r1, r2, #22
 8009562:	bf58      	it	pl
 8009564:	9901      	ldrpl	r1, [sp, #4]
 8009566:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800956a:	bf58      	it	pl
 800956c:	eba9 0101 	subpl.w	r1, r9, r1
 8009570:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009574:	f04f 0900 	mov.w	r9, #0
 8009578:	bf58      	it	pl
 800957a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800957e:	6022      	str	r2, [r4, #0]
 8009580:	e78a      	b.n	8009498 <_scanf_float+0x18c>
 8009582:	f04f 0a03 	mov.w	sl, #3
 8009586:	e787      	b.n	8009498 <_scanf_float+0x18c>
 8009588:	4639      	mov	r1, r7
 800958a:	4640      	mov	r0, r8
 800958c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009590:	4798      	blx	r3
 8009592:	2800      	cmp	r0, #0
 8009594:	f43f aedf 	beq.w	8009356 <_scanf_float+0x4a>
 8009598:	e6ea      	b.n	8009370 <_scanf_float+0x64>
 800959a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800959e:	463a      	mov	r2, r7
 80095a0:	4640      	mov	r0, r8
 80095a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095a6:	4798      	blx	r3
 80095a8:	6923      	ldr	r3, [r4, #16]
 80095aa:	3b01      	subs	r3, #1
 80095ac:	6123      	str	r3, [r4, #16]
 80095ae:	e6ec      	b.n	800938a <_scanf_float+0x7e>
 80095b0:	1e6b      	subs	r3, r5, #1
 80095b2:	2b06      	cmp	r3, #6
 80095b4:	d825      	bhi.n	8009602 <_scanf_float+0x2f6>
 80095b6:	2d02      	cmp	r5, #2
 80095b8:	d836      	bhi.n	8009628 <_scanf_float+0x31c>
 80095ba:	455e      	cmp	r6, fp
 80095bc:	f67f aee8 	bls.w	8009390 <_scanf_float+0x84>
 80095c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095c4:	463a      	mov	r2, r7
 80095c6:	4640      	mov	r0, r8
 80095c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095cc:	4798      	blx	r3
 80095ce:	6923      	ldr	r3, [r4, #16]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	6123      	str	r3, [r4, #16]
 80095d4:	e7f1      	b.n	80095ba <_scanf_float+0x2ae>
 80095d6:	9802      	ldr	r0, [sp, #8]
 80095d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80095e0:	463a      	mov	r2, r7
 80095e2:	9002      	str	r0, [sp, #8]
 80095e4:	4640      	mov	r0, r8
 80095e6:	4798      	blx	r3
 80095e8:	6923      	ldr	r3, [r4, #16]
 80095ea:	3b01      	subs	r3, #1
 80095ec:	6123      	str	r3, [r4, #16]
 80095ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095f2:	fa5f fa8a 	uxtb.w	sl, sl
 80095f6:	f1ba 0f02 	cmp.w	sl, #2
 80095fa:	d1ec      	bne.n	80095d6 <_scanf_float+0x2ca>
 80095fc:	3d03      	subs	r5, #3
 80095fe:	b2ed      	uxtb	r5, r5
 8009600:	1b76      	subs	r6, r6, r5
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	05da      	lsls	r2, r3, #23
 8009606:	d52f      	bpl.n	8009668 <_scanf_float+0x35c>
 8009608:	055b      	lsls	r3, r3, #21
 800960a:	d510      	bpl.n	800962e <_scanf_float+0x322>
 800960c:	455e      	cmp	r6, fp
 800960e:	f67f aebf 	bls.w	8009390 <_scanf_float+0x84>
 8009612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009616:	463a      	mov	r2, r7
 8009618:	4640      	mov	r0, r8
 800961a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800961e:	4798      	blx	r3
 8009620:	6923      	ldr	r3, [r4, #16]
 8009622:	3b01      	subs	r3, #1
 8009624:	6123      	str	r3, [r4, #16]
 8009626:	e7f1      	b.n	800960c <_scanf_float+0x300>
 8009628:	46aa      	mov	sl, r5
 800962a:	9602      	str	r6, [sp, #8]
 800962c:	e7df      	b.n	80095ee <_scanf_float+0x2e2>
 800962e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009632:	6923      	ldr	r3, [r4, #16]
 8009634:	2965      	cmp	r1, #101	; 0x65
 8009636:	f103 33ff 	add.w	r3, r3, #4294967295
 800963a:	f106 35ff 	add.w	r5, r6, #4294967295
 800963e:	6123      	str	r3, [r4, #16]
 8009640:	d00c      	beq.n	800965c <_scanf_float+0x350>
 8009642:	2945      	cmp	r1, #69	; 0x45
 8009644:	d00a      	beq.n	800965c <_scanf_float+0x350>
 8009646:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800964a:	463a      	mov	r2, r7
 800964c:	4640      	mov	r0, r8
 800964e:	4798      	blx	r3
 8009650:	6923      	ldr	r3, [r4, #16]
 8009652:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009656:	3b01      	subs	r3, #1
 8009658:	1eb5      	subs	r5, r6, #2
 800965a:	6123      	str	r3, [r4, #16]
 800965c:	463a      	mov	r2, r7
 800965e:	4640      	mov	r0, r8
 8009660:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009664:	4798      	blx	r3
 8009666:	462e      	mov	r6, r5
 8009668:	6825      	ldr	r5, [r4, #0]
 800966a:	f015 0510 	ands.w	r5, r5, #16
 800966e:	d155      	bne.n	800971c <_scanf_float+0x410>
 8009670:	7035      	strb	r5, [r6, #0]
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800967c:	d11b      	bne.n	80096b6 <_scanf_float+0x3aa>
 800967e:	9b01      	ldr	r3, [sp, #4]
 8009680:	454b      	cmp	r3, r9
 8009682:	eba3 0209 	sub.w	r2, r3, r9
 8009686:	d123      	bne.n	80096d0 <_scanf_float+0x3c4>
 8009688:	2200      	movs	r2, #0
 800968a:	4659      	mov	r1, fp
 800968c:	4640      	mov	r0, r8
 800968e:	f000 fe8b 	bl	800a3a8 <_strtod_r>
 8009692:	6822      	ldr	r2, [r4, #0]
 8009694:	9b03      	ldr	r3, [sp, #12]
 8009696:	f012 0f02 	tst.w	r2, #2
 800969a:	4606      	mov	r6, r0
 800969c:	460f      	mov	r7, r1
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	d021      	beq.n	80096e6 <_scanf_float+0x3da>
 80096a2:	1d1a      	adds	r2, r3, #4
 80096a4:	9903      	ldr	r1, [sp, #12]
 80096a6:	600a      	str	r2, [r1, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	e9c3 6700 	strd	r6, r7, [r3]
 80096ae:	68e3      	ldr	r3, [r4, #12]
 80096b0:	3301      	adds	r3, #1
 80096b2:	60e3      	str	r3, [r4, #12]
 80096b4:	e66d      	b.n	8009392 <_scanf_float+0x86>
 80096b6:	9b04      	ldr	r3, [sp, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d0e5      	beq.n	8009688 <_scanf_float+0x37c>
 80096bc:	9905      	ldr	r1, [sp, #20]
 80096be:	230a      	movs	r3, #10
 80096c0:	462a      	mov	r2, r5
 80096c2:	4640      	mov	r0, r8
 80096c4:	3101      	adds	r1, #1
 80096c6:	f000 fef1 	bl	800a4ac <_strtol_r>
 80096ca:	9b04      	ldr	r3, [sp, #16]
 80096cc:	9e05      	ldr	r6, [sp, #20]
 80096ce:	1ac2      	subs	r2, r0, r3
 80096d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80096d4:	429e      	cmp	r6, r3
 80096d6:	bf28      	it	cs
 80096d8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80096dc:	4630      	mov	r0, r6
 80096de:	4910      	ldr	r1, [pc, #64]	; (8009720 <_scanf_float+0x414>)
 80096e0:	f000 f836 	bl	8009750 <siprintf>
 80096e4:	e7d0      	b.n	8009688 <_scanf_float+0x37c>
 80096e6:	f012 0f04 	tst.w	r2, #4
 80096ea:	f103 0204 	add.w	r2, r3, #4
 80096ee:	d1d9      	bne.n	80096a4 <_scanf_float+0x398>
 80096f0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80096f4:	f8cc 2000 	str.w	r2, [ip]
 80096f8:	f8d3 8000 	ldr.w	r8, [r3]
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	f7f7 f984 	bl	8000a0c <__aeabi_dcmpun>
 8009704:	b128      	cbz	r0, 8009712 <_scanf_float+0x406>
 8009706:	4807      	ldr	r0, [pc, #28]	; (8009724 <_scanf_float+0x418>)
 8009708:	f000 f81e 	bl	8009748 <nanf>
 800970c:	f8c8 0000 	str.w	r0, [r8]
 8009710:	e7cd      	b.n	80096ae <_scanf_float+0x3a2>
 8009712:	4630      	mov	r0, r6
 8009714:	4639      	mov	r1, r7
 8009716:	f7f7 f9d7 	bl	8000ac8 <__aeabi_d2f>
 800971a:	e7f7      	b.n	800970c <_scanf_float+0x400>
 800971c:	2500      	movs	r5, #0
 800971e:	e638      	b.n	8009392 <_scanf_float+0x86>
 8009720:	0800d29c 	.word	0x0800d29c
 8009724:	0800d710 	.word	0x0800d710

08009728 <_sbrk_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	2300      	movs	r3, #0
 800972c:	4d05      	ldr	r5, [pc, #20]	; (8009744 <_sbrk_r+0x1c>)
 800972e:	4604      	mov	r4, r0
 8009730:	4608      	mov	r0, r1
 8009732:	602b      	str	r3, [r5, #0]
 8009734:	f7fd f9c4 	bl	8006ac0 <_sbrk>
 8009738:	1c43      	adds	r3, r0, #1
 800973a:	d102      	bne.n	8009742 <_sbrk_r+0x1a>
 800973c:	682b      	ldr	r3, [r5, #0]
 800973e:	b103      	cbz	r3, 8009742 <_sbrk_r+0x1a>
 8009740:	6023      	str	r3, [r4, #0]
 8009742:	bd38      	pop	{r3, r4, r5, pc}
 8009744:	200004dc 	.word	0x200004dc

08009748 <nanf>:
 8009748:	4800      	ldr	r0, [pc, #0]	; (800974c <nanf+0x4>)
 800974a:	4770      	bx	lr
 800974c:	7fc00000 	.word	0x7fc00000

08009750 <siprintf>:
 8009750:	b40e      	push	{r1, r2, r3}
 8009752:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009756:	b500      	push	{lr}
 8009758:	b09c      	sub	sp, #112	; 0x70
 800975a:	ab1d      	add	r3, sp, #116	; 0x74
 800975c:	9002      	str	r0, [sp, #8]
 800975e:	9006      	str	r0, [sp, #24]
 8009760:	9107      	str	r1, [sp, #28]
 8009762:	9104      	str	r1, [sp, #16]
 8009764:	4808      	ldr	r0, [pc, #32]	; (8009788 <siprintf+0x38>)
 8009766:	4909      	ldr	r1, [pc, #36]	; (800978c <siprintf+0x3c>)
 8009768:	f853 2b04 	ldr.w	r2, [r3], #4
 800976c:	9105      	str	r1, [sp, #20]
 800976e:	6800      	ldr	r0, [r0, #0]
 8009770:	a902      	add	r1, sp, #8
 8009772:	9301      	str	r3, [sp, #4]
 8009774:	f002 ffee 	bl	800c754 <_svfiprintf_r>
 8009778:	2200      	movs	r2, #0
 800977a:	9b02      	ldr	r3, [sp, #8]
 800977c:	701a      	strb	r2, [r3, #0]
 800977e:	b01c      	add	sp, #112	; 0x70
 8009780:	f85d eb04 	ldr.w	lr, [sp], #4
 8009784:	b003      	add	sp, #12
 8009786:	4770      	bx	lr
 8009788:	2000028c 	.word	0x2000028c
 800978c:	ffff0208 	.word	0xffff0208

08009790 <sulp>:
 8009790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009794:	460f      	mov	r7, r1
 8009796:	4690      	mov	r8, r2
 8009798:	f002 fe24 	bl	800c3e4 <__ulp>
 800979c:	4604      	mov	r4, r0
 800979e:	460d      	mov	r5, r1
 80097a0:	f1b8 0f00 	cmp.w	r8, #0
 80097a4:	d011      	beq.n	80097ca <sulp+0x3a>
 80097a6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80097aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	dd0b      	ble.n	80097ca <sulp+0x3a>
 80097b2:	2400      	movs	r4, #0
 80097b4:	051b      	lsls	r3, r3, #20
 80097b6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80097ba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80097be:	4622      	mov	r2, r4
 80097c0:	462b      	mov	r3, r5
 80097c2:	f7f6 fe89 	bl	80004d8 <__aeabi_dmul>
 80097c6:	4604      	mov	r4, r0
 80097c8:	460d      	mov	r5, r1
 80097ca:	4620      	mov	r0, r4
 80097cc:	4629      	mov	r1, r5
 80097ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d2:	0000      	movs	r0, r0
 80097d4:	0000      	movs	r0, r0
	...

080097d8 <_strtod_l>:
 80097d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097dc:	469b      	mov	fp, r3
 80097de:	2300      	movs	r3, #0
 80097e0:	b09f      	sub	sp, #124	; 0x7c
 80097e2:	931a      	str	r3, [sp, #104]	; 0x68
 80097e4:	4b9e      	ldr	r3, [pc, #632]	; (8009a60 <_strtod_l+0x288>)
 80097e6:	4682      	mov	sl, r0
 80097e8:	681f      	ldr	r7, [r3, #0]
 80097ea:	460e      	mov	r6, r1
 80097ec:	4638      	mov	r0, r7
 80097ee:	9215      	str	r2, [sp, #84]	; 0x54
 80097f0:	f7f6 fcae 	bl	8000150 <strlen>
 80097f4:	f04f 0800 	mov.w	r8, #0
 80097f8:	4604      	mov	r4, r0
 80097fa:	f04f 0900 	mov.w	r9, #0
 80097fe:	9619      	str	r6, [sp, #100]	; 0x64
 8009800:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009802:	781a      	ldrb	r2, [r3, #0]
 8009804:	2a2b      	cmp	r2, #43	; 0x2b
 8009806:	d04c      	beq.n	80098a2 <_strtod_l+0xca>
 8009808:	d83a      	bhi.n	8009880 <_strtod_l+0xa8>
 800980a:	2a0d      	cmp	r2, #13
 800980c:	d833      	bhi.n	8009876 <_strtod_l+0x9e>
 800980e:	2a08      	cmp	r2, #8
 8009810:	d833      	bhi.n	800987a <_strtod_l+0xa2>
 8009812:	2a00      	cmp	r2, #0
 8009814:	d03d      	beq.n	8009892 <_strtod_l+0xba>
 8009816:	2300      	movs	r3, #0
 8009818:	930a      	str	r3, [sp, #40]	; 0x28
 800981a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800981c:	782b      	ldrb	r3, [r5, #0]
 800981e:	2b30      	cmp	r3, #48	; 0x30
 8009820:	f040 80aa 	bne.w	8009978 <_strtod_l+0x1a0>
 8009824:	786b      	ldrb	r3, [r5, #1]
 8009826:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800982a:	2b58      	cmp	r3, #88	; 0x58
 800982c:	d166      	bne.n	80098fc <_strtod_l+0x124>
 800982e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009830:	4650      	mov	r0, sl
 8009832:	9301      	str	r3, [sp, #4]
 8009834:	ab1a      	add	r3, sp, #104	; 0x68
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	4a8a      	ldr	r2, [pc, #552]	; (8009a64 <_strtod_l+0x28c>)
 800983a:	f8cd b008 	str.w	fp, [sp, #8]
 800983e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009840:	a919      	add	r1, sp, #100	; 0x64
 8009842:	f001 fecb 	bl	800b5dc <__gethex>
 8009846:	f010 0607 	ands.w	r6, r0, #7
 800984a:	4604      	mov	r4, r0
 800984c:	d005      	beq.n	800985a <_strtod_l+0x82>
 800984e:	2e06      	cmp	r6, #6
 8009850:	d129      	bne.n	80098a6 <_strtod_l+0xce>
 8009852:	2300      	movs	r3, #0
 8009854:	3501      	adds	r5, #1
 8009856:	9519      	str	r5, [sp, #100]	; 0x64
 8009858:	930a      	str	r3, [sp, #40]	; 0x28
 800985a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800985c:	2b00      	cmp	r3, #0
 800985e:	f040 858a 	bne.w	800a376 <_strtod_l+0xb9e>
 8009862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009864:	b1d3      	cbz	r3, 800989c <_strtod_l+0xc4>
 8009866:	4642      	mov	r2, r8
 8009868:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800986c:	4610      	mov	r0, r2
 800986e:	4619      	mov	r1, r3
 8009870:	b01f      	add	sp, #124	; 0x7c
 8009872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009876:	2a20      	cmp	r2, #32
 8009878:	d1cd      	bne.n	8009816 <_strtod_l+0x3e>
 800987a:	3301      	adds	r3, #1
 800987c:	9319      	str	r3, [sp, #100]	; 0x64
 800987e:	e7bf      	b.n	8009800 <_strtod_l+0x28>
 8009880:	2a2d      	cmp	r2, #45	; 0x2d
 8009882:	d1c8      	bne.n	8009816 <_strtod_l+0x3e>
 8009884:	2201      	movs	r2, #1
 8009886:	920a      	str	r2, [sp, #40]	; 0x28
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	9219      	str	r2, [sp, #100]	; 0x64
 800988c:	785b      	ldrb	r3, [r3, #1]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1c3      	bne.n	800981a <_strtod_l+0x42>
 8009892:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009894:	9619      	str	r6, [sp, #100]	; 0x64
 8009896:	2b00      	cmp	r3, #0
 8009898:	f040 856b 	bne.w	800a372 <_strtod_l+0xb9a>
 800989c:	4642      	mov	r2, r8
 800989e:	464b      	mov	r3, r9
 80098a0:	e7e4      	b.n	800986c <_strtod_l+0x94>
 80098a2:	2200      	movs	r2, #0
 80098a4:	e7ef      	b.n	8009886 <_strtod_l+0xae>
 80098a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80098a8:	b13a      	cbz	r2, 80098ba <_strtod_l+0xe2>
 80098aa:	2135      	movs	r1, #53	; 0x35
 80098ac:	a81c      	add	r0, sp, #112	; 0x70
 80098ae:	f002 fe9d 	bl	800c5ec <__copybits>
 80098b2:	4650      	mov	r0, sl
 80098b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80098b6:	f002 fa65 	bl	800bd84 <_Bfree>
 80098ba:	3e01      	subs	r6, #1
 80098bc:	2e04      	cmp	r6, #4
 80098be:	d806      	bhi.n	80098ce <_strtod_l+0xf6>
 80098c0:	e8df f006 	tbb	[pc, r6]
 80098c4:	1714030a 	.word	0x1714030a
 80098c8:	0a          	.byte	0x0a
 80098c9:	00          	.byte	0x00
 80098ca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80098ce:	0721      	lsls	r1, r4, #28
 80098d0:	d5c3      	bpl.n	800985a <_strtod_l+0x82>
 80098d2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80098d6:	e7c0      	b.n	800985a <_strtod_l+0x82>
 80098d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80098da:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80098de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80098e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80098e6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80098ea:	e7f0      	b.n	80098ce <_strtod_l+0xf6>
 80098ec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009a68 <_strtod_l+0x290>
 80098f0:	e7ed      	b.n	80098ce <_strtod_l+0xf6>
 80098f2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80098f6:	f04f 38ff 	mov.w	r8, #4294967295
 80098fa:	e7e8      	b.n	80098ce <_strtod_l+0xf6>
 80098fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098fe:	1c5a      	adds	r2, r3, #1
 8009900:	9219      	str	r2, [sp, #100]	; 0x64
 8009902:	785b      	ldrb	r3, [r3, #1]
 8009904:	2b30      	cmp	r3, #48	; 0x30
 8009906:	d0f9      	beq.n	80098fc <_strtod_l+0x124>
 8009908:	2b00      	cmp	r3, #0
 800990a:	d0a6      	beq.n	800985a <_strtod_l+0x82>
 800990c:	2301      	movs	r3, #1
 800990e:	9307      	str	r3, [sp, #28]
 8009910:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009912:	220a      	movs	r2, #10
 8009914:	9308      	str	r3, [sp, #32]
 8009916:	2300      	movs	r3, #0
 8009918:	469b      	mov	fp, r3
 800991a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800991e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009920:	7805      	ldrb	r5, [r0, #0]
 8009922:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009926:	b2d9      	uxtb	r1, r3
 8009928:	2909      	cmp	r1, #9
 800992a:	d927      	bls.n	800997c <_strtod_l+0x1a4>
 800992c:	4622      	mov	r2, r4
 800992e:	4639      	mov	r1, r7
 8009930:	f003 f859 	bl	800c9e6 <strncmp>
 8009934:	2800      	cmp	r0, #0
 8009936:	d033      	beq.n	80099a0 <_strtod_l+0x1c8>
 8009938:	2000      	movs	r0, #0
 800993a:	462a      	mov	r2, r5
 800993c:	465c      	mov	r4, fp
 800993e:	4603      	mov	r3, r0
 8009940:	9004      	str	r0, [sp, #16]
 8009942:	2a65      	cmp	r2, #101	; 0x65
 8009944:	d001      	beq.n	800994a <_strtod_l+0x172>
 8009946:	2a45      	cmp	r2, #69	; 0x45
 8009948:	d114      	bne.n	8009974 <_strtod_l+0x19c>
 800994a:	b91c      	cbnz	r4, 8009954 <_strtod_l+0x17c>
 800994c:	9a07      	ldr	r2, [sp, #28]
 800994e:	4302      	orrs	r2, r0
 8009950:	d09f      	beq.n	8009892 <_strtod_l+0xba>
 8009952:	2400      	movs	r4, #0
 8009954:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009956:	1c72      	adds	r2, r6, #1
 8009958:	9219      	str	r2, [sp, #100]	; 0x64
 800995a:	7872      	ldrb	r2, [r6, #1]
 800995c:	2a2b      	cmp	r2, #43	; 0x2b
 800995e:	d079      	beq.n	8009a54 <_strtod_l+0x27c>
 8009960:	2a2d      	cmp	r2, #45	; 0x2d
 8009962:	f000 8083 	beq.w	8009a6c <_strtod_l+0x294>
 8009966:	2700      	movs	r7, #0
 8009968:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800996c:	2909      	cmp	r1, #9
 800996e:	f240 8083 	bls.w	8009a78 <_strtod_l+0x2a0>
 8009972:	9619      	str	r6, [sp, #100]	; 0x64
 8009974:	2500      	movs	r5, #0
 8009976:	e09f      	b.n	8009ab8 <_strtod_l+0x2e0>
 8009978:	2300      	movs	r3, #0
 800997a:	e7c8      	b.n	800990e <_strtod_l+0x136>
 800997c:	f1bb 0f08 	cmp.w	fp, #8
 8009980:	bfd5      	itete	le
 8009982:	9906      	ldrle	r1, [sp, #24]
 8009984:	9905      	ldrgt	r1, [sp, #20]
 8009986:	fb02 3301 	mlale	r3, r2, r1, r3
 800998a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800998e:	f100 0001 	add.w	r0, r0, #1
 8009992:	bfd4      	ite	le
 8009994:	9306      	strle	r3, [sp, #24]
 8009996:	9305      	strgt	r3, [sp, #20]
 8009998:	f10b 0b01 	add.w	fp, fp, #1
 800999c:	9019      	str	r0, [sp, #100]	; 0x64
 800999e:	e7be      	b.n	800991e <_strtod_l+0x146>
 80099a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099a2:	191a      	adds	r2, r3, r4
 80099a4:	9219      	str	r2, [sp, #100]	; 0x64
 80099a6:	5d1a      	ldrb	r2, [r3, r4]
 80099a8:	f1bb 0f00 	cmp.w	fp, #0
 80099ac:	d036      	beq.n	8009a1c <_strtod_l+0x244>
 80099ae:	465c      	mov	r4, fp
 80099b0:	9004      	str	r0, [sp, #16]
 80099b2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80099b6:	2b09      	cmp	r3, #9
 80099b8:	d912      	bls.n	80099e0 <_strtod_l+0x208>
 80099ba:	2301      	movs	r3, #1
 80099bc:	e7c1      	b.n	8009942 <_strtod_l+0x16a>
 80099be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099c0:	3001      	adds	r0, #1
 80099c2:	1c5a      	adds	r2, r3, #1
 80099c4:	9219      	str	r2, [sp, #100]	; 0x64
 80099c6:	785a      	ldrb	r2, [r3, #1]
 80099c8:	2a30      	cmp	r2, #48	; 0x30
 80099ca:	d0f8      	beq.n	80099be <_strtod_l+0x1e6>
 80099cc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80099d0:	2b08      	cmp	r3, #8
 80099d2:	f200 84d5 	bhi.w	800a380 <_strtod_l+0xba8>
 80099d6:	9004      	str	r0, [sp, #16]
 80099d8:	2000      	movs	r0, #0
 80099da:	4604      	mov	r4, r0
 80099dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099de:	9308      	str	r3, [sp, #32]
 80099e0:	3a30      	subs	r2, #48	; 0x30
 80099e2:	f100 0301 	add.w	r3, r0, #1
 80099e6:	d013      	beq.n	8009a10 <_strtod_l+0x238>
 80099e8:	9904      	ldr	r1, [sp, #16]
 80099ea:	1905      	adds	r5, r0, r4
 80099ec:	4419      	add	r1, r3
 80099ee:	9104      	str	r1, [sp, #16]
 80099f0:	4623      	mov	r3, r4
 80099f2:	210a      	movs	r1, #10
 80099f4:	42ab      	cmp	r3, r5
 80099f6:	d113      	bne.n	8009a20 <_strtod_l+0x248>
 80099f8:	1823      	adds	r3, r4, r0
 80099fa:	2b08      	cmp	r3, #8
 80099fc:	f104 0401 	add.w	r4, r4, #1
 8009a00:	4404      	add	r4, r0
 8009a02:	dc1b      	bgt.n	8009a3c <_strtod_l+0x264>
 8009a04:	230a      	movs	r3, #10
 8009a06:	9906      	ldr	r1, [sp, #24]
 8009a08:	fb03 2301 	mla	r3, r3, r1, r2
 8009a0c:	9306      	str	r3, [sp, #24]
 8009a0e:	2300      	movs	r3, #0
 8009a10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a12:	4618      	mov	r0, r3
 8009a14:	1c51      	adds	r1, r2, #1
 8009a16:	9119      	str	r1, [sp, #100]	; 0x64
 8009a18:	7852      	ldrb	r2, [r2, #1]
 8009a1a:	e7ca      	b.n	80099b2 <_strtod_l+0x1da>
 8009a1c:	4658      	mov	r0, fp
 8009a1e:	e7d3      	b.n	80099c8 <_strtod_l+0x1f0>
 8009a20:	2b08      	cmp	r3, #8
 8009a22:	dc04      	bgt.n	8009a2e <_strtod_l+0x256>
 8009a24:	9f06      	ldr	r7, [sp, #24]
 8009a26:	434f      	muls	r7, r1
 8009a28:	9706      	str	r7, [sp, #24]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	e7e2      	b.n	80099f4 <_strtod_l+0x21c>
 8009a2e:	1c5f      	adds	r7, r3, #1
 8009a30:	2f10      	cmp	r7, #16
 8009a32:	bfde      	ittt	le
 8009a34:	9f05      	ldrle	r7, [sp, #20]
 8009a36:	434f      	mulle	r7, r1
 8009a38:	9705      	strle	r7, [sp, #20]
 8009a3a:	e7f6      	b.n	8009a2a <_strtod_l+0x252>
 8009a3c:	2c10      	cmp	r4, #16
 8009a3e:	bfdf      	itttt	le
 8009a40:	230a      	movle	r3, #10
 8009a42:	9905      	ldrle	r1, [sp, #20]
 8009a44:	fb03 2301 	mlale	r3, r3, r1, r2
 8009a48:	9305      	strle	r3, [sp, #20]
 8009a4a:	e7e0      	b.n	8009a0e <_strtod_l+0x236>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	9304      	str	r3, [sp, #16]
 8009a50:	2301      	movs	r3, #1
 8009a52:	e77b      	b.n	800994c <_strtod_l+0x174>
 8009a54:	2700      	movs	r7, #0
 8009a56:	1cb2      	adds	r2, r6, #2
 8009a58:	9219      	str	r2, [sp, #100]	; 0x64
 8009a5a:	78b2      	ldrb	r2, [r6, #2]
 8009a5c:	e784      	b.n	8009968 <_strtod_l+0x190>
 8009a5e:	bf00      	nop
 8009a60:	0800d554 	.word	0x0800d554
 8009a64:	0800d2a4 	.word	0x0800d2a4
 8009a68:	7ff00000 	.word	0x7ff00000
 8009a6c:	2701      	movs	r7, #1
 8009a6e:	e7f2      	b.n	8009a56 <_strtod_l+0x27e>
 8009a70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a72:	1c51      	adds	r1, r2, #1
 8009a74:	9119      	str	r1, [sp, #100]	; 0x64
 8009a76:	7852      	ldrb	r2, [r2, #1]
 8009a78:	2a30      	cmp	r2, #48	; 0x30
 8009a7a:	d0f9      	beq.n	8009a70 <_strtod_l+0x298>
 8009a7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009a80:	2908      	cmp	r1, #8
 8009a82:	f63f af77 	bhi.w	8009974 <_strtod_l+0x19c>
 8009a86:	f04f 0e0a 	mov.w	lr, #10
 8009a8a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009a8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a90:	9209      	str	r2, [sp, #36]	; 0x24
 8009a92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a94:	1c51      	adds	r1, r2, #1
 8009a96:	9119      	str	r1, [sp, #100]	; 0x64
 8009a98:	7852      	ldrb	r2, [r2, #1]
 8009a9a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009a9e:	2d09      	cmp	r5, #9
 8009aa0:	d935      	bls.n	8009b0e <_strtod_l+0x336>
 8009aa2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009aa4:	1b49      	subs	r1, r1, r5
 8009aa6:	2908      	cmp	r1, #8
 8009aa8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009aac:	dc02      	bgt.n	8009ab4 <_strtod_l+0x2dc>
 8009aae:	4565      	cmp	r5, ip
 8009ab0:	bfa8      	it	ge
 8009ab2:	4665      	movge	r5, ip
 8009ab4:	b107      	cbz	r7, 8009ab8 <_strtod_l+0x2e0>
 8009ab6:	426d      	negs	r5, r5
 8009ab8:	2c00      	cmp	r4, #0
 8009aba:	d14c      	bne.n	8009b56 <_strtod_l+0x37e>
 8009abc:	9907      	ldr	r1, [sp, #28]
 8009abe:	4301      	orrs	r1, r0
 8009ac0:	f47f aecb 	bne.w	800985a <_strtod_l+0x82>
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f47f aee4 	bne.w	8009892 <_strtod_l+0xba>
 8009aca:	2a69      	cmp	r2, #105	; 0x69
 8009acc:	d026      	beq.n	8009b1c <_strtod_l+0x344>
 8009ace:	dc23      	bgt.n	8009b18 <_strtod_l+0x340>
 8009ad0:	2a49      	cmp	r2, #73	; 0x49
 8009ad2:	d023      	beq.n	8009b1c <_strtod_l+0x344>
 8009ad4:	2a4e      	cmp	r2, #78	; 0x4e
 8009ad6:	f47f aedc 	bne.w	8009892 <_strtod_l+0xba>
 8009ada:	499d      	ldr	r1, [pc, #628]	; (8009d50 <_strtod_l+0x578>)
 8009adc:	a819      	add	r0, sp, #100	; 0x64
 8009ade:	f001 ffcb 	bl	800ba78 <__match>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	f43f aed5 	beq.w	8009892 <_strtod_l+0xba>
 8009ae8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	2b28      	cmp	r3, #40	; 0x28
 8009aee:	d12c      	bne.n	8009b4a <_strtod_l+0x372>
 8009af0:	4998      	ldr	r1, [pc, #608]	; (8009d54 <_strtod_l+0x57c>)
 8009af2:	aa1c      	add	r2, sp, #112	; 0x70
 8009af4:	a819      	add	r0, sp, #100	; 0x64
 8009af6:	f001 ffd3 	bl	800baa0 <__hexnan>
 8009afa:	2805      	cmp	r0, #5
 8009afc:	d125      	bne.n	8009b4a <_strtod_l+0x372>
 8009afe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b00:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009b04:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009b08:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009b0c:	e6a5      	b.n	800985a <_strtod_l+0x82>
 8009b0e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009b12:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009b16:	e7bc      	b.n	8009a92 <_strtod_l+0x2ba>
 8009b18:	2a6e      	cmp	r2, #110	; 0x6e
 8009b1a:	e7dc      	b.n	8009ad6 <_strtod_l+0x2fe>
 8009b1c:	498e      	ldr	r1, [pc, #568]	; (8009d58 <_strtod_l+0x580>)
 8009b1e:	a819      	add	r0, sp, #100	; 0x64
 8009b20:	f001 ffaa 	bl	800ba78 <__match>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	f43f aeb4 	beq.w	8009892 <_strtod_l+0xba>
 8009b2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b2c:	498b      	ldr	r1, [pc, #556]	; (8009d5c <_strtod_l+0x584>)
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	a819      	add	r0, sp, #100	; 0x64
 8009b32:	9319      	str	r3, [sp, #100]	; 0x64
 8009b34:	f001 ffa0 	bl	800ba78 <__match>
 8009b38:	b910      	cbnz	r0, 8009b40 <_strtod_l+0x368>
 8009b3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	9319      	str	r3, [sp, #100]	; 0x64
 8009b40:	f04f 0800 	mov.w	r8, #0
 8009b44:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009d60 <_strtod_l+0x588>
 8009b48:	e687      	b.n	800985a <_strtod_l+0x82>
 8009b4a:	4886      	ldr	r0, [pc, #536]	; (8009d64 <_strtod_l+0x58c>)
 8009b4c:	f002 ff02 	bl	800c954 <nan>
 8009b50:	4680      	mov	r8, r0
 8009b52:	4689      	mov	r9, r1
 8009b54:	e681      	b.n	800985a <_strtod_l+0x82>
 8009b56:	9b04      	ldr	r3, [sp, #16]
 8009b58:	f1bb 0f00 	cmp.w	fp, #0
 8009b5c:	bf08      	it	eq
 8009b5e:	46a3      	moveq	fp, r4
 8009b60:	1aeb      	subs	r3, r5, r3
 8009b62:	2c10      	cmp	r4, #16
 8009b64:	9806      	ldr	r0, [sp, #24]
 8009b66:	4626      	mov	r6, r4
 8009b68:	9307      	str	r3, [sp, #28]
 8009b6a:	bfa8      	it	ge
 8009b6c:	2610      	movge	r6, #16
 8009b6e:	f7f6 fc39 	bl	80003e4 <__aeabi_ui2d>
 8009b72:	2c09      	cmp	r4, #9
 8009b74:	4680      	mov	r8, r0
 8009b76:	4689      	mov	r9, r1
 8009b78:	dd13      	ble.n	8009ba2 <_strtod_l+0x3ca>
 8009b7a:	4b7b      	ldr	r3, [pc, #492]	; (8009d68 <_strtod_l+0x590>)
 8009b7c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b80:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009b84:	f7f6 fca8 	bl	80004d8 <__aeabi_dmul>
 8009b88:	4680      	mov	r8, r0
 8009b8a:	9805      	ldr	r0, [sp, #20]
 8009b8c:	4689      	mov	r9, r1
 8009b8e:	f7f6 fc29 	bl	80003e4 <__aeabi_ui2d>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	4640      	mov	r0, r8
 8009b98:	4649      	mov	r1, r9
 8009b9a:	f7f6 fae7 	bl	800016c <__adddf3>
 8009b9e:	4680      	mov	r8, r0
 8009ba0:	4689      	mov	r9, r1
 8009ba2:	2c0f      	cmp	r4, #15
 8009ba4:	dc36      	bgt.n	8009c14 <_strtod_l+0x43c>
 8009ba6:	9b07      	ldr	r3, [sp, #28]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f43f ae56 	beq.w	800985a <_strtod_l+0x82>
 8009bae:	dd22      	ble.n	8009bf6 <_strtod_l+0x41e>
 8009bb0:	2b16      	cmp	r3, #22
 8009bb2:	dc09      	bgt.n	8009bc8 <_strtod_l+0x3f0>
 8009bb4:	496c      	ldr	r1, [pc, #432]	; (8009d68 <_strtod_l+0x590>)
 8009bb6:	4642      	mov	r2, r8
 8009bb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009bbc:	464b      	mov	r3, r9
 8009bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bc2:	f7f6 fc89 	bl	80004d8 <__aeabi_dmul>
 8009bc6:	e7c3      	b.n	8009b50 <_strtod_l+0x378>
 8009bc8:	9a07      	ldr	r2, [sp, #28]
 8009bca:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	db20      	blt.n	8009c14 <_strtod_l+0x43c>
 8009bd2:	4d65      	ldr	r5, [pc, #404]	; (8009d68 <_strtod_l+0x590>)
 8009bd4:	f1c4 040f 	rsb	r4, r4, #15
 8009bd8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009bdc:	4642      	mov	r2, r8
 8009bde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009be2:	464b      	mov	r3, r9
 8009be4:	f7f6 fc78 	bl	80004d8 <__aeabi_dmul>
 8009be8:	9b07      	ldr	r3, [sp, #28]
 8009bea:	1b1c      	subs	r4, r3, r4
 8009bec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009bf0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009bf4:	e7e5      	b.n	8009bc2 <_strtod_l+0x3ea>
 8009bf6:	9b07      	ldr	r3, [sp, #28]
 8009bf8:	3316      	adds	r3, #22
 8009bfa:	db0b      	blt.n	8009c14 <_strtod_l+0x43c>
 8009bfc:	9b04      	ldr	r3, [sp, #16]
 8009bfe:	4640      	mov	r0, r8
 8009c00:	1b5d      	subs	r5, r3, r5
 8009c02:	4b59      	ldr	r3, [pc, #356]	; (8009d68 <_strtod_l+0x590>)
 8009c04:	4649      	mov	r1, r9
 8009c06:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009c0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c0e:	f7f6 fd8d 	bl	800072c <__aeabi_ddiv>
 8009c12:	e79d      	b.n	8009b50 <_strtod_l+0x378>
 8009c14:	9b07      	ldr	r3, [sp, #28]
 8009c16:	1ba6      	subs	r6, r4, r6
 8009c18:	441e      	add	r6, r3
 8009c1a:	2e00      	cmp	r6, #0
 8009c1c:	dd74      	ble.n	8009d08 <_strtod_l+0x530>
 8009c1e:	f016 030f 	ands.w	r3, r6, #15
 8009c22:	d00a      	beq.n	8009c3a <_strtod_l+0x462>
 8009c24:	4950      	ldr	r1, [pc, #320]	; (8009d68 <_strtod_l+0x590>)
 8009c26:	4642      	mov	r2, r8
 8009c28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c30:	464b      	mov	r3, r9
 8009c32:	f7f6 fc51 	bl	80004d8 <__aeabi_dmul>
 8009c36:	4680      	mov	r8, r0
 8009c38:	4689      	mov	r9, r1
 8009c3a:	f036 060f 	bics.w	r6, r6, #15
 8009c3e:	d052      	beq.n	8009ce6 <_strtod_l+0x50e>
 8009c40:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009c44:	dd27      	ble.n	8009c96 <_strtod_l+0x4be>
 8009c46:	f04f 0b00 	mov.w	fp, #0
 8009c4a:	f8cd b010 	str.w	fp, [sp, #16]
 8009c4e:	f8cd b020 	str.w	fp, [sp, #32]
 8009c52:	f8cd b018 	str.w	fp, [sp, #24]
 8009c56:	2322      	movs	r3, #34	; 0x22
 8009c58:	f04f 0800 	mov.w	r8, #0
 8009c5c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009d60 <_strtod_l+0x588>
 8009c60:	f8ca 3000 	str.w	r3, [sl]
 8009c64:	9b08      	ldr	r3, [sp, #32]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f43f adf7 	beq.w	800985a <_strtod_l+0x82>
 8009c6c:	4650      	mov	r0, sl
 8009c6e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c70:	f002 f888 	bl	800bd84 <_Bfree>
 8009c74:	4650      	mov	r0, sl
 8009c76:	9906      	ldr	r1, [sp, #24]
 8009c78:	f002 f884 	bl	800bd84 <_Bfree>
 8009c7c:	4650      	mov	r0, sl
 8009c7e:	9904      	ldr	r1, [sp, #16]
 8009c80:	f002 f880 	bl	800bd84 <_Bfree>
 8009c84:	4650      	mov	r0, sl
 8009c86:	9908      	ldr	r1, [sp, #32]
 8009c88:	f002 f87c 	bl	800bd84 <_Bfree>
 8009c8c:	4659      	mov	r1, fp
 8009c8e:	4650      	mov	r0, sl
 8009c90:	f002 f878 	bl	800bd84 <_Bfree>
 8009c94:	e5e1      	b.n	800985a <_strtod_l+0x82>
 8009c96:	4b35      	ldr	r3, [pc, #212]	; (8009d6c <_strtod_l+0x594>)
 8009c98:	4640      	mov	r0, r8
 8009c9a:	9305      	str	r3, [sp, #20]
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	4649      	mov	r1, r9
 8009ca0:	461f      	mov	r7, r3
 8009ca2:	1136      	asrs	r6, r6, #4
 8009ca4:	2e01      	cmp	r6, #1
 8009ca6:	dc21      	bgt.n	8009cec <_strtod_l+0x514>
 8009ca8:	b10b      	cbz	r3, 8009cae <_strtod_l+0x4d6>
 8009caa:	4680      	mov	r8, r0
 8009cac:	4689      	mov	r9, r1
 8009cae:	4b2f      	ldr	r3, [pc, #188]	; (8009d6c <_strtod_l+0x594>)
 8009cb0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009cb4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009cb8:	4642      	mov	r2, r8
 8009cba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cbe:	464b      	mov	r3, r9
 8009cc0:	f7f6 fc0a 	bl	80004d8 <__aeabi_dmul>
 8009cc4:	4b26      	ldr	r3, [pc, #152]	; (8009d60 <_strtod_l+0x588>)
 8009cc6:	460a      	mov	r2, r1
 8009cc8:	400b      	ands	r3, r1
 8009cca:	4929      	ldr	r1, [pc, #164]	; (8009d70 <_strtod_l+0x598>)
 8009ccc:	4680      	mov	r8, r0
 8009cce:	428b      	cmp	r3, r1
 8009cd0:	d8b9      	bhi.n	8009c46 <_strtod_l+0x46e>
 8009cd2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009cd6:	428b      	cmp	r3, r1
 8009cd8:	bf86      	itte	hi
 8009cda:	f04f 38ff 	movhi.w	r8, #4294967295
 8009cde:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009d74 <_strtod_l+0x59c>
 8009ce2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	9305      	str	r3, [sp, #20]
 8009cea:	e07f      	b.n	8009dec <_strtod_l+0x614>
 8009cec:	07f2      	lsls	r2, r6, #31
 8009cee:	d505      	bpl.n	8009cfc <_strtod_l+0x524>
 8009cf0:	9b05      	ldr	r3, [sp, #20]
 8009cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf6:	f7f6 fbef 	bl	80004d8 <__aeabi_dmul>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	9a05      	ldr	r2, [sp, #20]
 8009cfe:	3701      	adds	r7, #1
 8009d00:	3208      	adds	r2, #8
 8009d02:	1076      	asrs	r6, r6, #1
 8009d04:	9205      	str	r2, [sp, #20]
 8009d06:	e7cd      	b.n	8009ca4 <_strtod_l+0x4cc>
 8009d08:	d0ed      	beq.n	8009ce6 <_strtod_l+0x50e>
 8009d0a:	4276      	negs	r6, r6
 8009d0c:	f016 020f 	ands.w	r2, r6, #15
 8009d10:	d00a      	beq.n	8009d28 <_strtod_l+0x550>
 8009d12:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <_strtod_l+0x590>)
 8009d14:	4640      	mov	r0, r8
 8009d16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d1a:	4649      	mov	r1, r9
 8009d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d20:	f7f6 fd04 	bl	800072c <__aeabi_ddiv>
 8009d24:	4680      	mov	r8, r0
 8009d26:	4689      	mov	r9, r1
 8009d28:	1136      	asrs	r6, r6, #4
 8009d2a:	d0dc      	beq.n	8009ce6 <_strtod_l+0x50e>
 8009d2c:	2e1f      	cmp	r6, #31
 8009d2e:	dd23      	ble.n	8009d78 <_strtod_l+0x5a0>
 8009d30:	f04f 0b00 	mov.w	fp, #0
 8009d34:	f8cd b010 	str.w	fp, [sp, #16]
 8009d38:	f8cd b020 	str.w	fp, [sp, #32]
 8009d3c:	f8cd b018 	str.w	fp, [sp, #24]
 8009d40:	2322      	movs	r3, #34	; 0x22
 8009d42:	f04f 0800 	mov.w	r8, #0
 8009d46:	f04f 0900 	mov.w	r9, #0
 8009d4a:	f8ca 3000 	str.w	r3, [sl]
 8009d4e:	e789      	b.n	8009c64 <_strtod_l+0x48c>
 8009d50:	0800d275 	.word	0x0800d275
 8009d54:	0800d2b8 	.word	0x0800d2b8
 8009d58:	0800d26d 	.word	0x0800d26d
 8009d5c:	0800d3fc 	.word	0x0800d3fc
 8009d60:	7ff00000 	.word	0x7ff00000
 8009d64:	0800d710 	.word	0x0800d710
 8009d68:	0800d5f0 	.word	0x0800d5f0
 8009d6c:	0800d5c8 	.word	0x0800d5c8
 8009d70:	7ca00000 	.word	0x7ca00000
 8009d74:	7fefffff 	.word	0x7fefffff
 8009d78:	f016 0310 	ands.w	r3, r6, #16
 8009d7c:	bf18      	it	ne
 8009d7e:	236a      	movne	r3, #106	; 0x6a
 8009d80:	4640      	mov	r0, r8
 8009d82:	9305      	str	r3, [sp, #20]
 8009d84:	4649      	mov	r1, r9
 8009d86:	2300      	movs	r3, #0
 8009d88:	4fb0      	ldr	r7, [pc, #704]	; (800a04c <_strtod_l+0x874>)
 8009d8a:	07f2      	lsls	r2, r6, #31
 8009d8c:	d504      	bpl.n	8009d98 <_strtod_l+0x5c0>
 8009d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d92:	f7f6 fba1 	bl	80004d8 <__aeabi_dmul>
 8009d96:	2301      	movs	r3, #1
 8009d98:	1076      	asrs	r6, r6, #1
 8009d9a:	f107 0708 	add.w	r7, r7, #8
 8009d9e:	d1f4      	bne.n	8009d8a <_strtod_l+0x5b2>
 8009da0:	b10b      	cbz	r3, 8009da6 <_strtod_l+0x5ce>
 8009da2:	4680      	mov	r8, r0
 8009da4:	4689      	mov	r9, r1
 8009da6:	9b05      	ldr	r3, [sp, #20]
 8009da8:	b1c3      	cbz	r3, 8009ddc <_strtod_l+0x604>
 8009daa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009dae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	4649      	mov	r1, r9
 8009db6:	dd11      	ble.n	8009ddc <_strtod_l+0x604>
 8009db8:	2b1f      	cmp	r3, #31
 8009dba:	f340 8127 	ble.w	800a00c <_strtod_l+0x834>
 8009dbe:	2b34      	cmp	r3, #52	; 0x34
 8009dc0:	bfd8      	it	le
 8009dc2:	f04f 33ff 	movle.w	r3, #4294967295
 8009dc6:	f04f 0800 	mov.w	r8, #0
 8009dca:	bfcf      	iteee	gt
 8009dcc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009dd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009dd4:	fa03 f202 	lslle.w	r2, r3, r2
 8009dd8:	ea02 0901 	andle.w	r9, r2, r1
 8009ddc:	2200      	movs	r2, #0
 8009dde:	2300      	movs	r3, #0
 8009de0:	4640      	mov	r0, r8
 8009de2:	4649      	mov	r1, r9
 8009de4:	f7f6 fde0 	bl	80009a8 <__aeabi_dcmpeq>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d1a1      	bne.n	8009d30 <_strtod_l+0x558>
 8009dec:	9b06      	ldr	r3, [sp, #24]
 8009dee:	465a      	mov	r2, fp
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	4650      	mov	r0, sl
 8009df4:	4623      	mov	r3, r4
 8009df6:	9908      	ldr	r1, [sp, #32]
 8009df8:	f002 f82c 	bl	800be54 <__s2b>
 8009dfc:	9008      	str	r0, [sp, #32]
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	f43f af21 	beq.w	8009c46 <_strtod_l+0x46e>
 8009e04:	9b04      	ldr	r3, [sp, #16]
 8009e06:	f04f 0b00 	mov.w	fp, #0
 8009e0a:	1b5d      	subs	r5, r3, r5
 8009e0c:	9b07      	ldr	r3, [sp, #28]
 8009e0e:	f8cd b010 	str.w	fp, [sp, #16]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	bfb4      	ite	lt
 8009e16:	462b      	movlt	r3, r5
 8009e18:	2300      	movge	r3, #0
 8009e1a:	930e      	str	r3, [sp, #56]	; 0x38
 8009e1c:	9b07      	ldr	r3, [sp, #28]
 8009e1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009e22:	9314      	str	r3, [sp, #80]	; 0x50
 8009e24:	9b08      	ldr	r3, [sp, #32]
 8009e26:	4650      	mov	r0, sl
 8009e28:	6859      	ldr	r1, [r3, #4]
 8009e2a:	f001 ff6b 	bl	800bd04 <_Balloc>
 8009e2e:	9006      	str	r0, [sp, #24]
 8009e30:	2800      	cmp	r0, #0
 8009e32:	f43f af10 	beq.w	8009c56 <_strtod_l+0x47e>
 8009e36:	9b08      	ldr	r3, [sp, #32]
 8009e38:	300c      	adds	r0, #12
 8009e3a:	691a      	ldr	r2, [r3, #16]
 8009e3c:	f103 010c 	add.w	r1, r3, #12
 8009e40:	3202      	adds	r2, #2
 8009e42:	0092      	lsls	r2, r2, #2
 8009e44:	f7fe fd10 	bl	8008868 <memcpy>
 8009e48:	ab1c      	add	r3, sp, #112	; 0x70
 8009e4a:	9301      	str	r3, [sp, #4]
 8009e4c:	ab1b      	add	r3, sp, #108	; 0x6c
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	4642      	mov	r2, r8
 8009e52:	464b      	mov	r3, r9
 8009e54:	4650      	mov	r0, sl
 8009e56:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009e5a:	f002 fb3d 	bl	800c4d8 <__d2b>
 8009e5e:	901a      	str	r0, [sp, #104]	; 0x68
 8009e60:	2800      	cmp	r0, #0
 8009e62:	f43f aef8 	beq.w	8009c56 <_strtod_l+0x47e>
 8009e66:	2101      	movs	r1, #1
 8009e68:	4650      	mov	r0, sl
 8009e6a:	f002 f88b 	bl	800bf84 <__i2b>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	9004      	str	r0, [sp, #16]
 8009e72:	2800      	cmp	r0, #0
 8009e74:	f43f aeef 	beq.w	8009c56 <_strtod_l+0x47e>
 8009e78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009e7a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009e7c:	2d00      	cmp	r5, #0
 8009e7e:	bfab      	itete	ge
 8009e80:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009e82:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009e84:	18ee      	addge	r6, r5, r3
 8009e86:	1b5c      	sublt	r4, r3, r5
 8009e88:	9b05      	ldr	r3, [sp, #20]
 8009e8a:	bfa8      	it	ge
 8009e8c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009e8e:	eba5 0503 	sub.w	r5, r5, r3
 8009e92:	4415      	add	r5, r2
 8009e94:	4b6e      	ldr	r3, [pc, #440]	; (800a050 <_strtod_l+0x878>)
 8009e96:	f105 35ff 	add.w	r5, r5, #4294967295
 8009e9a:	bfb8      	it	lt
 8009e9c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009e9e:	429d      	cmp	r5, r3
 8009ea0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009ea4:	f280 80c4 	bge.w	800a030 <_strtod_l+0x858>
 8009ea8:	1b5b      	subs	r3, r3, r5
 8009eaa:	2b1f      	cmp	r3, #31
 8009eac:	f04f 0701 	mov.w	r7, #1
 8009eb0:	eba2 0203 	sub.w	r2, r2, r3
 8009eb4:	f300 80b1 	bgt.w	800a01a <_strtod_l+0x842>
 8009eb8:	2500      	movs	r5, #0
 8009eba:	fa07 f303 	lsl.w	r3, r7, r3
 8009ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ec0:	18b7      	adds	r7, r6, r2
 8009ec2:	9b05      	ldr	r3, [sp, #20]
 8009ec4:	42be      	cmp	r6, r7
 8009ec6:	4414      	add	r4, r2
 8009ec8:	441c      	add	r4, r3
 8009eca:	4633      	mov	r3, r6
 8009ecc:	bfa8      	it	ge
 8009ece:	463b      	movge	r3, r7
 8009ed0:	42a3      	cmp	r3, r4
 8009ed2:	bfa8      	it	ge
 8009ed4:	4623      	movge	r3, r4
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	bfc2      	ittt	gt
 8009eda:	1aff      	subgt	r7, r7, r3
 8009edc:	1ae4      	subgt	r4, r4, r3
 8009ede:	1af6      	subgt	r6, r6, r3
 8009ee0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	dd17      	ble.n	8009f16 <_strtod_l+0x73e>
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	4650      	mov	r0, sl
 8009eea:	9904      	ldr	r1, [sp, #16]
 8009eec:	f002 f908 	bl	800c100 <__pow5mult>
 8009ef0:	9004      	str	r0, [sp, #16]
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	f43f aeaf 	beq.w	8009c56 <_strtod_l+0x47e>
 8009ef8:	4601      	mov	r1, r0
 8009efa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009efc:	4650      	mov	r0, sl
 8009efe:	f002 f857 	bl	800bfb0 <__multiply>
 8009f02:	9009      	str	r0, [sp, #36]	; 0x24
 8009f04:	2800      	cmp	r0, #0
 8009f06:	f43f aea6 	beq.w	8009c56 <_strtod_l+0x47e>
 8009f0a:	4650      	mov	r0, sl
 8009f0c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009f0e:	f001 ff39 	bl	800bd84 <_Bfree>
 8009f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f14:	931a      	str	r3, [sp, #104]	; 0x68
 8009f16:	2f00      	cmp	r7, #0
 8009f18:	f300 808e 	bgt.w	800a038 <_strtod_l+0x860>
 8009f1c:	9b07      	ldr	r3, [sp, #28]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	dd08      	ble.n	8009f34 <_strtod_l+0x75c>
 8009f22:	4650      	mov	r0, sl
 8009f24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f26:	9906      	ldr	r1, [sp, #24]
 8009f28:	f002 f8ea 	bl	800c100 <__pow5mult>
 8009f2c:	9006      	str	r0, [sp, #24]
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	f43f ae91 	beq.w	8009c56 <_strtod_l+0x47e>
 8009f34:	2c00      	cmp	r4, #0
 8009f36:	dd08      	ble.n	8009f4a <_strtod_l+0x772>
 8009f38:	4622      	mov	r2, r4
 8009f3a:	4650      	mov	r0, sl
 8009f3c:	9906      	ldr	r1, [sp, #24]
 8009f3e:	f002 f939 	bl	800c1b4 <__lshift>
 8009f42:	9006      	str	r0, [sp, #24]
 8009f44:	2800      	cmp	r0, #0
 8009f46:	f43f ae86 	beq.w	8009c56 <_strtod_l+0x47e>
 8009f4a:	2e00      	cmp	r6, #0
 8009f4c:	dd08      	ble.n	8009f60 <_strtod_l+0x788>
 8009f4e:	4632      	mov	r2, r6
 8009f50:	4650      	mov	r0, sl
 8009f52:	9904      	ldr	r1, [sp, #16]
 8009f54:	f002 f92e 	bl	800c1b4 <__lshift>
 8009f58:	9004      	str	r0, [sp, #16]
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	f43f ae7b 	beq.w	8009c56 <_strtod_l+0x47e>
 8009f60:	4650      	mov	r0, sl
 8009f62:	9a06      	ldr	r2, [sp, #24]
 8009f64:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009f66:	f002 f9b1 	bl	800c2cc <__mdiff>
 8009f6a:	4683      	mov	fp, r0
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	f43f ae72 	beq.w	8009c56 <_strtod_l+0x47e>
 8009f72:	2400      	movs	r4, #0
 8009f74:	68c3      	ldr	r3, [r0, #12]
 8009f76:	9904      	ldr	r1, [sp, #16]
 8009f78:	60c4      	str	r4, [r0, #12]
 8009f7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f7c:	f002 f98a 	bl	800c294 <__mcmp>
 8009f80:	42a0      	cmp	r0, r4
 8009f82:	da6b      	bge.n	800a05c <_strtod_l+0x884>
 8009f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f86:	ea53 0308 	orrs.w	r3, r3, r8
 8009f8a:	f040 8091 	bne.w	800a0b0 <_strtod_l+0x8d8>
 8009f8e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f040 808c 	bne.w	800a0b0 <_strtod_l+0x8d8>
 8009f98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f9c:	0d1b      	lsrs	r3, r3, #20
 8009f9e:	051b      	lsls	r3, r3, #20
 8009fa0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009fa4:	f240 8084 	bls.w	800a0b0 <_strtod_l+0x8d8>
 8009fa8:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009fac:	b91b      	cbnz	r3, 8009fb6 <_strtod_l+0x7de>
 8009fae:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	dd7c      	ble.n	800a0b0 <_strtod_l+0x8d8>
 8009fb6:	4659      	mov	r1, fp
 8009fb8:	2201      	movs	r2, #1
 8009fba:	4650      	mov	r0, sl
 8009fbc:	f002 f8fa 	bl	800c1b4 <__lshift>
 8009fc0:	9904      	ldr	r1, [sp, #16]
 8009fc2:	4683      	mov	fp, r0
 8009fc4:	f002 f966 	bl	800c294 <__mcmp>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	dd71      	ble.n	800a0b0 <_strtod_l+0x8d8>
 8009fcc:	9905      	ldr	r1, [sp, #20]
 8009fce:	464b      	mov	r3, r9
 8009fd0:	4a20      	ldr	r2, [pc, #128]	; (800a054 <_strtod_l+0x87c>)
 8009fd2:	2900      	cmp	r1, #0
 8009fd4:	f000 808c 	beq.w	800a0f0 <_strtod_l+0x918>
 8009fd8:	ea02 0109 	and.w	r1, r2, r9
 8009fdc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009fe0:	f300 8086 	bgt.w	800a0f0 <_strtod_l+0x918>
 8009fe4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009fe8:	f77f aeaa 	ble.w	8009d40 <_strtod_l+0x568>
 8009fec:	4640      	mov	r0, r8
 8009fee:	4649      	mov	r1, r9
 8009ff0:	4b19      	ldr	r3, [pc, #100]	; (800a058 <_strtod_l+0x880>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f7f6 fa70 	bl	80004d8 <__aeabi_dmul>
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	4303      	orrs	r3, r0
 8009ffc:	bf08      	it	eq
 8009ffe:	2322      	moveq	r3, #34	; 0x22
 800a000:	4680      	mov	r8, r0
 800a002:	4689      	mov	r9, r1
 800a004:	bf08      	it	eq
 800a006:	f8ca 3000 	streq.w	r3, [sl]
 800a00a:	e62f      	b.n	8009c6c <_strtod_l+0x494>
 800a00c:	f04f 32ff 	mov.w	r2, #4294967295
 800a010:	fa02 f303 	lsl.w	r3, r2, r3
 800a014:	ea03 0808 	and.w	r8, r3, r8
 800a018:	e6e0      	b.n	8009ddc <_strtod_l+0x604>
 800a01a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a01e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a022:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a026:	35e2      	adds	r5, #226	; 0xe2
 800a028:	fa07 f505 	lsl.w	r5, r7, r5
 800a02c:	970f      	str	r7, [sp, #60]	; 0x3c
 800a02e:	e747      	b.n	8009ec0 <_strtod_l+0x6e8>
 800a030:	2301      	movs	r3, #1
 800a032:	2500      	movs	r5, #0
 800a034:	930f      	str	r3, [sp, #60]	; 0x3c
 800a036:	e743      	b.n	8009ec0 <_strtod_l+0x6e8>
 800a038:	463a      	mov	r2, r7
 800a03a:	4650      	mov	r0, sl
 800a03c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a03e:	f002 f8b9 	bl	800c1b4 <__lshift>
 800a042:	901a      	str	r0, [sp, #104]	; 0x68
 800a044:	2800      	cmp	r0, #0
 800a046:	f47f af69 	bne.w	8009f1c <_strtod_l+0x744>
 800a04a:	e604      	b.n	8009c56 <_strtod_l+0x47e>
 800a04c:	0800d2d0 	.word	0x0800d2d0
 800a050:	fffffc02 	.word	0xfffffc02
 800a054:	7ff00000 	.word	0x7ff00000
 800a058:	39500000 	.word	0x39500000
 800a05c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a060:	d165      	bne.n	800a12e <_strtod_l+0x956>
 800a062:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a064:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a068:	b35a      	cbz	r2, 800a0c2 <_strtod_l+0x8ea>
 800a06a:	4a99      	ldr	r2, [pc, #612]	; (800a2d0 <_strtod_l+0xaf8>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d12b      	bne.n	800a0c8 <_strtod_l+0x8f0>
 800a070:	9b05      	ldr	r3, [sp, #20]
 800a072:	4641      	mov	r1, r8
 800a074:	b303      	cbz	r3, 800a0b8 <_strtod_l+0x8e0>
 800a076:	464a      	mov	r2, r9
 800a078:	4b96      	ldr	r3, [pc, #600]	; (800a2d4 <_strtod_l+0xafc>)
 800a07a:	4013      	ands	r3, r2
 800a07c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a080:	f04f 32ff 	mov.w	r2, #4294967295
 800a084:	d81b      	bhi.n	800a0be <_strtod_l+0x8e6>
 800a086:	0d1b      	lsrs	r3, r3, #20
 800a088:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a08c:	fa02 f303 	lsl.w	r3, r2, r3
 800a090:	4299      	cmp	r1, r3
 800a092:	d119      	bne.n	800a0c8 <_strtod_l+0x8f0>
 800a094:	4b90      	ldr	r3, [pc, #576]	; (800a2d8 <_strtod_l+0xb00>)
 800a096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a098:	429a      	cmp	r2, r3
 800a09a:	d102      	bne.n	800a0a2 <_strtod_l+0x8ca>
 800a09c:	3101      	adds	r1, #1
 800a09e:	f43f adda 	beq.w	8009c56 <_strtod_l+0x47e>
 800a0a2:	f04f 0800 	mov.w	r8, #0
 800a0a6:	4b8b      	ldr	r3, [pc, #556]	; (800a2d4 <_strtod_l+0xafc>)
 800a0a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0aa:	401a      	ands	r2, r3
 800a0ac:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a0b0:	9b05      	ldr	r3, [sp, #20]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d19a      	bne.n	8009fec <_strtod_l+0x814>
 800a0b6:	e5d9      	b.n	8009c6c <_strtod_l+0x494>
 800a0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0bc:	e7e8      	b.n	800a090 <_strtod_l+0x8b8>
 800a0be:	4613      	mov	r3, r2
 800a0c0:	e7e6      	b.n	800a090 <_strtod_l+0x8b8>
 800a0c2:	ea53 0308 	orrs.w	r3, r3, r8
 800a0c6:	d081      	beq.n	8009fcc <_strtod_l+0x7f4>
 800a0c8:	b1e5      	cbz	r5, 800a104 <_strtod_l+0x92c>
 800a0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0cc:	421d      	tst	r5, r3
 800a0ce:	d0ef      	beq.n	800a0b0 <_strtod_l+0x8d8>
 800a0d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	9a05      	ldr	r2, [sp, #20]
 800a0d8:	b1c3      	cbz	r3, 800a10c <_strtod_l+0x934>
 800a0da:	f7ff fb59 	bl	8009790 <sulp>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0e6:	f7f6 f841 	bl	800016c <__adddf3>
 800a0ea:	4680      	mov	r8, r0
 800a0ec:	4689      	mov	r9, r1
 800a0ee:	e7df      	b.n	800a0b0 <_strtod_l+0x8d8>
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a0f6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a0fa:	f04f 38ff 	mov.w	r8, #4294967295
 800a0fe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a102:	e7d5      	b.n	800a0b0 <_strtod_l+0x8d8>
 800a104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a106:	ea13 0f08 	tst.w	r3, r8
 800a10a:	e7e0      	b.n	800a0ce <_strtod_l+0x8f6>
 800a10c:	f7ff fb40 	bl	8009790 <sulp>
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
 800a114:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a118:	f7f6 f826 	bl	8000168 <__aeabi_dsub>
 800a11c:	2200      	movs	r2, #0
 800a11e:	2300      	movs	r3, #0
 800a120:	4680      	mov	r8, r0
 800a122:	4689      	mov	r9, r1
 800a124:	f7f6 fc40 	bl	80009a8 <__aeabi_dcmpeq>
 800a128:	2800      	cmp	r0, #0
 800a12a:	d0c1      	beq.n	800a0b0 <_strtod_l+0x8d8>
 800a12c:	e608      	b.n	8009d40 <_strtod_l+0x568>
 800a12e:	4658      	mov	r0, fp
 800a130:	9904      	ldr	r1, [sp, #16]
 800a132:	f002 fa2d 	bl	800c590 <__ratio>
 800a136:	2200      	movs	r2, #0
 800a138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a13c:	4606      	mov	r6, r0
 800a13e:	460f      	mov	r7, r1
 800a140:	f7f6 fc46 	bl	80009d0 <__aeabi_dcmple>
 800a144:	2800      	cmp	r0, #0
 800a146:	d070      	beq.n	800a22a <_strtod_l+0xa52>
 800a148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d042      	beq.n	800a1d4 <_strtod_l+0x9fc>
 800a14e:	2600      	movs	r6, #0
 800a150:	4f62      	ldr	r7, [pc, #392]	; (800a2dc <_strtod_l+0xb04>)
 800a152:	4d62      	ldr	r5, [pc, #392]	; (800a2dc <_strtod_l+0xb04>)
 800a154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a156:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a15a:	0d1b      	lsrs	r3, r3, #20
 800a15c:	051b      	lsls	r3, r3, #20
 800a15e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a162:	4b5f      	ldr	r3, [pc, #380]	; (800a2e0 <_strtod_l+0xb08>)
 800a164:	429a      	cmp	r2, r3
 800a166:	f040 80c3 	bne.w	800a2f0 <_strtod_l+0xb18>
 800a16a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a16c:	4640      	mov	r0, r8
 800a16e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a172:	4649      	mov	r1, r9
 800a174:	f002 f936 	bl	800c3e4 <__ulp>
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	4630      	mov	r0, r6
 800a17e:	4639      	mov	r1, r7
 800a180:	f7f6 f9aa 	bl	80004d8 <__aeabi_dmul>
 800a184:	4642      	mov	r2, r8
 800a186:	464b      	mov	r3, r9
 800a188:	f7f5 fff0 	bl	800016c <__adddf3>
 800a18c:	460b      	mov	r3, r1
 800a18e:	4951      	ldr	r1, [pc, #324]	; (800a2d4 <_strtod_l+0xafc>)
 800a190:	4a54      	ldr	r2, [pc, #336]	; (800a2e4 <_strtod_l+0xb0c>)
 800a192:	4019      	ands	r1, r3
 800a194:	4291      	cmp	r1, r2
 800a196:	4680      	mov	r8, r0
 800a198:	d95d      	bls.n	800a256 <_strtod_l+0xa7e>
 800a19a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a19c:	4b4e      	ldr	r3, [pc, #312]	; (800a2d8 <_strtod_l+0xb00>)
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d103      	bne.n	800a1aa <_strtod_l+0x9d2>
 800a1a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	f43f ad56 	beq.w	8009c56 <_strtod_l+0x47e>
 800a1aa:	f04f 38ff 	mov.w	r8, #4294967295
 800a1ae:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a2d8 <_strtod_l+0xb00>
 800a1b2:	4650      	mov	r0, sl
 800a1b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a1b6:	f001 fde5 	bl	800bd84 <_Bfree>
 800a1ba:	4650      	mov	r0, sl
 800a1bc:	9906      	ldr	r1, [sp, #24]
 800a1be:	f001 fde1 	bl	800bd84 <_Bfree>
 800a1c2:	4650      	mov	r0, sl
 800a1c4:	9904      	ldr	r1, [sp, #16]
 800a1c6:	f001 fddd 	bl	800bd84 <_Bfree>
 800a1ca:	4659      	mov	r1, fp
 800a1cc:	4650      	mov	r0, sl
 800a1ce:	f001 fdd9 	bl	800bd84 <_Bfree>
 800a1d2:	e627      	b.n	8009e24 <_strtod_l+0x64c>
 800a1d4:	f1b8 0f00 	cmp.w	r8, #0
 800a1d8:	d119      	bne.n	800a20e <_strtod_l+0xa36>
 800a1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1e0:	b9e3      	cbnz	r3, 800a21c <_strtod_l+0xa44>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	4b3c      	ldr	r3, [pc, #240]	; (800a2dc <_strtod_l+0xb04>)
 800a1ea:	f7f6 fbe7 	bl	80009bc <__aeabi_dcmplt>
 800a1ee:	b9c8      	cbnz	r0, 800a224 <_strtod_l+0xa4c>
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	4639      	mov	r1, r7
 800a1f6:	4b3c      	ldr	r3, [pc, #240]	; (800a2e8 <_strtod_l+0xb10>)
 800a1f8:	f7f6 f96e 	bl	80004d8 <__aeabi_dmul>
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	460d      	mov	r5, r1
 800a200:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a204:	9416      	str	r4, [sp, #88]	; 0x58
 800a206:	9317      	str	r3, [sp, #92]	; 0x5c
 800a208:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a20c:	e7a2      	b.n	800a154 <_strtod_l+0x97c>
 800a20e:	f1b8 0f01 	cmp.w	r8, #1
 800a212:	d103      	bne.n	800a21c <_strtod_l+0xa44>
 800a214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a216:	2b00      	cmp	r3, #0
 800a218:	f43f ad92 	beq.w	8009d40 <_strtod_l+0x568>
 800a21c:	2600      	movs	r6, #0
 800a21e:	2400      	movs	r4, #0
 800a220:	4f32      	ldr	r7, [pc, #200]	; (800a2ec <_strtod_l+0xb14>)
 800a222:	e796      	b.n	800a152 <_strtod_l+0x97a>
 800a224:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a226:	4d30      	ldr	r5, [pc, #192]	; (800a2e8 <_strtod_l+0xb10>)
 800a228:	e7ea      	b.n	800a200 <_strtod_l+0xa28>
 800a22a:	4b2f      	ldr	r3, [pc, #188]	; (800a2e8 <_strtod_l+0xb10>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	4630      	mov	r0, r6
 800a230:	4639      	mov	r1, r7
 800a232:	f7f6 f951 	bl	80004d8 <__aeabi_dmul>
 800a236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a238:	4604      	mov	r4, r0
 800a23a:	460d      	mov	r5, r1
 800a23c:	b933      	cbnz	r3, 800a24c <_strtod_l+0xa74>
 800a23e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a242:	9010      	str	r0, [sp, #64]	; 0x40
 800a244:	9311      	str	r3, [sp, #68]	; 0x44
 800a246:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a24a:	e783      	b.n	800a154 <_strtod_l+0x97c>
 800a24c:	4602      	mov	r2, r0
 800a24e:	460b      	mov	r3, r1
 800a250:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a254:	e7f7      	b.n	800a246 <_strtod_l+0xa6e>
 800a256:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a25a:	9b05      	ldr	r3, [sp, #20]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1a8      	bne.n	800a1b2 <_strtod_l+0x9da>
 800a260:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a266:	0d1b      	lsrs	r3, r3, #20
 800a268:	051b      	lsls	r3, r3, #20
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d1a1      	bne.n	800a1b2 <_strtod_l+0x9da>
 800a26e:	4620      	mov	r0, r4
 800a270:	4629      	mov	r1, r5
 800a272:	f7f6 fc79 	bl	8000b68 <__aeabi_d2lz>
 800a276:	f7f6 f901 	bl	800047c <__aeabi_l2d>
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	4620      	mov	r0, r4
 800a280:	4629      	mov	r1, r5
 800a282:	f7f5 ff71 	bl	8000168 <__aeabi_dsub>
 800a286:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a288:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a28c:	ea43 0308 	orr.w	r3, r3, r8
 800a290:	4313      	orrs	r3, r2
 800a292:	4604      	mov	r4, r0
 800a294:	460d      	mov	r5, r1
 800a296:	d066      	beq.n	800a366 <_strtod_l+0xb8e>
 800a298:	a309      	add	r3, pc, #36	; (adr r3, 800a2c0 <_strtod_l+0xae8>)
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	f7f6 fb8d 	bl	80009bc <__aeabi_dcmplt>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	f47f ace2 	bne.w	8009c6c <_strtod_l+0x494>
 800a2a8:	a307      	add	r3, pc, #28	; (adr r3, 800a2c8 <_strtod_l+0xaf0>)
 800a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	f7f6 fba1 	bl	80009f8 <__aeabi_dcmpgt>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	f43f af7b 	beq.w	800a1b2 <_strtod_l+0x9da>
 800a2bc:	e4d6      	b.n	8009c6c <_strtod_l+0x494>
 800a2be:	bf00      	nop
 800a2c0:	94a03595 	.word	0x94a03595
 800a2c4:	3fdfffff 	.word	0x3fdfffff
 800a2c8:	35afe535 	.word	0x35afe535
 800a2cc:	3fe00000 	.word	0x3fe00000
 800a2d0:	000fffff 	.word	0x000fffff
 800a2d4:	7ff00000 	.word	0x7ff00000
 800a2d8:	7fefffff 	.word	0x7fefffff
 800a2dc:	3ff00000 	.word	0x3ff00000
 800a2e0:	7fe00000 	.word	0x7fe00000
 800a2e4:	7c9fffff 	.word	0x7c9fffff
 800a2e8:	3fe00000 	.word	0x3fe00000
 800a2ec:	bff00000 	.word	0xbff00000
 800a2f0:	9b05      	ldr	r3, [sp, #20]
 800a2f2:	b313      	cbz	r3, 800a33a <_strtod_l+0xb62>
 800a2f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a2fa:	d81e      	bhi.n	800a33a <_strtod_l+0xb62>
 800a2fc:	a326      	add	r3, pc, #152	; (adr r3, 800a398 <_strtod_l+0xbc0>)
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	4620      	mov	r0, r4
 800a304:	4629      	mov	r1, r5
 800a306:	f7f6 fb63 	bl	80009d0 <__aeabi_dcmple>
 800a30a:	b190      	cbz	r0, 800a332 <_strtod_l+0xb5a>
 800a30c:	4629      	mov	r1, r5
 800a30e:	4620      	mov	r0, r4
 800a310:	f7f6 fbba 	bl	8000a88 <__aeabi_d2uiz>
 800a314:	2801      	cmp	r0, #1
 800a316:	bf38      	it	cc
 800a318:	2001      	movcc	r0, #1
 800a31a:	f7f6 f863 	bl	80003e4 <__aeabi_ui2d>
 800a31e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a320:	4604      	mov	r4, r0
 800a322:	460d      	mov	r5, r1
 800a324:	b9d3      	cbnz	r3, 800a35c <_strtod_l+0xb84>
 800a326:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a32a:	9012      	str	r0, [sp, #72]	; 0x48
 800a32c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a32e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a332:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a334:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a338:	1a9f      	subs	r7, r3, r2
 800a33a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a33e:	f002 f851 	bl	800c3e4 <__ulp>
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	4630      	mov	r0, r6
 800a348:	4639      	mov	r1, r7
 800a34a:	f7f6 f8c5 	bl	80004d8 <__aeabi_dmul>
 800a34e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a352:	f7f5 ff0b 	bl	800016c <__adddf3>
 800a356:	4680      	mov	r8, r0
 800a358:	4689      	mov	r9, r1
 800a35a:	e77e      	b.n	800a25a <_strtod_l+0xa82>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a364:	e7e3      	b.n	800a32e <_strtod_l+0xb56>
 800a366:	a30e      	add	r3, pc, #56	; (adr r3, 800a3a0 <_strtod_l+0xbc8>)
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	f7f6 fb26 	bl	80009bc <__aeabi_dcmplt>
 800a370:	e7a1      	b.n	800a2b6 <_strtod_l+0xade>
 800a372:	2300      	movs	r3, #0
 800a374:	930a      	str	r3, [sp, #40]	; 0x28
 800a376:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a378:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a37a:	6013      	str	r3, [r2, #0]
 800a37c:	f7ff ba71 	b.w	8009862 <_strtod_l+0x8a>
 800a380:	2a65      	cmp	r2, #101	; 0x65
 800a382:	f43f ab63 	beq.w	8009a4c <_strtod_l+0x274>
 800a386:	2a45      	cmp	r2, #69	; 0x45
 800a388:	f43f ab60 	beq.w	8009a4c <_strtod_l+0x274>
 800a38c:	2301      	movs	r3, #1
 800a38e:	f7ff bb95 	b.w	8009abc <_strtod_l+0x2e4>
 800a392:	bf00      	nop
 800a394:	f3af 8000 	nop.w
 800a398:	ffc00000 	.word	0xffc00000
 800a39c:	41dfffff 	.word	0x41dfffff
 800a3a0:	94a03595 	.word	0x94a03595
 800a3a4:	3fcfffff 	.word	0x3fcfffff

0800a3a8 <_strtod_r>:
 800a3a8:	4b01      	ldr	r3, [pc, #4]	; (800a3b0 <_strtod_r+0x8>)
 800a3aa:	f7ff ba15 	b.w	80097d8 <_strtod_l>
 800a3ae:	bf00      	nop
 800a3b0:	200002f4 	.word	0x200002f4

0800a3b4 <_strtol_l.constprop.0>:
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3ba:	4680      	mov	r8, r0
 800a3bc:	d001      	beq.n	800a3c2 <_strtol_l.constprop.0+0xe>
 800a3be:	2b24      	cmp	r3, #36	; 0x24
 800a3c0:	d906      	bls.n	800a3d0 <_strtol_l.constprop.0+0x1c>
 800a3c2:	f7fe fa1b 	bl	80087fc <__errno>
 800a3c6:	2316      	movs	r3, #22
 800a3c8:	6003      	str	r3, [r0, #0]
 800a3ca:	2000      	movs	r0, #0
 800a3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3d0:	460d      	mov	r5, r1
 800a3d2:	4f35      	ldr	r7, [pc, #212]	; (800a4a8 <_strtol_l.constprop.0+0xf4>)
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3da:	5de6      	ldrb	r6, [r4, r7]
 800a3dc:	f016 0608 	ands.w	r6, r6, #8
 800a3e0:	d1f8      	bne.n	800a3d4 <_strtol_l.constprop.0+0x20>
 800a3e2:	2c2d      	cmp	r4, #45	; 0x2d
 800a3e4:	d12f      	bne.n	800a446 <_strtol_l.constprop.0+0x92>
 800a3e6:	2601      	movs	r6, #1
 800a3e8:	782c      	ldrb	r4, [r5, #0]
 800a3ea:	1c85      	adds	r5, r0, #2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d057      	beq.n	800a4a0 <_strtol_l.constprop.0+0xec>
 800a3f0:	2b10      	cmp	r3, #16
 800a3f2:	d109      	bne.n	800a408 <_strtol_l.constprop.0+0x54>
 800a3f4:	2c30      	cmp	r4, #48	; 0x30
 800a3f6:	d107      	bne.n	800a408 <_strtol_l.constprop.0+0x54>
 800a3f8:	7828      	ldrb	r0, [r5, #0]
 800a3fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a3fe:	2858      	cmp	r0, #88	; 0x58
 800a400:	d149      	bne.n	800a496 <_strtol_l.constprop.0+0xe2>
 800a402:	2310      	movs	r3, #16
 800a404:	786c      	ldrb	r4, [r5, #1]
 800a406:	3502      	adds	r5, #2
 800a408:	2700      	movs	r7, #0
 800a40a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a40e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a412:	fbbe f9f3 	udiv	r9, lr, r3
 800a416:	4638      	mov	r0, r7
 800a418:	fb03 ea19 	mls	sl, r3, r9, lr
 800a41c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a420:	f1bc 0f09 	cmp.w	ip, #9
 800a424:	d814      	bhi.n	800a450 <_strtol_l.constprop.0+0x9c>
 800a426:	4664      	mov	r4, ip
 800a428:	42a3      	cmp	r3, r4
 800a42a:	dd22      	ble.n	800a472 <_strtol_l.constprop.0+0xbe>
 800a42c:	2f00      	cmp	r7, #0
 800a42e:	db1d      	blt.n	800a46c <_strtol_l.constprop.0+0xb8>
 800a430:	4581      	cmp	r9, r0
 800a432:	d31b      	bcc.n	800a46c <_strtol_l.constprop.0+0xb8>
 800a434:	d101      	bne.n	800a43a <_strtol_l.constprop.0+0x86>
 800a436:	45a2      	cmp	sl, r4
 800a438:	db18      	blt.n	800a46c <_strtol_l.constprop.0+0xb8>
 800a43a:	2701      	movs	r7, #1
 800a43c:	fb00 4003 	mla	r0, r0, r3, r4
 800a440:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a444:	e7ea      	b.n	800a41c <_strtol_l.constprop.0+0x68>
 800a446:	2c2b      	cmp	r4, #43	; 0x2b
 800a448:	bf04      	itt	eq
 800a44a:	782c      	ldrbeq	r4, [r5, #0]
 800a44c:	1c85      	addeq	r5, r0, #2
 800a44e:	e7cd      	b.n	800a3ec <_strtol_l.constprop.0+0x38>
 800a450:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a454:	f1bc 0f19 	cmp.w	ip, #25
 800a458:	d801      	bhi.n	800a45e <_strtol_l.constprop.0+0xaa>
 800a45a:	3c37      	subs	r4, #55	; 0x37
 800a45c:	e7e4      	b.n	800a428 <_strtol_l.constprop.0+0x74>
 800a45e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a462:	f1bc 0f19 	cmp.w	ip, #25
 800a466:	d804      	bhi.n	800a472 <_strtol_l.constprop.0+0xbe>
 800a468:	3c57      	subs	r4, #87	; 0x57
 800a46a:	e7dd      	b.n	800a428 <_strtol_l.constprop.0+0x74>
 800a46c:	f04f 37ff 	mov.w	r7, #4294967295
 800a470:	e7e6      	b.n	800a440 <_strtol_l.constprop.0+0x8c>
 800a472:	2f00      	cmp	r7, #0
 800a474:	da07      	bge.n	800a486 <_strtol_l.constprop.0+0xd2>
 800a476:	2322      	movs	r3, #34	; 0x22
 800a478:	4670      	mov	r0, lr
 800a47a:	f8c8 3000 	str.w	r3, [r8]
 800a47e:	2a00      	cmp	r2, #0
 800a480:	d0a4      	beq.n	800a3cc <_strtol_l.constprop.0+0x18>
 800a482:	1e69      	subs	r1, r5, #1
 800a484:	e005      	b.n	800a492 <_strtol_l.constprop.0+0xde>
 800a486:	b106      	cbz	r6, 800a48a <_strtol_l.constprop.0+0xd6>
 800a488:	4240      	negs	r0, r0
 800a48a:	2a00      	cmp	r2, #0
 800a48c:	d09e      	beq.n	800a3cc <_strtol_l.constprop.0+0x18>
 800a48e:	2f00      	cmp	r7, #0
 800a490:	d1f7      	bne.n	800a482 <_strtol_l.constprop.0+0xce>
 800a492:	6011      	str	r1, [r2, #0]
 800a494:	e79a      	b.n	800a3cc <_strtol_l.constprop.0+0x18>
 800a496:	2430      	movs	r4, #48	; 0x30
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1b5      	bne.n	800a408 <_strtol_l.constprop.0+0x54>
 800a49c:	2308      	movs	r3, #8
 800a49e:	e7b3      	b.n	800a408 <_strtol_l.constprop.0+0x54>
 800a4a0:	2c30      	cmp	r4, #48	; 0x30
 800a4a2:	d0a9      	beq.n	800a3f8 <_strtol_l.constprop.0+0x44>
 800a4a4:	230a      	movs	r3, #10
 800a4a6:	e7af      	b.n	800a408 <_strtol_l.constprop.0+0x54>
 800a4a8:	0800d2f9 	.word	0x0800d2f9

0800a4ac <_strtol_r>:
 800a4ac:	f7ff bf82 	b.w	800a3b4 <_strtol_l.constprop.0>

0800a4b0 <quorem>:
 800a4b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b4:	6903      	ldr	r3, [r0, #16]
 800a4b6:	690c      	ldr	r4, [r1, #16]
 800a4b8:	4607      	mov	r7, r0
 800a4ba:	42a3      	cmp	r3, r4
 800a4bc:	f2c0 8082 	blt.w	800a5c4 <quorem+0x114>
 800a4c0:	3c01      	subs	r4, #1
 800a4c2:	f100 0514 	add.w	r5, r0, #20
 800a4c6:	f101 0814 	add.w	r8, r1, #20
 800a4ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4ce:	9301      	str	r3, [sp, #4]
 800a4d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4e8:	d331      	bcc.n	800a54e <quorem+0x9e>
 800a4ea:	f04f 0e00 	mov.w	lr, #0
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	46ac      	mov	ip, r5
 800a4f2:	46f2      	mov	sl, lr
 800a4f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4f8:	b293      	uxth	r3, r2
 800a4fa:	fb06 e303 	mla	r3, r6, r3, lr
 800a4fe:	0c12      	lsrs	r2, r2, #16
 800a500:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a504:	b29b      	uxth	r3, r3
 800a506:	fb06 e202 	mla	r2, r6, r2, lr
 800a50a:	ebaa 0303 	sub.w	r3, sl, r3
 800a50e:	f8dc a000 	ldr.w	sl, [ip]
 800a512:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a516:	fa1f fa8a 	uxth.w	sl, sl
 800a51a:	4453      	add	r3, sl
 800a51c:	f8dc a000 	ldr.w	sl, [ip]
 800a520:	b292      	uxth	r2, r2
 800a522:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a526:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a530:	4581      	cmp	r9, r0
 800a532:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a536:	f84c 3b04 	str.w	r3, [ip], #4
 800a53a:	d2db      	bcs.n	800a4f4 <quorem+0x44>
 800a53c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a540:	b92b      	cbnz	r3, 800a54e <quorem+0x9e>
 800a542:	9b01      	ldr	r3, [sp, #4]
 800a544:	3b04      	subs	r3, #4
 800a546:	429d      	cmp	r5, r3
 800a548:	461a      	mov	r2, r3
 800a54a:	d32f      	bcc.n	800a5ac <quorem+0xfc>
 800a54c:	613c      	str	r4, [r7, #16]
 800a54e:	4638      	mov	r0, r7
 800a550:	f001 fea0 	bl	800c294 <__mcmp>
 800a554:	2800      	cmp	r0, #0
 800a556:	db25      	blt.n	800a5a4 <quorem+0xf4>
 800a558:	4628      	mov	r0, r5
 800a55a:	f04f 0c00 	mov.w	ip, #0
 800a55e:	3601      	adds	r6, #1
 800a560:	f858 1b04 	ldr.w	r1, [r8], #4
 800a564:	f8d0 e000 	ldr.w	lr, [r0]
 800a568:	b28b      	uxth	r3, r1
 800a56a:	ebac 0303 	sub.w	r3, ip, r3
 800a56e:	fa1f f28e 	uxth.w	r2, lr
 800a572:	4413      	add	r3, r2
 800a574:	0c0a      	lsrs	r2, r1, #16
 800a576:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a57a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a57e:	b29b      	uxth	r3, r3
 800a580:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a584:	45c1      	cmp	r9, r8
 800a586:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a58a:	f840 3b04 	str.w	r3, [r0], #4
 800a58e:	d2e7      	bcs.n	800a560 <quorem+0xb0>
 800a590:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a594:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a598:	b922      	cbnz	r2, 800a5a4 <quorem+0xf4>
 800a59a:	3b04      	subs	r3, #4
 800a59c:	429d      	cmp	r5, r3
 800a59e:	461a      	mov	r2, r3
 800a5a0:	d30a      	bcc.n	800a5b8 <quorem+0x108>
 800a5a2:	613c      	str	r4, [r7, #16]
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	b003      	add	sp, #12
 800a5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ac:	6812      	ldr	r2, [r2, #0]
 800a5ae:	3b04      	subs	r3, #4
 800a5b0:	2a00      	cmp	r2, #0
 800a5b2:	d1cb      	bne.n	800a54c <quorem+0x9c>
 800a5b4:	3c01      	subs	r4, #1
 800a5b6:	e7c6      	b.n	800a546 <quorem+0x96>
 800a5b8:	6812      	ldr	r2, [r2, #0]
 800a5ba:	3b04      	subs	r3, #4
 800a5bc:	2a00      	cmp	r2, #0
 800a5be:	d1f0      	bne.n	800a5a2 <quorem+0xf2>
 800a5c0:	3c01      	subs	r4, #1
 800a5c2:	e7eb      	b.n	800a59c <quorem+0xec>
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	e7ee      	b.n	800a5a6 <quorem+0xf6>

0800a5c8 <_dtoa_r>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	4616      	mov	r6, r2
 800a5ce:	461f      	mov	r7, r3
 800a5d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a5d2:	b099      	sub	sp, #100	; 0x64
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a5da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a5de:	b974      	cbnz	r4, 800a5fe <_dtoa_r+0x36>
 800a5e0:	2010      	movs	r0, #16
 800a5e2:	f7fe f939 	bl	8008858 <malloc>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	6268      	str	r0, [r5, #36]	; 0x24
 800a5ea:	b920      	cbnz	r0, 800a5f6 <_dtoa_r+0x2e>
 800a5ec:	21ea      	movs	r1, #234	; 0xea
 800a5ee:	4ba8      	ldr	r3, [pc, #672]	; (800a890 <_dtoa_r+0x2c8>)
 800a5f0:	48a8      	ldr	r0, [pc, #672]	; (800a894 <_dtoa_r+0x2cc>)
 800a5f2:	f002 fa2b 	bl	800ca4c <__assert_func>
 800a5f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5fa:	6004      	str	r4, [r0, #0]
 800a5fc:	60c4      	str	r4, [r0, #12]
 800a5fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a600:	6819      	ldr	r1, [r3, #0]
 800a602:	b151      	cbz	r1, 800a61a <_dtoa_r+0x52>
 800a604:	685a      	ldr	r2, [r3, #4]
 800a606:	2301      	movs	r3, #1
 800a608:	4093      	lsls	r3, r2
 800a60a:	604a      	str	r2, [r1, #4]
 800a60c:	608b      	str	r3, [r1, #8]
 800a60e:	4628      	mov	r0, r5
 800a610:	f001 fbb8 	bl	800bd84 <_Bfree>
 800a614:	2200      	movs	r2, #0
 800a616:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a618:	601a      	str	r2, [r3, #0]
 800a61a:	1e3b      	subs	r3, r7, #0
 800a61c:	bfaf      	iteee	ge
 800a61e:	2300      	movge	r3, #0
 800a620:	2201      	movlt	r2, #1
 800a622:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a626:	9305      	strlt	r3, [sp, #20]
 800a628:	bfa8      	it	ge
 800a62a:	f8c8 3000 	strge.w	r3, [r8]
 800a62e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a632:	4b99      	ldr	r3, [pc, #612]	; (800a898 <_dtoa_r+0x2d0>)
 800a634:	bfb8      	it	lt
 800a636:	f8c8 2000 	strlt.w	r2, [r8]
 800a63a:	ea33 0309 	bics.w	r3, r3, r9
 800a63e:	d119      	bne.n	800a674 <_dtoa_r+0xac>
 800a640:	f242 730f 	movw	r3, #9999	; 0x270f
 800a644:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a64c:	4333      	orrs	r3, r6
 800a64e:	f000 857f 	beq.w	800b150 <_dtoa_r+0xb88>
 800a652:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a654:	b953      	cbnz	r3, 800a66c <_dtoa_r+0xa4>
 800a656:	4b91      	ldr	r3, [pc, #580]	; (800a89c <_dtoa_r+0x2d4>)
 800a658:	e022      	b.n	800a6a0 <_dtoa_r+0xd8>
 800a65a:	4b91      	ldr	r3, [pc, #580]	; (800a8a0 <_dtoa_r+0x2d8>)
 800a65c:	9303      	str	r3, [sp, #12]
 800a65e:	3308      	adds	r3, #8
 800a660:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a662:	6013      	str	r3, [r2, #0]
 800a664:	9803      	ldr	r0, [sp, #12]
 800a666:	b019      	add	sp, #100	; 0x64
 800a668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a66c:	4b8b      	ldr	r3, [pc, #556]	; (800a89c <_dtoa_r+0x2d4>)
 800a66e:	9303      	str	r3, [sp, #12]
 800a670:	3303      	adds	r3, #3
 800a672:	e7f5      	b.n	800a660 <_dtoa_r+0x98>
 800a674:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a678:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a67c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a680:	2200      	movs	r2, #0
 800a682:	2300      	movs	r3, #0
 800a684:	f7f6 f990 	bl	80009a8 <__aeabi_dcmpeq>
 800a688:	4680      	mov	r8, r0
 800a68a:	b158      	cbz	r0, 800a6a4 <_dtoa_r+0xdc>
 800a68c:	2301      	movs	r3, #1
 800a68e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a690:	6013      	str	r3, [r2, #0]
 800a692:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a694:	2b00      	cmp	r3, #0
 800a696:	f000 8558 	beq.w	800b14a <_dtoa_r+0xb82>
 800a69a:	4882      	ldr	r0, [pc, #520]	; (800a8a4 <_dtoa_r+0x2dc>)
 800a69c:	6018      	str	r0, [r3, #0]
 800a69e:	1e43      	subs	r3, r0, #1
 800a6a0:	9303      	str	r3, [sp, #12]
 800a6a2:	e7df      	b.n	800a664 <_dtoa_r+0x9c>
 800a6a4:	ab16      	add	r3, sp, #88	; 0x58
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	ab17      	add	r3, sp, #92	; 0x5c
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a6b2:	f001 ff11 	bl	800c4d8 <__d2b>
 800a6b6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a6ba:	4683      	mov	fp, r0
 800a6bc:	2c00      	cmp	r4, #0
 800a6be:	d07f      	beq.n	800a7c0 <_dtoa_r+0x1f8>
 800a6c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6c6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a6ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a6d2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a6d6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a6da:	2200      	movs	r2, #0
 800a6dc:	4b72      	ldr	r3, [pc, #456]	; (800a8a8 <_dtoa_r+0x2e0>)
 800a6de:	f7f5 fd43 	bl	8000168 <__aeabi_dsub>
 800a6e2:	a365      	add	r3, pc, #404	; (adr r3, 800a878 <_dtoa_r+0x2b0>)
 800a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e8:	f7f5 fef6 	bl	80004d8 <__aeabi_dmul>
 800a6ec:	a364      	add	r3, pc, #400	; (adr r3, 800a880 <_dtoa_r+0x2b8>)
 800a6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f2:	f7f5 fd3b 	bl	800016c <__adddf3>
 800a6f6:	4606      	mov	r6, r0
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	460f      	mov	r7, r1
 800a6fc:	f7f5 fe82 	bl	8000404 <__aeabi_i2d>
 800a700:	a361      	add	r3, pc, #388	; (adr r3, 800a888 <_dtoa_r+0x2c0>)
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	f7f5 fee7 	bl	80004d8 <__aeabi_dmul>
 800a70a:	4602      	mov	r2, r0
 800a70c:	460b      	mov	r3, r1
 800a70e:	4630      	mov	r0, r6
 800a710:	4639      	mov	r1, r7
 800a712:	f7f5 fd2b 	bl	800016c <__adddf3>
 800a716:	4606      	mov	r6, r0
 800a718:	460f      	mov	r7, r1
 800a71a:	f7f6 f98d 	bl	8000a38 <__aeabi_d2iz>
 800a71e:	2200      	movs	r2, #0
 800a720:	4682      	mov	sl, r0
 800a722:	2300      	movs	r3, #0
 800a724:	4630      	mov	r0, r6
 800a726:	4639      	mov	r1, r7
 800a728:	f7f6 f948 	bl	80009bc <__aeabi_dcmplt>
 800a72c:	b148      	cbz	r0, 800a742 <_dtoa_r+0x17a>
 800a72e:	4650      	mov	r0, sl
 800a730:	f7f5 fe68 	bl	8000404 <__aeabi_i2d>
 800a734:	4632      	mov	r2, r6
 800a736:	463b      	mov	r3, r7
 800a738:	f7f6 f936 	bl	80009a8 <__aeabi_dcmpeq>
 800a73c:	b908      	cbnz	r0, 800a742 <_dtoa_r+0x17a>
 800a73e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a742:	f1ba 0f16 	cmp.w	sl, #22
 800a746:	d858      	bhi.n	800a7fa <_dtoa_r+0x232>
 800a748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a74c:	4b57      	ldr	r3, [pc, #348]	; (800a8ac <_dtoa_r+0x2e4>)
 800a74e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	f7f6 f931 	bl	80009bc <__aeabi_dcmplt>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d04f      	beq.n	800a7fe <_dtoa_r+0x236>
 800a75e:	2300      	movs	r3, #0
 800a760:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a764:	930f      	str	r3, [sp, #60]	; 0x3c
 800a766:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a768:	1b1c      	subs	r4, r3, r4
 800a76a:	1e63      	subs	r3, r4, #1
 800a76c:	9309      	str	r3, [sp, #36]	; 0x24
 800a76e:	bf49      	itett	mi
 800a770:	f1c4 0301 	rsbmi	r3, r4, #1
 800a774:	2300      	movpl	r3, #0
 800a776:	9306      	strmi	r3, [sp, #24]
 800a778:	2300      	movmi	r3, #0
 800a77a:	bf54      	ite	pl
 800a77c:	9306      	strpl	r3, [sp, #24]
 800a77e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a780:	f1ba 0f00 	cmp.w	sl, #0
 800a784:	db3d      	blt.n	800a802 <_dtoa_r+0x23a>
 800a786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a788:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a78c:	4453      	add	r3, sl
 800a78e:	9309      	str	r3, [sp, #36]	; 0x24
 800a790:	2300      	movs	r3, #0
 800a792:	930a      	str	r3, [sp, #40]	; 0x28
 800a794:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a796:	2b09      	cmp	r3, #9
 800a798:	f200 808c 	bhi.w	800a8b4 <_dtoa_r+0x2ec>
 800a79c:	2b05      	cmp	r3, #5
 800a79e:	bfc4      	itt	gt
 800a7a0:	3b04      	subgt	r3, #4
 800a7a2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a7a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7a6:	bfc8      	it	gt
 800a7a8:	2400      	movgt	r4, #0
 800a7aa:	f1a3 0302 	sub.w	r3, r3, #2
 800a7ae:	bfd8      	it	le
 800a7b0:	2401      	movle	r4, #1
 800a7b2:	2b03      	cmp	r3, #3
 800a7b4:	f200 808a 	bhi.w	800a8cc <_dtoa_r+0x304>
 800a7b8:	e8df f003 	tbb	[pc, r3]
 800a7bc:	5b4d4f2d 	.word	0x5b4d4f2d
 800a7c0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a7c4:	441c      	add	r4, r3
 800a7c6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a7ca:	2b20      	cmp	r3, #32
 800a7cc:	bfc3      	ittte	gt
 800a7ce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7d2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a7d6:	fa09 f303 	lslgt.w	r3, r9, r3
 800a7da:	f1c3 0320 	rsble	r3, r3, #32
 800a7de:	bfc6      	itte	gt
 800a7e0:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a7e4:	4318      	orrgt	r0, r3
 800a7e6:	fa06 f003 	lslle.w	r0, r6, r3
 800a7ea:	f7f5 fdfb 	bl	80003e4 <__aeabi_ui2d>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a7f4:	3c01      	subs	r4, #1
 800a7f6:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7f8:	e76f      	b.n	800a6da <_dtoa_r+0x112>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e7b2      	b.n	800a764 <_dtoa_r+0x19c>
 800a7fe:	900f      	str	r0, [sp, #60]	; 0x3c
 800a800:	e7b1      	b.n	800a766 <_dtoa_r+0x19e>
 800a802:	9b06      	ldr	r3, [sp, #24]
 800a804:	eba3 030a 	sub.w	r3, r3, sl
 800a808:	9306      	str	r3, [sp, #24]
 800a80a:	f1ca 0300 	rsb	r3, sl, #0
 800a80e:	930a      	str	r3, [sp, #40]	; 0x28
 800a810:	2300      	movs	r3, #0
 800a812:	930e      	str	r3, [sp, #56]	; 0x38
 800a814:	e7be      	b.n	800a794 <_dtoa_r+0x1cc>
 800a816:	2300      	movs	r3, #0
 800a818:	930b      	str	r3, [sp, #44]	; 0x2c
 800a81a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	dc58      	bgt.n	800a8d2 <_dtoa_r+0x30a>
 800a820:	f04f 0901 	mov.w	r9, #1
 800a824:	464b      	mov	r3, r9
 800a826:	f8cd 9020 	str.w	r9, [sp, #32]
 800a82a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a82e:	2200      	movs	r2, #0
 800a830:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a832:	6042      	str	r2, [r0, #4]
 800a834:	2204      	movs	r2, #4
 800a836:	f102 0614 	add.w	r6, r2, #20
 800a83a:	429e      	cmp	r6, r3
 800a83c:	6841      	ldr	r1, [r0, #4]
 800a83e:	d94e      	bls.n	800a8de <_dtoa_r+0x316>
 800a840:	4628      	mov	r0, r5
 800a842:	f001 fa5f 	bl	800bd04 <_Balloc>
 800a846:	9003      	str	r0, [sp, #12]
 800a848:	2800      	cmp	r0, #0
 800a84a:	d14c      	bne.n	800a8e6 <_dtoa_r+0x31e>
 800a84c:	4602      	mov	r2, r0
 800a84e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a852:	4b17      	ldr	r3, [pc, #92]	; (800a8b0 <_dtoa_r+0x2e8>)
 800a854:	e6cc      	b.n	800a5f0 <_dtoa_r+0x28>
 800a856:	2301      	movs	r3, #1
 800a858:	e7de      	b.n	800a818 <_dtoa_r+0x250>
 800a85a:	2300      	movs	r3, #0
 800a85c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a85e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a860:	eb0a 0903 	add.w	r9, sl, r3
 800a864:	f109 0301 	add.w	r3, r9, #1
 800a868:	2b01      	cmp	r3, #1
 800a86a:	9308      	str	r3, [sp, #32]
 800a86c:	bfb8      	it	lt
 800a86e:	2301      	movlt	r3, #1
 800a870:	e7dd      	b.n	800a82e <_dtoa_r+0x266>
 800a872:	2301      	movs	r3, #1
 800a874:	e7f2      	b.n	800a85c <_dtoa_r+0x294>
 800a876:	bf00      	nop
 800a878:	636f4361 	.word	0x636f4361
 800a87c:	3fd287a7 	.word	0x3fd287a7
 800a880:	8b60c8b3 	.word	0x8b60c8b3
 800a884:	3fc68a28 	.word	0x3fc68a28
 800a888:	509f79fb 	.word	0x509f79fb
 800a88c:	3fd34413 	.word	0x3fd34413
 800a890:	0800d406 	.word	0x0800d406
 800a894:	0800d41d 	.word	0x0800d41d
 800a898:	7ff00000 	.word	0x7ff00000
 800a89c:	0800d402 	.word	0x0800d402
 800a8a0:	0800d3f9 	.word	0x0800d3f9
 800a8a4:	0800d279 	.word	0x0800d279
 800a8a8:	3ff80000 	.word	0x3ff80000
 800a8ac:	0800d5f0 	.word	0x0800d5f0
 800a8b0:	0800d478 	.word	0x0800d478
 800a8b4:	2401      	movs	r4, #1
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a8ba:	9322      	str	r3, [sp, #136]	; 0x88
 800a8bc:	f04f 39ff 	mov.w	r9, #4294967295
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	2312      	movs	r3, #18
 800a8c4:	f8cd 9020 	str.w	r9, [sp, #32]
 800a8c8:	9223      	str	r2, [sp, #140]	; 0x8c
 800a8ca:	e7b0      	b.n	800a82e <_dtoa_r+0x266>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8d0:	e7f4      	b.n	800a8bc <_dtoa_r+0x2f4>
 800a8d2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a8d6:	464b      	mov	r3, r9
 800a8d8:	f8cd 9020 	str.w	r9, [sp, #32]
 800a8dc:	e7a7      	b.n	800a82e <_dtoa_r+0x266>
 800a8de:	3101      	adds	r1, #1
 800a8e0:	6041      	str	r1, [r0, #4]
 800a8e2:	0052      	lsls	r2, r2, #1
 800a8e4:	e7a7      	b.n	800a836 <_dtoa_r+0x26e>
 800a8e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a8e8:	9a03      	ldr	r2, [sp, #12]
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	9b08      	ldr	r3, [sp, #32]
 800a8ee:	2b0e      	cmp	r3, #14
 800a8f0:	f200 80a8 	bhi.w	800aa44 <_dtoa_r+0x47c>
 800a8f4:	2c00      	cmp	r4, #0
 800a8f6:	f000 80a5 	beq.w	800aa44 <_dtoa_r+0x47c>
 800a8fa:	f1ba 0f00 	cmp.w	sl, #0
 800a8fe:	dd34      	ble.n	800a96a <_dtoa_r+0x3a2>
 800a900:	4a9a      	ldr	r2, [pc, #616]	; (800ab6c <_dtoa_r+0x5a4>)
 800a902:	f00a 030f 	and.w	r3, sl, #15
 800a906:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a90a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a90e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a912:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a916:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a91a:	d016      	beq.n	800a94a <_dtoa_r+0x382>
 800a91c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a920:	4b93      	ldr	r3, [pc, #588]	; (800ab70 <_dtoa_r+0x5a8>)
 800a922:	2703      	movs	r7, #3
 800a924:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a928:	f7f5 ff00 	bl	800072c <__aeabi_ddiv>
 800a92c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a930:	f004 040f 	and.w	r4, r4, #15
 800a934:	4e8e      	ldr	r6, [pc, #568]	; (800ab70 <_dtoa_r+0x5a8>)
 800a936:	b954      	cbnz	r4, 800a94e <_dtoa_r+0x386>
 800a938:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a93c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a940:	f7f5 fef4 	bl	800072c <__aeabi_ddiv>
 800a944:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a948:	e029      	b.n	800a99e <_dtoa_r+0x3d6>
 800a94a:	2702      	movs	r7, #2
 800a94c:	e7f2      	b.n	800a934 <_dtoa_r+0x36c>
 800a94e:	07e1      	lsls	r1, r4, #31
 800a950:	d508      	bpl.n	800a964 <_dtoa_r+0x39c>
 800a952:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a956:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a95a:	f7f5 fdbd 	bl	80004d8 <__aeabi_dmul>
 800a95e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a962:	3701      	adds	r7, #1
 800a964:	1064      	asrs	r4, r4, #1
 800a966:	3608      	adds	r6, #8
 800a968:	e7e5      	b.n	800a936 <_dtoa_r+0x36e>
 800a96a:	f000 80a5 	beq.w	800aab8 <_dtoa_r+0x4f0>
 800a96e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a972:	f1ca 0400 	rsb	r4, sl, #0
 800a976:	4b7d      	ldr	r3, [pc, #500]	; (800ab6c <_dtoa_r+0x5a4>)
 800a978:	f004 020f 	and.w	r2, r4, #15
 800a97c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	f7f5 fda8 	bl	80004d8 <__aeabi_dmul>
 800a988:	2702      	movs	r7, #2
 800a98a:	2300      	movs	r3, #0
 800a98c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a990:	4e77      	ldr	r6, [pc, #476]	; (800ab70 <_dtoa_r+0x5a8>)
 800a992:	1124      	asrs	r4, r4, #4
 800a994:	2c00      	cmp	r4, #0
 800a996:	f040 8084 	bne.w	800aaa2 <_dtoa_r+0x4da>
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1d2      	bne.n	800a944 <_dtoa_r+0x37c>
 800a99e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f000 808b 	beq.w	800aabc <_dtoa_r+0x4f4>
 800a9a6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a9aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a9ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	4b6f      	ldr	r3, [pc, #444]	; (800ab74 <_dtoa_r+0x5ac>)
 800a9b6:	f7f6 f801 	bl	80009bc <__aeabi_dcmplt>
 800a9ba:	2800      	cmp	r0, #0
 800a9bc:	d07e      	beq.n	800aabc <_dtoa_r+0x4f4>
 800a9be:	9b08      	ldr	r3, [sp, #32]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d07b      	beq.n	800aabc <_dtoa_r+0x4f4>
 800a9c4:	f1b9 0f00 	cmp.w	r9, #0
 800a9c8:	dd38      	ble.n	800aa3c <_dtoa_r+0x474>
 800a9ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	4b69      	ldr	r3, [pc, #420]	; (800ab78 <_dtoa_r+0x5b0>)
 800a9d2:	f7f5 fd81 	bl	80004d8 <__aeabi_dmul>
 800a9d6:	464c      	mov	r4, r9
 800a9d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9dc:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a9e0:	3701      	adds	r7, #1
 800a9e2:	4638      	mov	r0, r7
 800a9e4:	f7f5 fd0e 	bl	8000404 <__aeabi_i2d>
 800a9e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9ec:	f7f5 fd74 	bl	80004d8 <__aeabi_dmul>
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	4b62      	ldr	r3, [pc, #392]	; (800ab7c <_dtoa_r+0x5b4>)
 800a9f4:	f7f5 fbba 	bl	800016c <__adddf3>
 800a9f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a9fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa00:	9611      	str	r6, [sp, #68]	; 0x44
 800aa02:	2c00      	cmp	r4, #0
 800aa04:	d15d      	bne.n	800aac2 <_dtoa_r+0x4fa>
 800aa06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	4b5c      	ldr	r3, [pc, #368]	; (800ab80 <_dtoa_r+0x5b8>)
 800aa0e:	f7f5 fbab 	bl	8000168 <__aeabi_dsub>
 800aa12:	4602      	mov	r2, r0
 800aa14:	460b      	mov	r3, r1
 800aa16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa1a:	4633      	mov	r3, r6
 800aa1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa1e:	f7f5 ffeb 	bl	80009f8 <__aeabi_dcmpgt>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	f040 829c 	bne.w	800af60 <_dtoa_r+0x998>
 800aa28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa2e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aa32:	f7f5 ffc3 	bl	80009bc <__aeabi_dcmplt>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	f040 8290 	bne.w	800af5c <_dtoa_r+0x994>
 800aa3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800aa40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aa44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f2c0 8152 	blt.w	800acf0 <_dtoa_r+0x728>
 800aa4c:	f1ba 0f0e 	cmp.w	sl, #14
 800aa50:	f300 814e 	bgt.w	800acf0 <_dtoa_r+0x728>
 800aa54:	4b45      	ldr	r3, [pc, #276]	; (800ab6c <_dtoa_r+0x5a4>)
 800aa56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aa5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa5e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800aa62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f280 80db 	bge.w	800ac20 <_dtoa_r+0x658>
 800aa6a:	9b08      	ldr	r3, [sp, #32]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f300 80d7 	bgt.w	800ac20 <_dtoa_r+0x658>
 800aa72:	f040 8272 	bne.w	800af5a <_dtoa_r+0x992>
 800aa76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	4b40      	ldr	r3, [pc, #256]	; (800ab80 <_dtoa_r+0x5b8>)
 800aa7e:	f7f5 fd2b 	bl	80004d8 <__aeabi_dmul>
 800aa82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa86:	f7f5 ffad 	bl	80009e4 <__aeabi_dcmpge>
 800aa8a:	9c08      	ldr	r4, [sp, #32]
 800aa8c:	4626      	mov	r6, r4
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	f040 8248 	bne.w	800af24 <_dtoa_r+0x95c>
 800aa94:	2331      	movs	r3, #49	; 0x31
 800aa96:	9f03      	ldr	r7, [sp, #12]
 800aa98:	f10a 0a01 	add.w	sl, sl, #1
 800aa9c:	f807 3b01 	strb.w	r3, [r7], #1
 800aaa0:	e244      	b.n	800af2c <_dtoa_r+0x964>
 800aaa2:	07e2      	lsls	r2, r4, #31
 800aaa4:	d505      	bpl.n	800aab2 <_dtoa_r+0x4ea>
 800aaa6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aaaa:	f7f5 fd15 	bl	80004d8 <__aeabi_dmul>
 800aaae:	2301      	movs	r3, #1
 800aab0:	3701      	adds	r7, #1
 800aab2:	1064      	asrs	r4, r4, #1
 800aab4:	3608      	adds	r6, #8
 800aab6:	e76d      	b.n	800a994 <_dtoa_r+0x3cc>
 800aab8:	2702      	movs	r7, #2
 800aaba:	e770      	b.n	800a99e <_dtoa_r+0x3d6>
 800aabc:	46d0      	mov	r8, sl
 800aabe:	9c08      	ldr	r4, [sp, #32]
 800aac0:	e78f      	b.n	800a9e2 <_dtoa_r+0x41a>
 800aac2:	9903      	ldr	r1, [sp, #12]
 800aac4:	4b29      	ldr	r3, [pc, #164]	; (800ab6c <_dtoa_r+0x5a4>)
 800aac6:	4421      	add	r1, r4
 800aac8:	9112      	str	r1, [sp, #72]	; 0x48
 800aaca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aacc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aad0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800aad4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aad8:	2900      	cmp	r1, #0
 800aada:	d055      	beq.n	800ab88 <_dtoa_r+0x5c0>
 800aadc:	2000      	movs	r0, #0
 800aade:	4929      	ldr	r1, [pc, #164]	; (800ab84 <_dtoa_r+0x5bc>)
 800aae0:	f7f5 fe24 	bl	800072c <__aeabi_ddiv>
 800aae4:	463b      	mov	r3, r7
 800aae6:	4632      	mov	r2, r6
 800aae8:	f7f5 fb3e 	bl	8000168 <__aeabi_dsub>
 800aaec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aaf0:	9f03      	ldr	r7, [sp, #12]
 800aaf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaf6:	f7f5 ff9f 	bl	8000a38 <__aeabi_d2iz>
 800aafa:	4604      	mov	r4, r0
 800aafc:	f7f5 fc82 	bl	8000404 <__aeabi_i2d>
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab08:	f7f5 fb2e 	bl	8000168 <__aeabi_dsub>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	460b      	mov	r3, r1
 800ab10:	3430      	adds	r4, #48	; 0x30
 800ab12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab1a:	f807 4b01 	strb.w	r4, [r7], #1
 800ab1e:	f7f5 ff4d 	bl	80009bc <__aeabi_dcmplt>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d174      	bne.n	800ac10 <_dtoa_r+0x648>
 800ab26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab2a:	2000      	movs	r0, #0
 800ab2c:	4911      	ldr	r1, [pc, #68]	; (800ab74 <_dtoa_r+0x5ac>)
 800ab2e:	f7f5 fb1b 	bl	8000168 <__aeabi_dsub>
 800ab32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab36:	f7f5 ff41 	bl	80009bc <__aeabi_dcmplt>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	f040 80b7 	bne.w	800acae <_dtoa_r+0x6e6>
 800ab40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab42:	429f      	cmp	r7, r3
 800ab44:	f43f af7a 	beq.w	800aa3c <_dtoa_r+0x474>
 800ab48:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	4b0a      	ldr	r3, [pc, #40]	; (800ab78 <_dtoa_r+0x5b0>)
 800ab50:	f7f5 fcc2 	bl	80004d8 <__aeabi_dmul>
 800ab54:	2200      	movs	r2, #0
 800ab56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab5e:	4b06      	ldr	r3, [pc, #24]	; (800ab78 <_dtoa_r+0x5b0>)
 800ab60:	f7f5 fcba 	bl	80004d8 <__aeabi_dmul>
 800ab64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab68:	e7c3      	b.n	800aaf2 <_dtoa_r+0x52a>
 800ab6a:	bf00      	nop
 800ab6c:	0800d5f0 	.word	0x0800d5f0
 800ab70:	0800d5c8 	.word	0x0800d5c8
 800ab74:	3ff00000 	.word	0x3ff00000
 800ab78:	40240000 	.word	0x40240000
 800ab7c:	401c0000 	.word	0x401c0000
 800ab80:	40140000 	.word	0x40140000
 800ab84:	3fe00000 	.word	0x3fe00000
 800ab88:	4630      	mov	r0, r6
 800ab8a:	4639      	mov	r1, r7
 800ab8c:	f7f5 fca4 	bl	80004d8 <__aeabi_dmul>
 800ab90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab92:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab96:	9c03      	ldr	r4, [sp, #12]
 800ab98:	9314      	str	r3, [sp, #80]	; 0x50
 800ab9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab9e:	f7f5 ff4b 	bl	8000a38 <__aeabi_d2iz>
 800aba2:	9015      	str	r0, [sp, #84]	; 0x54
 800aba4:	f7f5 fc2e 	bl	8000404 <__aeabi_i2d>
 800aba8:	4602      	mov	r2, r0
 800abaa:	460b      	mov	r3, r1
 800abac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abb0:	f7f5 fada 	bl	8000168 <__aeabi_dsub>
 800abb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abb6:	4606      	mov	r6, r0
 800abb8:	3330      	adds	r3, #48	; 0x30
 800abba:	f804 3b01 	strb.w	r3, [r4], #1
 800abbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abc0:	460f      	mov	r7, r1
 800abc2:	429c      	cmp	r4, r3
 800abc4:	f04f 0200 	mov.w	r2, #0
 800abc8:	d124      	bne.n	800ac14 <_dtoa_r+0x64c>
 800abca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800abce:	4bb0      	ldr	r3, [pc, #704]	; (800ae90 <_dtoa_r+0x8c8>)
 800abd0:	f7f5 facc 	bl	800016c <__adddf3>
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	4630      	mov	r0, r6
 800abda:	4639      	mov	r1, r7
 800abdc:	f7f5 ff0c 	bl	80009f8 <__aeabi_dcmpgt>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d163      	bne.n	800acac <_dtoa_r+0x6e4>
 800abe4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800abe8:	2000      	movs	r0, #0
 800abea:	49a9      	ldr	r1, [pc, #676]	; (800ae90 <_dtoa_r+0x8c8>)
 800abec:	f7f5 fabc 	bl	8000168 <__aeabi_dsub>
 800abf0:	4602      	mov	r2, r0
 800abf2:	460b      	mov	r3, r1
 800abf4:	4630      	mov	r0, r6
 800abf6:	4639      	mov	r1, r7
 800abf8:	f7f5 fee0 	bl	80009bc <__aeabi_dcmplt>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	f43f af1d 	beq.w	800aa3c <_dtoa_r+0x474>
 800ac02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ac04:	1e7b      	subs	r3, r7, #1
 800ac06:	9314      	str	r3, [sp, #80]	; 0x50
 800ac08:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ac0c:	2b30      	cmp	r3, #48	; 0x30
 800ac0e:	d0f8      	beq.n	800ac02 <_dtoa_r+0x63a>
 800ac10:	46c2      	mov	sl, r8
 800ac12:	e03b      	b.n	800ac8c <_dtoa_r+0x6c4>
 800ac14:	4b9f      	ldr	r3, [pc, #636]	; (800ae94 <_dtoa_r+0x8cc>)
 800ac16:	f7f5 fc5f 	bl	80004d8 <__aeabi_dmul>
 800ac1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac1e:	e7bc      	b.n	800ab9a <_dtoa_r+0x5d2>
 800ac20:	9f03      	ldr	r7, [sp, #12]
 800ac22:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ac26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac2a:	4640      	mov	r0, r8
 800ac2c:	4649      	mov	r1, r9
 800ac2e:	f7f5 fd7d 	bl	800072c <__aeabi_ddiv>
 800ac32:	f7f5 ff01 	bl	8000a38 <__aeabi_d2iz>
 800ac36:	4604      	mov	r4, r0
 800ac38:	f7f5 fbe4 	bl	8000404 <__aeabi_i2d>
 800ac3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac40:	f7f5 fc4a 	bl	80004d8 <__aeabi_dmul>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	4640      	mov	r0, r8
 800ac4a:	4649      	mov	r1, r9
 800ac4c:	f7f5 fa8c 	bl	8000168 <__aeabi_dsub>
 800ac50:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ac54:	f807 6b01 	strb.w	r6, [r7], #1
 800ac58:	9e03      	ldr	r6, [sp, #12]
 800ac5a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ac5e:	1bbe      	subs	r6, r7, r6
 800ac60:	45b4      	cmp	ip, r6
 800ac62:	4602      	mov	r2, r0
 800ac64:	460b      	mov	r3, r1
 800ac66:	d136      	bne.n	800acd6 <_dtoa_r+0x70e>
 800ac68:	f7f5 fa80 	bl	800016c <__adddf3>
 800ac6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac70:	4680      	mov	r8, r0
 800ac72:	4689      	mov	r9, r1
 800ac74:	f7f5 fec0 	bl	80009f8 <__aeabi_dcmpgt>
 800ac78:	bb58      	cbnz	r0, 800acd2 <_dtoa_r+0x70a>
 800ac7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac7e:	4640      	mov	r0, r8
 800ac80:	4649      	mov	r1, r9
 800ac82:	f7f5 fe91 	bl	80009a8 <__aeabi_dcmpeq>
 800ac86:	b108      	cbz	r0, 800ac8c <_dtoa_r+0x6c4>
 800ac88:	07e1      	lsls	r1, r4, #31
 800ac8a:	d422      	bmi.n	800acd2 <_dtoa_r+0x70a>
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	4659      	mov	r1, fp
 800ac90:	f001 f878 	bl	800bd84 <_Bfree>
 800ac94:	2300      	movs	r3, #0
 800ac96:	703b      	strb	r3, [r7, #0]
 800ac98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ac9a:	f10a 0001 	add.w	r0, sl, #1
 800ac9e:	6018      	str	r0, [r3, #0]
 800aca0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f43f acde 	beq.w	800a664 <_dtoa_r+0x9c>
 800aca8:	601f      	str	r7, [r3, #0]
 800acaa:	e4db      	b.n	800a664 <_dtoa_r+0x9c>
 800acac:	4627      	mov	r7, r4
 800acae:	463b      	mov	r3, r7
 800acb0:	461f      	mov	r7, r3
 800acb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acb6:	2a39      	cmp	r2, #57	; 0x39
 800acb8:	d107      	bne.n	800acca <_dtoa_r+0x702>
 800acba:	9a03      	ldr	r2, [sp, #12]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d1f7      	bne.n	800acb0 <_dtoa_r+0x6e8>
 800acc0:	2230      	movs	r2, #48	; 0x30
 800acc2:	9903      	ldr	r1, [sp, #12]
 800acc4:	f108 0801 	add.w	r8, r8, #1
 800acc8:	700a      	strb	r2, [r1, #0]
 800acca:	781a      	ldrb	r2, [r3, #0]
 800accc:	3201      	adds	r2, #1
 800acce:	701a      	strb	r2, [r3, #0]
 800acd0:	e79e      	b.n	800ac10 <_dtoa_r+0x648>
 800acd2:	46d0      	mov	r8, sl
 800acd4:	e7eb      	b.n	800acae <_dtoa_r+0x6e6>
 800acd6:	2200      	movs	r2, #0
 800acd8:	4b6e      	ldr	r3, [pc, #440]	; (800ae94 <_dtoa_r+0x8cc>)
 800acda:	f7f5 fbfd 	bl	80004d8 <__aeabi_dmul>
 800acde:	2200      	movs	r2, #0
 800ace0:	2300      	movs	r3, #0
 800ace2:	4680      	mov	r8, r0
 800ace4:	4689      	mov	r9, r1
 800ace6:	f7f5 fe5f 	bl	80009a8 <__aeabi_dcmpeq>
 800acea:	2800      	cmp	r0, #0
 800acec:	d09b      	beq.n	800ac26 <_dtoa_r+0x65e>
 800acee:	e7cd      	b.n	800ac8c <_dtoa_r+0x6c4>
 800acf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800acf2:	2a00      	cmp	r2, #0
 800acf4:	f000 80d0 	beq.w	800ae98 <_dtoa_r+0x8d0>
 800acf8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800acfa:	2a01      	cmp	r2, #1
 800acfc:	f300 80ae 	bgt.w	800ae5c <_dtoa_r+0x894>
 800ad00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad02:	2a00      	cmp	r2, #0
 800ad04:	f000 80a6 	beq.w	800ae54 <_dtoa_r+0x88c>
 800ad08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad0e:	9f06      	ldr	r7, [sp, #24]
 800ad10:	9a06      	ldr	r2, [sp, #24]
 800ad12:	2101      	movs	r1, #1
 800ad14:	441a      	add	r2, r3
 800ad16:	9206      	str	r2, [sp, #24]
 800ad18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	441a      	add	r2, r3
 800ad1e:	9209      	str	r2, [sp, #36]	; 0x24
 800ad20:	f001 f930 	bl	800bf84 <__i2b>
 800ad24:	4606      	mov	r6, r0
 800ad26:	2f00      	cmp	r7, #0
 800ad28:	dd0c      	ble.n	800ad44 <_dtoa_r+0x77c>
 800ad2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	dd09      	ble.n	800ad44 <_dtoa_r+0x77c>
 800ad30:	42bb      	cmp	r3, r7
 800ad32:	bfa8      	it	ge
 800ad34:	463b      	movge	r3, r7
 800ad36:	9a06      	ldr	r2, [sp, #24]
 800ad38:	1aff      	subs	r7, r7, r3
 800ad3a:	1ad2      	subs	r2, r2, r3
 800ad3c:	9206      	str	r2, [sp, #24]
 800ad3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	9309      	str	r3, [sp, #36]	; 0x24
 800ad44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad46:	b1f3      	cbz	r3, 800ad86 <_dtoa_r+0x7be>
 800ad48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 80a8 	beq.w	800aea0 <_dtoa_r+0x8d8>
 800ad50:	2c00      	cmp	r4, #0
 800ad52:	dd10      	ble.n	800ad76 <_dtoa_r+0x7ae>
 800ad54:	4631      	mov	r1, r6
 800ad56:	4622      	mov	r2, r4
 800ad58:	4628      	mov	r0, r5
 800ad5a:	f001 f9d1 	bl	800c100 <__pow5mult>
 800ad5e:	465a      	mov	r2, fp
 800ad60:	4601      	mov	r1, r0
 800ad62:	4606      	mov	r6, r0
 800ad64:	4628      	mov	r0, r5
 800ad66:	f001 f923 	bl	800bfb0 <__multiply>
 800ad6a:	4680      	mov	r8, r0
 800ad6c:	4659      	mov	r1, fp
 800ad6e:	4628      	mov	r0, r5
 800ad70:	f001 f808 	bl	800bd84 <_Bfree>
 800ad74:	46c3      	mov	fp, r8
 800ad76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad78:	1b1a      	subs	r2, r3, r4
 800ad7a:	d004      	beq.n	800ad86 <_dtoa_r+0x7be>
 800ad7c:	4659      	mov	r1, fp
 800ad7e:	4628      	mov	r0, r5
 800ad80:	f001 f9be 	bl	800c100 <__pow5mult>
 800ad84:	4683      	mov	fp, r0
 800ad86:	2101      	movs	r1, #1
 800ad88:	4628      	mov	r0, r5
 800ad8a:	f001 f8fb 	bl	800bf84 <__i2b>
 800ad8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad90:	4604      	mov	r4, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f340 8086 	ble.w	800aea4 <_dtoa_r+0x8dc>
 800ad98:	461a      	mov	r2, r3
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	f001 f9af 	bl	800c100 <__pow5mult>
 800ada2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ada4:	4604      	mov	r4, r0
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	dd7f      	ble.n	800aeaa <_dtoa_r+0x8e2>
 800adaa:	f04f 0800 	mov.w	r8, #0
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800adb4:	6918      	ldr	r0, [r3, #16]
 800adb6:	f001 f897 	bl	800bee8 <__hi0bits>
 800adba:	f1c0 0020 	rsb	r0, r0, #32
 800adbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adc0:	4418      	add	r0, r3
 800adc2:	f010 001f 	ands.w	r0, r0, #31
 800adc6:	f000 8092 	beq.w	800aeee <_dtoa_r+0x926>
 800adca:	f1c0 0320 	rsb	r3, r0, #32
 800adce:	2b04      	cmp	r3, #4
 800add0:	f340 808a 	ble.w	800aee8 <_dtoa_r+0x920>
 800add4:	f1c0 001c 	rsb	r0, r0, #28
 800add8:	9b06      	ldr	r3, [sp, #24]
 800adda:	4407      	add	r7, r0
 800addc:	4403      	add	r3, r0
 800adde:	9306      	str	r3, [sp, #24]
 800ade0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade2:	4403      	add	r3, r0
 800ade4:	9309      	str	r3, [sp, #36]	; 0x24
 800ade6:	9b06      	ldr	r3, [sp, #24]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	dd05      	ble.n	800adf8 <_dtoa_r+0x830>
 800adec:	4659      	mov	r1, fp
 800adee:	461a      	mov	r2, r3
 800adf0:	4628      	mov	r0, r5
 800adf2:	f001 f9df 	bl	800c1b4 <__lshift>
 800adf6:	4683      	mov	fp, r0
 800adf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	dd05      	ble.n	800ae0a <_dtoa_r+0x842>
 800adfe:	4621      	mov	r1, r4
 800ae00:	461a      	mov	r2, r3
 800ae02:	4628      	mov	r0, r5
 800ae04:	f001 f9d6 	bl	800c1b4 <__lshift>
 800ae08:	4604      	mov	r4, r0
 800ae0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d070      	beq.n	800aef2 <_dtoa_r+0x92a>
 800ae10:	4621      	mov	r1, r4
 800ae12:	4658      	mov	r0, fp
 800ae14:	f001 fa3e 	bl	800c294 <__mcmp>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	da6a      	bge.n	800aef2 <_dtoa_r+0x92a>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	4659      	mov	r1, fp
 800ae20:	220a      	movs	r2, #10
 800ae22:	4628      	mov	r0, r5
 800ae24:	f000 ffd0 	bl	800bdc8 <__multadd>
 800ae28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae2a:	4683      	mov	fp, r0
 800ae2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 8194 	beq.w	800b15e <_dtoa_r+0xb96>
 800ae36:	4631      	mov	r1, r6
 800ae38:	2300      	movs	r3, #0
 800ae3a:	220a      	movs	r2, #10
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	f000 ffc3 	bl	800bdc8 <__multadd>
 800ae42:	f1b9 0f00 	cmp.w	r9, #0
 800ae46:	4606      	mov	r6, r0
 800ae48:	f300 8093 	bgt.w	800af72 <_dtoa_r+0x9aa>
 800ae4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	dc57      	bgt.n	800af02 <_dtoa_r+0x93a>
 800ae52:	e08e      	b.n	800af72 <_dtoa_r+0x9aa>
 800ae54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ae56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae5a:	e757      	b.n	800ad0c <_dtoa_r+0x744>
 800ae5c:	9b08      	ldr	r3, [sp, #32]
 800ae5e:	1e5c      	subs	r4, r3, #1
 800ae60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae62:	42a3      	cmp	r3, r4
 800ae64:	bfb7      	itett	lt
 800ae66:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae68:	1b1c      	subge	r4, r3, r4
 800ae6a:	1ae2      	sublt	r2, r4, r3
 800ae6c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ae6e:	bfbe      	ittt	lt
 800ae70:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ae72:	189b      	addlt	r3, r3, r2
 800ae74:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ae76:	9b08      	ldr	r3, [sp, #32]
 800ae78:	bfb8      	it	lt
 800ae7a:	2400      	movlt	r4, #0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	bfbb      	ittet	lt
 800ae80:	9b06      	ldrlt	r3, [sp, #24]
 800ae82:	9a08      	ldrlt	r2, [sp, #32]
 800ae84:	9f06      	ldrge	r7, [sp, #24]
 800ae86:	1a9f      	sublt	r7, r3, r2
 800ae88:	bfac      	ite	ge
 800ae8a:	9b08      	ldrge	r3, [sp, #32]
 800ae8c:	2300      	movlt	r3, #0
 800ae8e:	e73f      	b.n	800ad10 <_dtoa_r+0x748>
 800ae90:	3fe00000 	.word	0x3fe00000
 800ae94:	40240000 	.word	0x40240000
 800ae98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ae9a:	9f06      	ldr	r7, [sp, #24]
 800ae9c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ae9e:	e742      	b.n	800ad26 <_dtoa_r+0x75e>
 800aea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aea2:	e76b      	b.n	800ad7c <_dtoa_r+0x7b4>
 800aea4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	dc19      	bgt.n	800aede <_dtoa_r+0x916>
 800aeaa:	9b04      	ldr	r3, [sp, #16]
 800aeac:	b9bb      	cbnz	r3, 800aede <_dtoa_r+0x916>
 800aeae:	9b05      	ldr	r3, [sp, #20]
 800aeb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aeb4:	b99b      	cbnz	r3, 800aede <_dtoa_r+0x916>
 800aeb6:	9b05      	ldr	r3, [sp, #20]
 800aeb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aebc:	0d1b      	lsrs	r3, r3, #20
 800aebe:	051b      	lsls	r3, r3, #20
 800aec0:	b183      	cbz	r3, 800aee4 <_dtoa_r+0x91c>
 800aec2:	f04f 0801 	mov.w	r8, #1
 800aec6:	9b06      	ldr	r3, [sp, #24]
 800aec8:	3301      	adds	r3, #1
 800aeca:	9306      	str	r3, [sp, #24]
 800aecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aece:	3301      	adds	r3, #1
 800aed0:	9309      	str	r3, [sp, #36]	; 0x24
 800aed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f47f af6a 	bne.w	800adae <_dtoa_r+0x7e6>
 800aeda:	2001      	movs	r0, #1
 800aedc:	e76f      	b.n	800adbe <_dtoa_r+0x7f6>
 800aede:	f04f 0800 	mov.w	r8, #0
 800aee2:	e7f6      	b.n	800aed2 <_dtoa_r+0x90a>
 800aee4:	4698      	mov	r8, r3
 800aee6:	e7f4      	b.n	800aed2 <_dtoa_r+0x90a>
 800aee8:	f43f af7d 	beq.w	800ade6 <_dtoa_r+0x81e>
 800aeec:	4618      	mov	r0, r3
 800aeee:	301c      	adds	r0, #28
 800aef0:	e772      	b.n	800add8 <_dtoa_r+0x810>
 800aef2:	9b08      	ldr	r3, [sp, #32]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	dc36      	bgt.n	800af66 <_dtoa_r+0x99e>
 800aef8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	dd33      	ble.n	800af66 <_dtoa_r+0x99e>
 800aefe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af02:	f1b9 0f00 	cmp.w	r9, #0
 800af06:	d10d      	bne.n	800af24 <_dtoa_r+0x95c>
 800af08:	4621      	mov	r1, r4
 800af0a:	464b      	mov	r3, r9
 800af0c:	2205      	movs	r2, #5
 800af0e:	4628      	mov	r0, r5
 800af10:	f000 ff5a 	bl	800bdc8 <__multadd>
 800af14:	4601      	mov	r1, r0
 800af16:	4604      	mov	r4, r0
 800af18:	4658      	mov	r0, fp
 800af1a:	f001 f9bb 	bl	800c294 <__mcmp>
 800af1e:	2800      	cmp	r0, #0
 800af20:	f73f adb8 	bgt.w	800aa94 <_dtoa_r+0x4cc>
 800af24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af26:	9f03      	ldr	r7, [sp, #12]
 800af28:	ea6f 0a03 	mvn.w	sl, r3
 800af2c:	f04f 0800 	mov.w	r8, #0
 800af30:	4621      	mov	r1, r4
 800af32:	4628      	mov	r0, r5
 800af34:	f000 ff26 	bl	800bd84 <_Bfree>
 800af38:	2e00      	cmp	r6, #0
 800af3a:	f43f aea7 	beq.w	800ac8c <_dtoa_r+0x6c4>
 800af3e:	f1b8 0f00 	cmp.w	r8, #0
 800af42:	d005      	beq.n	800af50 <_dtoa_r+0x988>
 800af44:	45b0      	cmp	r8, r6
 800af46:	d003      	beq.n	800af50 <_dtoa_r+0x988>
 800af48:	4641      	mov	r1, r8
 800af4a:	4628      	mov	r0, r5
 800af4c:	f000 ff1a 	bl	800bd84 <_Bfree>
 800af50:	4631      	mov	r1, r6
 800af52:	4628      	mov	r0, r5
 800af54:	f000 ff16 	bl	800bd84 <_Bfree>
 800af58:	e698      	b.n	800ac8c <_dtoa_r+0x6c4>
 800af5a:	2400      	movs	r4, #0
 800af5c:	4626      	mov	r6, r4
 800af5e:	e7e1      	b.n	800af24 <_dtoa_r+0x95c>
 800af60:	46c2      	mov	sl, r8
 800af62:	4626      	mov	r6, r4
 800af64:	e596      	b.n	800aa94 <_dtoa_r+0x4cc>
 800af66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f000 80fd 	beq.w	800b16c <_dtoa_r+0xba4>
 800af72:	2f00      	cmp	r7, #0
 800af74:	dd05      	ble.n	800af82 <_dtoa_r+0x9ba>
 800af76:	4631      	mov	r1, r6
 800af78:	463a      	mov	r2, r7
 800af7a:	4628      	mov	r0, r5
 800af7c:	f001 f91a 	bl	800c1b4 <__lshift>
 800af80:	4606      	mov	r6, r0
 800af82:	f1b8 0f00 	cmp.w	r8, #0
 800af86:	d05c      	beq.n	800b042 <_dtoa_r+0xa7a>
 800af88:	4628      	mov	r0, r5
 800af8a:	6871      	ldr	r1, [r6, #4]
 800af8c:	f000 feba 	bl	800bd04 <_Balloc>
 800af90:	4607      	mov	r7, r0
 800af92:	b928      	cbnz	r0, 800afa0 <_dtoa_r+0x9d8>
 800af94:	4602      	mov	r2, r0
 800af96:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af9a:	4b7f      	ldr	r3, [pc, #508]	; (800b198 <_dtoa_r+0xbd0>)
 800af9c:	f7ff bb28 	b.w	800a5f0 <_dtoa_r+0x28>
 800afa0:	6932      	ldr	r2, [r6, #16]
 800afa2:	f106 010c 	add.w	r1, r6, #12
 800afa6:	3202      	adds	r2, #2
 800afa8:	0092      	lsls	r2, r2, #2
 800afaa:	300c      	adds	r0, #12
 800afac:	f7fd fc5c 	bl	8008868 <memcpy>
 800afb0:	2201      	movs	r2, #1
 800afb2:	4639      	mov	r1, r7
 800afb4:	4628      	mov	r0, r5
 800afb6:	f001 f8fd 	bl	800c1b4 <__lshift>
 800afba:	46b0      	mov	r8, r6
 800afbc:	4606      	mov	r6, r0
 800afbe:	9b03      	ldr	r3, [sp, #12]
 800afc0:	3301      	adds	r3, #1
 800afc2:	9308      	str	r3, [sp, #32]
 800afc4:	9b03      	ldr	r3, [sp, #12]
 800afc6:	444b      	add	r3, r9
 800afc8:	930a      	str	r3, [sp, #40]	; 0x28
 800afca:	9b04      	ldr	r3, [sp, #16]
 800afcc:	f003 0301 	and.w	r3, r3, #1
 800afd0:	9309      	str	r3, [sp, #36]	; 0x24
 800afd2:	9b08      	ldr	r3, [sp, #32]
 800afd4:	4621      	mov	r1, r4
 800afd6:	3b01      	subs	r3, #1
 800afd8:	4658      	mov	r0, fp
 800afda:	9304      	str	r3, [sp, #16]
 800afdc:	f7ff fa68 	bl	800a4b0 <quorem>
 800afe0:	4603      	mov	r3, r0
 800afe2:	4641      	mov	r1, r8
 800afe4:	3330      	adds	r3, #48	; 0x30
 800afe6:	9006      	str	r0, [sp, #24]
 800afe8:	4658      	mov	r0, fp
 800afea:	930b      	str	r3, [sp, #44]	; 0x2c
 800afec:	f001 f952 	bl	800c294 <__mcmp>
 800aff0:	4632      	mov	r2, r6
 800aff2:	4681      	mov	r9, r0
 800aff4:	4621      	mov	r1, r4
 800aff6:	4628      	mov	r0, r5
 800aff8:	f001 f968 	bl	800c2cc <__mdiff>
 800affc:	68c2      	ldr	r2, [r0, #12]
 800affe:	4607      	mov	r7, r0
 800b000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b002:	bb02      	cbnz	r2, 800b046 <_dtoa_r+0xa7e>
 800b004:	4601      	mov	r1, r0
 800b006:	4658      	mov	r0, fp
 800b008:	f001 f944 	bl	800c294 <__mcmp>
 800b00c:	4602      	mov	r2, r0
 800b00e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b010:	4639      	mov	r1, r7
 800b012:	4628      	mov	r0, r5
 800b014:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b018:	f000 feb4 	bl	800bd84 <_Bfree>
 800b01c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b01e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b020:	9f08      	ldr	r7, [sp, #32]
 800b022:	ea43 0102 	orr.w	r1, r3, r2
 800b026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b028:	430b      	orrs	r3, r1
 800b02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b02c:	d10d      	bne.n	800b04a <_dtoa_r+0xa82>
 800b02e:	2b39      	cmp	r3, #57	; 0x39
 800b030:	d029      	beq.n	800b086 <_dtoa_r+0xabe>
 800b032:	f1b9 0f00 	cmp.w	r9, #0
 800b036:	dd01      	ble.n	800b03c <_dtoa_r+0xa74>
 800b038:	9b06      	ldr	r3, [sp, #24]
 800b03a:	3331      	adds	r3, #49	; 0x31
 800b03c:	9a04      	ldr	r2, [sp, #16]
 800b03e:	7013      	strb	r3, [r2, #0]
 800b040:	e776      	b.n	800af30 <_dtoa_r+0x968>
 800b042:	4630      	mov	r0, r6
 800b044:	e7b9      	b.n	800afba <_dtoa_r+0x9f2>
 800b046:	2201      	movs	r2, #1
 800b048:	e7e2      	b.n	800b010 <_dtoa_r+0xa48>
 800b04a:	f1b9 0f00 	cmp.w	r9, #0
 800b04e:	db06      	blt.n	800b05e <_dtoa_r+0xa96>
 800b050:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b052:	ea41 0909 	orr.w	r9, r1, r9
 800b056:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b058:	ea59 0101 	orrs.w	r1, r9, r1
 800b05c:	d120      	bne.n	800b0a0 <_dtoa_r+0xad8>
 800b05e:	2a00      	cmp	r2, #0
 800b060:	ddec      	ble.n	800b03c <_dtoa_r+0xa74>
 800b062:	4659      	mov	r1, fp
 800b064:	2201      	movs	r2, #1
 800b066:	4628      	mov	r0, r5
 800b068:	9308      	str	r3, [sp, #32]
 800b06a:	f001 f8a3 	bl	800c1b4 <__lshift>
 800b06e:	4621      	mov	r1, r4
 800b070:	4683      	mov	fp, r0
 800b072:	f001 f90f 	bl	800c294 <__mcmp>
 800b076:	2800      	cmp	r0, #0
 800b078:	9b08      	ldr	r3, [sp, #32]
 800b07a:	dc02      	bgt.n	800b082 <_dtoa_r+0xaba>
 800b07c:	d1de      	bne.n	800b03c <_dtoa_r+0xa74>
 800b07e:	07da      	lsls	r2, r3, #31
 800b080:	d5dc      	bpl.n	800b03c <_dtoa_r+0xa74>
 800b082:	2b39      	cmp	r3, #57	; 0x39
 800b084:	d1d8      	bne.n	800b038 <_dtoa_r+0xa70>
 800b086:	2339      	movs	r3, #57	; 0x39
 800b088:	9a04      	ldr	r2, [sp, #16]
 800b08a:	7013      	strb	r3, [r2, #0]
 800b08c:	463b      	mov	r3, r7
 800b08e:	461f      	mov	r7, r3
 800b090:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b094:	3b01      	subs	r3, #1
 800b096:	2a39      	cmp	r2, #57	; 0x39
 800b098:	d050      	beq.n	800b13c <_dtoa_r+0xb74>
 800b09a:	3201      	adds	r2, #1
 800b09c:	701a      	strb	r2, [r3, #0]
 800b09e:	e747      	b.n	800af30 <_dtoa_r+0x968>
 800b0a0:	2a00      	cmp	r2, #0
 800b0a2:	dd03      	ble.n	800b0ac <_dtoa_r+0xae4>
 800b0a4:	2b39      	cmp	r3, #57	; 0x39
 800b0a6:	d0ee      	beq.n	800b086 <_dtoa_r+0xabe>
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	e7c7      	b.n	800b03c <_dtoa_r+0xa74>
 800b0ac:	9a08      	ldr	r2, [sp, #32]
 800b0ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b0b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b0b4:	428a      	cmp	r2, r1
 800b0b6:	d02a      	beq.n	800b10e <_dtoa_r+0xb46>
 800b0b8:	4659      	mov	r1, fp
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	220a      	movs	r2, #10
 800b0be:	4628      	mov	r0, r5
 800b0c0:	f000 fe82 	bl	800bdc8 <__multadd>
 800b0c4:	45b0      	cmp	r8, r6
 800b0c6:	4683      	mov	fp, r0
 800b0c8:	f04f 0300 	mov.w	r3, #0
 800b0cc:	f04f 020a 	mov.w	r2, #10
 800b0d0:	4641      	mov	r1, r8
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	d107      	bne.n	800b0e6 <_dtoa_r+0xb1e>
 800b0d6:	f000 fe77 	bl	800bdc8 <__multadd>
 800b0da:	4680      	mov	r8, r0
 800b0dc:	4606      	mov	r6, r0
 800b0de:	9b08      	ldr	r3, [sp, #32]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	9308      	str	r3, [sp, #32]
 800b0e4:	e775      	b.n	800afd2 <_dtoa_r+0xa0a>
 800b0e6:	f000 fe6f 	bl	800bdc8 <__multadd>
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4680      	mov	r8, r0
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	220a      	movs	r2, #10
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	f000 fe68 	bl	800bdc8 <__multadd>
 800b0f8:	4606      	mov	r6, r0
 800b0fa:	e7f0      	b.n	800b0de <_dtoa_r+0xb16>
 800b0fc:	f1b9 0f00 	cmp.w	r9, #0
 800b100:	bfcc      	ite	gt
 800b102:	464f      	movgt	r7, r9
 800b104:	2701      	movle	r7, #1
 800b106:	f04f 0800 	mov.w	r8, #0
 800b10a:	9a03      	ldr	r2, [sp, #12]
 800b10c:	4417      	add	r7, r2
 800b10e:	4659      	mov	r1, fp
 800b110:	2201      	movs	r2, #1
 800b112:	4628      	mov	r0, r5
 800b114:	9308      	str	r3, [sp, #32]
 800b116:	f001 f84d 	bl	800c1b4 <__lshift>
 800b11a:	4621      	mov	r1, r4
 800b11c:	4683      	mov	fp, r0
 800b11e:	f001 f8b9 	bl	800c294 <__mcmp>
 800b122:	2800      	cmp	r0, #0
 800b124:	dcb2      	bgt.n	800b08c <_dtoa_r+0xac4>
 800b126:	d102      	bne.n	800b12e <_dtoa_r+0xb66>
 800b128:	9b08      	ldr	r3, [sp, #32]
 800b12a:	07db      	lsls	r3, r3, #31
 800b12c:	d4ae      	bmi.n	800b08c <_dtoa_r+0xac4>
 800b12e:	463b      	mov	r3, r7
 800b130:	461f      	mov	r7, r3
 800b132:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b136:	2a30      	cmp	r2, #48	; 0x30
 800b138:	d0fa      	beq.n	800b130 <_dtoa_r+0xb68>
 800b13a:	e6f9      	b.n	800af30 <_dtoa_r+0x968>
 800b13c:	9a03      	ldr	r2, [sp, #12]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d1a5      	bne.n	800b08e <_dtoa_r+0xac6>
 800b142:	2331      	movs	r3, #49	; 0x31
 800b144:	f10a 0a01 	add.w	sl, sl, #1
 800b148:	e779      	b.n	800b03e <_dtoa_r+0xa76>
 800b14a:	4b14      	ldr	r3, [pc, #80]	; (800b19c <_dtoa_r+0xbd4>)
 800b14c:	f7ff baa8 	b.w	800a6a0 <_dtoa_r+0xd8>
 800b150:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b152:	2b00      	cmp	r3, #0
 800b154:	f47f aa81 	bne.w	800a65a <_dtoa_r+0x92>
 800b158:	4b11      	ldr	r3, [pc, #68]	; (800b1a0 <_dtoa_r+0xbd8>)
 800b15a:	f7ff baa1 	b.w	800a6a0 <_dtoa_r+0xd8>
 800b15e:	f1b9 0f00 	cmp.w	r9, #0
 800b162:	dc03      	bgt.n	800b16c <_dtoa_r+0xba4>
 800b164:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b166:	2b02      	cmp	r3, #2
 800b168:	f73f aecb 	bgt.w	800af02 <_dtoa_r+0x93a>
 800b16c:	9f03      	ldr	r7, [sp, #12]
 800b16e:	4621      	mov	r1, r4
 800b170:	4658      	mov	r0, fp
 800b172:	f7ff f99d 	bl	800a4b0 <quorem>
 800b176:	9a03      	ldr	r2, [sp, #12]
 800b178:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b17c:	f807 3b01 	strb.w	r3, [r7], #1
 800b180:	1aba      	subs	r2, r7, r2
 800b182:	4591      	cmp	r9, r2
 800b184:	ddba      	ble.n	800b0fc <_dtoa_r+0xb34>
 800b186:	4659      	mov	r1, fp
 800b188:	2300      	movs	r3, #0
 800b18a:	220a      	movs	r2, #10
 800b18c:	4628      	mov	r0, r5
 800b18e:	f000 fe1b 	bl	800bdc8 <__multadd>
 800b192:	4683      	mov	fp, r0
 800b194:	e7eb      	b.n	800b16e <_dtoa_r+0xba6>
 800b196:	bf00      	nop
 800b198:	0800d478 	.word	0x0800d478
 800b19c:	0800d278 	.word	0x0800d278
 800b1a0:	0800d3f9 	.word	0x0800d3f9

0800b1a4 <__sflush_r>:
 800b1a4:	898a      	ldrh	r2, [r1, #12]
 800b1a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a8:	4605      	mov	r5, r0
 800b1aa:	0710      	lsls	r0, r2, #28
 800b1ac:	460c      	mov	r4, r1
 800b1ae:	d457      	bmi.n	800b260 <__sflush_r+0xbc>
 800b1b0:	684b      	ldr	r3, [r1, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	dc04      	bgt.n	800b1c0 <__sflush_r+0x1c>
 800b1b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	dc01      	bgt.n	800b1c0 <__sflush_r+0x1c>
 800b1bc:	2000      	movs	r0, #0
 800b1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1c2:	2e00      	cmp	r6, #0
 800b1c4:	d0fa      	beq.n	800b1bc <__sflush_r+0x18>
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1cc:	682f      	ldr	r7, [r5, #0]
 800b1ce:	602b      	str	r3, [r5, #0]
 800b1d0:	d032      	beq.n	800b238 <__sflush_r+0x94>
 800b1d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1d4:	89a3      	ldrh	r3, [r4, #12]
 800b1d6:	075a      	lsls	r2, r3, #29
 800b1d8:	d505      	bpl.n	800b1e6 <__sflush_r+0x42>
 800b1da:	6863      	ldr	r3, [r4, #4]
 800b1dc:	1ac0      	subs	r0, r0, r3
 800b1de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1e0:	b10b      	cbz	r3, 800b1e6 <__sflush_r+0x42>
 800b1e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1e4:	1ac0      	subs	r0, r0, r3
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1ec:	4628      	mov	r0, r5
 800b1ee:	6a21      	ldr	r1, [r4, #32]
 800b1f0:	47b0      	blx	r6
 800b1f2:	1c43      	adds	r3, r0, #1
 800b1f4:	89a3      	ldrh	r3, [r4, #12]
 800b1f6:	d106      	bne.n	800b206 <__sflush_r+0x62>
 800b1f8:	6829      	ldr	r1, [r5, #0]
 800b1fa:	291d      	cmp	r1, #29
 800b1fc:	d82c      	bhi.n	800b258 <__sflush_r+0xb4>
 800b1fe:	4a29      	ldr	r2, [pc, #164]	; (800b2a4 <__sflush_r+0x100>)
 800b200:	40ca      	lsrs	r2, r1
 800b202:	07d6      	lsls	r6, r2, #31
 800b204:	d528      	bpl.n	800b258 <__sflush_r+0xb4>
 800b206:	2200      	movs	r2, #0
 800b208:	6062      	str	r2, [r4, #4]
 800b20a:	6922      	ldr	r2, [r4, #16]
 800b20c:	04d9      	lsls	r1, r3, #19
 800b20e:	6022      	str	r2, [r4, #0]
 800b210:	d504      	bpl.n	800b21c <__sflush_r+0x78>
 800b212:	1c42      	adds	r2, r0, #1
 800b214:	d101      	bne.n	800b21a <__sflush_r+0x76>
 800b216:	682b      	ldr	r3, [r5, #0]
 800b218:	b903      	cbnz	r3, 800b21c <__sflush_r+0x78>
 800b21a:	6560      	str	r0, [r4, #84]	; 0x54
 800b21c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b21e:	602f      	str	r7, [r5, #0]
 800b220:	2900      	cmp	r1, #0
 800b222:	d0cb      	beq.n	800b1bc <__sflush_r+0x18>
 800b224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b228:	4299      	cmp	r1, r3
 800b22a:	d002      	beq.n	800b232 <__sflush_r+0x8e>
 800b22c:	4628      	mov	r0, r5
 800b22e:	f7fd fb31 	bl	8008894 <_free_r>
 800b232:	2000      	movs	r0, #0
 800b234:	6360      	str	r0, [r4, #52]	; 0x34
 800b236:	e7c2      	b.n	800b1be <__sflush_r+0x1a>
 800b238:	6a21      	ldr	r1, [r4, #32]
 800b23a:	2301      	movs	r3, #1
 800b23c:	4628      	mov	r0, r5
 800b23e:	47b0      	blx	r6
 800b240:	1c41      	adds	r1, r0, #1
 800b242:	d1c7      	bne.n	800b1d4 <__sflush_r+0x30>
 800b244:	682b      	ldr	r3, [r5, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d0c4      	beq.n	800b1d4 <__sflush_r+0x30>
 800b24a:	2b1d      	cmp	r3, #29
 800b24c:	d001      	beq.n	800b252 <__sflush_r+0xae>
 800b24e:	2b16      	cmp	r3, #22
 800b250:	d101      	bne.n	800b256 <__sflush_r+0xb2>
 800b252:	602f      	str	r7, [r5, #0]
 800b254:	e7b2      	b.n	800b1bc <__sflush_r+0x18>
 800b256:	89a3      	ldrh	r3, [r4, #12]
 800b258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b25c:	81a3      	strh	r3, [r4, #12]
 800b25e:	e7ae      	b.n	800b1be <__sflush_r+0x1a>
 800b260:	690f      	ldr	r7, [r1, #16]
 800b262:	2f00      	cmp	r7, #0
 800b264:	d0aa      	beq.n	800b1bc <__sflush_r+0x18>
 800b266:	0793      	lsls	r3, r2, #30
 800b268:	bf18      	it	ne
 800b26a:	2300      	movne	r3, #0
 800b26c:	680e      	ldr	r6, [r1, #0]
 800b26e:	bf08      	it	eq
 800b270:	694b      	ldreq	r3, [r1, #20]
 800b272:	1bf6      	subs	r6, r6, r7
 800b274:	600f      	str	r7, [r1, #0]
 800b276:	608b      	str	r3, [r1, #8]
 800b278:	2e00      	cmp	r6, #0
 800b27a:	dd9f      	ble.n	800b1bc <__sflush_r+0x18>
 800b27c:	4633      	mov	r3, r6
 800b27e:	463a      	mov	r2, r7
 800b280:	4628      	mov	r0, r5
 800b282:	6a21      	ldr	r1, [r4, #32]
 800b284:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b288:	47e0      	blx	ip
 800b28a:	2800      	cmp	r0, #0
 800b28c:	dc06      	bgt.n	800b29c <__sflush_r+0xf8>
 800b28e:	89a3      	ldrh	r3, [r4, #12]
 800b290:	f04f 30ff 	mov.w	r0, #4294967295
 800b294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b298:	81a3      	strh	r3, [r4, #12]
 800b29a:	e790      	b.n	800b1be <__sflush_r+0x1a>
 800b29c:	4407      	add	r7, r0
 800b29e:	1a36      	subs	r6, r6, r0
 800b2a0:	e7ea      	b.n	800b278 <__sflush_r+0xd4>
 800b2a2:	bf00      	nop
 800b2a4:	20400001 	.word	0x20400001

0800b2a8 <_fflush_r>:
 800b2a8:	b538      	push	{r3, r4, r5, lr}
 800b2aa:	690b      	ldr	r3, [r1, #16]
 800b2ac:	4605      	mov	r5, r0
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	b913      	cbnz	r3, 800b2b8 <_fflush_r+0x10>
 800b2b2:	2500      	movs	r5, #0
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	bd38      	pop	{r3, r4, r5, pc}
 800b2b8:	b118      	cbz	r0, 800b2c2 <_fflush_r+0x1a>
 800b2ba:	6983      	ldr	r3, [r0, #24]
 800b2bc:	b90b      	cbnz	r3, 800b2c2 <_fflush_r+0x1a>
 800b2be:	f000 f887 	bl	800b3d0 <__sinit>
 800b2c2:	4b14      	ldr	r3, [pc, #80]	; (800b314 <_fflush_r+0x6c>)
 800b2c4:	429c      	cmp	r4, r3
 800b2c6:	d11b      	bne.n	800b300 <_fflush_r+0x58>
 800b2c8:	686c      	ldr	r4, [r5, #4]
 800b2ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d0ef      	beq.n	800b2b2 <_fflush_r+0xa>
 800b2d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2d4:	07d0      	lsls	r0, r2, #31
 800b2d6:	d404      	bmi.n	800b2e2 <_fflush_r+0x3a>
 800b2d8:	0599      	lsls	r1, r3, #22
 800b2da:	d402      	bmi.n	800b2e2 <_fflush_r+0x3a>
 800b2dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2de:	f7fd fab8 	bl	8008852 <__retarget_lock_acquire_recursive>
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	f7ff ff5d 	bl	800b1a4 <__sflush_r>
 800b2ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2ec:	4605      	mov	r5, r0
 800b2ee:	07da      	lsls	r2, r3, #31
 800b2f0:	d4e0      	bmi.n	800b2b4 <_fflush_r+0xc>
 800b2f2:	89a3      	ldrh	r3, [r4, #12]
 800b2f4:	059b      	lsls	r3, r3, #22
 800b2f6:	d4dd      	bmi.n	800b2b4 <_fflush_r+0xc>
 800b2f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2fa:	f7fd faab 	bl	8008854 <__retarget_lock_release_recursive>
 800b2fe:	e7d9      	b.n	800b2b4 <_fflush_r+0xc>
 800b300:	4b05      	ldr	r3, [pc, #20]	; (800b318 <_fflush_r+0x70>)
 800b302:	429c      	cmp	r4, r3
 800b304:	d101      	bne.n	800b30a <_fflush_r+0x62>
 800b306:	68ac      	ldr	r4, [r5, #8]
 800b308:	e7df      	b.n	800b2ca <_fflush_r+0x22>
 800b30a:	4b04      	ldr	r3, [pc, #16]	; (800b31c <_fflush_r+0x74>)
 800b30c:	429c      	cmp	r4, r3
 800b30e:	bf08      	it	eq
 800b310:	68ec      	ldreq	r4, [r5, #12]
 800b312:	e7da      	b.n	800b2ca <_fflush_r+0x22>
 800b314:	0800d4ac 	.word	0x0800d4ac
 800b318:	0800d4cc 	.word	0x0800d4cc
 800b31c:	0800d48c 	.word	0x0800d48c

0800b320 <std>:
 800b320:	2300      	movs	r3, #0
 800b322:	b510      	push	{r4, lr}
 800b324:	4604      	mov	r4, r0
 800b326:	e9c0 3300 	strd	r3, r3, [r0]
 800b32a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b32e:	6083      	str	r3, [r0, #8]
 800b330:	8181      	strh	r1, [r0, #12]
 800b332:	6643      	str	r3, [r0, #100]	; 0x64
 800b334:	81c2      	strh	r2, [r0, #14]
 800b336:	6183      	str	r3, [r0, #24]
 800b338:	4619      	mov	r1, r3
 800b33a:	2208      	movs	r2, #8
 800b33c:	305c      	adds	r0, #92	; 0x5c
 800b33e:	f7fd faa1 	bl	8008884 <memset>
 800b342:	4b05      	ldr	r3, [pc, #20]	; (800b358 <std+0x38>)
 800b344:	6224      	str	r4, [r4, #32]
 800b346:	6263      	str	r3, [r4, #36]	; 0x24
 800b348:	4b04      	ldr	r3, [pc, #16]	; (800b35c <std+0x3c>)
 800b34a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b34c:	4b04      	ldr	r3, [pc, #16]	; (800b360 <std+0x40>)
 800b34e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b350:	4b04      	ldr	r3, [pc, #16]	; (800b364 <std+0x44>)
 800b352:	6323      	str	r3, [r4, #48]	; 0x30
 800b354:	bd10      	pop	{r4, pc}
 800b356:	bf00      	nop
 800b358:	0800c961 	.word	0x0800c961
 800b35c:	0800c983 	.word	0x0800c983
 800b360:	0800c9bb 	.word	0x0800c9bb
 800b364:	0800c9df 	.word	0x0800c9df

0800b368 <_cleanup_r>:
 800b368:	4901      	ldr	r1, [pc, #4]	; (800b370 <_cleanup_r+0x8>)
 800b36a:	f000 b8af 	b.w	800b4cc <_fwalk_reent>
 800b36e:	bf00      	nop
 800b370:	0800b2a9 	.word	0x0800b2a9

0800b374 <__sfmoreglue>:
 800b374:	2268      	movs	r2, #104	; 0x68
 800b376:	b570      	push	{r4, r5, r6, lr}
 800b378:	1e4d      	subs	r5, r1, #1
 800b37a:	4355      	muls	r5, r2
 800b37c:	460e      	mov	r6, r1
 800b37e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b382:	f7fd faef 	bl	8008964 <_malloc_r>
 800b386:	4604      	mov	r4, r0
 800b388:	b140      	cbz	r0, 800b39c <__sfmoreglue+0x28>
 800b38a:	2100      	movs	r1, #0
 800b38c:	e9c0 1600 	strd	r1, r6, [r0]
 800b390:	300c      	adds	r0, #12
 800b392:	60a0      	str	r0, [r4, #8]
 800b394:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b398:	f7fd fa74 	bl	8008884 <memset>
 800b39c:	4620      	mov	r0, r4
 800b39e:	bd70      	pop	{r4, r5, r6, pc}

0800b3a0 <__sfp_lock_acquire>:
 800b3a0:	4801      	ldr	r0, [pc, #4]	; (800b3a8 <__sfp_lock_acquire+0x8>)
 800b3a2:	f7fd ba56 	b.w	8008852 <__retarget_lock_acquire_recursive>
 800b3a6:	bf00      	nop
 800b3a8:	200004d1 	.word	0x200004d1

0800b3ac <__sfp_lock_release>:
 800b3ac:	4801      	ldr	r0, [pc, #4]	; (800b3b4 <__sfp_lock_release+0x8>)
 800b3ae:	f7fd ba51 	b.w	8008854 <__retarget_lock_release_recursive>
 800b3b2:	bf00      	nop
 800b3b4:	200004d1 	.word	0x200004d1

0800b3b8 <__sinit_lock_acquire>:
 800b3b8:	4801      	ldr	r0, [pc, #4]	; (800b3c0 <__sinit_lock_acquire+0x8>)
 800b3ba:	f7fd ba4a 	b.w	8008852 <__retarget_lock_acquire_recursive>
 800b3be:	bf00      	nop
 800b3c0:	200004d2 	.word	0x200004d2

0800b3c4 <__sinit_lock_release>:
 800b3c4:	4801      	ldr	r0, [pc, #4]	; (800b3cc <__sinit_lock_release+0x8>)
 800b3c6:	f7fd ba45 	b.w	8008854 <__retarget_lock_release_recursive>
 800b3ca:	bf00      	nop
 800b3cc:	200004d2 	.word	0x200004d2

0800b3d0 <__sinit>:
 800b3d0:	b510      	push	{r4, lr}
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	f7ff fff0 	bl	800b3b8 <__sinit_lock_acquire>
 800b3d8:	69a3      	ldr	r3, [r4, #24]
 800b3da:	b11b      	cbz	r3, 800b3e4 <__sinit+0x14>
 800b3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3e0:	f7ff bff0 	b.w	800b3c4 <__sinit_lock_release>
 800b3e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b3e8:	6523      	str	r3, [r4, #80]	; 0x50
 800b3ea:	4b13      	ldr	r3, [pc, #76]	; (800b438 <__sinit+0x68>)
 800b3ec:	4a13      	ldr	r2, [pc, #76]	; (800b43c <__sinit+0x6c>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3f2:	42a3      	cmp	r3, r4
 800b3f4:	bf08      	it	eq
 800b3f6:	2301      	moveq	r3, #1
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	bf08      	it	eq
 800b3fc:	61a3      	streq	r3, [r4, #24]
 800b3fe:	f000 f81f 	bl	800b440 <__sfp>
 800b402:	6060      	str	r0, [r4, #4]
 800b404:	4620      	mov	r0, r4
 800b406:	f000 f81b 	bl	800b440 <__sfp>
 800b40a:	60a0      	str	r0, [r4, #8]
 800b40c:	4620      	mov	r0, r4
 800b40e:	f000 f817 	bl	800b440 <__sfp>
 800b412:	2200      	movs	r2, #0
 800b414:	2104      	movs	r1, #4
 800b416:	60e0      	str	r0, [r4, #12]
 800b418:	6860      	ldr	r0, [r4, #4]
 800b41a:	f7ff ff81 	bl	800b320 <std>
 800b41e:	2201      	movs	r2, #1
 800b420:	2109      	movs	r1, #9
 800b422:	68a0      	ldr	r0, [r4, #8]
 800b424:	f7ff ff7c 	bl	800b320 <std>
 800b428:	2202      	movs	r2, #2
 800b42a:	2112      	movs	r1, #18
 800b42c:	68e0      	ldr	r0, [r4, #12]
 800b42e:	f7ff ff77 	bl	800b320 <std>
 800b432:	2301      	movs	r3, #1
 800b434:	61a3      	str	r3, [r4, #24]
 800b436:	e7d1      	b.n	800b3dc <__sinit+0xc>
 800b438:	0800d264 	.word	0x0800d264
 800b43c:	0800b369 	.word	0x0800b369

0800b440 <__sfp>:
 800b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b442:	4607      	mov	r7, r0
 800b444:	f7ff ffac 	bl	800b3a0 <__sfp_lock_acquire>
 800b448:	4b1e      	ldr	r3, [pc, #120]	; (800b4c4 <__sfp+0x84>)
 800b44a:	681e      	ldr	r6, [r3, #0]
 800b44c:	69b3      	ldr	r3, [r6, #24]
 800b44e:	b913      	cbnz	r3, 800b456 <__sfp+0x16>
 800b450:	4630      	mov	r0, r6
 800b452:	f7ff ffbd 	bl	800b3d0 <__sinit>
 800b456:	3648      	adds	r6, #72	; 0x48
 800b458:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b45c:	3b01      	subs	r3, #1
 800b45e:	d503      	bpl.n	800b468 <__sfp+0x28>
 800b460:	6833      	ldr	r3, [r6, #0]
 800b462:	b30b      	cbz	r3, 800b4a8 <__sfp+0x68>
 800b464:	6836      	ldr	r6, [r6, #0]
 800b466:	e7f7      	b.n	800b458 <__sfp+0x18>
 800b468:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b46c:	b9d5      	cbnz	r5, 800b4a4 <__sfp+0x64>
 800b46e:	4b16      	ldr	r3, [pc, #88]	; (800b4c8 <__sfp+0x88>)
 800b470:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b474:	60e3      	str	r3, [r4, #12]
 800b476:	6665      	str	r5, [r4, #100]	; 0x64
 800b478:	f7fd f9ea 	bl	8008850 <__retarget_lock_init_recursive>
 800b47c:	f7ff ff96 	bl	800b3ac <__sfp_lock_release>
 800b480:	2208      	movs	r2, #8
 800b482:	4629      	mov	r1, r5
 800b484:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b488:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b48c:	6025      	str	r5, [r4, #0]
 800b48e:	61a5      	str	r5, [r4, #24]
 800b490:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b494:	f7fd f9f6 	bl	8008884 <memset>
 800b498:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b49c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4a4:	3468      	adds	r4, #104	; 0x68
 800b4a6:	e7d9      	b.n	800b45c <__sfp+0x1c>
 800b4a8:	2104      	movs	r1, #4
 800b4aa:	4638      	mov	r0, r7
 800b4ac:	f7ff ff62 	bl	800b374 <__sfmoreglue>
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	6030      	str	r0, [r6, #0]
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d1d5      	bne.n	800b464 <__sfp+0x24>
 800b4b8:	f7ff ff78 	bl	800b3ac <__sfp_lock_release>
 800b4bc:	230c      	movs	r3, #12
 800b4be:	603b      	str	r3, [r7, #0]
 800b4c0:	e7ee      	b.n	800b4a0 <__sfp+0x60>
 800b4c2:	bf00      	nop
 800b4c4:	0800d264 	.word	0x0800d264
 800b4c8:	ffff0001 	.word	0xffff0001

0800b4cc <_fwalk_reent>:
 800b4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4d0:	4606      	mov	r6, r0
 800b4d2:	4688      	mov	r8, r1
 800b4d4:	2700      	movs	r7, #0
 800b4d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b4da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4de:	f1b9 0901 	subs.w	r9, r9, #1
 800b4e2:	d505      	bpl.n	800b4f0 <_fwalk_reent+0x24>
 800b4e4:	6824      	ldr	r4, [r4, #0]
 800b4e6:	2c00      	cmp	r4, #0
 800b4e8:	d1f7      	bne.n	800b4da <_fwalk_reent+0xe>
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4f0:	89ab      	ldrh	r3, [r5, #12]
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d907      	bls.n	800b506 <_fwalk_reent+0x3a>
 800b4f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	d003      	beq.n	800b506 <_fwalk_reent+0x3a>
 800b4fe:	4629      	mov	r1, r5
 800b500:	4630      	mov	r0, r6
 800b502:	47c0      	blx	r8
 800b504:	4307      	orrs	r7, r0
 800b506:	3568      	adds	r5, #104	; 0x68
 800b508:	e7e9      	b.n	800b4de <_fwalk_reent+0x12>

0800b50a <rshift>:
 800b50a:	6903      	ldr	r3, [r0, #16]
 800b50c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b510:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b514:	f100 0414 	add.w	r4, r0, #20
 800b518:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b51c:	dd46      	ble.n	800b5ac <rshift+0xa2>
 800b51e:	f011 011f 	ands.w	r1, r1, #31
 800b522:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b526:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b52a:	d10c      	bne.n	800b546 <rshift+0x3c>
 800b52c:	4629      	mov	r1, r5
 800b52e:	f100 0710 	add.w	r7, r0, #16
 800b532:	42b1      	cmp	r1, r6
 800b534:	d335      	bcc.n	800b5a2 <rshift+0x98>
 800b536:	1a9b      	subs	r3, r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	1eea      	subs	r2, r5, #3
 800b53c:	4296      	cmp	r6, r2
 800b53e:	bf38      	it	cc
 800b540:	2300      	movcc	r3, #0
 800b542:	4423      	add	r3, r4
 800b544:	e015      	b.n	800b572 <rshift+0x68>
 800b546:	46a1      	mov	r9, r4
 800b548:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b54c:	f1c1 0820 	rsb	r8, r1, #32
 800b550:	40cf      	lsrs	r7, r1
 800b552:	f105 0e04 	add.w	lr, r5, #4
 800b556:	4576      	cmp	r6, lr
 800b558:	46f4      	mov	ip, lr
 800b55a:	d816      	bhi.n	800b58a <rshift+0x80>
 800b55c:	1a9a      	subs	r2, r3, r2
 800b55e:	0092      	lsls	r2, r2, #2
 800b560:	3a04      	subs	r2, #4
 800b562:	3501      	adds	r5, #1
 800b564:	42ae      	cmp	r6, r5
 800b566:	bf38      	it	cc
 800b568:	2200      	movcc	r2, #0
 800b56a:	18a3      	adds	r3, r4, r2
 800b56c:	50a7      	str	r7, [r4, r2]
 800b56e:	b107      	cbz	r7, 800b572 <rshift+0x68>
 800b570:	3304      	adds	r3, #4
 800b572:	42a3      	cmp	r3, r4
 800b574:	eba3 0204 	sub.w	r2, r3, r4
 800b578:	bf08      	it	eq
 800b57a:	2300      	moveq	r3, #0
 800b57c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b580:	6102      	str	r2, [r0, #16]
 800b582:	bf08      	it	eq
 800b584:	6143      	streq	r3, [r0, #20]
 800b586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b58a:	f8dc c000 	ldr.w	ip, [ip]
 800b58e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b592:	ea4c 0707 	orr.w	r7, ip, r7
 800b596:	f849 7b04 	str.w	r7, [r9], #4
 800b59a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b59e:	40cf      	lsrs	r7, r1
 800b5a0:	e7d9      	b.n	800b556 <rshift+0x4c>
 800b5a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b5a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b5aa:	e7c2      	b.n	800b532 <rshift+0x28>
 800b5ac:	4623      	mov	r3, r4
 800b5ae:	e7e0      	b.n	800b572 <rshift+0x68>

0800b5b0 <__hexdig_fun>:
 800b5b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b5b4:	2b09      	cmp	r3, #9
 800b5b6:	d802      	bhi.n	800b5be <__hexdig_fun+0xe>
 800b5b8:	3820      	subs	r0, #32
 800b5ba:	b2c0      	uxtb	r0, r0
 800b5bc:	4770      	bx	lr
 800b5be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b5c2:	2b05      	cmp	r3, #5
 800b5c4:	d801      	bhi.n	800b5ca <__hexdig_fun+0x1a>
 800b5c6:	3847      	subs	r0, #71	; 0x47
 800b5c8:	e7f7      	b.n	800b5ba <__hexdig_fun+0xa>
 800b5ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b5ce:	2b05      	cmp	r3, #5
 800b5d0:	d801      	bhi.n	800b5d6 <__hexdig_fun+0x26>
 800b5d2:	3827      	subs	r0, #39	; 0x27
 800b5d4:	e7f1      	b.n	800b5ba <__hexdig_fun+0xa>
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	4770      	bx	lr
	...

0800b5dc <__gethex>:
 800b5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e0:	b08b      	sub	sp, #44	; 0x2c
 800b5e2:	9305      	str	r3, [sp, #20]
 800b5e4:	4bb2      	ldr	r3, [pc, #712]	; (800b8b0 <__gethex+0x2d4>)
 800b5e6:	9002      	str	r0, [sp, #8]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	468b      	mov	fp, r1
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	4690      	mov	r8, r2
 800b5f0:	9303      	str	r3, [sp, #12]
 800b5f2:	f7f4 fdad 	bl	8000150 <strlen>
 800b5f6:	4682      	mov	sl, r0
 800b5f8:	9b03      	ldr	r3, [sp, #12]
 800b5fa:	f8db 2000 	ldr.w	r2, [fp]
 800b5fe:	4403      	add	r3, r0
 800b600:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b604:	9306      	str	r3, [sp, #24]
 800b606:	1c93      	adds	r3, r2, #2
 800b608:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b60c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b610:	32fe      	adds	r2, #254	; 0xfe
 800b612:	18d1      	adds	r1, r2, r3
 800b614:	461f      	mov	r7, r3
 800b616:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b61a:	9101      	str	r1, [sp, #4]
 800b61c:	2830      	cmp	r0, #48	; 0x30
 800b61e:	d0f8      	beq.n	800b612 <__gethex+0x36>
 800b620:	f7ff ffc6 	bl	800b5b0 <__hexdig_fun>
 800b624:	4604      	mov	r4, r0
 800b626:	2800      	cmp	r0, #0
 800b628:	d13a      	bne.n	800b6a0 <__gethex+0xc4>
 800b62a:	4652      	mov	r2, sl
 800b62c:	4638      	mov	r0, r7
 800b62e:	9903      	ldr	r1, [sp, #12]
 800b630:	f001 f9d9 	bl	800c9e6 <strncmp>
 800b634:	4605      	mov	r5, r0
 800b636:	2800      	cmp	r0, #0
 800b638:	d166      	bne.n	800b708 <__gethex+0x12c>
 800b63a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b63e:	eb07 060a 	add.w	r6, r7, sl
 800b642:	f7ff ffb5 	bl	800b5b0 <__hexdig_fun>
 800b646:	2800      	cmp	r0, #0
 800b648:	d060      	beq.n	800b70c <__gethex+0x130>
 800b64a:	4633      	mov	r3, r6
 800b64c:	7818      	ldrb	r0, [r3, #0]
 800b64e:	461f      	mov	r7, r3
 800b650:	2830      	cmp	r0, #48	; 0x30
 800b652:	f103 0301 	add.w	r3, r3, #1
 800b656:	d0f9      	beq.n	800b64c <__gethex+0x70>
 800b658:	f7ff ffaa 	bl	800b5b0 <__hexdig_fun>
 800b65c:	2301      	movs	r3, #1
 800b65e:	fab0 f480 	clz	r4, r0
 800b662:	4635      	mov	r5, r6
 800b664:	0964      	lsrs	r4, r4, #5
 800b666:	9301      	str	r3, [sp, #4]
 800b668:	463a      	mov	r2, r7
 800b66a:	4616      	mov	r6, r2
 800b66c:	7830      	ldrb	r0, [r6, #0]
 800b66e:	3201      	adds	r2, #1
 800b670:	f7ff ff9e 	bl	800b5b0 <__hexdig_fun>
 800b674:	2800      	cmp	r0, #0
 800b676:	d1f8      	bne.n	800b66a <__gethex+0x8e>
 800b678:	4652      	mov	r2, sl
 800b67a:	4630      	mov	r0, r6
 800b67c:	9903      	ldr	r1, [sp, #12]
 800b67e:	f001 f9b2 	bl	800c9e6 <strncmp>
 800b682:	b980      	cbnz	r0, 800b6a6 <__gethex+0xca>
 800b684:	b94d      	cbnz	r5, 800b69a <__gethex+0xbe>
 800b686:	eb06 050a 	add.w	r5, r6, sl
 800b68a:	462a      	mov	r2, r5
 800b68c:	4616      	mov	r6, r2
 800b68e:	7830      	ldrb	r0, [r6, #0]
 800b690:	3201      	adds	r2, #1
 800b692:	f7ff ff8d 	bl	800b5b0 <__hexdig_fun>
 800b696:	2800      	cmp	r0, #0
 800b698:	d1f8      	bne.n	800b68c <__gethex+0xb0>
 800b69a:	1bad      	subs	r5, r5, r6
 800b69c:	00ad      	lsls	r5, r5, #2
 800b69e:	e004      	b.n	800b6aa <__gethex+0xce>
 800b6a0:	2400      	movs	r4, #0
 800b6a2:	4625      	mov	r5, r4
 800b6a4:	e7e0      	b.n	800b668 <__gethex+0x8c>
 800b6a6:	2d00      	cmp	r5, #0
 800b6a8:	d1f7      	bne.n	800b69a <__gethex+0xbe>
 800b6aa:	7833      	ldrb	r3, [r6, #0]
 800b6ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b6b0:	2b50      	cmp	r3, #80	; 0x50
 800b6b2:	d139      	bne.n	800b728 <__gethex+0x14c>
 800b6b4:	7873      	ldrb	r3, [r6, #1]
 800b6b6:	2b2b      	cmp	r3, #43	; 0x2b
 800b6b8:	d02a      	beq.n	800b710 <__gethex+0x134>
 800b6ba:	2b2d      	cmp	r3, #45	; 0x2d
 800b6bc:	d02c      	beq.n	800b718 <__gethex+0x13c>
 800b6be:	f04f 0900 	mov.w	r9, #0
 800b6c2:	1c71      	adds	r1, r6, #1
 800b6c4:	7808      	ldrb	r0, [r1, #0]
 800b6c6:	f7ff ff73 	bl	800b5b0 <__hexdig_fun>
 800b6ca:	1e43      	subs	r3, r0, #1
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2b18      	cmp	r3, #24
 800b6d0:	d82a      	bhi.n	800b728 <__gethex+0x14c>
 800b6d2:	f1a0 0210 	sub.w	r2, r0, #16
 800b6d6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b6da:	f7ff ff69 	bl	800b5b0 <__hexdig_fun>
 800b6de:	1e43      	subs	r3, r0, #1
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b18      	cmp	r3, #24
 800b6e4:	d91b      	bls.n	800b71e <__gethex+0x142>
 800b6e6:	f1b9 0f00 	cmp.w	r9, #0
 800b6ea:	d000      	beq.n	800b6ee <__gethex+0x112>
 800b6ec:	4252      	negs	r2, r2
 800b6ee:	4415      	add	r5, r2
 800b6f0:	f8cb 1000 	str.w	r1, [fp]
 800b6f4:	b1d4      	cbz	r4, 800b72c <__gethex+0x150>
 800b6f6:	9b01      	ldr	r3, [sp, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	bf14      	ite	ne
 800b6fc:	2700      	movne	r7, #0
 800b6fe:	2706      	moveq	r7, #6
 800b700:	4638      	mov	r0, r7
 800b702:	b00b      	add	sp, #44	; 0x2c
 800b704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b708:	463e      	mov	r6, r7
 800b70a:	4625      	mov	r5, r4
 800b70c:	2401      	movs	r4, #1
 800b70e:	e7cc      	b.n	800b6aa <__gethex+0xce>
 800b710:	f04f 0900 	mov.w	r9, #0
 800b714:	1cb1      	adds	r1, r6, #2
 800b716:	e7d5      	b.n	800b6c4 <__gethex+0xe8>
 800b718:	f04f 0901 	mov.w	r9, #1
 800b71c:	e7fa      	b.n	800b714 <__gethex+0x138>
 800b71e:	230a      	movs	r3, #10
 800b720:	fb03 0202 	mla	r2, r3, r2, r0
 800b724:	3a10      	subs	r2, #16
 800b726:	e7d6      	b.n	800b6d6 <__gethex+0xfa>
 800b728:	4631      	mov	r1, r6
 800b72a:	e7e1      	b.n	800b6f0 <__gethex+0x114>
 800b72c:	4621      	mov	r1, r4
 800b72e:	1bf3      	subs	r3, r6, r7
 800b730:	3b01      	subs	r3, #1
 800b732:	2b07      	cmp	r3, #7
 800b734:	dc0a      	bgt.n	800b74c <__gethex+0x170>
 800b736:	9802      	ldr	r0, [sp, #8]
 800b738:	f000 fae4 	bl	800bd04 <_Balloc>
 800b73c:	4604      	mov	r4, r0
 800b73e:	b940      	cbnz	r0, 800b752 <__gethex+0x176>
 800b740:	4602      	mov	r2, r0
 800b742:	21de      	movs	r1, #222	; 0xde
 800b744:	4b5b      	ldr	r3, [pc, #364]	; (800b8b4 <__gethex+0x2d8>)
 800b746:	485c      	ldr	r0, [pc, #368]	; (800b8b8 <__gethex+0x2dc>)
 800b748:	f001 f980 	bl	800ca4c <__assert_func>
 800b74c:	3101      	adds	r1, #1
 800b74e:	105b      	asrs	r3, r3, #1
 800b750:	e7ef      	b.n	800b732 <__gethex+0x156>
 800b752:	f04f 0b00 	mov.w	fp, #0
 800b756:	f100 0914 	add.w	r9, r0, #20
 800b75a:	f1ca 0301 	rsb	r3, sl, #1
 800b75e:	f8cd 9010 	str.w	r9, [sp, #16]
 800b762:	f8cd b004 	str.w	fp, [sp, #4]
 800b766:	9308      	str	r3, [sp, #32]
 800b768:	42b7      	cmp	r7, r6
 800b76a:	d33f      	bcc.n	800b7ec <__gethex+0x210>
 800b76c:	9f04      	ldr	r7, [sp, #16]
 800b76e:	9b01      	ldr	r3, [sp, #4]
 800b770:	f847 3b04 	str.w	r3, [r7], #4
 800b774:	eba7 0709 	sub.w	r7, r7, r9
 800b778:	10bf      	asrs	r7, r7, #2
 800b77a:	6127      	str	r7, [r4, #16]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f000 fbb3 	bl	800bee8 <__hi0bits>
 800b782:	017f      	lsls	r7, r7, #5
 800b784:	f8d8 6000 	ldr.w	r6, [r8]
 800b788:	1a3f      	subs	r7, r7, r0
 800b78a:	42b7      	cmp	r7, r6
 800b78c:	dd62      	ble.n	800b854 <__gethex+0x278>
 800b78e:	1bbf      	subs	r7, r7, r6
 800b790:	4639      	mov	r1, r7
 800b792:	4620      	mov	r0, r4
 800b794:	f000 ff4d 	bl	800c632 <__any_on>
 800b798:	4682      	mov	sl, r0
 800b79a:	b1a8      	cbz	r0, 800b7c8 <__gethex+0x1ec>
 800b79c:	f04f 0a01 	mov.w	sl, #1
 800b7a0:	1e7b      	subs	r3, r7, #1
 800b7a2:	1159      	asrs	r1, r3, #5
 800b7a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b7a8:	f003 021f 	and.w	r2, r3, #31
 800b7ac:	fa0a f202 	lsl.w	r2, sl, r2
 800b7b0:	420a      	tst	r2, r1
 800b7b2:	d009      	beq.n	800b7c8 <__gethex+0x1ec>
 800b7b4:	4553      	cmp	r3, sl
 800b7b6:	dd05      	ble.n	800b7c4 <__gethex+0x1e8>
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	1eb9      	subs	r1, r7, #2
 800b7bc:	f000 ff39 	bl	800c632 <__any_on>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	d144      	bne.n	800b84e <__gethex+0x272>
 800b7c4:	f04f 0a02 	mov.w	sl, #2
 800b7c8:	4639      	mov	r1, r7
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f7ff fe9d 	bl	800b50a <rshift>
 800b7d0:	443d      	add	r5, r7
 800b7d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b7d6:	42ab      	cmp	r3, r5
 800b7d8:	da4a      	bge.n	800b870 <__gethex+0x294>
 800b7da:	4621      	mov	r1, r4
 800b7dc:	9802      	ldr	r0, [sp, #8]
 800b7de:	f000 fad1 	bl	800bd84 <_Bfree>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b7e6:	27a3      	movs	r7, #163	; 0xa3
 800b7e8:	6013      	str	r3, [r2, #0]
 800b7ea:	e789      	b.n	800b700 <__gethex+0x124>
 800b7ec:	1e73      	subs	r3, r6, #1
 800b7ee:	9a06      	ldr	r2, [sp, #24]
 800b7f0:	9307      	str	r3, [sp, #28]
 800b7f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d019      	beq.n	800b82e <__gethex+0x252>
 800b7fa:	f1bb 0f20 	cmp.w	fp, #32
 800b7fe:	d107      	bne.n	800b810 <__gethex+0x234>
 800b800:	9b04      	ldr	r3, [sp, #16]
 800b802:	9a01      	ldr	r2, [sp, #4]
 800b804:	f843 2b04 	str.w	r2, [r3], #4
 800b808:	9304      	str	r3, [sp, #16]
 800b80a:	2300      	movs	r3, #0
 800b80c:	469b      	mov	fp, r3
 800b80e:	9301      	str	r3, [sp, #4]
 800b810:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b814:	f7ff fecc 	bl	800b5b0 <__hexdig_fun>
 800b818:	9b01      	ldr	r3, [sp, #4]
 800b81a:	f000 000f 	and.w	r0, r0, #15
 800b81e:	fa00 f00b 	lsl.w	r0, r0, fp
 800b822:	4303      	orrs	r3, r0
 800b824:	9301      	str	r3, [sp, #4]
 800b826:	f10b 0b04 	add.w	fp, fp, #4
 800b82a:	9b07      	ldr	r3, [sp, #28]
 800b82c:	e00d      	b.n	800b84a <__gethex+0x26e>
 800b82e:	9a08      	ldr	r2, [sp, #32]
 800b830:	1e73      	subs	r3, r6, #1
 800b832:	4413      	add	r3, r2
 800b834:	42bb      	cmp	r3, r7
 800b836:	d3e0      	bcc.n	800b7fa <__gethex+0x21e>
 800b838:	4618      	mov	r0, r3
 800b83a:	4652      	mov	r2, sl
 800b83c:	9903      	ldr	r1, [sp, #12]
 800b83e:	9309      	str	r3, [sp, #36]	; 0x24
 800b840:	f001 f8d1 	bl	800c9e6 <strncmp>
 800b844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b846:	2800      	cmp	r0, #0
 800b848:	d1d7      	bne.n	800b7fa <__gethex+0x21e>
 800b84a:	461e      	mov	r6, r3
 800b84c:	e78c      	b.n	800b768 <__gethex+0x18c>
 800b84e:	f04f 0a03 	mov.w	sl, #3
 800b852:	e7b9      	b.n	800b7c8 <__gethex+0x1ec>
 800b854:	da09      	bge.n	800b86a <__gethex+0x28e>
 800b856:	1bf7      	subs	r7, r6, r7
 800b858:	4621      	mov	r1, r4
 800b85a:	463a      	mov	r2, r7
 800b85c:	9802      	ldr	r0, [sp, #8]
 800b85e:	f000 fca9 	bl	800c1b4 <__lshift>
 800b862:	4604      	mov	r4, r0
 800b864:	1bed      	subs	r5, r5, r7
 800b866:	f100 0914 	add.w	r9, r0, #20
 800b86a:	f04f 0a00 	mov.w	sl, #0
 800b86e:	e7b0      	b.n	800b7d2 <__gethex+0x1f6>
 800b870:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b874:	42a8      	cmp	r0, r5
 800b876:	dd72      	ble.n	800b95e <__gethex+0x382>
 800b878:	1b45      	subs	r5, r0, r5
 800b87a:	42ae      	cmp	r6, r5
 800b87c:	dc35      	bgt.n	800b8ea <__gethex+0x30e>
 800b87e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b882:	2b02      	cmp	r3, #2
 800b884:	d029      	beq.n	800b8da <__gethex+0x2fe>
 800b886:	2b03      	cmp	r3, #3
 800b888:	d02b      	beq.n	800b8e2 <__gethex+0x306>
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d11c      	bne.n	800b8c8 <__gethex+0x2ec>
 800b88e:	42ae      	cmp	r6, r5
 800b890:	d11a      	bne.n	800b8c8 <__gethex+0x2ec>
 800b892:	2e01      	cmp	r6, #1
 800b894:	d112      	bne.n	800b8bc <__gethex+0x2e0>
 800b896:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b89a:	9a05      	ldr	r2, [sp, #20]
 800b89c:	2762      	movs	r7, #98	; 0x62
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	6123      	str	r3, [r4, #16]
 800b8a4:	f8c9 3000 	str.w	r3, [r9]
 800b8a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b8aa:	601c      	str	r4, [r3, #0]
 800b8ac:	e728      	b.n	800b700 <__gethex+0x124>
 800b8ae:	bf00      	nop
 800b8b0:	0800d554 	.word	0x0800d554
 800b8b4:	0800d478 	.word	0x0800d478
 800b8b8:	0800d4ec 	.word	0x0800d4ec
 800b8bc:	4620      	mov	r0, r4
 800b8be:	1e71      	subs	r1, r6, #1
 800b8c0:	f000 feb7 	bl	800c632 <__any_on>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	d1e6      	bne.n	800b896 <__gethex+0x2ba>
 800b8c8:	4621      	mov	r1, r4
 800b8ca:	9802      	ldr	r0, [sp, #8]
 800b8cc:	f000 fa5a 	bl	800bd84 <_Bfree>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b8d4:	2750      	movs	r7, #80	; 0x50
 800b8d6:	6013      	str	r3, [r2, #0]
 800b8d8:	e712      	b.n	800b700 <__gethex+0x124>
 800b8da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d1f3      	bne.n	800b8c8 <__gethex+0x2ec>
 800b8e0:	e7d9      	b.n	800b896 <__gethex+0x2ba>
 800b8e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1d6      	bne.n	800b896 <__gethex+0x2ba>
 800b8e8:	e7ee      	b.n	800b8c8 <__gethex+0x2ec>
 800b8ea:	1e6f      	subs	r7, r5, #1
 800b8ec:	f1ba 0f00 	cmp.w	sl, #0
 800b8f0:	d132      	bne.n	800b958 <__gethex+0x37c>
 800b8f2:	b127      	cbz	r7, 800b8fe <__gethex+0x322>
 800b8f4:	4639      	mov	r1, r7
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f000 fe9b 	bl	800c632 <__any_on>
 800b8fc:	4682      	mov	sl, r0
 800b8fe:	2101      	movs	r1, #1
 800b900:	117b      	asrs	r3, r7, #5
 800b902:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b906:	f007 071f 	and.w	r7, r7, #31
 800b90a:	fa01 f707 	lsl.w	r7, r1, r7
 800b90e:	421f      	tst	r7, r3
 800b910:	f04f 0702 	mov.w	r7, #2
 800b914:	4629      	mov	r1, r5
 800b916:	4620      	mov	r0, r4
 800b918:	bf18      	it	ne
 800b91a:	f04a 0a02 	orrne.w	sl, sl, #2
 800b91e:	1b76      	subs	r6, r6, r5
 800b920:	f7ff fdf3 	bl	800b50a <rshift>
 800b924:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b928:	f1ba 0f00 	cmp.w	sl, #0
 800b92c:	d048      	beq.n	800b9c0 <__gethex+0x3e4>
 800b92e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b932:	2b02      	cmp	r3, #2
 800b934:	d015      	beq.n	800b962 <__gethex+0x386>
 800b936:	2b03      	cmp	r3, #3
 800b938:	d017      	beq.n	800b96a <__gethex+0x38e>
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d109      	bne.n	800b952 <__gethex+0x376>
 800b93e:	f01a 0f02 	tst.w	sl, #2
 800b942:	d006      	beq.n	800b952 <__gethex+0x376>
 800b944:	f8d9 0000 	ldr.w	r0, [r9]
 800b948:	ea4a 0a00 	orr.w	sl, sl, r0
 800b94c:	f01a 0f01 	tst.w	sl, #1
 800b950:	d10e      	bne.n	800b970 <__gethex+0x394>
 800b952:	f047 0710 	orr.w	r7, r7, #16
 800b956:	e033      	b.n	800b9c0 <__gethex+0x3e4>
 800b958:	f04f 0a01 	mov.w	sl, #1
 800b95c:	e7cf      	b.n	800b8fe <__gethex+0x322>
 800b95e:	2701      	movs	r7, #1
 800b960:	e7e2      	b.n	800b928 <__gethex+0x34c>
 800b962:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b964:	f1c3 0301 	rsb	r3, r3, #1
 800b968:	9315      	str	r3, [sp, #84]	; 0x54
 800b96a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d0f0      	beq.n	800b952 <__gethex+0x376>
 800b970:	f04f 0c00 	mov.w	ip, #0
 800b974:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b978:	f104 0314 	add.w	r3, r4, #20
 800b97c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b980:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b984:	4618      	mov	r0, r3
 800b986:	f853 2b04 	ldr.w	r2, [r3], #4
 800b98a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b98e:	d01c      	beq.n	800b9ca <__gethex+0x3ee>
 800b990:	3201      	adds	r2, #1
 800b992:	6002      	str	r2, [r0, #0]
 800b994:	2f02      	cmp	r7, #2
 800b996:	f104 0314 	add.w	r3, r4, #20
 800b99a:	d13d      	bne.n	800ba18 <__gethex+0x43c>
 800b99c:	f8d8 2000 	ldr.w	r2, [r8]
 800b9a0:	3a01      	subs	r2, #1
 800b9a2:	42b2      	cmp	r2, r6
 800b9a4:	d10a      	bne.n	800b9bc <__gethex+0x3e0>
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	1171      	asrs	r1, r6, #5
 800b9aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b9ae:	f006 061f 	and.w	r6, r6, #31
 800b9b2:	fa02 f606 	lsl.w	r6, r2, r6
 800b9b6:	421e      	tst	r6, r3
 800b9b8:	bf18      	it	ne
 800b9ba:	4617      	movne	r7, r2
 800b9bc:	f047 0720 	orr.w	r7, r7, #32
 800b9c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9c2:	601c      	str	r4, [r3, #0]
 800b9c4:	9b05      	ldr	r3, [sp, #20]
 800b9c6:	601d      	str	r5, [r3, #0]
 800b9c8:	e69a      	b.n	800b700 <__gethex+0x124>
 800b9ca:	4299      	cmp	r1, r3
 800b9cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b9d0:	d8d8      	bhi.n	800b984 <__gethex+0x3a8>
 800b9d2:	68a3      	ldr	r3, [r4, #8]
 800b9d4:	459b      	cmp	fp, r3
 800b9d6:	db17      	blt.n	800ba08 <__gethex+0x42c>
 800b9d8:	6861      	ldr	r1, [r4, #4]
 800b9da:	9802      	ldr	r0, [sp, #8]
 800b9dc:	3101      	adds	r1, #1
 800b9de:	f000 f991 	bl	800bd04 <_Balloc>
 800b9e2:	4681      	mov	r9, r0
 800b9e4:	b918      	cbnz	r0, 800b9ee <__gethex+0x412>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	2184      	movs	r1, #132	; 0x84
 800b9ea:	4b19      	ldr	r3, [pc, #100]	; (800ba50 <__gethex+0x474>)
 800b9ec:	e6ab      	b.n	800b746 <__gethex+0x16a>
 800b9ee:	6922      	ldr	r2, [r4, #16]
 800b9f0:	f104 010c 	add.w	r1, r4, #12
 800b9f4:	3202      	adds	r2, #2
 800b9f6:	0092      	lsls	r2, r2, #2
 800b9f8:	300c      	adds	r0, #12
 800b9fa:	f7fc ff35 	bl	8008868 <memcpy>
 800b9fe:	4621      	mov	r1, r4
 800ba00:	9802      	ldr	r0, [sp, #8]
 800ba02:	f000 f9bf 	bl	800bd84 <_Bfree>
 800ba06:	464c      	mov	r4, r9
 800ba08:	6923      	ldr	r3, [r4, #16]
 800ba0a:	1c5a      	adds	r2, r3, #1
 800ba0c:	6122      	str	r2, [r4, #16]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ba14:	615a      	str	r2, [r3, #20]
 800ba16:	e7bd      	b.n	800b994 <__gethex+0x3b8>
 800ba18:	6922      	ldr	r2, [r4, #16]
 800ba1a:	455a      	cmp	r2, fp
 800ba1c:	dd0b      	ble.n	800ba36 <__gethex+0x45a>
 800ba1e:	2101      	movs	r1, #1
 800ba20:	4620      	mov	r0, r4
 800ba22:	f7ff fd72 	bl	800b50a <rshift>
 800ba26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba2a:	3501      	adds	r5, #1
 800ba2c:	42ab      	cmp	r3, r5
 800ba2e:	f6ff aed4 	blt.w	800b7da <__gethex+0x1fe>
 800ba32:	2701      	movs	r7, #1
 800ba34:	e7c2      	b.n	800b9bc <__gethex+0x3e0>
 800ba36:	f016 061f 	ands.w	r6, r6, #31
 800ba3a:	d0fa      	beq.n	800ba32 <__gethex+0x456>
 800ba3c:	4453      	add	r3, sl
 800ba3e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ba42:	f000 fa51 	bl	800bee8 <__hi0bits>
 800ba46:	f1c6 0620 	rsb	r6, r6, #32
 800ba4a:	42b0      	cmp	r0, r6
 800ba4c:	dbe7      	blt.n	800ba1e <__gethex+0x442>
 800ba4e:	e7f0      	b.n	800ba32 <__gethex+0x456>
 800ba50:	0800d478 	.word	0x0800d478

0800ba54 <L_shift>:
 800ba54:	f1c2 0208 	rsb	r2, r2, #8
 800ba58:	0092      	lsls	r2, r2, #2
 800ba5a:	b570      	push	{r4, r5, r6, lr}
 800ba5c:	f1c2 0620 	rsb	r6, r2, #32
 800ba60:	6843      	ldr	r3, [r0, #4]
 800ba62:	6804      	ldr	r4, [r0, #0]
 800ba64:	fa03 f506 	lsl.w	r5, r3, r6
 800ba68:	432c      	orrs	r4, r5
 800ba6a:	40d3      	lsrs	r3, r2
 800ba6c:	6004      	str	r4, [r0, #0]
 800ba6e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ba72:	4288      	cmp	r0, r1
 800ba74:	d3f4      	bcc.n	800ba60 <L_shift+0xc>
 800ba76:	bd70      	pop	{r4, r5, r6, pc}

0800ba78 <__match>:
 800ba78:	b530      	push	{r4, r5, lr}
 800ba7a:	6803      	ldr	r3, [r0, #0]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba82:	b914      	cbnz	r4, 800ba8a <__match+0x12>
 800ba84:	6003      	str	r3, [r0, #0]
 800ba86:	2001      	movs	r0, #1
 800ba88:	bd30      	pop	{r4, r5, pc}
 800ba8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ba92:	2d19      	cmp	r5, #25
 800ba94:	bf98      	it	ls
 800ba96:	3220      	addls	r2, #32
 800ba98:	42a2      	cmp	r2, r4
 800ba9a:	d0f0      	beq.n	800ba7e <__match+0x6>
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	e7f3      	b.n	800ba88 <__match+0x10>

0800baa0 <__hexnan>:
 800baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa4:	2500      	movs	r5, #0
 800baa6:	680b      	ldr	r3, [r1, #0]
 800baa8:	4682      	mov	sl, r0
 800baaa:	115e      	asrs	r6, r3, #5
 800baac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bab0:	f013 031f 	ands.w	r3, r3, #31
 800bab4:	bf18      	it	ne
 800bab6:	3604      	addne	r6, #4
 800bab8:	1f37      	subs	r7, r6, #4
 800baba:	46b9      	mov	r9, r7
 800babc:	463c      	mov	r4, r7
 800babe:	46ab      	mov	fp, r5
 800bac0:	b087      	sub	sp, #28
 800bac2:	4690      	mov	r8, r2
 800bac4:	6802      	ldr	r2, [r0, #0]
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	f846 5c04 	str.w	r5, [r6, #-4]
 800bacc:	9502      	str	r5, [sp, #8]
 800bace:	7851      	ldrb	r1, [r2, #1]
 800bad0:	1c53      	adds	r3, r2, #1
 800bad2:	9303      	str	r3, [sp, #12]
 800bad4:	b341      	cbz	r1, 800bb28 <__hexnan+0x88>
 800bad6:	4608      	mov	r0, r1
 800bad8:	9205      	str	r2, [sp, #20]
 800bada:	9104      	str	r1, [sp, #16]
 800badc:	f7ff fd68 	bl	800b5b0 <__hexdig_fun>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	d14f      	bne.n	800bb84 <__hexnan+0xe4>
 800bae4:	9904      	ldr	r1, [sp, #16]
 800bae6:	9a05      	ldr	r2, [sp, #20]
 800bae8:	2920      	cmp	r1, #32
 800baea:	d818      	bhi.n	800bb1e <__hexnan+0x7e>
 800baec:	9b02      	ldr	r3, [sp, #8]
 800baee:	459b      	cmp	fp, r3
 800baf0:	dd13      	ble.n	800bb1a <__hexnan+0x7a>
 800baf2:	454c      	cmp	r4, r9
 800baf4:	d206      	bcs.n	800bb04 <__hexnan+0x64>
 800baf6:	2d07      	cmp	r5, #7
 800baf8:	dc04      	bgt.n	800bb04 <__hexnan+0x64>
 800bafa:	462a      	mov	r2, r5
 800bafc:	4649      	mov	r1, r9
 800bafe:	4620      	mov	r0, r4
 800bb00:	f7ff ffa8 	bl	800ba54 <L_shift>
 800bb04:	4544      	cmp	r4, r8
 800bb06:	d950      	bls.n	800bbaa <__hexnan+0x10a>
 800bb08:	2300      	movs	r3, #0
 800bb0a:	f1a4 0904 	sub.w	r9, r4, #4
 800bb0e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb12:	461d      	mov	r5, r3
 800bb14:	464c      	mov	r4, r9
 800bb16:	f8cd b008 	str.w	fp, [sp, #8]
 800bb1a:	9a03      	ldr	r2, [sp, #12]
 800bb1c:	e7d7      	b.n	800bace <__hexnan+0x2e>
 800bb1e:	2929      	cmp	r1, #41	; 0x29
 800bb20:	d156      	bne.n	800bbd0 <__hexnan+0x130>
 800bb22:	3202      	adds	r2, #2
 800bb24:	f8ca 2000 	str.w	r2, [sl]
 800bb28:	f1bb 0f00 	cmp.w	fp, #0
 800bb2c:	d050      	beq.n	800bbd0 <__hexnan+0x130>
 800bb2e:	454c      	cmp	r4, r9
 800bb30:	d206      	bcs.n	800bb40 <__hexnan+0xa0>
 800bb32:	2d07      	cmp	r5, #7
 800bb34:	dc04      	bgt.n	800bb40 <__hexnan+0xa0>
 800bb36:	462a      	mov	r2, r5
 800bb38:	4649      	mov	r1, r9
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f7ff ff8a 	bl	800ba54 <L_shift>
 800bb40:	4544      	cmp	r4, r8
 800bb42:	d934      	bls.n	800bbae <__hexnan+0x10e>
 800bb44:	4623      	mov	r3, r4
 800bb46:	f1a8 0204 	sub.w	r2, r8, #4
 800bb4a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bb4e:	429f      	cmp	r7, r3
 800bb50:	f842 1f04 	str.w	r1, [r2, #4]!
 800bb54:	d2f9      	bcs.n	800bb4a <__hexnan+0xaa>
 800bb56:	1b3b      	subs	r3, r7, r4
 800bb58:	f023 0303 	bic.w	r3, r3, #3
 800bb5c:	3304      	adds	r3, #4
 800bb5e:	3401      	adds	r4, #1
 800bb60:	3e03      	subs	r6, #3
 800bb62:	42b4      	cmp	r4, r6
 800bb64:	bf88      	it	hi
 800bb66:	2304      	movhi	r3, #4
 800bb68:	2200      	movs	r2, #0
 800bb6a:	4443      	add	r3, r8
 800bb6c:	f843 2b04 	str.w	r2, [r3], #4
 800bb70:	429f      	cmp	r7, r3
 800bb72:	d2fb      	bcs.n	800bb6c <__hexnan+0xcc>
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	b91b      	cbnz	r3, 800bb80 <__hexnan+0xe0>
 800bb78:	4547      	cmp	r7, r8
 800bb7a:	d127      	bne.n	800bbcc <__hexnan+0x12c>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	603b      	str	r3, [r7, #0]
 800bb80:	2005      	movs	r0, #5
 800bb82:	e026      	b.n	800bbd2 <__hexnan+0x132>
 800bb84:	3501      	adds	r5, #1
 800bb86:	2d08      	cmp	r5, #8
 800bb88:	f10b 0b01 	add.w	fp, fp, #1
 800bb8c:	dd06      	ble.n	800bb9c <__hexnan+0xfc>
 800bb8e:	4544      	cmp	r4, r8
 800bb90:	d9c3      	bls.n	800bb1a <__hexnan+0x7a>
 800bb92:	2300      	movs	r3, #0
 800bb94:	2501      	movs	r5, #1
 800bb96:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb9a:	3c04      	subs	r4, #4
 800bb9c:	6822      	ldr	r2, [r4, #0]
 800bb9e:	f000 000f 	and.w	r0, r0, #15
 800bba2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bba6:	6022      	str	r2, [r4, #0]
 800bba8:	e7b7      	b.n	800bb1a <__hexnan+0x7a>
 800bbaa:	2508      	movs	r5, #8
 800bbac:	e7b5      	b.n	800bb1a <__hexnan+0x7a>
 800bbae:	9b01      	ldr	r3, [sp, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d0df      	beq.n	800bb74 <__hexnan+0xd4>
 800bbb4:	f04f 32ff 	mov.w	r2, #4294967295
 800bbb8:	f1c3 0320 	rsb	r3, r3, #32
 800bbbc:	fa22 f303 	lsr.w	r3, r2, r3
 800bbc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bbc4:	401a      	ands	r2, r3
 800bbc6:	f846 2c04 	str.w	r2, [r6, #-4]
 800bbca:	e7d3      	b.n	800bb74 <__hexnan+0xd4>
 800bbcc:	3f04      	subs	r7, #4
 800bbce:	e7d1      	b.n	800bb74 <__hexnan+0xd4>
 800bbd0:	2004      	movs	r0, #4
 800bbd2:	b007      	add	sp, #28
 800bbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bbd8 <_localeconv_r>:
 800bbd8:	4800      	ldr	r0, [pc, #0]	; (800bbdc <_localeconv_r+0x4>)
 800bbda:	4770      	bx	lr
 800bbdc:	200003e4 	.word	0x200003e4

0800bbe0 <__swhatbuf_r>:
 800bbe0:	b570      	push	{r4, r5, r6, lr}
 800bbe2:	460e      	mov	r6, r1
 800bbe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe8:	4614      	mov	r4, r2
 800bbea:	2900      	cmp	r1, #0
 800bbec:	461d      	mov	r5, r3
 800bbee:	b096      	sub	sp, #88	; 0x58
 800bbf0:	da08      	bge.n	800bc04 <__swhatbuf_r+0x24>
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bbf8:	602a      	str	r2, [r5, #0]
 800bbfa:	061a      	lsls	r2, r3, #24
 800bbfc:	d410      	bmi.n	800bc20 <__swhatbuf_r+0x40>
 800bbfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc02:	e00e      	b.n	800bc22 <__swhatbuf_r+0x42>
 800bc04:	466a      	mov	r2, sp
 800bc06:	f000 ff61 	bl	800cacc <_fstat_r>
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	dbf1      	blt.n	800bbf2 <__swhatbuf_r+0x12>
 800bc0e:	9a01      	ldr	r2, [sp, #4]
 800bc10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc18:	425a      	negs	r2, r3
 800bc1a:	415a      	adcs	r2, r3
 800bc1c:	602a      	str	r2, [r5, #0]
 800bc1e:	e7ee      	b.n	800bbfe <__swhatbuf_r+0x1e>
 800bc20:	2340      	movs	r3, #64	; 0x40
 800bc22:	2000      	movs	r0, #0
 800bc24:	6023      	str	r3, [r4, #0]
 800bc26:	b016      	add	sp, #88	; 0x58
 800bc28:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bc2c <__smakebuf_r>:
 800bc2c:	898b      	ldrh	r3, [r1, #12]
 800bc2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc30:	079d      	lsls	r5, r3, #30
 800bc32:	4606      	mov	r6, r0
 800bc34:	460c      	mov	r4, r1
 800bc36:	d507      	bpl.n	800bc48 <__smakebuf_r+0x1c>
 800bc38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc3c:	6023      	str	r3, [r4, #0]
 800bc3e:	6123      	str	r3, [r4, #16]
 800bc40:	2301      	movs	r3, #1
 800bc42:	6163      	str	r3, [r4, #20]
 800bc44:	b002      	add	sp, #8
 800bc46:	bd70      	pop	{r4, r5, r6, pc}
 800bc48:	466a      	mov	r2, sp
 800bc4a:	ab01      	add	r3, sp, #4
 800bc4c:	f7ff ffc8 	bl	800bbe0 <__swhatbuf_r>
 800bc50:	9900      	ldr	r1, [sp, #0]
 800bc52:	4605      	mov	r5, r0
 800bc54:	4630      	mov	r0, r6
 800bc56:	f7fc fe85 	bl	8008964 <_malloc_r>
 800bc5a:	b948      	cbnz	r0, 800bc70 <__smakebuf_r+0x44>
 800bc5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc60:	059a      	lsls	r2, r3, #22
 800bc62:	d4ef      	bmi.n	800bc44 <__smakebuf_r+0x18>
 800bc64:	f023 0303 	bic.w	r3, r3, #3
 800bc68:	f043 0302 	orr.w	r3, r3, #2
 800bc6c:	81a3      	strh	r3, [r4, #12]
 800bc6e:	e7e3      	b.n	800bc38 <__smakebuf_r+0xc>
 800bc70:	4b0d      	ldr	r3, [pc, #52]	; (800bca8 <__smakebuf_r+0x7c>)
 800bc72:	62b3      	str	r3, [r6, #40]	; 0x28
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	6020      	str	r0, [r4, #0]
 800bc78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc7c:	81a3      	strh	r3, [r4, #12]
 800bc7e:	9b00      	ldr	r3, [sp, #0]
 800bc80:	6120      	str	r0, [r4, #16]
 800bc82:	6163      	str	r3, [r4, #20]
 800bc84:	9b01      	ldr	r3, [sp, #4]
 800bc86:	b15b      	cbz	r3, 800bca0 <__smakebuf_r+0x74>
 800bc88:	4630      	mov	r0, r6
 800bc8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc8e:	f000 ff2f 	bl	800caf0 <_isatty_r>
 800bc92:	b128      	cbz	r0, 800bca0 <__smakebuf_r+0x74>
 800bc94:	89a3      	ldrh	r3, [r4, #12]
 800bc96:	f023 0303 	bic.w	r3, r3, #3
 800bc9a:	f043 0301 	orr.w	r3, r3, #1
 800bc9e:	81a3      	strh	r3, [r4, #12]
 800bca0:	89a0      	ldrh	r0, [r4, #12]
 800bca2:	4305      	orrs	r5, r0
 800bca4:	81a5      	strh	r5, [r4, #12]
 800bca6:	e7cd      	b.n	800bc44 <__smakebuf_r+0x18>
 800bca8:	0800b369 	.word	0x0800b369

0800bcac <__ascii_mbtowc>:
 800bcac:	b082      	sub	sp, #8
 800bcae:	b901      	cbnz	r1, 800bcb2 <__ascii_mbtowc+0x6>
 800bcb0:	a901      	add	r1, sp, #4
 800bcb2:	b142      	cbz	r2, 800bcc6 <__ascii_mbtowc+0x1a>
 800bcb4:	b14b      	cbz	r3, 800bcca <__ascii_mbtowc+0x1e>
 800bcb6:	7813      	ldrb	r3, [r2, #0]
 800bcb8:	600b      	str	r3, [r1, #0]
 800bcba:	7812      	ldrb	r2, [r2, #0]
 800bcbc:	1e10      	subs	r0, r2, #0
 800bcbe:	bf18      	it	ne
 800bcc0:	2001      	movne	r0, #1
 800bcc2:	b002      	add	sp, #8
 800bcc4:	4770      	bx	lr
 800bcc6:	4610      	mov	r0, r2
 800bcc8:	e7fb      	b.n	800bcc2 <__ascii_mbtowc+0x16>
 800bcca:	f06f 0001 	mvn.w	r0, #1
 800bcce:	e7f8      	b.n	800bcc2 <__ascii_mbtowc+0x16>

0800bcd0 <memchr>:
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	b510      	push	{r4, lr}
 800bcd4:	b2c9      	uxtb	r1, r1
 800bcd6:	4402      	add	r2, r0
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	4618      	mov	r0, r3
 800bcdc:	d101      	bne.n	800bce2 <memchr+0x12>
 800bcde:	2000      	movs	r0, #0
 800bce0:	e003      	b.n	800bcea <memchr+0x1a>
 800bce2:	7804      	ldrb	r4, [r0, #0]
 800bce4:	3301      	adds	r3, #1
 800bce6:	428c      	cmp	r4, r1
 800bce8:	d1f6      	bne.n	800bcd8 <memchr+0x8>
 800bcea:	bd10      	pop	{r4, pc}

0800bcec <__malloc_lock>:
 800bcec:	4801      	ldr	r0, [pc, #4]	; (800bcf4 <__malloc_lock+0x8>)
 800bcee:	f7fc bdb0 	b.w	8008852 <__retarget_lock_acquire_recursive>
 800bcf2:	bf00      	nop
 800bcf4:	200004d0 	.word	0x200004d0

0800bcf8 <__malloc_unlock>:
 800bcf8:	4801      	ldr	r0, [pc, #4]	; (800bd00 <__malloc_unlock+0x8>)
 800bcfa:	f7fc bdab 	b.w	8008854 <__retarget_lock_release_recursive>
 800bcfe:	bf00      	nop
 800bd00:	200004d0 	.word	0x200004d0

0800bd04 <_Balloc>:
 800bd04:	b570      	push	{r4, r5, r6, lr}
 800bd06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd08:	4604      	mov	r4, r0
 800bd0a:	460d      	mov	r5, r1
 800bd0c:	b976      	cbnz	r6, 800bd2c <_Balloc+0x28>
 800bd0e:	2010      	movs	r0, #16
 800bd10:	f7fc fda2 	bl	8008858 <malloc>
 800bd14:	4602      	mov	r2, r0
 800bd16:	6260      	str	r0, [r4, #36]	; 0x24
 800bd18:	b920      	cbnz	r0, 800bd24 <_Balloc+0x20>
 800bd1a:	2166      	movs	r1, #102	; 0x66
 800bd1c:	4b17      	ldr	r3, [pc, #92]	; (800bd7c <_Balloc+0x78>)
 800bd1e:	4818      	ldr	r0, [pc, #96]	; (800bd80 <_Balloc+0x7c>)
 800bd20:	f000 fe94 	bl	800ca4c <__assert_func>
 800bd24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd28:	6006      	str	r6, [r0, #0]
 800bd2a:	60c6      	str	r6, [r0, #12]
 800bd2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bd2e:	68f3      	ldr	r3, [r6, #12]
 800bd30:	b183      	cbz	r3, 800bd54 <_Balloc+0x50>
 800bd32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd3a:	b9b8      	cbnz	r0, 800bd6c <_Balloc+0x68>
 800bd3c:	2101      	movs	r1, #1
 800bd3e:	fa01 f605 	lsl.w	r6, r1, r5
 800bd42:	1d72      	adds	r2, r6, #5
 800bd44:	4620      	mov	r0, r4
 800bd46:	0092      	lsls	r2, r2, #2
 800bd48:	f000 fc94 	bl	800c674 <_calloc_r>
 800bd4c:	b160      	cbz	r0, 800bd68 <_Balloc+0x64>
 800bd4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd52:	e00e      	b.n	800bd72 <_Balloc+0x6e>
 800bd54:	2221      	movs	r2, #33	; 0x21
 800bd56:	2104      	movs	r1, #4
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f000 fc8b 	bl	800c674 <_calloc_r>
 800bd5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd60:	60f0      	str	r0, [r6, #12]
 800bd62:	68db      	ldr	r3, [r3, #12]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1e4      	bne.n	800bd32 <_Balloc+0x2e>
 800bd68:	2000      	movs	r0, #0
 800bd6a:	bd70      	pop	{r4, r5, r6, pc}
 800bd6c:	6802      	ldr	r2, [r0, #0]
 800bd6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd72:	2300      	movs	r3, #0
 800bd74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd78:	e7f7      	b.n	800bd6a <_Balloc+0x66>
 800bd7a:	bf00      	nop
 800bd7c:	0800d406 	.word	0x0800d406
 800bd80:	0800d568 	.word	0x0800d568

0800bd84 <_Bfree>:
 800bd84:	b570      	push	{r4, r5, r6, lr}
 800bd86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd88:	4605      	mov	r5, r0
 800bd8a:	460c      	mov	r4, r1
 800bd8c:	b976      	cbnz	r6, 800bdac <_Bfree+0x28>
 800bd8e:	2010      	movs	r0, #16
 800bd90:	f7fc fd62 	bl	8008858 <malloc>
 800bd94:	4602      	mov	r2, r0
 800bd96:	6268      	str	r0, [r5, #36]	; 0x24
 800bd98:	b920      	cbnz	r0, 800bda4 <_Bfree+0x20>
 800bd9a:	218a      	movs	r1, #138	; 0x8a
 800bd9c:	4b08      	ldr	r3, [pc, #32]	; (800bdc0 <_Bfree+0x3c>)
 800bd9e:	4809      	ldr	r0, [pc, #36]	; (800bdc4 <_Bfree+0x40>)
 800bda0:	f000 fe54 	bl	800ca4c <__assert_func>
 800bda4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bda8:	6006      	str	r6, [r0, #0]
 800bdaa:	60c6      	str	r6, [r0, #12]
 800bdac:	b13c      	cbz	r4, 800bdbe <_Bfree+0x3a>
 800bdae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bdb0:	6862      	ldr	r2, [r4, #4]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdb8:	6021      	str	r1, [r4, #0]
 800bdba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdbe:	bd70      	pop	{r4, r5, r6, pc}
 800bdc0:	0800d406 	.word	0x0800d406
 800bdc4:	0800d568 	.word	0x0800d568

0800bdc8 <__multadd>:
 800bdc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdcc:	4607      	mov	r7, r0
 800bdce:	460c      	mov	r4, r1
 800bdd0:	461e      	mov	r6, r3
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	690d      	ldr	r5, [r1, #16]
 800bdd6:	f101 0c14 	add.w	ip, r1, #20
 800bdda:	f8dc 3000 	ldr.w	r3, [ip]
 800bdde:	3001      	adds	r0, #1
 800bde0:	b299      	uxth	r1, r3
 800bde2:	fb02 6101 	mla	r1, r2, r1, r6
 800bde6:	0c1e      	lsrs	r6, r3, #16
 800bde8:	0c0b      	lsrs	r3, r1, #16
 800bdea:	fb02 3306 	mla	r3, r2, r6, r3
 800bdee:	b289      	uxth	r1, r1
 800bdf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bdf4:	4285      	cmp	r5, r0
 800bdf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bdfa:	f84c 1b04 	str.w	r1, [ip], #4
 800bdfe:	dcec      	bgt.n	800bdda <__multadd+0x12>
 800be00:	b30e      	cbz	r6, 800be46 <__multadd+0x7e>
 800be02:	68a3      	ldr	r3, [r4, #8]
 800be04:	42ab      	cmp	r3, r5
 800be06:	dc19      	bgt.n	800be3c <__multadd+0x74>
 800be08:	6861      	ldr	r1, [r4, #4]
 800be0a:	4638      	mov	r0, r7
 800be0c:	3101      	adds	r1, #1
 800be0e:	f7ff ff79 	bl	800bd04 <_Balloc>
 800be12:	4680      	mov	r8, r0
 800be14:	b928      	cbnz	r0, 800be22 <__multadd+0x5a>
 800be16:	4602      	mov	r2, r0
 800be18:	21b5      	movs	r1, #181	; 0xb5
 800be1a:	4b0c      	ldr	r3, [pc, #48]	; (800be4c <__multadd+0x84>)
 800be1c:	480c      	ldr	r0, [pc, #48]	; (800be50 <__multadd+0x88>)
 800be1e:	f000 fe15 	bl	800ca4c <__assert_func>
 800be22:	6922      	ldr	r2, [r4, #16]
 800be24:	f104 010c 	add.w	r1, r4, #12
 800be28:	3202      	adds	r2, #2
 800be2a:	0092      	lsls	r2, r2, #2
 800be2c:	300c      	adds	r0, #12
 800be2e:	f7fc fd1b 	bl	8008868 <memcpy>
 800be32:	4621      	mov	r1, r4
 800be34:	4638      	mov	r0, r7
 800be36:	f7ff ffa5 	bl	800bd84 <_Bfree>
 800be3a:	4644      	mov	r4, r8
 800be3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be40:	3501      	adds	r5, #1
 800be42:	615e      	str	r6, [r3, #20]
 800be44:	6125      	str	r5, [r4, #16]
 800be46:	4620      	mov	r0, r4
 800be48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be4c:	0800d478 	.word	0x0800d478
 800be50:	0800d568 	.word	0x0800d568

0800be54 <__s2b>:
 800be54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be58:	4615      	mov	r5, r2
 800be5a:	2209      	movs	r2, #9
 800be5c:	461f      	mov	r7, r3
 800be5e:	3308      	adds	r3, #8
 800be60:	460c      	mov	r4, r1
 800be62:	fb93 f3f2 	sdiv	r3, r3, r2
 800be66:	4606      	mov	r6, r0
 800be68:	2201      	movs	r2, #1
 800be6a:	2100      	movs	r1, #0
 800be6c:	429a      	cmp	r2, r3
 800be6e:	db09      	blt.n	800be84 <__s2b+0x30>
 800be70:	4630      	mov	r0, r6
 800be72:	f7ff ff47 	bl	800bd04 <_Balloc>
 800be76:	b940      	cbnz	r0, 800be8a <__s2b+0x36>
 800be78:	4602      	mov	r2, r0
 800be7a:	21ce      	movs	r1, #206	; 0xce
 800be7c:	4b18      	ldr	r3, [pc, #96]	; (800bee0 <__s2b+0x8c>)
 800be7e:	4819      	ldr	r0, [pc, #100]	; (800bee4 <__s2b+0x90>)
 800be80:	f000 fde4 	bl	800ca4c <__assert_func>
 800be84:	0052      	lsls	r2, r2, #1
 800be86:	3101      	adds	r1, #1
 800be88:	e7f0      	b.n	800be6c <__s2b+0x18>
 800be8a:	9b08      	ldr	r3, [sp, #32]
 800be8c:	2d09      	cmp	r5, #9
 800be8e:	6143      	str	r3, [r0, #20]
 800be90:	f04f 0301 	mov.w	r3, #1
 800be94:	6103      	str	r3, [r0, #16]
 800be96:	dd16      	ble.n	800bec6 <__s2b+0x72>
 800be98:	f104 0909 	add.w	r9, r4, #9
 800be9c:	46c8      	mov	r8, r9
 800be9e:	442c      	add	r4, r5
 800bea0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bea4:	4601      	mov	r1, r0
 800bea6:	220a      	movs	r2, #10
 800bea8:	4630      	mov	r0, r6
 800beaa:	3b30      	subs	r3, #48	; 0x30
 800beac:	f7ff ff8c 	bl	800bdc8 <__multadd>
 800beb0:	45a0      	cmp	r8, r4
 800beb2:	d1f5      	bne.n	800bea0 <__s2b+0x4c>
 800beb4:	f1a5 0408 	sub.w	r4, r5, #8
 800beb8:	444c      	add	r4, r9
 800beba:	1b2d      	subs	r5, r5, r4
 800bebc:	1963      	adds	r3, r4, r5
 800bebe:	42bb      	cmp	r3, r7
 800bec0:	db04      	blt.n	800becc <__s2b+0x78>
 800bec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bec6:	2509      	movs	r5, #9
 800bec8:	340a      	adds	r4, #10
 800beca:	e7f6      	b.n	800beba <__s2b+0x66>
 800becc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bed0:	4601      	mov	r1, r0
 800bed2:	220a      	movs	r2, #10
 800bed4:	4630      	mov	r0, r6
 800bed6:	3b30      	subs	r3, #48	; 0x30
 800bed8:	f7ff ff76 	bl	800bdc8 <__multadd>
 800bedc:	e7ee      	b.n	800bebc <__s2b+0x68>
 800bede:	bf00      	nop
 800bee0:	0800d478 	.word	0x0800d478
 800bee4:	0800d568 	.word	0x0800d568

0800bee8 <__hi0bits>:
 800bee8:	0c02      	lsrs	r2, r0, #16
 800beea:	0412      	lsls	r2, r2, #16
 800beec:	4603      	mov	r3, r0
 800beee:	b9ca      	cbnz	r2, 800bf24 <__hi0bits+0x3c>
 800bef0:	0403      	lsls	r3, r0, #16
 800bef2:	2010      	movs	r0, #16
 800bef4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bef8:	bf04      	itt	eq
 800befa:	021b      	lsleq	r3, r3, #8
 800befc:	3008      	addeq	r0, #8
 800befe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bf02:	bf04      	itt	eq
 800bf04:	011b      	lsleq	r3, r3, #4
 800bf06:	3004      	addeq	r0, #4
 800bf08:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bf0c:	bf04      	itt	eq
 800bf0e:	009b      	lsleq	r3, r3, #2
 800bf10:	3002      	addeq	r0, #2
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	db05      	blt.n	800bf22 <__hi0bits+0x3a>
 800bf16:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bf1a:	f100 0001 	add.w	r0, r0, #1
 800bf1e:	bf08      	it	eq
 800bf20:	2020      	moveq	r0, #32
 800bf22:	4770      	bx	lr
 800bf24:	2000      	movs	r0, #0
 800bf26:	e7e5      	b.n	800bef4 <__hi0bits+0xc>

0800bf28 <__lo0bits>:
 800bf28:	6803      	ldr	r3, [r0, #0]
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	f013 0007 	ands.w	r0, r3, #7
 800bf30:	d00b      	beq.n	800bf4a <__lo0bits+0x22>
 800bf32:	07d9      	lsls	r1, r3, #31
 800bf34:	d421      	bmi.n	800bf7a <__lo0bits+0x52>
 800bf36:	0798      	lsls	r0, r3, #30
 800bf38:	bf49      	itett	mi
 800bf3a:	085b      	lsrmi	r3, r3, #1
 800bf3c:	089b      	lsrpl	r3, r3, #2
 800bf3e:	2001      	movmi	r0, #1
 800bf40:	6013      	strmi	r3, [r2, #0]
 800bf42:	bf5c      	itt	pl
 800bf44:	2002      	movpl	r0, #2
 800bf46:	6013      	strpl	r3, [r2, #0]
 800bf48:	4770      	bx	lr
 800bf4a:	b299      	uxth	r1, r3
 800bf4c:	b909      	cbnz	r1, 800bf52 <__lo0bits+0x2a>
 800bf4e:	2010      	movs	r0, #16
 800bf50:	0c1b      	lsrs	r3, r3, #16
 800bf52:	b2d9      	uxtb	r1, r3
 800bf54:	b909      	cbnz	r1, 800bf5a <__lo0bits+0x32>
 800bf56:	3008      	adds	r0, #8
 800bf58:	0a1b      	lsrs	r3, r3, #8
 800bf5a:	0719      	lsls	r1, r3, #28
 800bf5c:	bf04      	itt	eq
 800bf5e:	091b      	lsreq	r3, r3, #4
 800bf60:	3004      	addeq	r0, #4
 800bf62:	0799      	lsls	r1, r3, #30
 800bf64:	bf04      	itt	eq
 800bf66:	089b      	lsreq	r3, r3, #2
 800bf68:	3002      	addeq	r0, #2
 800bf6a:	07d9      	lsls	r1, r3, #31
 800bf6c:	d403      	bmi.n	800bf76 <__lo0bits+0x4e>
 800bf6e:	085b      	lsrs	r3, r3, #1
 800bf70:	f100 0001 	add.w	r0, r0, #1
 800bf74:	d003      	beq.n	800bf7e <__lo0bits+0x56>
 800bf76:	6013      	str	r3, [r2, #0]
 800bf78:	4770      	bx	lr
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	4770      	bx	lr
 800bf7e:	2020      	movs	r0, #32
 800bf80:	4770      	bx	lr
	...

0800bf84 <__i2b>:
 800bf84:	b510      	push	{r4, lr}
 800bf86:	460c      	mov	r4, r1
 800bf88:	2101      	movs	r1, #1
 800bf8a:	f7ff febb 	bl	800bd04 <_Balloc>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	b928      	cbnz	r0, 800bf9e <__i2b+0x1a>
 800bf92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bf96:	4b04      	ldr	r3, [pc, #16]	; (800bfa8 <__i2b+0x24>)
 800bf98:	4804      	ldr	r0, [pc, #16]	; (800bfac <__i2b+0x28>)
 800bf9a:	f000 fd57 	bl	800ca4c <__assert_func>
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	6144      	str	r4, [r0, #20]
 800bfa2:	6103      	str	r3, [r0, #16]
 800bfa4:	bd10      	pop	{r4, pc}
 800bfa6:	bf00      	nop
 800bfa8:	0800d478 	.word	0x0800d478
 800bfac:	0800d568 	.word	0x0800d568

0800bfb0 <__multiply>:
 800bfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb4:	4691      	mov	r9, r2
 800bfb6:	690a      	ldr	r2, [r1, #16]
 800bfb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	bfbe      	ittt	lt
 800bfc2:	460b      	movlt	r3, r1
 800bfc4:	464c      	movlt	r4, r9
 800bfc6:	4699      	movlt	r9, r3
 800bfc8:	6927      	ldr	r7, [r4, #16]
 800bfca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bfce:	68a3      	ldr	r3, [r4, #8]
 800bfd0:	6861      	ldr	r1, [r4, #4]
 800bfd2:	eb07 060a 	add.w	r6, r7, sl
 800bfd6:	42b3      	cmp	r3, r6
 800bfd8:	b085      	sub	sp, #20
 800bfda:	bfb8      	it	lt
 800bfdc:	3101      	addlt	r1, #1
 800bfde:	f7ff fe91 	bl	800bd04 <_Balloc>
 800bfe2:	b930      	cbnz	r0, 800bff2 <__multiply+0x42>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	f240 115d 	movw	r1, #349	; 0x15d
 800bfea:	4b43      	ldr	r3, [pc, #268]	; (800c0f8 <__multiply+0x148>)
 800bfec:	4843      	ldr	r0, [pc, #268]	; (800c0fc <__multiply+0x14c>)
 800bfee:	f000 fd2d 	bl	800ca4c <__assert_func>
 800bff2:	f100 0514 	add.w	r5, r0, #20
 800bff6:	462b      	mov	r3, r5
 800bff8:	2200      	movs	r2, #0
 800bffa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bffe:	4543      	cmp	r3, r8
 800c000:	d321      	bcc.n	800c046 <__multiply+0x96>
 800c002:	f104 0314 	add.w	r3, r4, #20
 800c006:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c00a:	f109 0314 	add.w	r3, r9, #20
 800c00e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c012:	9202      	str	r2, [sp, #8]
 800c014:	1b3a      	subs	r2, r7, r4
 800c016:	3a15      	subs	r2, #21
 800c018:	f022 0203 	bic.w	r2, r2, #3
 800c01c:	3204      	adds	r2, #4
 800c01e:	f104 0115 	add.w	r1, r4, #21
 800c022:	428f      	cmp	r7, r1
 800c024:	bf38      	it	cc
 800c026:	2204      	movcc	r2, #4
 800c028:	9201      	str	r2, [sp, #4]
 800c02a:	9a02      	ldr	r2, [sp, #8]
 800c02c:	9303      	str	r3, [sp, #12]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d80c      	bhi.n	800c04c <__multiply+0x9c>
 800c032:	2e00      	cmp	r6, #0
 800c034:	dd03      	ble.n	800c03e <__multiply+0x8e>
 800c036:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d059      	beq.n	800c0f2 <__multiply+0x142>
 800c03e:	6106      	str	r6, [r0, #16]
 800c040:	b005      	add	sp, #20
 800c042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c046:	f843 2b04 	str.w	r2, [r3], #4
 800c04a:	e7d8      	b.n	800bffe <__multiply+0x4e>
 800c04c:	f8b3 a000 	ldrh.w	sl, [r3]
 800c050:	f1ba 0f00 	cmp.w	sl, #0
 800c054:	d023      	beq.n	800c09e <__multiply+0xee>
 800c056:	46a9      	mov	r9, r5
 800c058:	f04f 0c00 	mov.w	ip, #0
 800c05c:	f104 0e14 	add.w	lr, r4, #20
 800c060:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c064:	f8d9 1000 	ldr.w	r1, [r9]
 800c068:	fa1f fb82 	uxth.w	fp, r2
 800c06c:	b289      	uxth	r1, r1
 800c06e:	fb0a 110b 	mla	r1, sl, fp, r1
 800c072:	4461      	add	r1, ip
 800c074:	f8d9 c000 	ldr.w	ip, [r9]
 800c078:	0c12      	lsrs	r2, r2, #16
 800c07a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c07e:	fb0a c202 	mla	r2, sl, r2, ip
 800c082:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c086:	b289      	uxth	r1, r1
 800c088:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c08c:	4577      	cmp	r7, lr
 800c08e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c092:	f849 1b04 	str.w	r1, [r9], #4
 800c096:	d8e3      	bhi.n	800c060 <__multiply+0xb0>
 800c098:	9a01      	ldr	r2, [sp, #4]
 800c09a:	f845 c002 	str.w	ip, [r5, r2]
 800c09e:	9a03      	ldr	r2, [sp, #12]
 800c0a0:	3304      	adds	r3, #4
 800c0a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c0a6:	f1b9 0f00 	cmp.w	r9, #0
 800c0aa:	d020      	beq.n	800c0ee <__multiply+0x13e>
 800c0ac:	46ae      	mov	lr, r5
 800c0ae:	f04f 0a00 	mov.w	sl, #0
 800c0b2:	6829      	ldr	r1, [r5, #0]
 800c0b4:	f104 0c14 	add.w	ip, r4, #20
 800c0b8:	f8bc b000 	ldrh.w	fp, [ip]
 800c0bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c0c0:	b289      	uxth	r1, r1
 800c0c2:	fb09 220b 	mla	r2, r9, fp, r2
 800c0c6:	4492      	add	sl, r2
 800c0c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c0cc:	f84e 1b04 	str.w	r1, [lr], #4
 800c0d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c0d4:	f8be 1000 	ldrh.w	r1, [lr]
 800c0d8:	0c12      	lsrs	r2, r2, #16
 800c0da:	fb09 1102 	mla	r1, r9, r2, r1
 800c0de:	4567      	cmp	r7, ip
 800c0e0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c0e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c0e8:	d8e6      	bhi.n	800c0b8 <__multiply+0x108>
 800c0ea:	9a01      	ldr	r2, [sp, #4]
 800c0ec:	50a9      	str	r1, [r5, r2]
 800c0ee:	3504      	adds	r5, #4
 800c0f0:	e79b      	b.n	800c02a <__multiply+0x7a>
 800c0f2:	3e01      	subs	r6, #1
 800c0f4:	e79d      	b.n	800c032 <__multiply+0x82>
 800c0f6:	bf00      	nop
 800c0f8:	0800d478 	.word	0x0800d478
 800c0fc:	0800d568 	.word	0x0800d568

0800c100 <__pow5mult>:
 800c100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c104:	4615      	mov	r5, r2
 800c106:	f012 0203 	ands.w	r2, r2, #3
 800c10a:	4606      	mov	r6, r0
 800c10c:	460f      	mov	r7, r1
 800c10e:	d007      	beq.n	800c120 <__pow5mult+0x20>
 800c110:	4c25      	ldr	r4, [pc, #148]	; (800c1a8 <__pow5mult+0xa8>)
 800c112:	3a01      	subs	r2, #1
 800c114:	2300      	movs	r3, #0
 800c116:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c11a:	f7ff fe55 	bl	800bdc8 <__multadd>
 800c11e:	4607      	mov	r7, r0
 800c120:	10ad      	asrs	r5, r5, #2
 800c122:	d03d      	beq.n	800c1a0 <__pow5mult+0xa0>
 800c124:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c126:	b97c      	cbnz	r4, 800c148 <__pow5mult+0x48>
 800c128:	2010      	movs	r0, #16
 800c12a:	f7fc fb95 	bl	8008858 <malloc>
 800c12e:	4602      	mov	r2, r0
 800c130:	6270      	str	r0, [r6, #36]	; 0x24
 800c132:	b928      	cbnz	r0, 800c140 <__pow5mult+0x40>
 800c134:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c138:	4b1c      	ldr	r3, [pc, #112]	; (800c1ac <__pow5mult+0xac>)
 800c13a:	481d      	ldr	r0, [pc, #116]	; (800c1b0 <__pow5mult+0xb0>)
 800c13c:	f000 fc86 	bl	800ca4c <__assert_func>
 800c140:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c144:	6004      	str	r4, [r0, #0]
 800c146:	60c4      	str	r4, [r0, #12]
 800c148:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c14c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c150:	b94c      	cbnz	r4, 800c166 <__pow5mult+0x66>
 800c152:	f240 2171 	movw	r1, #625	; 0x271
 800c156:	4630      	mov	r0, r6
 800c158:	f7ff ff14 	bl	800bf84 <__i2b>
 800c15c:	2300      	movs	r3, #0
 800c15e:	4604      	mov	r4, r0
 800c160:	f8c8 0008 	str.w	r0, [r8, #8]
 800c164:	6003      	str	r3, [r0, #0]
 800c166:	f04f 0900 	mov.w	r9, #0
 800c16a:	07eb      	lsls	r3, r5, #31
 800c16c:	d50a      	bpl.n	800c184 <__pow5mult+0x84>
 800c16e:	4639      	mov	r1, r7
 800c170:	4622      	mov	r2, r4
 800c172:	4630      	mov	r0, r6
 800c174:	f7ff ff1c 	bl	800bfb0 <__multiply>
 800c178:	4680      	mov	r8, r0
 800c17a:	4639      	mov	r1, r7
 800c17c:	4630      	mov	r0, r6
 800c17e:	f7ff fe01 	bl	800bd84 <_Bfree>
 800c182:	4647      	mov	r7, r8
 800c184:	106d      	asrs	r5, r5, #1
 800c186:	d00b      	beq.n	800c1a0 <__pow5mult+0xa0>
 800c188:	6820      	ldr	r0, [r4, #0]
 800c18a:	b938      	cbnz	r0, 800c19c <__pow5mult+0x9c>
 800c18c:	4622      	mov	r2, r4
 800c18e:	4621      	mov	r1, r4
 800c190:	4630      	mov	r0, r6
 800c192:	f7ff ff0d 	bl	800bfb0 <__multiply>
 800c196:	6020      	str	r0, [r4, #0]
 800c198:	f8c0 9000 	str.w	r9, [r0]
 800c19c:	4604      	mov	r4, r0
 800c19e:	e7e4      	b.n	800c16a <__pow5mult+0x6a>
 800c1a0:	4638      	mov	r0, r7
 800c1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1a6:	bf00      	nop
 800c1a8:	0800d6b8 	.word	0x0800d6b8
 800c1ac:	0800d406 	.word	0x0800d406
 800c1b0:	0800d568 	.word	0x0800d568

0800c1b4 <__lshift>:
 800c1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b8:	460c      	mov	r4, r1
 800c1ba:	4607      	mov	r7, r0
 800c1bc:	4691      	mov	r9, r2
 800c1be:	6923      	ldr	r3, [r4, #16]
 800c1c0:	6849      	ldr	r1, [r1, #4]
 800c1c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c1c6:	68a3      	ldr	r3, [r4, #8]
 800c1c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1cc:	f108 0601 	add.w	r6, r8, #1
 800c1d0:	42b3      	cmp	r3, r6
 800c1d2:	db0b      	blt.n	800c1ec <__lshift+0x38>
 800c1d4:	4638      	mov	r0, r7
 800c1d6:	f7ff fd95 	bl	800bd04 <_Balloc>
 800c1da:	4605      	mov	r5, r0
 800c1dc:	b948      	cbnz	r0, 800c1f2 <__lshift+0x3e>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c1e4:	4b29      	ldr	r3, [pc, #164]	; (800c28c <__lshift+0xd8>)
 800c1e6:	482a      	ldr	r0, [pc, #168]	; (800c290 <__lshift+0xdc>)
 800c1e8:	f000 fc30 	bl	800ca4c <__assert_func>
 800c1ec:	3101      	adds	r1, #1
 800c1ee:	005b      	lsls	r3, r3, #1
 800c1f0:	e7ee      	b.n	800c1d0 <__lshift+0x1c>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	f100 0114 	add.w	r1, r0, #20
 800c1f8:	f100 0210 	add.w	r2, r0, #16
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	4553      	cmp	r3, sl
 800c200:	db37      	blt.n	800c272 <__lshift+0xbe>
 800c202:	6920      	ldr	r0, [r4, #16]
 800c204:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c208:	f104 0314 	add.w	r3, r4, #20
 800c20c:	f019 091f 	ands.w	r9, r9, #31
 800c210:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c214:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c218:	d02f      	beq.n	800c27a <__lshift+0xc6>
 800c21a:	468a      	mov	sl, r1
 800c21c:	f04f 0c00 	mov.w	ip, #0
 800c220:	f1c9 0e20 	rsb	lr, r9, #32
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	fa02 f209 	lsl.w	r2, r2, r9
 800c22a:	ea42 020c 	orr.w	r2, r2, ip
 800c22e:	f84a 2b04 	str.w	r2, [sl], #4
 800c232:	f853 2b04 	ldr.w	r2, [r3], #4
 800c236:	4298      	cmp	r0, r3
 800c238:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c23c:	d8f2      	bhi.n	800c224 <__lshift+0x70>
 800c23e:	1b03      	subs	r3, r0, r4
 800c240:	3b15      	subs	r3, #21
 800c242:	f023 0303 	bic.w	r3, r3, #3
 800c246:	3304      	adds	r3, #4
 800c248:	f104 0215 	add.w	r2, r4, #21
 800c24c:	4290      	cmp	r0, r2
 800c24e:	bf38      	it	cc
 800c250:	2304      	movcc	r3, #4
 800c252:	f841 c003 	str.w	ip, [r1, r3]
 800c256:	f1bc 0f00 	cmp.w	ip, #0
 800c25a:	d001      	beq.n	800c260 <__lshift+0xac>
 800c25c:	f108 0602 	add.w	r6, r8, #2
 800c260:	3e01      	subs	r6, #1
 800c262:	4638      	mov	r0, r7
 800c264:	4621      	mov	r1, r4
 800c266:	612e      	str	r6, [r5, #16]
 800c268:	f7ff fd8c 	bl	800bd84 <_Bfree>
 800c26c:	4628      	mov	r0, r5
 800c26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c272:	f842 0f04 	str.w	r0, [r2, #4]!
 800c276:	3301      	adds	r3, #1
 800c278:	e7c1      	b.n	800c1fe <__lshift+0x4a>
 800c27a:	3904      	subs	r1, #4
 800c27c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c280:	4298      	cmp	r0, r3
 800c282:	f841 2f04 	str.w	r2, [r1, #4]!
 800c286:	d8f9      	bhi.n	800c27c <__lshift+0xc8>
 800c288:	e7ea      	b.n	800c260 <__lshift+0xac>
 800c28a:	bf00      	nop
 800c28c:	0800d478 	.word	0x0800d478
 800c290:	0800d568 	.word	0x0800d568

0800c294 <__mcmp>:
 800c294:	4603      	mov	r3, r0
 800c296:	690a      	ldr	r2, [r1, #16]
 800c298:	6900      	ldr	r0, [r0, #16]
 800c29a:	b530      	push	{r4, r5, lr}
 800c29c:	1a80      	subs	r0, r0, r2
 800c29e:	d10d      	bne.n	800c2bc <__mcmp+0x28>
 800c2a0:	3314      	adds	r3, #20
 800c2a2:	3114      	adds	r1, #20
 800c2a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c2a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c2ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c2b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c2b4:	4295      	cmp	r5, r2
 800c2b6:	d002      	beq.n	800c2be <__mcmp+0x2a>
 800c2b8:	d304      	bcc.n	800c2c4 <__mcmp+0x30>
 800c2ba:	2001      	movs	r0, #1
 800c2bc:	bd30      	pop	{r4, r5, pc}
 800c2be:	42a3      	cmp	r3, r4
 800c2c0:	d3f4      	bcc.n	800c2ac <__mcmp+0x18>
 800c2c2:	e7fb      	b.n	800c2bc <__mcmp+0x28>
 800c2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c8:	e7f8      	b.n	800c2bc <__mcmp+0x28>
	...

0800c2cc <__mdiff>:
 800c2cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d0:	460d      	mov	r5, r1
 800c2d2:	4607      	mov	r7, r0
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	4614      	mov	r4, r2
 800c2da:	f7ff ffdb 	bl	800c294 <__mcmp>
 800c2de:	1e06      	subs	r6, r0, #0
 800c2e0:	d111      	bne.n	800c306 <__mdiff+0x3a>
 800c2e2:	4631      	mov	r1, r6
 800c2e4:	4638      	mov	r0, r7
 800c2e6:	f7ff fd0d 	bl	800bd04 <_Balloc>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	b928      	cbnz	r0, 800c2fa <__mdiff+0x2e>
 800c2ee:	f240 2132 	movw	r1, #562	; 0x232
 800c2f2:	4b3a      	ldr	r3, [pc, #232]	; (800c3dc <__mdiff+0x110>)
 800c2f4:	483a      	ldr	r0, [pc, #232]	; (800c3e0 <__mdiff+0x114>)
 800c2f6:	f000 fba9 	bl	800ca4c <__assert_func>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c300:	4610      	mov	r0, r2
 800c302:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c306:	bfa4      	itt	ge
 800c308:	4623      	movge	r3, r4
 800c30a:	462c      	movge	r4, r5
 800c30c:	4638      	mov	r0, r7
 800c30e:	6861      	ldr	r1, [r4, #4]
 800c310:	bfa6      	itte	ge
 800c312:	461d      	movge	r5, r3
 800c314:	2600      	movge	r6, #0
 800c316:	2601      	movlt	r6, #1
 800c318:	f7ff fcf4 	bl	800bd04 <_Balloc>
 800c31c:	4602      	mov	r2, r0
 800c31e:	b918      	cbnz	r0, 800c328 <__mdiff+0x5c>
 800c320:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c324:	4b2d      	ldr	r3, [pc, #180]	; (800c3dc <__mdiff+0x110>)
 800c326:	e7e5      	b.n	800c2f4 <__mdiff+0x28>
 800c328:	f102 0814 	add.w	r8, r2, #20
 800c32c:	46c2      	mov	sl, r8
 800c32e:	f04f 0c00 	mov.w	ip, #0
 800c332:	6927      	ldr	r7, [r4, #16]
 800c334:	60c6      	str	r6, [r0, #12]
 800c336:	692e      	ldr	r6, [r5, #16]
 800c338:	f104 0014 	add.w	r0, r4, #20
 800c33c:	f105 0914 	add.w	r9, r5, #20
 800c340:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c344:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c348:	3410      	adds	r4, #16
 800c34a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c34e:	f859 3b04 	ldr.w	r3, [r9], #4
 800c352:	fa1f f18b 	uxth.w	r1, fp
 800c356:	448c      	add	ip, r1
 800c358:	b299      	uxth	r1, r3
 800c35a:	0c1b      	lsrs	r3, r3, #16
 800c35c:	ebac 0101 	sub.w	r1, ip, r1
 800c360:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c364:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c368:	b289      	uxth	r1, r1
 800c36a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c36e:	454e      	cmp	r6, r9
 800c370:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c374:	f84a 3b04 	str.w	r3, [sl], #4
 800c378:	d8e7      	bhi.n	800c34a <__mdiff+0x7e>
 800c37a:	1b73      	subs	r3, r6, r5
 800c37c:	3b15      	subs	r3, #21
 800c37e:	f023 0303 	bic.w	r3, r3, #3
 800c382:	3515      	adds	r5, #21
 800c384:	3304      	adds	r3, #4
 800c386:	42ae      	cmp	r6, r5
 800c388:	bf38      	it	cc
 800c38a:	2304      	movcc	r3, #4
 800c38c:	4418      	add	r0, r3
 800c38e:	4443      	add	r3, r8
 800c390:	461e      	mov	r6, r3
 800c392:	4605      	mov	r5, r0
 800c394:	4575      	cmp	r5, lr
 800c396:	d30e      	bcc.n	800c3b6 <__mdiff+0xea>
 800c398:	f10e 0103 	add.w	r1, lr, #3
 800c39c:	1a09      	subs	r1, r1, r0
 800c39e:	f021 0103 	bic.w	r1, r1, #3
 800c3a2:	3803      	subs	r0, #3
 800c3a4:	4586      	cmp	lr, r0
 800c3a6:	bf38      	it	cc
 800c3a8:	2100      	movcc	r1, #0
 800c3aa:	4419      	add	r1, r3
 800c3ac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c3b0:	b18b      	cbz	r3, 800c3d6 <__mdiff+0x10a>
 800c3b2:	6117      	str	r7, [r2, #16]
 800c3b4:	e7a4      	b.n	800c300 <__mdiff+0x34>
 800c3b6:	f855 8b04 	ldr.w	r8, [r5], #4
 800c3ba:	fa1f f188 	uxth.w	r1, r8
 800c3be:	4461      	add	r1, ip
 800c3c0:	140c      	asrs	r4, r1, #16
 800c3c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c3c6:	b289      	uxth	r1, r1
 800c3c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c3cc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c3d0:	f846 1b04 	str.w	r1, [r6], #4
 800c3d4:	e7de      	b.n	800c394 <__mdiff+0xc8>
 800c3d6:	3f01      	subs	r7, #1
 800c3d8:	e7e8      	b.n	800c3ac <__mdiff+0xe0>
 800c3da:	bf00      	nop
 800c3dc:	0800d478 	.word	0x0800d478
 800c3e0:	0800d568 	.word	0x0800d568

0800c3e4 <__ulp>:
 800c3e4:	4b11      	ldr	r3, [pc, #68]	; (800c42c <__ulp+0x48>)
 800c3e6:	400b      	ands	r3, r1
 800c3e8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	dd02      	ble.n	800c3f6 <__ulp+0x12>
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	4770      	bx	lr
 800c3f6:	425b      	negs	r3, r3
 800c3f8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c3fc:	f04f 0000 	mov.w	r0, #0
 800c400:	f04f 0100 	mov.w	r1, #0
 800c404:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c408:	da04      	bge.n	800c414 <__ulp+0x30>
 800c40a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c40e:	fa43 f102 	asr.w	r1, r3, r2
 800c412:	4770      	bx	lr
 800c414:	f1a2 0314 	sub.w	r3, r2, #20
 800c418:	2b1e      	cmp	r3, #30
 800c41a:	bfd6      	itet	le
 800c41c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c420:	2301      	movgt	r3, #1
 800c422:	fa22 f303 	lsrle.w	r3, r2, r3
 800c426:	4618      	mov	r0, r3
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	7ff00000 	.word	0x7ff00000

0800c430 <__b2d>:
 800c430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c434:	6907      	ldr	r7, [r0, #16]
 800c436:	f100 0914 	add.w	r9, r0, #20
 800c43a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c43e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c442:	f1a7 0804 	sub.w	r8, r7, #4
 800c446:	4630      	mov	r0, r6
 800c448:	f7ff fd4e 	bl	800bee8 <__hi0bits>
 800c44c:	f1c0 0320 	rsb	r3, r0, #32
 800c450:	280a      	cmp	r0, #10
 800c452:	600b      	str	r3, [r1, #0]
 800c454:	491f      	ldr	r1, [pc, #124]	; (800c4d4 <__b2d+0xa4>)
 800c456:	dc17      	bgt.n	800c488 <__b2d+0x58>
 800c458:	45c1      	cmp	r9, r8
 800c45a:	bf28      	it	cs
 800c45c:	2200      	movcs	r2, #0
 800c45e:	f1c0 0c0b 	rsb	ip, r0, #11
 800c462:	fa26 f30c 	lsr.w	r3, r6, ip
 800c466:	bf38      	it	cc
 800c468:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c46c:	ea43 0501 	orr.w	r5, r3, r1
 800c470:	f100 0315 	add.w	r3, r0, #21
 800c474:	fa06 f303 	lsl.w	r3, r6, r3
 800c478:	fa22 f20c 	lsr.w	r2, r2, ip
 800c47c:	ea43 0402 	orr.w	r4, r3, r2
 800c480:	4620      	mov	r0, r4
 800c482:	4629      	mov	r1, r5
 800c484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c488:	45c1      	cmp	r9, r8
 800c48a:	bf2e      	itee	cs
 800c48c:	2200      	movcs	r2, #0
 800c48e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c492:	f1a7 0808 	subcc.w	r8, r7, #8
 800c496:	f1b0 030b 	subs.w	r3, r0, #11
 800c49a:	d016      	beq.n	800c4ca <__b2d+0x9a>
 800c49c:	f1c3 0720 	rsb	r7, r3, #32
 800c4a0:	fa22 f107 	lsr.w	r1, r2, r7
 800c4a4:	45c8      	cmp	r8, r9
 800c4a6:	fa06 f603 	lsl.w	r6, r6, r3
 800c4aa:	ea46 0601 	orr.w	r6, r6, r1
 800c4ae:	bf94      	ite	ls
 800c4b0:	2100      	movls	r1, #0
 800c4b2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c4b6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c4ba:	fa02 f003 	lsl.w	r0, r2, r3
 800c4be:	40f9      	lsrs	r1, r7
 800c4c0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c4c4:	ea40 0401 	orr.w	r4, r0, r1
 800c4c8:	e7da      	b.n	800c480 <__b2d+0x50>
 800c4ca:	4614      	mov	r4, r2
 800c4cc:	ea46 0501 	orr.w	r5, r6, r1
 800c4d0:	e7d6      	b.n	800c480 <__b2d+0x50>
 800c4d2:	bf00      	nop
 800c4d4:	3ff00000 	.word	0x3ff00000

0800c4d8 <__d2b>:
 800c4d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c4dc:	2101      	movs	r1, #1
 800c4de:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c4e2:	4690      	mov	r8, r2
 800c4e4:	461d      	mov	r5, r3
 800c4e6:	f7ff fc0d 	bl	800bd04 <_Balloc>
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	b930      	cbnz	r0, 800c4fc <__d2b+0x24>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	f240 310a 	movw	r1, #778	; 0x30a
 800c4f4:	4b24      	ldr	r3, [pc, #144]	; (800c588 <__d2b+0xb0>)
 800c4f6:	4825      	ldr	r0, [pc, #148]	; (800c58c <__d2b+0xb4>)
 800c4f8:	f000 faa8 	bl	800ca4c <__assert_func>
 800c4fc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c500:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c504:	bb2d      	cbnz	r5, 800c552 <__d2b+0x7a>
 800c506:	9301      	str	r3, [sp, #4]
 800c508:	f1b8 0300 	subs.w	r3, r8, #0
 800c50c:	d026      	beq.n	800c55c <__d2b+0x84>
 800c50e:	4668      	mov	r0, sp
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	f7ff fd09 	bl	800bf28 <__lo0bits>
 800c516:	9900      	ldr	r1, [sp, #0]
 800c518:	b1f0      	cbz	r0, 800c558 <__d2b+0x80>
 800c51a:	9a01      	ldr	r2, [sp, #4]
 800c51c:	f1c0 0320 	rsb	r3, r0, #32
 800c520:	fa02 f303 	lsl.w	r3, r2, r3
 800c524:	430b      	orrs	r3, r1
 800c526:	40c2      	lsrs	r2, r0
 800c528:	6163      	str	r3, [r4, #20]
 800c52a:	9201      	str	r2, [sp, #4]
 800c52c:	9b01      	ldr	r3, [sp, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	bf14      	ite	ne
 800c532:	2102      	movne	r1, #2
 800c534:	2101      	moveq	r1, #1
 800c536:	61a3      	str	r3, [r4, #24]
 800c538:	6121      	str	r1, [r4, #16]
 800c53a:	b1c5      	cbz	r5, 800c56e <__d2b+0x96>
 800c53c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c540:	4405      	add	r5, r0
 800c542:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c546:	603d      	str	r5, [r7, #0]
 800c548:	6030      	str	r0, [r6, #0]
 800c54a:	4620      	mov	r0, r4
 800c54c:	b002      	add	sp, #8
 800c54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c556:	e7d6      	b.n	800c506 <__d2b+0x2e>
 800c558:	6161      	str	r1, [r4, #20]
 800c55a:	e7e7      	b.n	800c52c <__d2b+0x54>
 800c55c:	a801      	add	r0, sp, #4
 800c55e:	f7ff fce3 	bl	800bf28 <__lo0bits>
 800c562:	2101      	movs	r1, #1
 800c564:	9b01      	ldr	r3, [sp, #4]
 800c566:	6121      	str	r1, [r4, #16]
 800c568:	6163      	str	r3, [r4, #20]
 800c56a:	3020      	adds	r0, #32
 800c56c:	e7e5      	b.n	800c53a <__d2b+0x62>
 800c56e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c572:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c576:	6038      	str	r0, [r7, #0]
 800c578:	6918      	ldr	r0, [r3, #16]
 800c57a:	f7ff fcb5 	bl	800bee8 <__hi0bits>
 800c57e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c582:	6031      	str	r1, [r6, #0]
 800c584:	e7e1      	b.n	800c54a <__d2b+0x72>
 800c586:	bf00      	nop
 800c588:	0800d478 	.word	0x0800d478
 800c58c:	0800d568 	.word	0x0800d568

0800c590 <__ratio>:
 800c590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c594:	4688      	mov	r8, r1
 800c596:	4669      	mov	r1, sp
 800c598:	4681      	mov	r9, r0
 800c59a:	f7ff ff49 	bl	800c430 <__b2d>
 800c59e:	460f      	mov	r7, r1
 800c5a0:	4604      	mov	r4, r0
 800c5a2:	460d      	mov	r5, r1
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	a901      	add	r1, sp, #4
 800c5a8:	f7ff ff42 	bl	800c430 <__b2d>
 800c5ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c5b0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c5b4:	468b      	mov	fp, r1
 800c5b6:	eba3 0c02 	sub.w	ip, r3, r2
 800c5ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c5be:	1a9b      	subs	r3, r3, r2
 800c5c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	bfd5      	itete	le
 800c5c8:	460a      	movle	r2, r1
 800c5ca:	462a      	movgt	r2, r5
 800c5cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c5d0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c5d4:	bfd8      	it	le
 800c5d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c5da:	465b      	mov	r3, fp
 800c5dc:	4602      	mov	r2, r0
 800c5de:	4639      	mov	r1, r7
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f7f4 f8a3 	bl	800072c <__aeabi_ddiv>
 800c5e6:	b003      	add	sp, #12
 800c5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5ec <__copybits>:
 800c5ec:	3901      	subs	r1, #1
 800c5ee:	b570      	push	{r4, r5, r6, lr}
 800c5f0:	1149      	asrs	r1, r1, #5
 800c5f2:	6914      	ldr	r4, [r2, #16]
 800c5f4:	3101      	adds	r1, #1
 800c5f6:	f102 0314 	add.w	r3, r2, #20
 800c5fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c5fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c602:	1f05      	subs	r5, r0, #4
 800c604:	42a3      	cmp	r3, r4
 800c606:	d30c      	bcc.n	800c622 <__copybits+0x36>
 800c608:	1aa3      	subs	r3, r4, r2
 800c60a:	3b11      	subs	r3, #17
 800c60c:	f023 0303 	bic.w	r3, r3, #3
 800c610:	3211      	adds	r2, #17
 800c612:	42a2      	cmp	r2, r4
 800c614:	bf88      	it	hi
 800c616:	2300      	movhi	r3, #0
 800c618:	4418      	add	r0, r3
 800c61a:	2300      	movs	r3, #0
 800c61c:	4288      	cmp	r0, r1
 800c61e:	d305      	bcc.n	800c62c <__copybits+0x40>
 800c620:	bd70      	pop	{r4, r5, r6, pc}
 800c622:	f853 6b04 	ldr.w	r6, [r3], #4
 800c626:	f845 6f04 	str.w	r6, [r5, #4]!
 800c62a:	e7eb      	b.n	800c604 <__copybits+0x18>
 800c62c:	f840 3b04 	str.w	r3, [r0], #4
 800c630:	e7f4      	b.n	800c61c <__copybits+0x30>

0800c632 <__any_on>:
 800c632:	f100 0214 	add.w	r2, r0, #20
 800c636:	6900      	ldr	r0, [r0, #16]
 800c638:	114b      	asrs	r3, r1, #5
 800c63a:	4298      	cmp	r0, r3
 800c63c:	b510      	push	{r4, lr}
 800c63e:	db11      	blt.n	800c664 <__any_on+0x32>
 800c640:	dd0a      	ble.n	800c658 <__any_on+0x26>
 800c642:	f011 011f 	ands.w	r1, r1, #31
 800c646:	d007      	beq.n	800c658 <__any_on+0x26>
 800c648:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c64c:	fa24 f001 	lsr.w	r0, r4, r1
 800c650:	fa00 f101 	lsl.w	r1, r0, r1
 800c654:	428c      	cmp	r4, r1
 800c656:	d10b      	bne.n	800c670 <__any_on+0x3e>
 800c658:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d803      	bhi.n	800c668 <__any_on+0x36>
 800c660:	2000      	movs	r0, #0
 800c662:	bd10      	pop	{r4, pc}
 800c664:	4603      	mov	r3, r0
 800c666:	e7f7      	b.n	800c658 <__any_on+0x26>
 800c668:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c66c:	2900      	cmp	r1, #0
 800c66e:	d0f5      	beq.n	800c65c <__any_on+0x2a>
 800c670:	2001      	movs	r0, #1
 800c672:	e7f6      	b.n	800c662 <__any_on+0x30>

0800c674 <_calloc_r>:
 800c674:	b570      	push	{r4, r5, r6, lr}
 800c676:	fba1 5402 	umull	r5, r4, r1, r2
 800c67a:	b934      	cbnz	r4, 800c68a <_calloc_r+0x16>
 800c67c:	4629      	mov	r1, r5
 800c67e:	f7fc f971 	bl	8008964 <_malloc_r>
 800c682:	4606      	mov	r6, r0
 800c684:	b928      	cbnz	r0, 800c692 <_calloc_r+0x1e>
 800c686:	4630      	mov	r0, r6
 800c688:	bd70      	pop	{r4, r5, r6, pc}
 800c68a:	220c      	movs	r2, #12
 800c68c:	2600      	movs	r6, #0
 800c68e:	6002      	str	r2, [r0, #0]
 800c690:	e7f9      	b.n	800c686 <_calloc_r+0x12>
 800c692:	462a      	mov	r2, r5
 800c694:	4621      	mov	r1, r4
 800c696:	f7fc f8f5 	bl	8008884 <memset>
 800c69a:	e7f4      	b.n	800c686 <_calloc_r+0x12>

0800c69c <__ssputs_r>:
 800c69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6a0:	688e      	ldr	r6, [r1, #8]
 800c6a2:	4682      	mov	sl, r0
 800c6a4:	429e      	cmp	r6, r3
 800c6a6:	460c      	mov	r4, r1
 800c6a8:	4690      	mov	r8, r2
 800c6aa:	461f      	mov	r7, r3
 800c6ac:	d838      	bhi.n	800c720 <__ssputs_r+0x84>
 800c6ae:	898a      	ldrh	r2, [r1, #12]
 800c6b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c6b4:	d032      	beq.n	800c71c <__ssputs_r+0x80>
 800c6b6:	6825      	ldr	r5, [r4, #0]
 800c6b8:	6909      	ldr	r1, [r1, #16]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	eba5 0901 	sub.w	r9, r5, r1
 800c6c0:	6965      	ldr	r5, [r4, #20]
 800c6c2:	444b      	add	r3, r9
 800c6c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6cc:	106d      	asrs	r5, r5, #1
 800c6ce:	429d      	cmp	r5, r3
 800c6d0:	bf38      	it	cc
 800c6d2:	461d      	movcc	r5, r3
 800c6d4:	0553      	lsls	r3, r2, #21
 800c6d6:	d531      	bpl.n	800c73c <__ssputs_r+0xa0>
 800c6d8:	4629      	mov	r1, r5
 800c6da:	f7fc f943 	bl	8008964 <_malloc_r>
 800c6de:	4606      	mov	r6, r0
 800c6e0:	b950      	cbnz	r0, 800c6f8 <__ssputs_r+0x5c>
 800c6e2:	230c      	movs	r3, #12
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e8:	f8ca 3000 	str.w	r3, [sl]
 800c6ec:	89a3      	ldrh	r3, [r4, #12]
 800c6ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6f2:	81a3      	strh	r3, [r4, #12]
 800c6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6f8:	464a      	mov	r2, r9
 800c6fa:	6921      	ldr	r1, [r4, #16]
 800c6fc:	f7fc f8b4 	bl	8008868 <memcpy>
 800c700:	89a3      	ldrh	r3, [r4, #12]
 800c702:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c70a:	81a3      	strh	r3, [r4, #12]
 800c70c:	6126      	str	r6, [r4, #16]
 800c70e:	444e      	add	r6, r9
 800c710:	6026      	str	r6, [r4, #0]
 800c712:	463e      	mov	r6, r7
 800c714:	6165      	str	r5, [r4, #20]
 800c716:	eba5 0509 	sub.w	r5, r5, r9
 800c71a:	60a5      	str	r5, [r4, #8]
 800c71c:	42be      	cmp	r6, r7
 800c71e:	d900      	bls.n	800c722 <__ssputs_r+0x86>
 800c720:	463e      	mov	r6, r7
 800c722:	4632      	mov	r2, r6
 800c724:	4641      	mov	r1, r8
 800c726:	6820      	ldr	r0, [r4, #0]
 800c728:	f000 fa04 	bl	800cb34 <memmove>
 800c72c:	68a3      	ldr	r3, [r4, #8]
 800c72e:	2000      	movs	r0, #0
 800c730:	1b9b      	subs	r3, r3, r6
 800c732:	60a3      	str	r3, [r4, #8]
 800c734:	6823      	ldr	r3, [r4, #0]
 800c736:	4433      	add	r3, r6
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	e7db      	b.n	800c6f4 <__ssputs_r+0x58>
 800c73c:	462a      	mov	r2, r5
 800c73e:	f000 fa13 	bl	800cb68 <_realloc_r>
 800c742:	4606      	mov	r6, r0
 800c744:	2800      	cmp	r0, #0
 800c746:	d1e1      	bne.n	800c70c <__ssputs_r+0x70>
 800c748:	4650      	mov	r0, sl
 800c74a:	6921      	ldr	r1, [r4, #16]
 800c74c:	f7fc f8a2 	bl	8008894 <_free_r>
 800c750:	e7c7      	b.n	800c6e2 <__ssputs_r+0x46>
	...

0800c754 <_svfiprintf_r>:
 800c754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c758:	4698      	mov	r8, r3
 800c75a:	898b      	ldrh	r3, [r1, #12]
 800c75c:	4607      	mov	r7, r0
 800c75e:	061b      	lsls	r3, r3, #24
 800c760:	460d      	mov	r5, r1
 800c762:	4614      	mov	r4, r2
 800c764:	b09d      	sub	sp, #116	; 0x74
 800c766:	d50e      	bpl.n	800c786 <_svfiprintf_r+0x32>
 800c768:	690b      	ldr	r3, [r1, #16]
 800c76a:	b963      	cbnz	r3, 800c786 <_svfiprintf_r+0x32>
 800c76c:	2140      	movs	r1, #64	; 0x40
 800c76e:	f7fc f8f9 	bl	8008964 <_malloc_r>
 800c772:	6028      	str	r0, [r5, #0]
 800c774:	6128      	str	r0, [r5, #16]
 800c776:	b920      	cbnz	r0, 800c782 <_svfiprintf_r+0x2e>
 800c778:	230c      	movs	r3, #12
 800c77a:	603b      	str	r3, [r7, #0]
 800c77c:	f04f 30ff 	mov.w	r0, #4294967295
 800c780:	e0d1      	b.n	800c926 <_svfiprintf_r+0x1d2>
 800c782:	2340      	movs	r3, #64	; 0x40
 800c784:	616b      	str	r3, [r5, #20]
 800c786:	2300      	movs	r3, #0
 800c788:	9309      	str	r3, [sp, #36]	; 0x24
 800c78a:	2320      	movs	r3, #32
 800c78c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c790:	2330      	movs	r3, #48	; 0x30
 800c792:	f04f 0901 	mov.w	r9, #1
 800c796:	f8cd 800c 	str.w	r8, [sp, #12]
 800c79a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c940 <_svfiprintf_r+0x1ec>
 800c79e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7a2:	4623      	mov	r3, r4
 800c7a4:	469a      	mov	sl, r3
 800c7a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7aa:	b10a      	cbz	r2, 800c7b0 <_svfiprintf_r+0x5c>
 800c7ac:	2a25      	cmp	r2, #37	; 0x25
 800c7ae:	d1f9      	bne.n	800c7a4 <_svfiprintf_r+0x50>
 800c7b0:	ebba 0b04 	subs.w	fp, sl, r4
 800c7b4:	d00b      	beq.n	800c7ce <_svfiprintf_r+0x7a>
 800c7b6:	465b      	mov	r3, fp
 800c7b8:	4622      	mov	r2, r4
 800c7ba:	4629      	mov	r1, r5
 800c7bc:	4638      	mov	r0, r7
 800c7be:	f7ff ff6d 	bl	800c69c <__ssputs_r>
 800c7c2:	3001      	adds	r0, #1
 800c7c4:	f000 80aa 	beq.w	800c91c <_svfiprintf_r+0x1c8>
 800c7c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7ca:	445a      	add	r2, fp
 800c7cc:	9209      	str	r2, [sp, #36]	; 0x24
 800c7ce:	f89a 3000 	ldrb.w	r3, [sl]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f000 80a2 	beq.w	800c91c <_svfiprintf_r+0x1c8>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	f04f 32ff 	mov.w	r2, #4294967295
 800c7de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7e2:	f10a 0a01 	add.w	sl, sl, #1
 800c7e6:	9304      	str	r3, [sp, #16]
 800c7e8:	9307      	str	r3, [sp, #28]
 800c7ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7ee:	931a      	str	r3, [sp, #104]	; 0x68
 800c7f0:	4654      	mov	r4, sl
 800c7f2:	2205      	movs	r2, #5
 800c7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7f8:	4851      	ldr	r0, [pc, #324]	; (800c940 <_svfiprintf_r+0x1ec>)
 800c7fa:	f7ff fa69 	bl	800bcd0 <memchr>
 800c7fe:	9a04      	ldr	r2, [sp, #16]
 800c800:	b9d8      	cbnz	r0, 800c83a <_svfiprintf_r+0xe6>
 800c802:	06d0      	lsls	r0, r2, #27
 800c804:	bf44      	itt	mi
 800c806:	2320      	movmi	r3, #32
 800c808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c80c:	0711      	lsls	r1, r2, #28
 800c80e:	bf44      	itt	mi
 800c810:	232b      	movmi	r3, #43	; 0x2b
 800c812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c816:	f89a 3000 	ldrb.w	r3, [sl]
 800c81a:	2b2a      	cmp	r3, #42	; 0x2a
 800c81c:	d015      	beq.n	800c84a <_svfiprintf_r+0xf6>
 800c81e:	4654      	mov	r4, sl
 800c820:	2000      	movs	r0, #0
 800c822:	f04f 0c0a 	mov.w	ip, #10
 800c826:	9a07      	ldr	r2, [sp, #28]
 800c828:	4621      	mov	r1, r4
 800c82a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c82e:	3b30      	subs	r3, #48	; 0x30
 800c830:	2b09      	cmp	r3, #9
 800c832:	d94e      	bls.n	800c8d2 <_svfiprintf_r+0x17e>
 800c834:	b1b0      	cbz	r0, 800c864 <_svfiprintf_r+0x110>
 800c836:	9207      	str	r2, [sp, #28]
 800c838:	e014      	b.n	800c864 <_svfiprintf_r+0x110>
 800c83a:	eba0 0308 	sub.w	r3, r0, r8
 800c83e:	fa09 f303 	lsl.w	r3, r9, r3
 800c842:	4313      	orrs	r3, r2
 800c844:	46a2      	mov	sl, r4
 800c846:	9304      	str	r3, [sp, #16]
 800c848:	e7d2      	b.n	800c7f0 <_svfiprintf_r+0x9c>
 800c84a:	9b03      	ldr	r3, [sp, #12]
 800c84c:	1d19      	adds	r1, r3, #4
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	9103      	str	r1, [sp, #12]
 800c852:	2b00      	cmp	r3, #0
 800c854:	bfbb      	ittet	lt
 800c856:	425b      	neglt	r3, r3
 800c858:	f042 0202 	orrlt.w	r2, r2, #2
 800c85c:	9307      	strge	r3, [sp, #28]
 800c85e:	9307      	strlt	r3, [sp, #28]
 800c860:	bfb8      	it	lt
 800c862:	9204      	strlt	r2, [sp, #16]
 800c864:	7823      	ldrb	r3, [r4, #0]
 800c866:	2b2e      	cmp	r3, #46	; 0x2e
 800c868:	d10c      	bne.n	800c884 <_svfiprintf_r+0x130>
 800c86a:	7863      	ldrb	r3, [r4, #1]
 800c86c:	2b2a      	cmp	r3, #42	; 0x2a
 800c86e:	d135      	bne.n	800c8dc <_svfiprintf_r+0x188>
 800c870:	9b03      	ldr	r3, [sp, #12]
 800c872:	3402      	adds	r4, #2
 800c874:	1d1a      	adds	r2, r3, #4
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	9203      	str	r2, [sp, #12]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	bfb8      	it	lt
 800c87e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c882:	9305      	str	r3, [sp, #20]
 800c884:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c944 <_svfiprintf_r+0x1f0>
 800c888:	2203      	movs	r2, #3
 800c88a:	4650      	mov	r0, sl
 800c88c:	7821      	ldrb	r1, [r4, #0]
 800c88e:	f7ff fa1f 	bl	800bcd0 <memchr>
 800c892:	b140      	cbz	r0, 800c8a6 <_svfiprintf_r+0x152>
 800c894:	2340      	movs	r3, #64	; 0x40
 800c896:	eba0 000a 	sub.w	r0, r0, sl
 800c89a:	fa03 f000 	lsl.w	r0, r3, r0
 800c89e:	9b04      	ldr	r3, [sp, #16]
 800c8a0:	3401      	adds	r4, #1
 800c8a2:	4303      	orrs	r3, r0
 800c8a4:	9304      	str	r3, [sp, #16]
 800c8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8aa:	2206      	movs	r2, #6
 800c8ac:	4826      	ldr	r0, [pc, #152]	; (800c948 <_svfiprintf_r+0x1f4>)
 800c8ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8b2:	f7ff fa0d 	bl	800bcd0 <memchr>
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	d038      	beq.n	800c92c <_svfiprintf_r+0x1d8>
 800c8ba:	4b24      	ldr	r3, [pc, #144]	; (800c94c <_svfiprintf_r+0x1f8>)
 800c8bc:	bb1b      	cbnz	r3, 800c906 <_svfiprintf_r+0x1b2>
 800c8be:	9b03      	ldr	r3, [sp, #12]
 800c8c0:	3307      	adds	r3, #7
 800c8c2:	f023 0307 	bic.w	r3, r3, #7
 800c8c6:	3308      	adds	r3, #8
 800c8c8:	9303      	str	r3, [sp, #12]
 800c8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8cc:	4433      	add	r3, r6
 800c8ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c8d0:	e767      	b.n	800c7a2 <_svfiprintf_r+0x4e>
 800c8d2:	460c      	mov	r4, r1
 800c8d4:	2001      	movs	r0, #1
 800c8d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8da:	e7a5      	b.n	800c828 <_svfiprintf_r+0xd4>
 800c8dc:	2300      	movs	r3, #0
 800c8de:	f04f 0c0a 	mov.w	ip, #10
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	3401      	adds	r4, #1
 800c8e6:	9305      	str	r3, [sp, #20]
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8ee:	3a30      	subs	r2, #48	; 0x30
 800c8f0:	2a09      	cmp	r2, #9
 800c8f2:	d903      	bls.n	800c8fc <_svfiprintf_r+0x1a8>
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d0c5      	beq.n	800c884 <_svfiprintf_r+0x130>
 800c8f8:	9105      	str	r1, [sp, #20]
 800c8fa:	e7c3      	b.n	800c884 <_svfiprintf_r+0x130>
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	2301      	movs	r3, #1
 800c900:	fb0c 2101 	mla	r1, ip, r1, r2
 800c904:	e7f0      	b.n	800c8e8 <_svfiprintf_r+0x194>
 800c906:	ab03      	add	r3, sp, #12
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	462a      	mov	r2, r5
 800c90c:	4638      	mov	r0, r7
 800c90e:	4b10      	ldr	r3, [pc, #64]	; (800c950 <_svfiprintf_r+0x1fc>)
 800c910:	a904      	add	r1, sp, #16
 800c912:	f7fc f939 	bl	8008b88 <_printf_float>
 800c916:	1c42      	adds	r2, r0, #1
 800c918:	4606      	mov	r6, r0
 800c91a:	d1d6      	bne.n	800c8ca <_svfiprintf_r+0x176>
 800c91c:	89ab      	ldrh	r3, [r5, #12]
 800c91e:	065b      	lsls	r3, r3, #25
 800c920:	f53f af2c 	bmi.w	800c77c <_svfiprintf_r+0x28>
 800c924:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c926:	b01d      	add	sp, #116	; 0x74
 800c928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c92c:	ab03      	add	r3, sp, #12
 800c92e:	9300      	str	r3, [sp, #0]
 800c930:	462a      	mov	r2, r5
 800c932:	4638      	mov	r0, r7
 800c934:	4b06      	ldr	r3, [pc, #24]	; (800c950 <_svfiprintf_r+0x1fc>)
 800c936:	a904      	add	r1, sp, #16
 800c938:	f7fc fbc2 	bl	80090c0 <_printf_i>
 800c93c:	e7eb      	b.n	800c916 <_svfiprintf_r+0x1c2>
 800c93e:	bf00      	nop
 800c940:	0800d6c4 	.word	0x0800d6c4
 800c944:	0800d6ca 	.word	0x0800d6ca
 800c948:	0800d6ce 	.word	0x0800d6ce
 800c94c:	08008b89 	.word	0x08008b89
 800c950:	0800c69d 	.word	0x0800c69d

0800c954 <nan>:
 800c954:	2000      	movs	r0, #0
 800c956:	4901      	ldr	r1, [pc, #4]	; (800c95c <nan+0x8>)
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	7ff80000 	.word	0x7ff80000

0800c960 <__sread>:
 800c960:	b510      	push	{r4, lr}
 800c962:	460c      	mov	r4, r1
 800c964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c968:	f000 fa84 	bl	800ce74 <_read_r>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	bfab      	itete	ge
 800c970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c972:	89a3      	ldrhlt	r3, [r4, #12]
 800c974:	181b      	addge	r3, r3, r0
 800c976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c97a:	bfac      	ite	ge
 800c97c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c97e:	81a3      	strhlt	r3, [r4, #12]
 800c980:	bd10      	pop	{r4, pc}

0800c982 <__swrite>:
 800c982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c986:	461f      	mov	r7, r3
 800c988:	898b      	ldrh	r3, [r1, #12]
 800c98a:	4605      	mov	r5, r0
 800c98c:	05db      	lsls	r3, r3, #23
 800c98e:	460c      	mov	r4, r1
 800c990:	4616      	mov	r6, r2
 800c992:	d505      	bpl.n	800c9a0 <__swrite+0x1e>
 800c994:	2302      	movs	r3, #2
 800c996:	2200      	movs	r2, #0
 800c998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c99c:	f000 f8b8 	bl	800cb10 <_lseek_r>
 800c9a0:	89a3      	ldrh	r3, [r4, #12]
 800c9a2:	4632      	mov	r2, r6
 800c9a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c9a8:	81a3      	strh	r3, [r4, #12]
 800c9aa:	4628      	mov	r0, r5
 800c9ac:	463b      	mov	r3, r7
 800c9ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b6:	f000 b837 	b.w	800ca28 <_write_r>

0800c9ba <__sseek>:
 800c9ba:	b510      	push	{r4, lr}
 800c9bc:	460c      	mov	r4, r1
 800c9be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9c2:	f000 f8a5 	bl	800cb10 <_lseek_r>
 800c9c6:	1c43      	adds	r3, r0, #1
 800c9c8:	89a3      	ldrh	r3, [r4, #12]
 800c9ca:	bf15      	itete	ne
 800c9cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c9ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c9d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c9d6:	81a3      	strheq	r3, [r4, #12]
 800c9d8:	bf18      	it	ne
 800c9da:	81a3      	strhne	r3, [r4, #12]
 800c9dc:	bd10      	pop	{r4, pc}

0800c9de <__sclose>:
 800c9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9e2:	f000 b851 	b.w	800ca88 <_close_r>

0800c9e6 <strncmp>:
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	b510      	push	{r4, lr}
 800c9ea:	b172      	cbz	r2, 800ca0a <strncmp+0x24>
 800c9ec:	3901      	subs	r1, #1
 800c9ee:	1884      	adds	r4, r0, r2
 800c9f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c9f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c9f8:	4290      	cmp	r0, r2
 800c9fa:	d101      	bne.n	800ca00 <strncmp+0x1a>
 800c9fc:	42a3      	cmp	r3, r4
 800c9fe:	d101      	bne.n	800ca04 <strncmp+0x1e>
 800ca00:	1a80      	subs	r0, r0, r2
 800ca02:	bd10      	pop	{r4, pc}
 800ca04:	2800      	cmp	r0, #0
 800ca06:	d1f3      	bne.n	800c9f0 <strncmp+0xa>
 800ca08:	e7fa      	b.n	800ca00 <strncmp+0x1a>
 800ca0a:	4610      	mov	r0, r2
 800ca0c:	e7f9      	b.n	800ca02 <strncmp+0x1c>

0800ca0e <__ascii_wctomb>:
 800ca0e:	4603      	mov	r3, r0
 800ca10:	4608      	mov	r0, r1
 800ca12:	b141      	cbz	r1, 800ca26 <__ascii_wctomb+0x18>
 800ca14:	2aff      	cmp	r2, #255	; 0xff
 800ca16:	d904      	bls.n	800ca22 <__ascii_wctomb+0x14>
 800ca18:	228a      	movs	r2, #138	; 0x8a
 800ca1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca1e:	601a      	str	r2, [r3, #0]
 800ca20:	4770      	bx	lr
 800ca22:	2001      	movs	r0, #1
 800ca24:	700a      	strb	r2, [r1, #0]
 800ca26:	4770      	bx	lr

0800ca28 <_write_r>:
 800ca28:	b538      	push	{r3, r4, r5, lr}
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	4608      	mov	r0, r1
 800ca2e:	4611      	mov	r1, r2
 800ca30:	2200      	movs	r2, #0
 800ca32:	4d05      	ldr	r5, [pc, #20]	; (800ca48 <_write_r+0x20>)
 800ca34:	602a      	str	r2, [r5, #0]
 800ca36:	461a      	mov	r2, r3
 800ca38:	f7f9 fff6 	bl	8006a28 <_write>
 800ca3c:	1c43      	adds	r3, r0, #1
 800ca3e:	d102      	bne.n	800ca46 <_write_r+0x1e>
 800ca40:	682b      	ldr	r3, [r5, #0]
 800ca42:	b103      	cbz	r3, 800ca46 <_write_r+0x1e>
 800ca44:	6023      	str	r3, [r4, #0]
 800ca46:	bd38      	pop	{r3, r4, r5, pc}
 800ca48:	200004dc 	.word	0x200004dc

0800ca4c <__assert_func>:
 800ca4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca4e:	4614      	mov	r4, r2
 800ca50:	461a      	mov	r2, r3
 800ca52:	4b09      	ldr	r3, [pc, #36]	; (800ca78 <__assert_func+0x2c>)
 800ca54:	4605      	mov	r5, r0
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	68d8      	ldr	r0, [r3, #12]
 800ca5a:	b14c      	cbz	r4, 800ca70 <__assert_func+0x24>
 800ca5c:	4b07      	ldr	r3, [pc, #28]	; (800ca7c <__assert_func+0x30>)
 800ca5e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca62:	9100      	str	r1, [sp, #0]
 800ca64:	462b      	mov	r3, r5
 800ca66:	4906      	ldr	r1, [pc, #24]	; (800ca80 <__assert_func+0x34>)
 800ca68:	f000 f81e 	bl	800caa8 <fiprintf>
 800ca6c:	f000 fad4 	bl	800d018 <abort>
 800ca70:	4b04      	ldr	r3, [pc, #16]	; (800ca84 <__assert_func+0x38>)
 800ca72:	461c      	mov	r4, r3
 800ca74:	e7f3      	b.n	800ca5e <__assert_func+0x12>
 800ca76:	bf00      	nop
 800ca78:	2000028c 	.word	0x2000028c
 800ca7c:	0800d6d5 	.word	0x0800d6d5
 800ca80:	0800d6e2 	.word	0x0800d6e2
 800ca84:	0800d710 	.word	0x0800d710

0800ca88 <_close_r>:
 800ca88:	b538      	push	{r3, r4, r5, lr}
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	4d05      	ldr	r5, [pc, #20]	; (800caa4 <_close_r+0x1c>)
 800ca8e:	4604      	mov	r4, r0
 800ca90:	4608      	mov	r0, r1
 800ca92:	602b      	str	r3, [r5, #0]
 800ca94:	f7f9 ffe4 	bl	8006a60 <_close>
 800ca98:	1c43      	adds	r3, r0, #1
 800ca9a:	d102      	bne.n	800caa2 <_close_r+0x1a>
 800ca9c:	682b      	ldr	r3, [r5, #0]
 800ca9e:	b103      	cbz	r3, 800caa2 <_close_r+0x1a>
 800caa0:	6023      	str	r3, [r4, #0]
 800caa2:	bd38      	pop	{r3, r4, r5, pc}
 800caa4:	200004dc 	.word	0x200004dc

0800caa8 <fiprintf>:
 800caa8:	b40e      	push	{r1, r2, r3}
 800caaa:	b503      	push	{r0, r1, lr}
 800caac:	4601      	mov	r1, r0
 800caae:	ab03      	add	r3, sp, #12
 800cab0:	4805      	ldr	r0, [pc, #20]	; (800cac8 <fiprintf+0x20>)
 800cab2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cab6:	6800      	ldr	r0, [r0, #0]
 800cab8:	9301      	str	r3, [sp, #4]
 800caba:	f000 f8ab 	bl	800cc14 <_vfiprintf_r>
 800cabe:	b002      	add	sp, #8
 800cac0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cac4:	b003      	add	sp, #12
 800cac6:	4770      	bx	lr
 800cac8:	2000028c 	.word	0x2000028c

0800cacc <_fstat_r>:
 800cacc:	b538      	push	{r3, r4, r5, lr}
 800cace:	2300      	movs	r3, #0
 800cad0:	4d06      	ldr	r5, [pc, #24]	; (800caec <_fstat_r+0x20>)
 800cad2:	4604      	mov	r4, r0
 800cad4:	4608      	mov	r0, r1
 800cad6:	4611      	mov	r1, r2
 800cad8:	602b      	str	r3, [r5, #0]
 800cada:	f7f9 ffcc 	bl	8006a76 <_fstat>
 800cade:	1c43      	adds	r3, r0, #1
 800cae0:	d102      	bne.n	800cae8 <_fstat_r+0x1c>
 800cae2:	682b      	ldr	r3, [r5, #0]
 800cae4:	b103      	cbz	r3, 800cae8 <_fstat_r+0x1c>
 800cae6:	6023      	str	r3, [r4, #0]
 800cae8:	bd38      	pop	{r3, r4, r5, pc}
 800caea:	bf00      	nop
 800caec:	200004dc 	.word	0x200004dc

0800caf0 <_isatty_r>:
 800caf0:	b538      	push	{r3, r4, r5, lr}
 800caf2:	2300      	movs	r3, #0
 800caf4:	4d05      	ldr	r5, [pc, #20]	; (800cb0c <_isatty_r+0x1c>)
 800caf6:	4604      	mov	r4, r0
 800caf8:	4608      	mov	r0, r1
 800cafa:	602b      	str	r3, [r5, #0]
 800cafc:	f7f9 ffca 	bl	8006a94 <_isatty>
 800cb00:	1c43      	adds	r3, r0, #1
 800cb02:	d102      	bne.n	800cb0a <_isatty_r+0x1a>
 800cb04:	682b      	ldr	r3, [r5, #0]
 800cb06:	b103      	cbz	r3, 800cb0a <_isatty_r+0x1a>
 800cb08:	6023      	str	r3, [r4, #0]
 800cb0a:	bd38      	pop	{r3, r4, r5, pc}
 800cb0c:	200004dc 	.word	0x200004dc

0800cb10 <_lseek_r>:
 800cb10:	b538      	push	{r3, r4, r5, lr}
 800cb12:	4604      	mov	r4, r0
 800cb14:	4608      	mov	r0, r1
 800cb16:	4611      	mov	r1, r2
 800cb18:	2200      	movs	r2, #0
 800cb1a:	4d05      	ldr	r5, [pc, #20]	; (800cb30 <_lseek_r+0x20>)
 800cb1c:	602a      	str	r2, [r5, #0]
 800cb1e:	461a      	mov	r2, r3
 800cb20:	f7f9 ffc2 	bl	8006aa8 <_lseek>
 800cb24:	1c43      	adds	r3, r0, #1
 800cb26:	d102      	bne.n	800cb2e <_lseek_r+0x1e>
 800cb28:	682b      	ldr	r3, [r5, #0]
 800cb2a:	b103      	cbz	r3, 800cb2e <_lseek_r+0x1e>
 800cb2c:	6023      	str	r3, [r4, #0]
 800cb2e:	bd38      	pop	{r3, r4, r5, pc}
 800cb30:	200004dc 	.word	0x200004dc

0800cb34 <memmove>:
 800cb34:	4288      	cmp	r0, r1
 800cb36:	b510      	push	{r4, lr}
 800cb38:	eb01 0402 	add.w	r4, r1, r2
 800cb3c:	d902      	bls.n	800cb44 <memmove+0x10>
 800cb3e:	4284      	cmp	r4, r0
 800cb40:	4623      	mov	r3, r4
 800cb42:	d807      	bhi.n	800cb54 <memmove+0x20>
 800cb44:	1e43      	subs	r3, r0, #1
 800cb46:	42a1      	cmp	r1, r4
 800cb48:	d008      	beq.n	800cb5c <memmove+0x28>
 800cb4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb52:	e7f8      	b.n	800cb46 <memmove+0x12>
 800cb54:	4601      	mov	r1, r0
 800cb56:	4402      	add	r2, r0
 800cb58:	428a      	cmp	r2, r1
 800cb5a:	d100      	bne.n	800cb5e <memmove+0x2a>
 800cb5c:	bd10      	pop	{r4, pc}
 800cb5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb66:	e7f7      	b.n	800cb58 <memmove+0x24>

0800cb68 <_realloc_r>:
 800cb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb6c:	4680      	mov	r8, r0
 800cb6e:	4614      	mov	r4, r2
 800cb70:	460e      	mov	r6, r1
 800cb72:	b921      	cbnz	r1, 800cb7e <_realloc_r+0x16>
 800cb74:	4611      	mov	r1, r2
 800cb76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb7a:	f7fb bef3 	b.w	8008964 <_malloc_r>
 800cb7e:	b92a      	cbnz	r2, 800cb8c <_realloc_r+0x24>
 800cb80:	f7fb fe88 	bl	8008894 <_free_r>
 800cb84:	4625      	mov	r5, r4
 800cb86:	4628      	mov	r0, r5
 800cb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb8c:	f000 fa4b 	bl	800d026 <_malloc_usable_size_r>
 800cb90:	4284      	cmp	r4, r0
 800cb92:	4607      	mov	r7, r0
 800cb94:	d802      	bhi.n	800cb9c <_realloc_r+0x34>
 800cb96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb9a:	d812      	bhi.n	800cbc2 <_realloc_r+0x5a>
 800cb9c:	4621      	mov	r1, r4
 800cb9e:	4640      	mov	r0, r8
 800cba0:	f7fb fee0 	bl	8008964 <_malloc_r>
 800cba4:	4605      	mov	r5, r0
 800cba6:	2800      	cmp	r0, #0
 800cba8:	d0ed      	beq.n	800cb86 <_realloc_r+0x1e>
 800cbaa:	42bc      	cmp	r4, r7
 800cbac:	4622      	mov	r2, r4
 800cbae:	4631      	mov	r1, r6
 800cbb0:	bf28      	it	cs
 800cbb2:	463a      	movcs	r2, r7
 800cbb4:	f7fb fe58 	bl	8008868 <memcpy>
 800cbb8:	4631      	mov	r1, r6
 800cbba:	4640      	mov	r0, r8
 800cbbc:	f7fb fe6a 	bl	8008894 <_free_r>
 800cbc0:	e7e1      	b.n	800cb86 <_realloc_r+0x1e>
 800cbc2:	4635      	mov	r5, r6
 800cbc4:	e7df      	b.n	800cb86 <_realloc_r+0x1e>

0800cbc6 <__sfputc_r>:
 800cbc6:	6893      	ldr	r3, [r2, #8]
 800cbc8:	b410      	push	{r4}
 800cbca:	3b01      	subs	r3, #1
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	6093      	str	r3, [r2, #8]
 800cbd0:	da07      	bge.n	800cbe2 <__sfputc_r+0x1c>
 800cbd2:	6994      	ldr	r4, [r2, #24]
 800cbd4:	42a3      	cmp	r3, r4
 800cbd6:	db01      	blt.n	800cbdc <__sfputc_r+0x16>
 800cbd8:	290a      	cmp	r1, #10
 800cbda:	d102      	bne.n	800cbe2 <__sfputc_r+0x1c>
 800cbdc:	bc10      	pop	{r4}
 800cbde:	f000 b95b 	b.w	800ce98 <__swbuf_r>
 800cbe2:	6813      	ldr	r3, [r2, #0]
 800cbe4:	1c58      	adds	r0, r3, #1
 800cbe6:	6010      	str	r0, [r2, #0]
 800cbe8:	7019      	strb	r1, [r3, #0]
 800cbea:	4608      	mov	r0, r1
 800cbec:	bc10      	pop	{r4}
 800cbee:	4770      	bx	lr

0800cbf0 <__sfputs_r>:
 800cbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf2:	4606      	mov	r6, r0
 800cbf4:	460f      	mov	r7, r1
 800cbf6:	4614      	mov	r4, r2
 800cbf8:	18d5      	adds	r5, r2, r3
 800cbfa:	42ac      	cmp	r4, r5
 800cbfc:	d101      	bne.n	800cc02 <__sfputs_r+0x12>
 800cbfe:	2000      	movs	r0, #0
 800cc00:	e007      	b.n	800cc12 <__sfputs_r+0x22>
 800cc02:	463a      	mov	r2, r7
 800cc04:	4630      	mov	r0, r6
 800cc06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc0a:	f7ff ffdc 	bl	800cbc6 <__sfputc_r>
 800cc0e:	1c43      	adds	r3, r0, #1
 800cc10:	d1f3      	bne.n	800cbfa <__sfputs_r+0xa>
 800cc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc14 <_vfiprintf_r>:
 800cc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc18:	460d      	mov	r5, r1
 800cc1a:	4614      	mov	r4, r2
 800cc1c:	4698      	mov	r8, r3
 800cc1e:	4606      	mov	r6, r0
 800cc20:	b09d      	sub	sp, #116	; 0x74
 800cc22:	b118      	cbz	r0, 800cc2c <_vfiprintf_r+0x18>
 800cc24:	6983      	ldr	r3, [r0, #24]
 800cc26:	b90b      	cbnz	r3, 800cc2c <_vfiprintf_r+0x18>
 800cc28:	f7fe fbd2 	bl	800b3d0 <__sinit>
 800cc2c:	4b89      	ldr	r3, [pc, #548]	; (800ce54 <_vfiprintf_r+0x240>)
 800cc2e:	429d      	cmp	r5, r3
 800cc30:	d11b      	bne.n	800cc6a <_vfiprintf_r+0x56>
 800cc32:	6875      	ldr	r5, [r6, #4]
 800cc34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc36:	07d9      	lsls	r1, r3, #31
 800cc38:	d405      	bmi.n	800cc46 <_vfiprintf_r+0x32>
 800cc3a:	89ab      	ldrh	r3, [r5, #12]
 800cc3c:	059a      	lsls	r2, r3, #22
 800cc3e:	d402      	bmi.n	800cc46 <_vfiprintf_r+0x32>
 800cc40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc42:	f7fb fe06 	bl	8008852 <__retarget_lock_acquire_recursive>
 800cc46:	89ab      	ldrh	r3, [r5, #12]
 800cc48:	071b      	lsls	r3, r3, #28
 800cc4a:	d501      	bpl.n	800cc50 <_vfiprintf_r+0x3c>
 800cc4c:	692b      	ldr	r3, [r5, #16]
 800cc4e:	b9eb      	cbnz	r3, 800cc8c <_vfiprintf_r+0x78>
 800cc50:	4629      	mov	r1, r5
 800cc52:	4630      	mov	r0, r6
 800cc54:	f000 f972 	bl	800cf3c <__swsetup_r>
 800cc58:	b1c0      	cbz	r0, 800cc8c <_vfiprintf_r+0x78>
 800cc5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc5c:	07dc      	lsls	r4, r3, #31
 800cc5e:	d50e      	bpl.n	800cc7e <_vfiprintf_r+0x6a>
 800cc60:	f04f 30ff 	mov.w	r0, #4294967295
 800cc64:	b01d      	add	sp, #116	; 0x74
 800cc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc6a:	4b7b      	ldr	r3, [pc, #492]	; (800ce58 <_vfiprintf_r+0x244>)
 800cc6c:	429d      	cmp	r5, r3
 800cc6e:	d101      	bne.n	800cc74 <_vfiprintf_r+0x60>
 800cc70:	68b5      	ldr	r5, [r6, #8]
 800cc72:	e7df      	b.n	800cc34 <_vfiprintf_r+0x20>
 800cc74:	4b79      	ldr	r3, [pc, #484]	; (800ce5c <_vfiprintf_r+0x248>)
 800cc76:	429d      	cmp	r5, r3
 800cc78:	bf08      	it	eq
 800cc7a:	68f5      	ldreq	r5, [r6, #12]
 800cc7c:	e7da      	b.n	800cc34 <_vfiprintf_r+0x20>
 800cc7e:	89ab      	ldrh	r3, [r5, #12]
 800cc80:	0598      	lsls	r0, r3, #22
 800cc82:	d4ed      	bmi.n	800cc60 <_vfiprintf_r+0x4c>
 800cc84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc86:	f7fb fde5 	bl	8008854 <__retarget_lock_release_recursive>
 800cc8a:	e7e9      	b.n	800cc60 <_vfiprintf_r+0x4c>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc90:	2320      	movs	r3, #32
 800cc92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc96:	2330      	movs	r3, #48	; 0x30
 800cc98:	f04f 0901 	mov.w	r9, #1
 800cc9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cca0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ce60 <_vfiprintf_r+0x24c>
 800cca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cca8:	4623      	mov	r3, r4
 800ccaa:	469a      	mov	sl, r3
 800ccac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccb0:	b10a      	cbz	r2, 800ccb6 <_vfiprintf_r+0xa2>
 800ccb2:	2a25      	cmp	r2, #37	; 0x25
 800ccb4:	d1f9      	bne.n	800ccaa <_vfiprintf_r+0x96>
 800ccb6:	ebba 0b04 	subs.w	fp, sl, r4
 800ccba:	d00b      	beq.n	800ccd4 <_vfiprintf_r+0xc0>
 800ccbc:	465b      	mov	r3, fp
 800ccbe:	4622      	mov	r2, r4
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	f7ff ff94 	bl	800cbf0 <__sfputs_r>
 800ccc8:	3001      	adds	r0, #1
 800ccca:	f000 80aa 	beq.w	800ce22 <_vfiprintf_r+0x20e>
 800ccce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccd0:	445a      	add	r2, fp
 800ccd2:	9209      	str	r2, [sp, #36]	; 0x24
 800ccd4:	f89a 3000 	ldrb.w	r3, [sl]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f000 80a2 	beq.w	800ce22 <_vfiprintf_r+0x20e>
 800ccde:	2300      	movs	r3, #0
 800cce0:	f04f 32ff 	mov.w	r2, #4294967295
 800cce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cce8:	f10a 0a01 	add.w	sl, sl, #1
 800ccec:	9304      	str	r3, [sp, #16]
 800ccee:	9307      	str	r3, [sp, #28]
 800ccf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccf4:	931a      	str	r3, [sp, #104]	; 0x68
 800ccf6:	4654      	mov	r4, sl
 800ccf8:	2205      	movs	r2, #5
 800ccfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccfe:	4858      	ldr	r0, [pc, #352]	; (800ce60 <_vfiprintf_r+0x24c>)
 800cd00:	f7fe ffe6 	bl	800bcd0 <memchr>
 800cd04:	9a04      	ldr	r2, [sp, #16]
 800cd06:	b9d8      	cbnz	r0, 800cd40 <_vfiprintf_r+0x12c>
 800cd08:	06d1      	lsls	r1, r2, #27
 800cd0a:	bf44      	itt	mi
 800cd0c:	2320      	movmi	r3, #32
 800cd0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd12:	0713      	lsls	r3, r2, #28
 800cd14:	bf44      	itt	mi
 800cd16:	232b      	movmi	r3, #43	; 0x2b
 800cd18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd1c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd20:	2b2a      	cmp	r3, #42	; 0x2a
 800cd22:	d015      	beq.n	800cd50 <_vfiprintf_r+0x13c>
 800cd24:	4654      	mov	r4, sl
 800cd26:	2000      	movs	r0, #0
 800cd28:	f04f 0c0a 	mov.w	ip, #10
 800cd2c:	9a07      	ldr	r2, [sp, #28]
 800cd2e:	4621      	mov	r1, r4
 800cd30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd34:	3b30      	subs	r3, #48	; 0x30
 800cd36:	2b09      	cmp	r3, #9
 800cd38:	d94e      	bls.n	800cdd8 <_vfiprintf_r+0x1c4>
 800cd3a:	b1b0      	cbz	r0, 800cd6a <_vfiprintf_r+0x156>
 800cd3c:	9207      	str	r2, [sp, #28]
 800cd3e:	e014      	b.n	800cd6a <_vfiprintf_r+0x156>
 800cd40:	eba0 0308 	sub.w	r3, r0, r8
 800cd44:	fa09 f303 	lsl.w	r3, r9, r3
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	46a2      	mov	sl, r4
 800cd4c:	9304      	str	r3, [sp, #16]
 800cd4e:	e7d2      	b.n	800ccf6 <_vfiprintf_r+0xe2>
 800cd50:	9b03      	ldr	r3, [sp, #12]
 800cd52:	1d19      	adds	r1, r3, #4
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	9103      	str	r1, [sp, #12]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	bfbb      	ittet	lt
 800cd5c:	425b      	neglt	r3, r3
 800cd5e:	f042 0202 	orrlt.w	r2, r2, #2
 800cd62:	9307      	strge	r3, [sp, #28]
 800cd64:	9307      	strlt	r3, [sp, #28]
 800cd66:	bfb8      	it	lt
 800cd68:	9204      	strlt	r2, [sp, #16]
 800cd6a:	7823      	ldrb	r3, [r4, #0]
 800cd6c:	2b2e      	cmp	r3, #46	; 0x2e
 800cd6e:	d10c      	bne.n	800cd8a <_vfiprintf_r+0x176>
 800cd70:	7863      	ldrb	r3, [r4, #1]
 800cd72:	2b2a      	cmp	r3, #42	; 0x2a
 800cd74:	d135      	bne.n	800cde2 <_vfiprintf_r+0x1ce>
 800cd76:	9b03      	ldr	r3, [sp, #12]
 800cd78:	3402      	adds	r4, #2
 800cd7a:	1d1a      	adds	r2, r3, #4
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	9203      	str	r2, [sp, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	bfb8      	it	lt
 800cd84:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd88:	9305      	str	r3, [sp, #20]
 800cd8a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ce64 <_vfiprintf_r+0x250>
 800cd8e:	2203      	movs	r2, #3
 800cd90:	4650      	mov	r0, sl
 800cd92:	7821      	ldrb	r1, [r4, #0]
 800cd94:	f7fe ff9c 	bl	800bcd0 <memchr>
 800cd98:	b140      	cbz	r0, 800cdac <_vfiprintf_r+0x198>
 800cd9a:	2340      	movs	r3, #64	; 0x40
 800cd9c:	eba0 000a 	sub.w	r0, r0, sl
 800cda0:	fa03 f000 	lsl.w	r0, r3, r0
 800cda4:	9b04      	ldr	r3, [sp, #16]
 800cda6:	3401      	adds	r4, #1
 800cda8:	4303      	orrs	r3, r0
 800cdaa:	9304      	str	r3, [sp, #16]
 800cdac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdb0:	2206      	movs	r2, #6
 800cdb2:	482d      	ldr	r0, [pc, #180]	; (800ce68 <_vfiprintf_r+0x254>)
 800cdb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdb8:	f7fe ff8a 	bl	800bcd0 <memchr>
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	d03f      	beq.n	800ce40 <_vfiprintf_r+0x22c>
 800cdc0:	4b2a      	ldr	r3, [pc, #168]	; (800ce6c <_vfiprintf_r+0x258>)
 800cdc2:	bb1b      	cbnz	r3, 800ce0c <_vfiprintf_r+0x1f8>
 800cdc4:	9b03      	ldr	r3, [sp, #12]
 800cdc6:	3307      	adds	r3, #7
 800cdc8:	f023 0307 	bic.w	r3, r3, #7
 800cdcc:	3308      	adds	r3, #8
 800cdce:	9303      	str	r3, [sp, #12]
 800cdd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdd2:	443b      	add	r3, r7
 800cdd4:	9309      	str	r3, [sp, #36]	; 0x24
 800cdd6:	e767      	b.n	800cca8 <_vfiprintf_r+0x94>
 800cdd8:	460c      	mov	r4, r1
 800cdda:	2001      	movs	r0, #1
 800cddc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cde0:	e7a5      	b.n	800cd2e <_vfiprintf_r+0x11a>
 800cde2:	2300      	movs	r3, #0
 800cde4:	f04f 0c0a 	mov.w	ip, #10
 800cde8:	4619      	mov	r1, r3
 800cdea:	3401      	adds	r4, #1
 800cdec:	9305      	str	r3, [sp, #20]
 800cdee:	4620      	mov	r0, r4
 800cdf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdf4:	3a30      	subs	r2, #48	; 0x30
 800cdf6:	2a09      	cmp	r2, #9
 800cdf8:	d903      	bls.n	800ce02 <_vfiprintf_r+0x1ee>
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d0c5      	beq.n	800cd8a <_vfiprintf_r+0x176>
 800cdfe:	9105      	str	r1, [sp, #20]
 800ce00:	e7c3      	b.n	800cd8a <_vfiprintf_r+0x176>
 800ce02:	4604      	mov	r4, r0
 800ce04:	2301      	movs	r3, #1
 800ce06:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce0a:	e7f0      	b.n	800cdee <_vfiprintf_r+0x1da>
 800ce0c:	ab03      	add	r3, sp, #12
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	462a      	mov	r2, r5
 800ce12:	4630      	mov	r0, r6
 800ce14:	4b16      	ldr	r3, [pc, #88]	; (800ce70 <_vfiprintf_r+0x25c>)
 800ce16:	a904      	add	r1, sp, #16
 800ce18:	f7fb feb6 	bl	8008b88 <_printf_float>
 800ce1c:	4607      	mov	r7, r0
 800ce1e:	1c78      	adds	r0, r7, #1
 800ce20:	d1d6      	bne.n	800cdd0 <_vfiprintf_r+0x1bc>
 800ce22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce24:	07d9      	lsls	r1, r3, #31
 800ce26:	d405      	bmi.n	800ce34 <_vfiprintf_r+0x220>
 800ce28:	89ab      	ldrh	r3, [r5, #12]
 800ce2a:	059a      	lsls	r2, r3, #22
 800ce2c:	d402      	bmi.n	800ce34 <_vfiprintf_r+0x220>
 800ce2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce30:	f7fb fd10 	bl	8008854 <__retarget_lock_release_recursive>
 800ce34:	89ab      	ldrh	r3, [r5, #12]
 800ce36:	065b      	lsls	r3, r3, #25
 800ce38:	f53f af12 	bmi.w	800cc60 <_vfiprintf_r+0x4c>
 800ce3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce3e:	e711      	b.n	800cc64 <_vfiprintf_r+0x50>
 800ce40:	ab03      	add	r3, sp, #12
 800ce42:	9300      	str	r3, [sp, #0]
 800ce44:	462a      	mov	r2, r5
 800ce46:	4630      	mov	r0, r6
 800ce48:	4b09      	ldr	r3, [pc, #36]	; (800ce70 <_vfiprintf_r+0x25c>)
 800ce4a:	a904      	add	r1, sp, #16
 800ce4c:	f7fc f938 	bl	80090c0 <_printf_i>
 800ce50:	e7e4      	b.n	800ce1c <_vfiprintf_r+0x208>
 800ce52:	bf00      	nop
 800ce54:	0800d4ac 	.word	0x0800d4ac
 800ce58:	0800d4cc 	.word	0x0800d4cc
 800ce5c:	0800d48c 	.word	0x0800d48c
 800ce60:	0800d6c4 	.word	0x0800d6c4
 800ce64:	0800d6ca 	.word	0x0800d6ca
 800ce68:	0800d6ce 	.word	0x0800d6ce
 800ce6c:	08008b89 	.word	0x08008b89
 800ce70:	0800cbf1 	.word	0x0800cbf1

0800ce74 <_read_r>:
 800ce74:	b538      	push	{r3, r4, r5, lr}
 800ce76:	4604      	mov	r4, r0
 800ce78:	4608      	mov	r0, r1
 800ce7a:	4611      	mov	r1, r2
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	4d05      	ldr	r5, [pc, #20]	; (800ce94 <_read_r+0x20>)
 800ce80:	602a      	str	r2, [r5, #0]
 800ce82:	461a      	mov	r2, r3
 800ce84:	f7f9 fdb3 	bl	80069ee <_read>
 800ce88:	1c43      	adds	r3, r0, #1
 800ce8a:	d102      	bne.n	800ce92 <_read_r+0x1e>
 800ce8c:	682b      	ldr	r3, [r5, #0]
 800ce8e:	b103      	cbz	r3, 800ce92 <_read_r+0x1e>
 800ce90:	6023      	str	r3, [r4, #0]
 800ce92:	bd38      	pop	{r3, r4, r5, pc}
 800ce94:	200004dc 	.word	0x200004dc

0800ce98 <__swbuf_r>:
 800ce98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce9a:	460e      	mov	r6, r1
 800ce9c:	4614      	mov	r4, r2
 800ce9e:	4605      	mov	r5, r0
 800cea0:	b118      	cbz	r0, 800ceaa <__swbuf_r+0x12>
 800cea2:	6983      	ldr	r3, [r0, #24]
 800cea4:	b90b      	cbnz	r3, 800ceaa <__swbuf_r+0x12>
 800cea6:	f7fe fa93 	bl	800b3d0 <__sinit>
 800ceaa:	4b21      	ldr	r3, [pc, #132]	; (800cf30 <__swbuf_r+0x98>)
 800ceac:	429c      	cmp	r4, r3
 800ceae:	d12b      	bne.n	800cf08 <__swbuf_r+0x70>
 800ceb0:	686c      	ldr	r4, [r5, #4]
 800ceb2:	69a3      	ldr	r3, [r4, #24]
 800ceb4:	60a3      	str	r3, [r4, #8]
 800ceb6:	89a3      	ldrh	r3, [r4, #12]
 800ceb8:	071a      	lsls	r2, r3, #28
 800ceba:	d52f      	bpl.n	800cf1c <__swbuf_r+0x84>
 800cebc:	6923      	ldr	r3, [r4, #16]
 800cebe:	b36b      	cbz	r3, 800cf1c <__swbuf_r+0x84>
 800cec0:	6923      	ldr	r3, [r4, #16]
 800cec2:	6820      	ldr	r0, [r4, #0]
 800cec4:	b2f6      	uxtb	r6, r6
 800cec6:	1ac0      	subs	r0, r0, r3
 800cec8:	6963      	ldr	r3, [r4, #20]
 800ceca:	4637      	mov	r7, r6
 800cecc:	4283      	cmp	r3, r0
 800cece:	dc04      	bgt.n	800ceda <__swbuf_r+0x42>
 800ced0:	4621      	mov	r1, r4
 800ced2:	4628      	mov	r0, r5
 800ced4:	f7fe f9e8 	bl	800b2a8 <_fflush_r>
 800ced8:	bb30      	cbnz	r0, 800cf28 <__swbuf_r+0x90>
 800ceda:	68a3      	ldr	r3, [r4, #8]
 800cedc:	3001      	adds	r0, #1
 800cede:	3b01      	subs	r3, #1
 800cee0:	60a3      	str	r3, [r4, #8]
 800cee2:	6823      	ldr	r3, [r4, #0]
 800cee4:	1c5a      	adds	r2, r3, #1
 800cee6:	6022      	str	r2, [r4, #0]
 800cee8:	701e      	strb	r6, [r3, #0]
 800ceea:	6963      	ldr	r3, [r4, #20]
 800ceec:	4283      	cmp	r3, r0
 800ceee:	d004      	beq.n	800cefa <__swbuf_r+0x62>
 800cef0:	89a3      	ldrh	r3, [r4, #12]
 800cef2:	07db      	lsls	r3, r3, #31
 800cef4:	d506      	bpl.n	800cf04 <__swbuf_r+0x6c>
 800cef6:	2e0a      	cmp	r6, #10
 800cef8:	d104      	bne.n	800cf04 <__swbuf_r+0x6c>
 800cefa:	4621      	mov	r1, r4
 800cefc:	4628      	mov	r0, r5
 800cefe:	f7fe f9d3 	bl	800b2a8 <_fflush_r>
 800cf02:	b988      	cbnz	r0, 800cf28 <__swbuf_r+0x90>
 800cf04:	4638      	mov	r0, r7
 800cf06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf08:	4b0a      	ldr	r3, [pc, #40]	; (800cf34 <__swbuf_r+0x9c>)
 800cf0a:	429c      	cmp	r4, r3
 800cf0c:	d101      	bne.n	800cf12 <__swbuf_r+0x7a>
 800cf0e:	68ac      	ldr	r4, [r5, #8]
 800cf10:	e7cf      	b.n	800ceb2 <__swbuf_r+0x1a>
 800cf12:	4b09      	ldr	r3, [pc, #36]	; (800cf38 <__swbuf_r+0xa0>)
 800cf14:	429c      	cmp	r4, r3
 800cf16:	bf08      	it	eq
 800cf18:	68ec      	ldreq	r4, [r5, #12]
 800cf1a:	e7ca      	b.n	800ceb2 <__swbuf_r+0x1a>
 800cf1c:	4621      	mov	r1, r4
 800cf1e:	4628      	mov	r0, r5
 800cf20:	f000 f80c 	bl	800cf3c <__swsetup_r>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	d0cb      	beq.n	800cec0 <__swbuf_r+0x28>
 800cf28:	f04f 37ff 	mov.w	r7, #4294967295
 800cf2c:	e7ea      	b.n	800cf04 <__swbuf_r+0x6c>
 800cf2e:	bf00      	nop
 800cf30:	0800d4ac 	.word	0x0800d4ac
 800cf34:	0800d4cc 	.word	0x0800d4cc
 800cf38:	0800d48c 	.word	0x0800d48c

0800cf3c <__swsetup_r>:
 800cf3c:	4b32      	ldr	r3, [pc, #200]	; (800d008 <__swsetup_r+0xcc>)
 800cf3e:	b570      	push	{r4, r5, r6, lr}
 800cf40:	681d      	ldr	r5, [r3, #0]
 800cf42:	4606      	mov	r6, r0
 800cf44:	460c      	mov	r4, r1
 800cf46:	b125      	cbz	r5, 800cf52 <__swsetup_r+0x16>
 800cf48:	69ab      	ldr	r3, [r5, #24]
 800cf4a:	b913      	cbnz	r3, 800cf52 <__swsetup_r+0x16>
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	f7fe fa3f 	bl	800b3d0 <__sinit>
 800cf52:	4b2e      	ldr	r3, [pc, #184]	; (800d00c <__swsetup_r+0xd0>)
 800cf54:	429c      	cmp	r4, r3
 800cf56:	d10f      	bne.n	800cf78 <__swsetup_r+0x3c>
 800cf58:	686c      	ldr	r4, [r5, #4]
 800cf5a:	89a3      	ldrh	r3, [r4, #12]
 800cf5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf60:	0719      	lsls	r1, r3, #28
 800cf62:	d42c      	bmi.n	800cfbe <__swsetup_r+0x82>
 800cf64:	06dd      	lsls	r5, r3, #27
 800cf66:	d411      	bmi.n	800cf8c <__swsetup_r+0x50>
 800cf68:	2309      	movs	r3, #9
 800cf6a:	6033      	str	r3, [r6, #0]
 800cf6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf70:	f04f 30ff 	mov.w	r0, #4294967295
 800cf74:	81a3      	strh	r3, [r4, #12]
 800cf76:	e03e      	b.n	800cff6 <__swsetup_r+0xba>
 800cf78:	4b25      	ldr	r3, [pc, #148]	; (800d010 <__swsetup_r+0xd4>)
 800cf7a:	429c      	cmp	r4, r3
 800cf7c:	d101      	bne.n	800cf82 <__swsetup_r+0x46>
 800cf7e:	68ac      	ldr	r4, [r5, #8]
 800cf80:	e7eb      	b.n	800cf5a <__swsetup_r+0x1e>
 800cf82:	4b24      	ldr	r3, [pc, #144]	; (800d014 <__swsetup_r+0xd8>)
 800cf84:	429c      	cmp	r4, r3
 800cf86:	bf08      	it	eq
 800cf88:	68ec      	ldreq	r4, [r5, #12]
 800cf8a:	e7e6      	b.n	800cf5a <__swsetup_r+0x1e>
 800cf8c:	0758      	lsls	r0, r3, #29
 800cf8e:	d512      	bpl.n	800cfb6 <__swsetup_r+0x7a>
 800cf90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf92:	b141      	cbz	r1, 800cfa6 <__swsetup_r+0x6a>
 800cf94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf98:	4299      	cmp	r1, r3
 800cf9a:	d002      	beq.n	800cfa2 <__swsetup_r+0x66>
 800cf9c:	4630      	mov	r0, r6
 800cf9e:	f7fb fc79 	bl	8008894 <_free_r>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	6363      	str	r3, [r4, #52]	; 0x34
 800cfa6:	89a3      	ldrh	r3, [r4, #12]
 800cfa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cfac:	81a3      	strh	r3, [r4, #12]
 800cfae:	2300      	movs	r3, #0
 800cfb0:	6063      	str	r3, [r4, #4]
 800cfb2:	6923      	ldr	r3, [r4, #16]
 800cfb4:	6023      	str	r3, [r4, #0]
 800cfb6:	89a3      	ldrh	r3, [r4, #12]
 800cfb8:	f043 0308 	orr.w	r3, r3, #8
 800cfbc:	81a3      	strh	r3, [r4, #12]
 800cfbe:	6923      	ldr	r3, [r4, #16]
 800cfc0:	b94b      	cbnz	r3, 800cfd6 <__swsetup_r+0x9a>
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cfc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfcc:	d003      	beq.n	800cfd6 <__swsetup_r+0x9a>
 800cfce:	4621      	mov	r1, r4
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f7fe fe2b 	bl	800bc2c <__smakebuf_r>
 800cfd6:	89a0      	ldrh	r0, [r4, #12]
 800cfd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cfdc:	f010 0301 	ands.w	r3, r0, #1
 800cfe0:	d00a      	beq.n	800cff8 <__swsetup_r+0xbc>
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	60a3      	str	r3, [r4, #8]
 800cfe6:	6963      	ldr	r3, [r4, #20]
 800cfe8:	425b      	negs	r3, r3
 800cfea:	61a3      	str	r3, [r4, #24]
 800cfec:	6923      	ldr	r3, [r4, #16]
 800cfee:	b943      	cbnz	r3, 800d002 <__swsetup_r+0xc6>
 800cff0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cff4:	d1ba      	bne.n	800cf6c <__swsetup_r+0x30>
 800cff6:	bd70      	pop	{r4, r5, r6, pc}
 800cff8:	0781      	lsls	r1, r0, #30
 800cffa:	bf58      	it	pl
 800cffc:	6963      	ldrpl	r3, [r4, #20]
 800cffe:	60a3      	str	r3, [r4, #8]
 800d000:	e7f4      	b.n	800cfec <__swsetup_r+0xb0>
 800d002:	2000      	movs	r0, #0
 800d004:	e7f7      	b.n	800cff6 <__swsetup_r+0xba>
 800d006:	bf00      	nop
 800d008:	2000028c 	.word	0x2000028c
 800d00c:	0800d4ac 	.word	0x0800d4ac
 800d010:	0800d4cc 	.word	0x0800d4cc
 800d014:	0800d48c 	.word	0x0800d48c

0800d018 <abort>:
 800d018:	2006      	movs	r0, #6
 800d01a:	b508      	push	{r3, lr}
 800d01c:	f000 f834 	bl	800d088 <raise>
 800d020:	2001      	movs	r0, #1
 800d022:	f7f9 fcda 	bl	80069da <_exit>

0800d026 <_malloc_usable_size_r>:
 800d026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d02a:	1f18      	subs	r0, r3, #4
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	bfbc      	itt	lt
 800d030:	580b      	ldrlt	r3, [r1, r0]
 800d032:	18c0      	addlt	r0, r0, r3
 800d034:	4770      	bx	lr

0800d036 <_raise_r>:
 800d036:	291f      	cmp	r1, #31
 800d038:	b538      	push	{r3, r4, r5, lr}
 800d03a:	4604      	mov	r4, r0
 800d03c:	460d      	mov	r5, r1
 800d03e:	d904      	bls.n	800d04a <_raise_r+0x14>
 800d040:	2316      	movs	r3, #22
 800d042:	6003      	str	r3, [r0, #0]
 800d044:	f04f 30ff 	mov.w	r0, #4294967295
 800d048:	bd38      	pop	{r3, r4, r5, pc}
 800d04a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d04c:	b112      	cbz	r2, 800d054 <_raise_r+0x1e>
 800d04e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d052:	b94b      	cbnz	r3, 800d068 <_raise_r+0x32>
 800d054:	4620      	mov	r0, r4
 800d056:	f000 f831 	bl	800d0bc <_getpid_r>
 800d05a:	462a      	mov	r2, r5
 800d05c:	4601      	mov	r1, r0
 800d05e:	4620      	mov	r0, r4
 800d060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d064:	f000 b818 	b.w	800d098 <_kill_r>
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d00a      	beq.n	800d082 <_raise_r+0x4c>
 800d06c:	1c59      	adds	r1, r3, #1
 800d06e:	d103      	bne.n	800d078 <_raise_r+0x42>
 800d070:	2316      	movs	r3, #22
 800d072:	6003      	str	r3, [r0, #0]
 800d074:	2001      	movs	r0, #1
 800d076:	e7e7      	b.n	800d048 <_raise_r+0x12>
 800d078:	2400      	movs	r4, #0
 800d07a:	4628      	mov	r0, r5
 800d07c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d080:	4798      	blx	r3
 800d082:	2000      	movs	r0, #0
 800d084:	e7e0      	b.n	800d048 <_raise_r+0x12>
	...

0800d088 <raise>:
 800d088:	4b02      	ldr	r3, [pc, #8]	; (800d094 <raise+0xc>)
 800d08a:	4601      	mov	r1, r0
 800d08c:	6818      	ldr	r0, [r3, #0]
 800d08e:	f7ff bfd2 	b.w	800d036 <_raise_r>
 800d092:	bf00      	nop
 800d094:	2000028c 	.word	0x2000028c

0800d098 <_kill_r>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	2300      	movs	r3, #0
 800d09c:	4d06      	ldr	r5, [pc, #24]	; (800d0b8 <_kill_r+0x20>)
 800d09e:	4604      	mov	r4, r0
 800d0a0:	4608      	mov	r0, r1
 800d0a2:	4611      	mov	r1, r2
 800d0a4:	602b      	str	r3, [r5, #0]
 800d0a6:	f7f9 fc88 	bl	80069ba <_kill>
 800d0aa:	1c43      	adds	r3, r0, #1
 800d0ac:	d102      	bne.n	800d0b4 <_kill_r+0x1c>
 800d0ae:	682b      	ldr	r3, [r5, #0]
 800d0b0:	b103      	cbz	r3, 800d0b4 <_kill_r+0x1c>
 800d0b2:	6023      	str	r3, [r4, #0]
 800d0b4:	bd38      	pop	{r3, r4, r5, pc}
 800d0b6:	bf00      	nop
 800d0b8:	200004dc 	.word	0x200004dc

0800d0bc <_getpid_r>:
 800d0bc:	f7f9 bc76 	b.w	80069ac <_getpid>

0800d0c0 <_init>:
 800d0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c2:	bf00      	nop
 800d0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0c6:	bc08      	pop	{r3}
 800d0c8:	469e      	mov	lr, r3
 800d0ca:	4770      	bx	lr

0800d0cc <_fini>:
 800d0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ce:	bf00      	nop
 800d0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0d2:	bc08      	pop	{r3}
 800d0d4:	469e      	mov	lr, r3
 800d0d6:	4770      	bx	lr
