
kursach_c8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008958  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000073c  08008a68  08008a68  00018a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091a4  080091a4  00020460  2**0
                  CONTENTS
  4 .ARM          00000000  080091a4  080091a4  00020460  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091a4  080091a4  00020460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091a4  080091a4  000191a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091a8  080091a8  000191a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000460  20000000  080091ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000460  0800960c  00020460  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  0800960c  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000958e  00000000  00000000  00020489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e27  00000000  00000000  00029a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0002b840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002c098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001888f  00000000  00000000  0002c808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1f6  00000000  00000000  00045097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008431d  00000000  00000000  0005028d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d45aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a8  00000000  00000000  000d45fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000460 	.word	0x20000460
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a50 	.word	0x08008a50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000464 	.word	0x20000464
 800014c:	08008a50 	.word	0x08008a50

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <do_algorithm>:
 *  Created on: Nov 28, 2023
 *      Author: Pizza Delivery
 */
#include "algorithm_interface.h"

void do_algorithm(int8_t* data, int algorithm_id) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b0b0      	sub	sp, #192	; 0xc0
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	// hashing data with chosen algorithm
	state = 2;
 8000be2:	4bc3      	ldr	r3, [pc, #780]	; (8000ef0 <do_algorithm+0x318>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	601a      	str	r2, [r3, #0]
	lcd_clear();
 8000be8:	f000 fb40 	bl	800126c <lcd_clear>
	lcd_init();
 8000bec:	f000 f9de 	bl	8000fac <lcd_init>
	switch (algorithm_id) {
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d019      	beq.n	8000c2a <do_algorithm+0x52>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	dc1e      	bgt.n	8000c3a <do_algorithm+0x62>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <do_algorithm+0x32>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d008      	beq.n	8000c1a <do_algorithm+0x42>
 8000c08:	e017      	b.n	8000c3a <do_algorithm+0x62>
		case 0:
			lcd_init();
 8000c0a:	f000 f9cf 	bl	8000fac <lcd_init>
			lcd_puts(0, 0, (int8_t*)"You chose sha256");
 8000c0e:	4ab9      	ldr	r2, [pc, #740]	; (8000ef4 <do_algorithm+0x31c>)
 8000c10:	2100      	movs	r1, #0
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 fad8 	bl	80011c8 <lcd_puts>
			break;
 8000c18:	e01f      	b.n	8000c5a <do_algorithm+0x82>
		case 1:
			lcd_init();
 8000c1a:	f000 f9c7 	bl	8000fac <lcd_init>
			lcd_puts(0, 0, (int8_t*)"You chose md5");
 8000c1e:	4ab6      	ldr	r2, [pc, #728]	; (8000ef8 <do_algorithm+0x320>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 fad0 	bl	80011c8 <lcd_puts>
			break;
 8000c28:	e017      	b.n	8000c5a <do_algorithm+0x82>
		case 2:
			lcd_init();
 8000c2a:	f000 f9bf 	bl	8000fac <lcd_init>
			lcd_puts(0, 0, (int8_t*)"You chose crc16");
 8000c2e:	4ab3      	ldr	r2, [pc, #716]	; (8000efc <do_algorithm+0x324>)
 8000c30:	2100      	movs	r1, #0
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 fac8 	bl	80011c8 <lcd_puts>
			break;
 8000c38:	e00f      	b.n	8000c5a <do_algorithm+0x82>
		default:
			lcd_init();
 8000c3a:	f000 f9b7 	bl	8000fac <lcd_init>
			int8_t *error_msg = "Unexpected algorithm chosen";
 8000c3e:	4bb0      	ldr	r3, [pc, #704]	; (8000f00 <do_algorithm+0x328>)
 8000c40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			lcd_puts(0, 0, (int8_t*) error_msg);
 8000c44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 fabc 	bl	80011c8 <lcd_puts>
			HAL_Delay(1000);
 8000c50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c54:	f001 fcba 	bl	80025cc <HAL_Delay>
			break;
 8000c58:	bf00      	nop
	}

	HAL_Delay(1000);
 8000c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c5e:	f001 fcb5 	bl	80025cc <HAL_Delay>
	int8_t *result;
	char *output;
	int j = 0, i = 0, k = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	lcd_init();
 8000c74:	f000 f99a 	bl	8000fac <lcd_init>
	switch (algorithm_id) {
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	f000 80d8 	beq.w	8000e30 <do_algorithm+0x258>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	f300 8117 	bgt.w	8000eb6 <do_algorithm+0x2de>
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <do_algorithm+0xbe>
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d071      	beq.n	8000d78 <do_algorithm+0x1a0>
 8000c94:	e10f      	b.n	8000eb6 <do_algorithm+0x2de>
			case 0:
				// sha256

				lcd_clear();
 8000c96:	f000 fae9 	bl	800126c <lcd_clear>
				lcd_init();
 8000c9a:	f000 f987 	bl	8000fac <lcd_init>
				lcd_puts(0, 0, (uint8_t*)"Starting sha256");
 8000c9e:	4a99      	ldr	r2, [pc, #612]	; (8000f04 <do_algorithm+0x32c>)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 fa90 	bl	80011c8 <lcd_puts>

//				SHA1Init(&foo);
//				SHA1Update(&foo, data, strlen(data));
//				SHA1Final(&foo, hash);

				sha256_init(&foo);
 8000ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 ff03 	bl	8001ab8 <sha256_init>
				sha256_update(&foo, data, strlen(data));
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff fa4c 	bl	8000150 <strlen>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 f94d 	bl	8001f60 <sha256_update>
				sha256_finish(&foo, hash);
 8000cc6:	f107 020c 	add.w	r2, r7, #12
 8000cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 f9ad 	bl	8002030 <sha256_finish>

				HAL_Delay(1000);
 8000cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cda:	f001 fc77 	bl	80025cc <HAL_Delay>
				lcd_clear();
 8000cde:	f000 fac5 	bl	800126c <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Result of sha256:");
 8000ce2:	4a89      	ldr	r2, [pc, #548]	; (8000f08 <do_algorithm+0x330>)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 fa6e 	bl	80011c8 <lcd_puts>
				HAL_Delay(500);
 8000cec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cf0:	f001 fc6c 	bl	80025cc <HAL_Delay>

				lcd_clear();
 8000cf4:	f000 faba 	bl	800126c <lcd_clear>
				while (k < 16) {
 8000cf8:	e02a      	b.n	8000d50 <do_algorithm+0x178>
					sprintf(output, "%02x", hash[k]);
 8000cfa:	f107 020c 	add.w	r2, r7, #12
 8000cfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d02:	4413      	add	r3, r2
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	4980      	ldr	r1, [pc, #512]	; (8000f0c <do_algorithm+0x334>)
 8000d0a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000d0e:	f004 f9fd 	bl	800510c <siprintf>
					if (i == 16) {
 8000d12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000d16:	2b10      	cmp	r3, #16
 8000d18:	d105      	bne.n	8000d26 <do_algorithm+0x14e>
						i = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						j = 1;
 8000d20:	2301      	movs	r3, #1
 8000d22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					}
					lcd_puts(j, i, (uint8_t*)output);
 8000d26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000d2a:	b25b      	sxtb	r3, r3
 8000d2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000d30:	b251      	sxtb	r1, r2
 8000d32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fa46 	bl	80011c8 <lcd_puts>
					++k;
 8000d3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d40:	3301      	adds	r3, #1
 8000d42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					i += 2;
 8000d46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
				while (k < 16) {
 8000d50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	ddd0      	ble.n	8000cfa <do_algorithm+0x122>
				}

				HAL_Delay(1000);
 8000d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5c:	f001 fc36 	bl	80025cc <HAL_Delay>
				lcd_clear();
 8000d60:	f000 fa84 	bl	800126c <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Finished sha256");
 8000d64:	4a6a      	ldr	r2, [pc, #424]	; (8000f10 <do_algorithm+0x338>)
 8000d66:	2100      	movs	r1, #0
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f000 fa2d 	bl	80011c8 <lcd_puts>
				HAL_Delay(1000);
 8000d6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d72:	f001 fc2b 	bl	80025cc <HAL_Delay>
				break;
 8000d76:	e0ae      	b.n	8000ed6 <do_algorithm+0x2fe>
			case 1:
				// md5
				lcd_clear();
 8000d78:	f000 fa78 	bl	800126c <lcd_clear>
				lcd_init();
 8000d7c:	f000 f916 	bl	8000fac <lcd_init>
				lcd_puts(0, 0, (uint8_t*)"Starting md5");
 8000d80:	4a64      	ldr	r2, [pc, #400]	; (8000f14 <do_algorithm+0x33c>)
 8000d82:	2100      	movs	r1, #0
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 fa1f 	bl	80011c8 <lcd_puts>
				uint8_t md5_result[16];
				md5String(data, md5_result);
 8000d8a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d8e:	4619      	mov	r1, r3
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f000 fe6b 	bl	8001a6c <md5String>

				HAL_Delay(1000);
 8000d96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d9a:	f001 fc17 	bl	80025cc <HAL_Delay>
				lcd_clear();
 8000d9e:	f000 fa65 	bl	800126c <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Result of md5:");
 8000da2:	4a5d      	ldr	r2, [pc, #372]	; (8000f18 <do_algorithm+0x340>)
 8000da4:	2100      	movs	r1, #0
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 fa0e 	bl	80011c8 <lcd_puts>
				HAL_Delay(500);
 8000dac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db0:	f001 fc0c 	bl	80025cc <HAL_Delay>

				lcd_clear();
 8000db4:	f000 fa5a 	bl	800126c <lcd_clear>

				while (k < 16) {
 8000db8:	e02a      	b.n	8000e10 <do_algorithm+0x238>
					sprintf((char*)output, "%02x", md5_result[k]);
 8000dba:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000dc2:	4413      	add	r3, r2
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4950      	ldr	r1, [pc, #320]	; (8000f0c <do_algorithm+0x334>)
 8000dca:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000dce:	f004 f99d 	bl	800510c <siprintf>
					if (i == 8) {
 8000dd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000dd6:	2b08      	cmp	r3, #8
 8000dd8:	d105      	bne.n	8000de6 <do_algorithm+0x20e>
						i = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						j = 1;
 8000de0:	2301      	movs	r3, #1
 8000de2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					}


					lcd_puts(j, i, (uint8_t*)output);
 8000de6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000df0:	b251      	sxtb	r1, r2
 8000df2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f9e6 	bl	80011c8 <lcd_puts>
					k++;
 8000dfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e00:	3301      	adds	r3, #1
 8000e02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					i += 2;
 8000e06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
				while (k < 16) {
 8000e10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	ddd0      	ble.n	8000dba <do_algorithm+0x1e2>
				}

				HAL_Delay(1000);
 8000e18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e1c:	f001 fbd6 	bl	80025cc <HAL_Delay>
				lcd_clear();
 8000e20:	f000 fa24 	bl	800126c <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Finished md5");
 8000e24:	4a3d      	ldr	r2, [pc, #244]	; (8000f1c <do_algorithm+0x344>)
 8000e26:	2100      	movs	r1, #0
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f000 f9cd 	bl	80011c8 <lcd_puts>
				break;
 8000e2e:	e052      	b.n	8000ed6 <do_algorithm+0x2fe>
			case 2:
				// crc16

				lcd_clear();
 8000e30:	f000 fa1c 	bl	800126c <lcd_clear>
				lcd_init();
 8000e34:	f000 f8ba 	bl	8000fac <lcd_init>
				lcd_puts(0, 0, (uint8_t*)"Starting crc16");
 8000e38:	4a39      	ldr	r2, [pc, #228]	; (8000f20 <do_algorithm+0x348>)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f000 f9c3 	bl	80011c8 <lcd_puts>
				result = crc16(data, strlen(data));
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff f984 	bl	8000150 <strlen>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f000 f870 	bl	8000f34 <crc16>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

				HAL_Delay(1000);
 8000e5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5e:	f001 fbb5 	bl	80025cc <HAL_Delay>
				lcd_clear();
 8000e62:	f000 fa03 	bl	800126c <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Result of crc16:");
 8000e66:	4a2f      	ldr	r2, [pc, #188]	; (8000f24 <do_algorithm+0x34c>)
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f9ac 	bl	80011c8 <lcd_puts>
				HAL_Delay(500);
 8000e70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e74:	f001 fbaa 	bl	80025cc <HAL_Delay>

				sprintf(output, "%hX", result);
 8000e78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000e7c:	492a      	ldr	r1, [pc, #168]	; (8000f28 <do_algorithm+0x350>)
 8000e7e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000e82:	f004 f943 	bl	800510c <siprintf>
				HAL_Delay(1000);
 8000e86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e8a:	f001 fb9f 	bl	80025cc <HAL_Delay>
				lcd_clear();
 8000e8e:	f000 f9ed 	bl	800126c <lcd_clear>
				lcd_puts(0, 0, output);
 8000e92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000e96:	2100      	movs	r1, #0
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f000 f995 	bl	80011c8 <lcd_puts>

				HAL_Delay(1000);
 8000e9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea2:	f001 fb93 	bl	80025cc <HAL_Delay>
				lcd_clear();
 8000ea6:	f000 f9e1 	bl	800126c <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Finished crc16");
 8000eaa:	4a20      	ldr	r2, [pc, #128]	; (8000f2c <do_algorithm+0x354>)
 8000eac:	2100      	movs	r1, #0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f98a 	bl	80011c8 <lcd_puts>
				break;
 8000eb4:	e00f      	b.n	8000ed6 <do_algorithm+0x2fe>
			default:
				lcd_init();
 8000eb6:	f000 f879 	bl	8000fac <lcd_init>
				int8_t *error_msg = "Unexpected error in algorithms\r\n";
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <do_algorithm+0x358>)
 8000ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				lcd_puts(0, 0, (int8_t*) error_msg);
 8000ec0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f97e 	bl	80011c8 <lcd_puts>
				HAL_Delay(1000);
 8000ecc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed0:	f001 fb7c 	bl	80025cc <HAL_Delay>
				break;
 8000ed4:	bf00      	nop
		}
	HAL_Delay(1000);
 8000ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eda:	f001 fb77 	bl	80025cc <HAL_Delay>
	state = 0;
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <do_algorithm+0x318>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
	lcd_clear();
 8000ee4:	f000 f9c2 	bl	800126c <lcd_clear>
}
 8000ee8:	bf00      	nop
 8000eea:	37c0      	adds	r7, #192	; 0xc0
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2000050c 	.word	0x2000050c
 8000ef4:	08008a68 	.word	0x08008a68
 8000ef8:	08008a7c 	.word	0x08008a7c
 8000efc:	08008a8c 	.word	0x08008a8c
 8000f00:	08008a9c 	.word	0x08008a9c
 8000f04:	08008ab8 	.word	0x08008ab8
 8000f08:	08008ac8 	.word	0x08008ac8
 8000f0c:	08008adc 	.word	0x08008adc
 8000f10:	08008ae4 	.word	0x08008ae4
 8000f14:	08008af4 	.word	0x08008af4
 8000f18:	08008b04 	.word	0x08008b04
 8000f1c:	08008b14 	.word	0x08008b14
 8000f20:	08008b24 	.word	0x08008b24
 8000f24:	08008b34 	.word	0x08008b34
 8000f28:	08008b48 	.word	0x08008b48
 8000f2c:	08008b4c 	.word	0x08008b4c
 8000f30:	08008b5c 	.word	0x08008b5c

08000f34 <crc16>:
  Check : 0x29B1 ("123456789")
  MaxLen: 4095 байт (32767 бит) - обнаружение
    одинарных, двойных, тройных и всех нечетных ошибок
*/
unsigned short crc16(unsigned char *data, unsigned short len)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8000f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f44:	81fb      	strh	r3, [r7, #14]
    unsigned char i;

    while (len--)
 8000f46:	e025      	b.n	8000f94 <crc16+0x60>
    {
        crc ^= *data++ << 8;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f58:	4053      	eors	r3, r2
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	737b      	strb	r3, [r7, #13]
 8000f62:	e014      	b.n	8000f8e <crc16+0x5a>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 8000f64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	da09      	bge.n	8000f80 <crc16+0x4c>
 8000f6c:	89fb      	ldrh	r3, [r7, #14]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000f76:	f083 0301 	eor.w	r3, r3, #1
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	e002      	b.n	8000f86 <crc16+0x52>
 8000f80:	89fb      	ldrh	r3, [r7, #14]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 8000f88:	7b7b      	ldrb	r3, [r7, #13]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	737b      	strb	r3, [r7, #13]
 8000f8e:	7b7b      	ldrb	r3, [r7, #13]
 8000f90:	2b07      	cmp	r3, #7
 8000f92:	d9e7      	bls.n	8000f64 <crc16+0x30>
    while (len--)
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	1e5a      	subs	r2, r3, #1
 8000f98:	807a      	strh	r2, [r7, #2]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1d4      	bne.n	8000f48 <crc16+0x14>
    }
    return crc;
 8000f9e:	89fb      	ldrh	r3, [r7, #14]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
	...

08000fac <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 8000fb0:	201e      	movs	r0, #30
 8000fb2:	f001 fb0b 	bl	80025cc <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbc:	481c      	ldr	r0, [pc, #112]	; (8001030 <lcd_init+0x84>)
 8000fbe:	f001 fe84 	bl	8002cca <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc8:	4819      	ldr	r0, [pc, #100]	; (8001030 <lcd_init+0x84>)
 8000fca:	f001 fe7e 	bl	8002cca <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd4:	4816      	ldr	r0, [pc, #88]	; (8001030 <lcd_init+0x84>)
 8000fd6:	f001 fe78 	bl	8002cca <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe0:	4813      	ldr	r0, [pc, #76]	; (8001030 <lcd_init+0x84>)
 8000fe2:	f001 fe72 	bl	8002cca <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fec:	4810      	ldr	r0, [pc, #64]	; (8001030 <lcd_init+0x84>)
 8000fee:	f001 fe6c 	bl	8002cca <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <lcd_init+0x84>)
 8000ffa:	f001 fe66 	bl	8002cca <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001004:	480a      	ldr	r0, [pc, #40]	; (8001030 <lcd_init+0x84>)
 8001006:	f001 fe60 	bl	8002cca <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 800100a:	2128      	movs	r1, #40	; 0x28
 800100c:	2000      	movs	r0, #0
 800100e:	f000 f811 	bl	8001034 <lcd_write>
	lcd_write(0,0x0c);
 8001012:	210c      	movs	r1, #12
 8001014:	2000      	movs	r0, #0
 8001016:	f000 f80d 	bl	8001034 <lcd_write>
	lcd_write(0,0x06);
 800101a:	2106      	movs	r1, #6
 800101c:	2000      	movs	r0, #0
 800101e:	f000 f809 	bl	8001034 <lcd_write>
	lcd_write(0,0x01);
 8001022:	2101      	movs	r1, #1
 8001024:	2000      	movs	r0, #0
 8001026:	f000 f805 	bl	8001034 <lcd_write>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40010c00 	.word	0x40010c00

08001034 <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(int8_t type, int8_t data)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(2);
 8001044:	2002      	movs	r0, #2
 8001046:	f001 fac1 	bl	80025cc <HAL_Delay>
	if(type)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <lcd_write+0x2c>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 8001052:	2201      	movs	r2, #1
 8001054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001058:	485a      	ldr	r0, [pc, #360]	; (80011c4 <lcd_write+0x190>)
 800105a:	f001 fe36 	bl	8002cca <HAL_GPIO_WritePin>
 800105e:	e005      	b.n	800106c <lcd_write+0x38>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001066:	4857      	ldr	r0, [pc, #348]	; (80011c4 <lcd_write+0x190>)
 8001068:	f001 fe2f 	bl	8002cca <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 800106c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001070:	2b00      	cmp	r3, #0
 8001072:	da06      	bge.n	8001082 <lcd_write+0x4e>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107a:	4852      	ldr	r0, [pc, #328]	; (80011c4 <lcd_write+0x190>)
 800107c:	f001 fe25 	bl	8002cca <HAL_GPIO_WritePin>
 8001080:	e005      	b.n	800108e <lcd_write+0x5a>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001088:	484e      	ldr	r0, [pc, #312]	; (80011c4 <lcd_write+0x190>)
 800108a:	f001 fe1e 	bl	8002cca <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001094:	2b00      	cmp	r3, #0
 8001096:	d006      	beq.n	80010a6 <lcd_write+0x72>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800109e:	4849      	ldr	r0, [pc, #292]	; (80011c4 <lcd_write+0x190>)
 80010a0:	f001 fe13 	bl	8002cca <HAL_GPIO_WritePin>
 80010a4:	e005      	b.n	80010b2 <lcd_write+0x7e>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ac:	4845      	ldr	r0, [pc, #276]	; (80011c4 <lcd_write+0x190>)
 80010ae:	f001 fe0c 	bl	8002cca <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 80010b2:	79bb      	ldrb	r3, [r7, #6]
 80010b4:	f003 0320 	and.w	r3, r3, #32
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d006      	beq.n	80010ca <lcd_write+0x96>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c2:	4840      	ldr	r0, [pc, #256]	; (80011c4 <lcd_write+0x190>)
 80010c4:	f001 fe01 	bl	8002cca <HAL_GPIO_WritePin>
 80010c8:	e005      	b.n	80010d6 <lcd_write+0xa2>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d0:	483c      	ldr	r0, [pc, #240]	; (80011c4 <lcd_write+0x190>)
 80010d2:	f001 fdfa 	bl	8002cca <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d006      	beq.n	80010ee <lcd_write+0xba>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 80010e0:	2201      	movs	r2, #1
 80010e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e6:	4837      	ldr	r0, [pc, #220]	; (80011c4 <lcd_write+0x190>)
 80010e8:	f001 fdef 	bl	8002cca <HAL_GPIO_WritePin>
 80010ec:	e005      	b.n	80010fa <lcd_write+0xc6>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f4:	4833      	ldr	r0, [pc, #204]	; (80011c4 <lcd_write+0x190>)
 80010f6:	f001 fde8 	bl	8002cca <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 80010fa:	2201      	movs	r2, #1
 80010fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001100:	4830      	ldr	r0, [pc, #192]	; (80011c4 <lcd_write+0x190>)
 8001102:	f001 fde2 	bl	8002cca <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800110c:	482d      	ldr	r0, [pc, #180]	; (80011c4 <lcd_write+0x190>)
 800110e:	f001 fddc 	bl	8002cca <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 8001112:	79bb      	ldrb	r3, [r7, #6]
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <lcd_write+0xf6>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001122:	4828      	ldr	r0, [pc, #160]	; (80011c4 <lcd_write+0x190>)
 8001124:	f001 fdd1 	bl	8002cca <HAL_GPIO_WritePin>
 8001128:	e005      	b.n	8001136 <lcd_write+0x102>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001130:	4824      	ldr	r0, [pc, #144]	; (80011c4 <lcd_write+0x190>)
 8001132:	f001 fdca 	bl	8002cca <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	d006      	beq.n	800114e <lcd_write+0x11a>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8001140:	2201      	movs	r2, #1
 8001142:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001146:	481f      	ldr	r0, [pc, #124]	; (80011c4 <lcd_write+0x190>)
 8001148:	f001 fdbf 	bl	8002cca <HAL_GPIO_WritePin>
 800114c:	e005      	b.n	800115a <lcd_write+0x126>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001154:	481b      	ldr	r0, [pc, #108]	; (80011c4 <lcd_write+0x190>)
 8001156:	f001 fdb8 	bl	8002cca <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <lcd_write+0x13e>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116a:	4816      	ldr	r0, [pc, #88]	; (80011c4 <lcd_write+0x190>)
 800116c:	f001 fdad 	bl	8002cca <HAL_GPIO_WritePin>
 8001170:	e005      	b.n	800117e <lcd_write+0x14a>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001178:	4812      	ldr	r0, [pc, #72]	; (80011c4 <lcd_write+0x190>)
 800117a:	f001 fda6 	bl	8002cca <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 800117e:	79bb      	ldrb	r3, [r7, #6]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <lcd_write+0x162>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118e:	480d      	ldr	r0, [pc, #52]	; (80011c4 <lcd_write+0x190>)
 8001190:	f001 fd9b 	bl	8002cca <HAL_GPIO_WritePin>
 8001194:	e005      	b.n	80011a2 <lcd_write+0x16e>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <lcd_write+0x190>)
 800119e:	f001 fd94 	bl	8002cca <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <lcd_write+0x190>)
 80011aa:	f001 fd8e 	bl	8002cca <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <lcd_write+0x190>)
 80011b6:	f001 fd88 	bl	8002cca <HAL_GPIO_WritePin>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40010c00 	.word	0x40010c00

080011c8 <lcd_puts>:

void lcd_puts(int8_t x, int8_t y, int8_t *string)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	603a      	str	r2, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	460b      	mov	r3, r1
 80011d6:	71bb      	strb	r3, [r7, #6]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d83a      	bhi.n	8001256 <lcd_puts+0x8e>
 80011e0:	a201      	add	r2, pc, #4	; (adr r2, 80011e8 <lcd_puts+0x20>)
 80011e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e6:	bf00      	nop
 80011e8:	080011f9 	.word	0x080011f9
 80011ec:	0800120b 	.word	0x0800120b
 80011f0:	0800121d 	.word	0x0800121d
 80011f4:	0800122f 	.word	0x0800122f
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	3b80      	subs	r3, #128	; 0x80
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	4619      	mov	r1, r3
 8001202:	2000      	movs	r0, #0
 8001204:	f7ff ff16 	bl	8001034 <lcd_write>
			break;
 8001208:	e01a      	b.n	8001240 <lcd_puts+0x78>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	3b40      	subs	r3, #64	; 0x40
 800120e:	b2db      	uxtb	r3, r3
 8001210:	b25b      	sxtb	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff ff0d 	bl	8001034 <lcd_write>
			break;
 800121a:	e011      	b.n	8001240 <lcd_puts+0x78>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	3b70      	subs	r3, #112	; 0x70
 8001220:	b2db      	uxtb	r3, r3
 8001222:	b25b      	sxtb	r3, r3
 8001224:	4619      	mov	r1, r3
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff ff04 	bl	8001034 <lcd_write>
			break;
 800122c:	e008      	b.n	8001240 <lcd_puts+0x78>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 800122e:	79bb      	ldrb	r3, [r7, #6]
 8001230:	3b30      	subs	r3, #48	; 0x30
 8001232:	b2db      	uxtb	r3, r3
 8001234:	b25b      	sxtb	r3, r3
 8001236:	4619      	mov	r1, r3
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fefb 	bl	8001034 <lcd_write>
			break;
 800123e:	bf00      	nop
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 8001240:	e009      	b.n	8001256 <lcd_puts+0x8e>
	{
		lcd_write(1,*string);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	f993 3000 	ldrsb.w	r3, [r3]
 8001248:	4619      	mov	r1, r3
 800124a:	2001      	movs	r0, #1
 800124c:	f7ff fef2 	bl	8001034 <lcd_write>
		string++;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	603b      	str	r3, [r7, #0]
	while(*string)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f993 3000 	ldrsb.w	r3, [r3]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f0      	bne.n	8001242 <lcd_puts+0x7a>
	}
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop

0800126c <lcd_clear>:
void lcd_clear(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 8001270:	2101      	movs	r1, #1
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff fede 	bl	8001034 <lcd_write>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <chosen_algorithm>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int8_t* chosen_algorithm(int id) {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	switch (id) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d00d      	beq.n	80012a6 <chosen_algorithm+0x2a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b02      	cmp	r3, #2
 800128e:	dc0c      	bgt.n	80012aa <chosen_algorithm+0x2e>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <chosen_algorithm+0x22>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d002      	beq.n	80012a2 <chosen_algorithm+0x26>
 800129c:	e005      	b.n	80012aa <chosen_algorithm+0x2e>
		case 0:
			return "sha256";
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <chosen_algorithm+0x3c>)
 80012a0:	e004      	b.n	80012ac <chosen_algorithm+0x30>
		case 1:
			return "md5";
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <chosen_algorithm+0x40>)
 80012a4:	e002      	b.n	80012ac <chosen_algorithm+0x30>
		case 2:
			return "crc16";
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <chosen_algorithm+0x44>)
 80012a8:	e000      	b.n	80012ac <chosen_algorithm+0x30>
		default:
			return "Invalid algorithm";
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <chosen_algorithm+0x48>)
			break;
	}
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	08008b80 	.word	0x08008b80
 80012bc:	08008b88 	.word	0x08008b88
 80012c0:	08008b8c 	.word	0x08008b8c
 80012c4:	08008b94 	.word	0x08008b94

080012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ce:	f001 f91b 	bl	8002508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d2:	f000 f8cd 	bl	8001470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d6:	f000 f95b 	bl	8001590 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012da:	f000 f92f 	bl	800153c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80012de:	f000 f903 	bl	80014e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

//  HAL_UART_Transmit_IT(&huart1, "hi", 2);
  HAL_Delay(1000);
 80012e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e6:	f001 f971 	bl	80025cc <HAL_Delay>
  int8_t *output, *data = NULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  int alg_id = 0, not_asked_for_input = 1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	2301      	movs	r3, #1
 80012f4:	607b      	str	r3, [r7, #4]
  lcd_init();
 80012f6:	f7ff fe59 	bl	8000fac <lcd_init>

    /* USER CODE BEGIN 3 */
	  /* scrolling through algorithms
	  			ids: 0 - sha, 1 - md, 2 - crc
	  	  */
	  if (state == 0) {
 80012fa:	4b57      	ldr	r3, [pc, #348]	; (8001458 <main+0x190>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d143      	bne.n	800138a <main+0xc2>
		  if (not_asked_for_input == 1) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d10d      	bne.n	8001324 <main+0x5c>
			  lcd_puts(0, 0, "Input data");
 8001308:	4a54      	ldr	r2, [pc, #336]	; (800145c <main+0x194>)
 800130a:	2100      	movs	r1, #0
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff ff5b 	bl	80011c8 <lcd_puts>
			  not_asked_for_input = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
			  data = (int8_t*)calloc(1000, sizeof(int8_t));
 8001316:	2101      	movs	r1, #1
 8001318:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800131c:	f002 ff30 	bl	8004180 <calloc>
 8001320:	4603      	mov	r3, r0
 8001322:	60fb      	str	r3, [r7, #12]
		  }

		  // Input place
		  switch (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_14)) {
 8001324:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001328:	484d      	ldr	r0, [pc, #308]	; (8001460 <main+0x198>)
 800132a:	f001 fcb7 	bl	8002c9c <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <main+0x72>
 8001334:	2b01      	cmp	r3, #1
 8001336:	d008      	beq.n	800134a <main+0x82>
 8001338:	e00f      	b.n	800135a <main+0x92>
		  	  case 0: // computer
		  		HAL_UART_Receive(&huart2, (int8_t*)data, 1000, 5000);
 800133a:	f241 3388 	movw	r3, #5000	; 0x1388
 800133e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001342:	68f9      	ldr	r1, [r7, #12]
 8001344:	4847      	ldr	r0, [pc, #284]	; (8001464 <main+0x19c>)
 8001346:	f002 f939 	bl	80035bc <HAL_UART_Receive>
		  	  case 1: // phone
		  		HAL_UART_Receive(&huart1, (int8_t*)data, 1000, 5000);
 800134a:	f241 3388 	movw	r3, #5000	; 0x1388
 800134e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001352:	68f9      	ldr	r1, [r7, #12]
 8001354:	4844      	ldr	r0, [pc, #272]	; (8001468 <main+0x1a0>)
 8001356:	f002 f931 	bl	80035bc <HAL_UART_Receive>
		  }


		  if (data && strlen(data) != 0) {
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0cc      	beq.n	80012fa <main+0x32>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0c8      	beq.n	80012fa <main+0x32>
			  lcd_clear();
 8001368:	f7ff ff80 	bl	800126c <lcd_clear>
			  lcd_puts(0, 0, data);
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	2100      	movs	r1, #0
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff ff29 	bl	80011c8 <lcd_puts>
			  HAL_Delay(1000);
 8001376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800137a:	f001 f927 	bl	80025cc <HAL_Delay>
			  lcd_clear();
 800137e:	f7ff ff75 	bl	800126c <lcd_clear>
			  state = 1;
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <main+0x190>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e7b7      	b.n	80012fa <main+0x32>
		  }
	  } else if (state == 1) {
 800138a:	4b33      	ldr	r3, [pc, #204]	; (8001458 <main+0x190>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d153      	bne.n	800143a <main+0x172>
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 1) {
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	4832      	ldr	r0, [pc, #200]	; (8001460 <main+0x198>)
 8001396:	f001 fc81 	bl	8002c9c <HAL_GPIO_ReadPin>
 800139a:	4603      	mov	r3, r0
 800139c:	2b01      	cmp	r3, #1
 800139e:	d10b      	bne.n	80013b8 <main+0xf0>
			  if (alg_id < 2) {
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	dc03      	bgt.n	80013ae <main+0xe6>
				  alg_id++;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	e001      	b.n	80013b2 <main+0xea>
			  } else {
				  alg_id = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
			  }
			  lcd_clear();
 80013b2:	f7ff ff5b 	bl	800126c <lcd_clear>
 80013b6:	e02e      	b.n	8001416 <main+0x14e>
		  } else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) {
 80013b8:	2140      	movs	r1, #64	; 0x40
 80013ba:	4829      	ldr	r0, [pc, #164]	; (8001460 <main+0x198>)
 80013bc:	f001 fc6e 	bl	8002c9c <HAL_GPIO_ReadPin>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d10b      	bne.n	80013de <main+0x116>
			  if (alg_id > 0) {
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	dd03      	ble.n	80013d4 <main+0x10c>
				  alg_id--;
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	e001      	b.n	80013d8 <main+0x110>
			  } else {
				alg_id = 2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	60bb      	str	r3, [r7, #8]
			  }
			  lcd_clear();
 80013d8:	f7ff ff48 	bl	800126c <lcd_clear>
 80013dc:	e01b      	b.n	8001416 <main+0x14e>
		  } else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1) {
 80013de:	2120      	movs	r1, #32
 80013e0:	481f      	ldr	r0, [pc, #124]	; (8001460 <main+0x198>)
 80013e2:	f001 fc5b 	bl	8002c9c <HAL_GPIO_ReadPin>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d114      	bne.n	8001416 <main+0x14e>
			  lcd_clear();
 80013ec:	f7ff ff3e 	bl	800126c <lcd_clear>
			  output = chosen_algorithm(alg_id);
 80013f0:	68b8      	ldr	r0, [r7, #8]
 80013f2:	f7ff ff43 	bl	800127c <chosen_algorithm>
 80013f6:	6038      	str	r0, [r7, #0]
			  lcd_puts(0, 0, (int8_t*) output);
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	2100      	movs	r1, #0
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff fee3 	bl	80011c8 <lcd_puts>
			  lcd_clear();
 8001402:	f7ff ff33 	bl	800126c <lcd_clear>
			  do_algorithm(data, alg_id);
 8001406:	68b9      	ldr	r1, [r7, #8]
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f7ff fbe5 	bl	8000bd8 <do_algorithm>
			  not_asked_for_input = 1;
 800140e:	2301      	movs	r3, #1
 8001410:	607b      	str	r3, [r7, #4]
//			  free(data);
			  data = NULL;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
		  }

		  if (state != 0) {
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <main+0x190>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f43f af6d 	beq.w	80012fa <main+0x32>
			  output = chosen_algorithm(alg_id);
 8001420:	68b8      	ldr	r0, [r7, #8]
 8001422:	f7ff ff2b 	bl	800127c <chosen_algorithm>
 8001426:	6038      	str	r0, [r7, #0]
			  lcd_puts(0, 0, (int8_t*) output);
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	2100      	movs	r1, #0
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff fecb 	bl	80011c8 <lcd_puts>
			  HAL_Delay(200);
 8001432:	20c8      	movs	r0, #200	; 0xc8
 8001434:	f001 f8ca 	bl	80025cc <HAL_Delay>
 8001438:	e75f      	b.n	80012fa <main+0x32>
		  }
	  } else if (state != 2) {
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <main+0x190>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b02      	cmp	r3, #2
 8001440:	f43f af5b 	beq.w	80012fa <main+0x32>
		  lcd_clear();
 8001444:	f7ff ff12 	bl	800126c <lcd_clear>
		  lcd_init();
 8001448:	f7ff fdb0 	bl	8000fac <lcd_init>
		  lcd_puts(0, 0, "Unexpected state");
 800144c:	4a07      	ldr	r2, [pc, #28]	; (800146c <main+0x1a4>)
 800144e:	2100      	movs	r1, #0
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff feb9 	bl	80011c8 <lcd_puts>
	  if (state == 0) {
 8001456:	e750      	b.n	80012fa <main+0x32>
 8001458:	2000050c 	.word	0x2000050c
 800145c:	08008ba8 	.word	0x08008ba8
 8001460:	40010800 	.word	0x40010800
 8001464:	200004c4 	.word	0x200004c4
 8001468:	2000047c 	.word	0x2000047c
 800146c:	08008bb4 	.word	0x08008bb4

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b090      	sub	sp, #64	; 0x40
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 0318 	add.w	r3, r7, #24
 800147a:	2228      	movs	r2, #40	; 0x28
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f002 feca 	bl	8004218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001496:	2301      	movs	r3, #1
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800149a:	2310      	movs	r3, #16
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800149e:	2300      	movs	r3, #0
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a2:	f107 0318 	add.w	r3, r7, #24
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 fc28 	bl	8002cfc <HAL_RCC_OscConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014b2:	f000 f8c3 	bl	800163c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b6:	230f      	movs	r3, #15
 80014b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 fe96 	bl	8003200 <HAL_RCC_ClockConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014da:	f000 f8af 	bl	800163c <Error_Handler>
  }
}
 80014de:	bf00      	nop
 80014e0:	3740      	adds	r7, #64	; 0x40
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <MX_USART1_UART_Init+0x50>)
 80014f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 80014f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 8001520:	f001 fffc 	bl	800351c <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800152a:	f000 f887 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2000047c 	.word	0x2000047c
 8001538:	40013800 	.word	0x40013800

0800153c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <MX_USART2_UART_Init+0x50>)
 8001544:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800154c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001562:	220c      	movs	r2, #12
 8001564:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001574:	f001 ffd2 	bl	800351c <HAL_UART_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800157e:	f000 f85d 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200004c4 	.word	0x200004c4
 800158c:	40004400 	.word	0x40004400

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <MX_GPIO_Init+0xa0>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a21      	ldr	r2, [pc, #132]	; (8001630 <MX_GPIO_Init+0xa0>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <MX_GPIO_Init+0xa0>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <MX_GPIO_Init+0xa0>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <MX_GPIO_Init+0xa0>)
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <MX_GPIO_Init+0xa0>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80015d4:	2200      	movs	r2, #0
 80015d6:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80015da:	4816      	ldr	r0, [pc, #88]	; (8001634 <MX_GPIO_Init+0xa4>)
 80015dc:	f001 fb75 	bl	8002cca <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e6:	4814      	ldr	r0, [pc, #80]	; (8001638 <MX_GPIO_Init+0xa8>)
 80015e8:	f001 fb6f 	bl	8002cca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80015ec:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80015f0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f2:	2301      	movs	r3, #1
 80015f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2302      	movs	r3, #2
 80015fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	4619      	mov	r1, r3
 8001604:	480b      	ldr	r0, [pc, #44]	; (8001634 <MX_GPIO_Init+0xa4>)
 8001606:	f001 f9c5 	bl	8002994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800160a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800160e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2302      	movs	r3, #2
 800161a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0308 	add.w	r3, r7, #8
 8001620:	4619      	mov	r1, r3
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_GPIO_Init+0xa8>)
 8001624:	f001 f9b6 	bl	8002994 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001628:	bf00      	nop
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000
 8001634:	40010c00 	.word	0x40010c00
 8001638:	40010800 	.word	0x40010800

0800163c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001640:	b672      	cpsid	i
}
 8001642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001644:	e7fe      	b.n	8001644 <Error_Handler+0x8>

08001646 <rotateLeft>:
#define I(X, Y, Z) (Y ^ (X | ~Z))

/*
 * Rotates a 32-bit word left by n bits
 */
uint32_t rotateLeft(uint32_t x, uint32_t n){
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
    return (x << n) | (x >> (32 - n));
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	f1c3 0320 	rsb	r3, r3, #32
 8001658:	fa62 f303 	ror.w	r3, r2, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
	...

08001668 <md5Init>:


/*
 * Initialize a context
 */
void md5Init(MD5Context *ctx){
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
    ctx->size = (uint64_t)0;
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	e9c1 2300 	strd	r2, r3, [r1]

    ctx->buffer[0] = (uint32_t)A;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <md5Init+0x38>)
 8001682:	609a      	str	r2, [r3, #8]
    ctx->buffer[1] = (uint32_t)B;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <md5Init+0x3c>)
 8001688:	60da      	str	r2, [r3, #12]
    ctx->buffer[2] = (uint32_t)C;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <md5Init+0x40>)
 800168e:	611a      	str	r2, [r3, #16]
    ctx->buffer[3] = (uint32_t)D;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a06      	ldr	r2, [pc, #24]	; (80016ac <md5Init+0x44>)
 8001694:	615a      	str	r2, [r3, #20]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	67452301 	.word	0x67452301
 80016a4:	efcdab89 	.word	0xefcdab89
 80016a8:	98badcfe 	.word	0x98badcfe
 80016ac:	10325476 	.word	0x10325476

080016b0 <md5Update>:
 * Add some amount of input to the context
 *
 * If the input fills out a block of 512 bits, apply the algorithm (md5Step)
 * and save the result in the buffer. Also updates the overall size.
 */
void md5Update(MD5Context *ctx, uint8_t *input_buffer, size_t input_len){
 80016b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016b4:	b098      	sub	sp, #96	; 0x60
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
    uint32_t input[16];
    unsigned int offset = ctx->size % 64;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	4613      	mov	r3, r2
 80016c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    ctx->size += (uint64_t)input_len;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	2000      	movs	r0, #0
 80016d6:	460c      	mov	r4, r1
 80016d8:	4605      	mov	r5, r0
 80016da:	eb12 0804 	adds.w	r8, r2, r4
 80016de:	eb43 0905 	adc.w	r9, r3, r5
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	e9c3 8900 	strd	r8, r9, [r3]

    // Copy each byte in input_buffer into the next space in our context input
    for(unsigned int i = 0; i < input_len; ++i){
 80016e8:	2300      	movs	r3, #0
 80016ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80016ec:	e048      	b.n	8001780 <md5Update+0xd0>
        ctx->input[offset++] = (uint8_t)*(input_buffer + i);
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016f2:	441a      	add	r2, r3
 80016f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016f6:	1c59      	adds	r1, r3, #1
 80016f8:	65f9      	str	r1, [r7, #92]	; 0x5c
 80016fa:	7811      	ldrb	r1, [r2, #0]
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	4413      	add	r3, r2
 8001700:	460a      	mov	r2, r1
 8001702:	761a      	strb	r2, [r3, #24]

        // If we've filled our context input, copy it into our local array input
        // then reset the offset to 0 and fill in a new buffer.
        // Every time we fill out a chunk, we run it through the algorithm
        // to enable some back and forth between cpu and i/o
        if(offset % 64 == 0){
 8001704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800170a:	2b00      	cmp	r3, #0
 800170c:	d135      	bne.n	800177a <md5Update+0xca>
            for(unsigned int j = 0; j < 16; ++j){
 800170e:	2300      	movs	r3, #0
 8001710:	657b      	str	r3, [r7, #84]	; 0x54
 8001712:	e025      	b.n	8001760 <md5Update+0xb0>
                // Convert to little-endian
                // The local variable `input` our 512-bit chunk separated into 32-bit words
                // we can use in calculations
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8001714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	3303      	adds	r3, #3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4413      	add	r3, r2
 800171e:	7e1b      	ldrb	r3, [r3, #24]
 8001720:	061a      	lsls	r2, r3, #24
                           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8001722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	3302      	adds	r3, #2
 8001728:	68f9      	ldr	r1, [r7, #12]
 800172a:	440b      	add	r3, r1
 800172c:	7e1b      	ldrb	r3, [r3, #24]
 800172e:	041b      	lsls	r3, r3, #16
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8001730:	431a      	orrs	r2, r3
                           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8001732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	3301      	adds	r3, #1
 8001738:	68f9      	ldr	r1, [r7, #12]
 800173a:	440b      	add	r3, r1
 800173c:	7e1b      	ldrb	r3, [r3, #24]
 800173e:	021b      	lsls	r3, r3, #8
                           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8001740:	4313      	orrs	r3, r2
                           (uint32_t)(ctx->input[(j * 4)]);
 8001742:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001744:	0092      	lsls	r2, r2, #2
 8001746:	68f9      	ldr	r1, [r7, #12]
 8001748:	440a      	add	r2, r1
 800174a:	7e12      	ldrb	r2, [r2, #24]
                           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 800174c:	431a      	orrs	r2, r3
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 800174e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	3360      	adds	r3, #96	; 0x60
 8001754:	443b      	add	r3, r7
 8001756:	f843 2c4c 	str.w	r2, [r3, #-76]
            for(unsigned int j = 0; j < 16; ++j){
 800175a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800175c:	3301      	adds	r3, #1
 800175e:	657b      	str	r3, [r7, #84]	; 0x54
 8001760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001762:	2b0f      	cmp	r3, #15
 8001764:	d9d6      	bls.n	8001714 <md5Update+0x64>
            }
            md5Step(ctx->buffer, input);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3308      	adds	r3, #8
 800176a:	f107 0214 	add.w	r2, r7, #20
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f8d1 	bl	8001918 <md5Step>
            offset = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(unsigned int i = 0; i < input_len; ++i){
 800177a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800177c:	3301      	adds	r3, #1
 800177e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001780:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	429a      	cmp	r2, r3
 8001786:	d3b2      	bcc.n	80016ee <md5Update+0x3e>
        }
    }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3760      	adds	r7, #96	; 0x60
 800178e:	46bd      	mov	sp, r7
 8001790:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001794 <md5Finalize>:

/*
 * Pad the current input to get to 448 bytes, append the size in bits to the very end,
 * and save the result of the final iteration into digest.
 */
void md5Finalize(MD5Context *ctx){
 8001794:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001798:	b096      	sub	sp, #88	; 0x58
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
    uint32_t input[16];
    unsigned int offset = ctx->size % 64;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	4613      	mov	r3, r2
 80017a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    unsigned int padding_length = offset < 56 ? 56 - offset : (56 + 64) - offset;
 80017ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ae:	2b37      	cmp	r3, #55	; 0x37
 80017b0:	d803      	bhi.n	80017ba <md5Finalize+0x26>
 80017b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80017b8:	e002      	b.n	80017c0 <md5Finalize+0x2c>
 80017ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017bc:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80017c0:	64bb      	str	r3, [r7, #72]	; 0x48

    // Fill in the padding and undo the changes to size that resulted from the update
    md5Update(ctx, PADDING, padding_length);
 80017c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017c4:	4953      	ldr	r1, [pc, #332]	; (8001914 <md5Finalize+0x180>)
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ff72 	bl	80016b0 <md5Update>
    ctx->size -= (uint64_t)padding_length;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80017d4:	2000      	movs	r0, #0
 80017d6:	460c      	mov	r4, r1
 80017d8:	4605      	mov	r5, r0
 80017da:	ebb2 0804 	subs.w	r8, r2, r4
 80017de:	eb63 0905 	sbc.w	r9, r3, r5
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	e9c3 8900 	strd	r8, r9, [r3]

    // Do a final update (internal to this function)
    // Last two 32-bit words are the two halves of the size (converted from bytes to bits)
    for(unsigned int j = 0; j < 14; ++j){
 80017e8:	2300      	movs	r3, #0
 80017ea:	657b      	str	r3, [r7, #84]	; 0x54
 80017ec:	e025      	b.n	800183a <md5Finalize+0xa6>
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 80017ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	3303      	adds	r3, #3
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	4413      	add	r3, r2
 80017f8:	7e1b      	ldrb	r3, [r3, #24]
 80017fa:	061a      	lsls	r2, r3, #24
                   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 80017fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	3302      	adds	r3, #2
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	440b      	add	r3, r1
 8001806:	7e1b      	ldrb	r3, [r3, #24]
 8001808:	041b      	lsls	r3, r3, #16
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 800180a:	431a      	orrs	r2, r3
                   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 800180c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	3301      	adds	r3, #1
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	440b      	add	r3, r1
 8001816:	7e1b      	ldrb	r3, [r3, #24]
 8001818:	021b      	lsls	r3, r3, #8
                   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 800181a:	4313      	orrs	r3, r2
                   (uint32_t)(ctx->input[(j * 4)]);
 800181c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800181e:	0092      	lsls	r2, r2, #2
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	440a      	add	r2, r1
 8001824:	7e12      	ldrb	r2, [r2, #24]
                   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8001826:	431a      	orrs	r2, r3
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8001828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	3358      	adds	r3, #88	; 0x58
 800182e:	443b      	add	r3, r7
 8001830:	f843 2c50 	str.w	r2, [r3, #-80]
    for(unsigned int j = 0; j < 14; ++j){
 8001834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001836:	3301      	adds	r3, #1
 8001838:	657b      	str	r3, [r7, #84]	; 0x54
 800183a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800183c:	2b0d      	cmp	r3, #13
 800183e:	d9d6      	bls.n	80017ee <md5Finalize+0x5a>
    }
    input[14] = (uint32_t)(ctx->size * 8);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	4613      	mov	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	643b      	str	r3, [r7, #64]	; 0x40
    input[15] = (uint32_t)((ctx->size * 8) >> 32);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	00cb      	lsls	r3, r1, #3
 800185c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001860:	00c2      	lsls	r2, r0, #3
 8001862:	f04f 0000 	mov.w	r0, #0
 8001866:	f04f 0100 	mov.w	r1, #0
 800186a:	0018      	movs	r0, r3
 800186c:	2100      	movs	r1, #0
 800186e:	4603      	mov	r3, r0
 8001870:	647b      	str	r3, [r7, #68]	; 0x44

    md5Step(ctx->buffer, input);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3308      	adds	r3, #8
 8001876:	f107 0208 	add.w	r2, r7, #8
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f000 f84b 	bl	8001918 <md5Step>

    // Move the result into digest (convert from little-endian)
    for(unsigned int i = 0; i < 4; ++i){
 8001882:	2300      	movs	r3, #0
 8001884:	653b      	str	r3, [r7, #80]	; 0x50
 8001886:	e03c      	b.n	8001902 <md5Finalize+0x16e>
        ctx->digest[(i * 4) + 0] = (uint8_t)((ctx->buffer[i] & 0x000000FF));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800188c:	3202      	adds	r2, #2
 800188e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	b2d1      	uxtb	r1, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	4413      	add	r3, r2
 800189c:	460a      	mov	r2, r1
 800189e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        ctx->digest[(i * 4) + 1] = (uint8_t)((ctx->buffer[i] & 0x0000FF00) >>  8);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80018a6:	3202      	adds	r2, #2
 80018a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ac:	0a1a      	lsrs	r2, r3, #8
 80018ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	3301      	adds	r3, #1
 80018b4:	b2d1      	uxtb	r1, r2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	460a      	mov	r2, r1
 80018bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        ctx->digest[(i * 4) + 2] = (uint8_t)((ctx->buffer[i] & 0x00FF0000) >> 16);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80018c4:	3202      	adds	r2, #2
 80018c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ca:	0c1a      	lsrs	r2, r3, #16
 80018cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	b2d1      	uxtb	r1, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	460a      	mov	r2, r1
 80018da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        ctx->digest[(i * 4) + 3] = (uint8_t)((ctx->buffer[i] & 0xFF000000) >> 24);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80018e2:	3202      	adds	r2, #2
 80018e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e8:	0e1a      	lsrs	r2, r3, #24
 80018ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	3303      	adds	r3, #3
 80018f0:	b2d1      	uxtb	r1, r2
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	460a      	mov	r2, r1
 80018f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    for(unsigned int i = 0; i < 4; ++i){
 80018fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018fe:	3301      	adds	r3, #1
 8001900:	653b      	str	r3, [r7, #80]	; 0x50
 8001902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001904:	2b03      	cmp	r3, #3
 8001906:	d9bf      	bls.n	8001888 <md5Finalize+0xf4>
    }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3758      	adds	r7, #88	; 0x58
 800190e:	46bd      	mov	sp, r7
 8001910:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001914:	20000200 	.word	0x20000200

08001918 <md5Step>:

/*
 * Step on 512 bits of input with the main MD5 algorithm.
 */
void md5Step(uint32_t *buffer, uint32_t *input){
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
    uint32_t AA = buffer[0];
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t BB = buffer[1];
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	623b      	str	r3, [r7, #32]
    uint32_t CC = buffer[2];
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61fb      	str	r3, [r7, #28]
    uint32_t DD = buffer[3];
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61bb      	str	r3, [r7, #24]

    uint32_t E;

    unsigned int j;

    for(unsigned int i = 0; i < 64; ++i){
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	e06b      	b.n	8001a18 <md5Step+0x100>
        switch(i / 16){
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	091b      	lsrs	r3, r3, #4
 8001944:	2b02      	cmp	r3, #2
 8001946:	d024      	beq.n	8001992 <md5Step+0x7a>
 8001948:	2b02      	cmp	r3, #2
 800194a:	d831      	bhi.n	80019b0 <md5Step+0x98>
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <md5Step+0x3e>
 8001950:	2b01      	cmp	r3, #1
 8001952:	d00c      	beq.n	800196e <md5Step+0x56>
 8001954:	e02c      	b.n	80019b0 <md5Step+0x98>
            case 0:
                E = F(BB, CC, DD);
 8001956:	6a3a      	ldr	r2, [r7, #32]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	401a      	ands	r2, r3
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	43d9      	mvns	r1, r3
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	400b      	ands	r3, r1
 8001964:	4313      	orrs	r3, r2
 8001966:	617b      	str	r3, [r7, #20]
                j = i;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	613b      	str	r3, [r7, #16]
                break;
 800196c:	e02f      	b.n	80019ce <md5Step+0xb6>
            case 1:
                E = G(BB, CC, DD);
 800196e:	6a3a      	ldr	r2, [r7, #32]
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	401a      	ands	r2, r3
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	43d9      	mvns	r1, r3
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	400b      	ands	r3, r1
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
                j = ((i * 5) + 1) % 16;
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	3301      	adds	r3, #1
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	613b      	str	r3, [r7, #16]
                break;
 8001990:	e01d      	b.n	80019ce <md5Step+0xb6>
            case 2:
                E = H(BB, CC, DD);
 8001992:	6a3a      	ldr	r2, [r7, #32]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	4053      	eors	r3, r2
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4053      	eors	r3, r2
 800199c:	617b      	str	r3, [r7, #20]
                j = ((i * 3) + 5) % 16;
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	3305      	adds	r3, #5
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	613b      	str	r3, [r7, #16]
                break;
 80019ae:	e00e      	b.n	80019ce <md5Step+0xb6>
            default:
                E = I(BB, CC, DD);
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	43da      	mvns	r2, r3
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	4053      	eors	r3, r2
 80019bc:	617b      	str	r3, [r7, #20]
                j = (i * 7) % 16;
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4613      	mov	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	613b      	str	r3, [r7, #16]
                break;
 80019cc:	bf00      	nop
        }

        uint32_t temp = DD;
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	60bb      	str	r3, [r7, #8]
        DD = CC;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	61bb      	str	r3, [r7, #24]
        CC = BB;
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	61fb      	str	r3, [r7, #28]
        BB = BB + rotateLeft(AA + E + K[i] + input[j], S[i]);
 80019da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	441a      	add	r2, r3
 80019e0:	4920      	ldr	r1, [pc, #128]	; (8001a64 <md5Step+0x14c>)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019e8:	441a      	add	r2, r3
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	6839      	ldr	r1, [r7, #0]
 80019f0:	440b      	add	r3, r1
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	441a      	add	r2, r3
 80019f6:	491c      	ldr	r1, [pc, #112]	; (8001a68 <md5Step+0x150>)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019fe:	4619      	mov	r1, r3
 8001a00:	4610      	mov	r0, r2
 8001a02:	f7ff fe20 	bl	8001646 <rotateLeft>
 8001a06:	4602      	mov	r2, r0
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	623b      	str	r3, [r7, #32]
        AA = temp;
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    for(unsigned int i = 0; i < 64; ++i){
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3301      	adds	r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b3f      	cmp	r3, #63	; 0x3f
 8001a1c:	d990      	bls.n	8001940 <md5Step+0x28>
    }

    buffer[0] += AA;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	441a      	add	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	601a      	str	r2, [r3, #0]
    buffer[1] += BB;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	6819      	ldr	r1, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3304      	adds	r3, #4
 8001a34:	6a3a      	ldr	r2, [r7, #32]
 8001a36:	440a      	add	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]
    buffer[2] += CC;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3308      	adds	r3, #8
 8001a3e:	6819      	ldr	r1, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3308      	adds	r3, #8
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	440a      	add	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]
    buffer[3] += DD;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	330c      	adds	r3, #12
 8001a4e:	6819      	ldr	r1, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	330c      	adds	r3, #12
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	440a      	add	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]
}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	; 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000100 	.word	0x20000100
 8001a68:	20000000 	.word	0x20000000

08001a6c <md5String>:

/*
 * Functions that run the algorithm on the provided input and put the digest into result.
 * result should be able to store 16 bytes.
 */
void md5String(char *input, uint8_t *result){
 8001a6c:	b5b0      	push	{r4, r5, r7, lr}
 8001a6e:	b09c      	sub	sp, #112	; 0x70
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
    MD5Context ctx;
    md5Init(&ctx);
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fdf4 	bl	8001668 <md5Init>
    md5Update(&ctx, (uint8_t *)input, strlen(input));
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7fe fb65 	bl	8000150 <strlen>
 8001a86:	4602      	mov	r2, r0
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fe0e 	bl	80016b0 <md5Update>
    md5Finalize(&ctx);
 8001a94:	f107 0308 	add.w	r3, r7, #8
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fe7b 	bl	8001794 <md5Finalize>

    memcpy(result, ctx.digest, 16);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa8:	6028      	str	r0, [r5, #0]
 8001aaa:	6069      	str	r1, [r5, #4]
 8001aac:	60aa      	str	r2, [r5, #8]
 8001aae:	60eb      	str	r3, [r5, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3770      	adds	r7, #112	; 0x70
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bdb0      	pop	{r4, r5, r7, pc}

08001ab8 <sha256_init>:
    (b)[(i) + 2] = (uint8) ( (n) >>  8 );       \
    (b)[(i) + 3] = (uint8) ( (n)       );       \
}

void sha256_init( sha256_context *ctx )
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x6A09E667;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <sha256_init+0x50>)
 8001ad0:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xBB67AE85;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <sha256_init+0x54>)
 8001ad6:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x3C6EF372;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <sha256_init+0x58>)
 8001adc:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0xA54FF53A;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <sha256_init+0x5c>)
 8001ae2:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0x510E527F;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a0c      	ldr	r2, [pc, #48]	; (8001b18 <sha256_init+0x60>)
 8001ae8:	619a      	str	r2, [r3, #24]
    ctx->state[5] = 0x9B05688C;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <sha256_init+0x64>)
 8001aee:	61da      	str	r2, [r3, #28]
    ctx->state[6] = 0x1F83D9AB;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <sha256_init+0x68>)
 8001af4:	621a      	str	r2, [r3, #32]
    ctx->state[7] = 0x5BE0CD19;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <sha256_init+0x6c>)
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	6a09e667 	.word	0x6a09e667
 8001b0c:	bb67ae85 	.word	0xbb67ae85
 8001b10:	3c6ef372 	.word	0x3c6ef372
 8001b14:	a54ff53a 	.word	0xa54ff53a
 8001b18:	510e527f 	.word	0x510e527f
 8001b1c:	9b05688c 	.word	0x9b05688c
 8001b20:	1f83d9ab 	.word	0x1f83d9ab
 8001b24:	5be0cd19 	.word	0x5be0cd19

08001b28 <sha256_process>:

void sha256_process( sha256_context *ctx, uint8 data[64] )
{
 8001b28:	b5b0      	push	{r4, r5, r7, lr}
 8001b2a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001b34:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001b38:	6018      	str	r0, [r3, #0]
 8001b3a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001b3e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001b42:	6019      	str	r1, [r3, #0]
    uint32 temp1, temp2, W[64];

    for (int i = 0; i < 8; ++i) {
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001b4a:	e03f      	b.n	8001bcc <sha256_process+0xa4>
    	GET_UINT32( W[i],  data,  i * 4 );
 8001b4c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	461a      	mov	r2, r3
 8001b54:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001b58:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	061a      	lsls	r2, r3, #24
 8001b64:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8001b70:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 8001b74:	6809      	ldr	r1, [r1, #0]
 8001b76:	440b      	add	r3, r1
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	041b      	lsls	r3, r3, #16
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8001b8a:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 8001b8e:	6809      	ldr	r1, [r1, #0]
 8001b90:	440b      	add	r3, r1
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	4313      	orrs	r3, r2
 8001b98:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001b9c:	0092      	lsls	r2, r2, #2
 8001b9e:	3203      	adds	r2, #3
 8001ba0:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8001ba4:	f5a1 7108 	sub.w	r1, r1, #544	; 0x220
 8001ba8:	6809      	ldr	r1, [r1, #0]
 8001baa:	440a      	add	r2, r1
 8001bac:	7812      	ldrb	r2, [r2, #0]
 8001bae:	ea43 0102 	orr.w	r1, r3, r2
 8001bb2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001bb6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bba:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < 8; ++i) {
 8001bc2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001bcc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001bd0:	2b07      	cmp	r3, #7
 8001bd2:	ddbb      	ble.n	8001b4c <sha256_process+0x24>
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    uint32 buffer_array[] = {0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B,
 8001bd4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001bd8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001bdc:	4adf      	ldr	r2, [pc, #892]	; (8001f5c <sha256_process+0x434>)
 8001bde:	4618      	mov	r0, r3
 8001be0:	4611      	mov	r1, r2
 8001be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be6:	461a      	mov	r2, r3
 8001be8:	f002 fb08 	bl	80041fc <memcpy>
						  0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08,
						  0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F,
						  0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
						  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2};

    int k = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    uint32 temp;
    for (int i = 0; i < 64; ++i) {
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001bf8:	e1a4      	b.n	8001f44 <sha256_process+0x41c>
    	if (i < 16) {
 8001bfa:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001bfe:	2b0f      	cmp	r3, #15
 8001c00:	dc0a      	bgt.n	8001c18 <sha256_process+0xf0>
    		temp = W[i];
 8001c02:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c06:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c0a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8001c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c12:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8001c16:	e06e      	b.n	8001cf6 <sha256_process+0x1ce>
    	} else {
    		temp = R(i);
 8001c18:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001c1c:	1e9a      	subs	r2, r3, #2
 8001c1e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c22:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2a:	ea4f 4273 	mov.w	r2, r3, ror #17
 8001c2e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001c32:	1e99      	subs	r1, r3, #2
 8001c34:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c38:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c40:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8001c44:	405a      	eors	r2, r3
 8001c46:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001c4a:	1e99      	subs	r1, r3, #2
 8001c4c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c58:	0a9b      	lsrs	r3, r3, #10
 8001c5a:	405a      	eors	r2, r3
 8001c5c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001c60:	1fd9      	subs	r1, r3, #7
 8001c62:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c66:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c6e:	441a      	add	r2, r3
 8001c70:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001c74:	f1a3 010f 	sub.w	r1, r3, #15
 8001c78:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c7c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c84:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8001c88:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001c8c:	f1a3 000f 	sub.w	r0, r3, #15
 8001c90:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c94:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001c9c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8001ca0:	4059      	eors	r1, r3
 8001ca2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001ca6:	f1a3 000f 	sub.w	r0, r3, #15
 8001caa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001cae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cb2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001cb6:	08db      	lsrs	r3, r3, #3
 8001cb8:	404b      	eors	r3, r1
 8001cba:	441a      	add	r2, r3
 8001cbc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001cc0:	f1a3 0110 	sub.w	r1, r3, #16
 8001cc4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001cc8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ccc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001cd0:	18d1      	adds	r1, r2, r3
 8001cd2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001cd6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cda:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8001cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001ce2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001ce6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cea:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8001cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    	}

    	P( ctx->state[8 - k], ctx->state[9 - k], ctx->state[10 - k], ctx->state[11 - k],
 8001cf6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001cfa:	f1c3 020f 	rsb	r2, r3, #15
 8001cfe:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d02:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3202      	adds	r2, #2
 8001d0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d0e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d12:	f1c3 010c 	rsb	r1, r3, #12
 8001d16:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d1a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	3102      	adds	r1, #2
 8001d22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d26:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8001d2a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d2e:	f1c3 000c 	rsb	r0, r3, #12
 8001d32:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d36:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3002      	adds	r0, #2
 8001d3e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d42:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8001d46:	4059      	eors	r1, r3
 8001d48:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d4c:	f1c3 000c 	rsb	r0, r3, #12
 8001d50:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d54:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3002      	adds	r0, #2
 8001d5c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d60:	ea4f 6373 	mov.w	r3, r3, ror #25
 8001d64:	404b      	eors	r3, r1
 8001d66:	441a      	add	r2, r3
 8001d68:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d6c:	f1c3 010e 	rsb	r1, r3, #14
 8001d70:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d74:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	3102      	adds	r1, #2
 8001d7c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001d80:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d84:	f1c3 000c 	rsb	r0, r3, #12
 8001d88:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d8c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	3002      	adds	r0, #2
 8001d94:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001d98:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d9c:	f1c3 040d 	rsb	r4, r3, #13
 8001da0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001da4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	3402      	adds	r4, #2
 8001dac:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8001db0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001db4:	f1c3 050e 	rsb	r5, r3, #14
 8001db8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001dbc:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	3502      	adds	r5, #2
 8001dc4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8001dc8:	4063      	eors	r3, r4
 8001dca:	4003      	ands	r3, r0
 8001dcc:	404b      	eors	r3, r1
 8001dce:	441a      	add	r2, r3
 8001dd0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001dd4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001dd8:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8001ddc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001de0:	4413      	add	r3, r2
 8001de2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8001de6:	4413      	add	r3, r2
 8001de8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001dec:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001df0:	f1c3 0208 	rsb	r2, r3, #8
 8001df4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001df8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	3202      	adds	r2, #2
 8001e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e04:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001e08:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001e0c:	f1c3 0108 	rsb	r1, r3, #8
 8001e10:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001e14:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	3102      	adds	r1, #2
 8001e1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e20:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001e24:	405a      	eors	r2, r3
 8001e26:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001e2a:	f1c3 0108 	rsb	r1, r3, #8
 8001e2e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001e32:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3102      	adds	r1, #2
 8001e3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e3e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001e42:	405a      	eors	r2, r3
 8001e44:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001e48:	f1c3 0108 	rsb	r1, r3, #8
 8001e4c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001e50:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3102      	adds	r1, #2
 8001e58:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001e5c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001e60:	f1c3 0009 	rsb	r0, r3, #9
 8001e64:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001e68:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	3002      	adds	r0, #2
 8001e70:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001e74:	4019      	ands	r1, r3
 8001e76:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001e7a:	f1c3 000a 	rsb	r0, r3, #10
 8001e7e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001e82:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	3002      	adds	r0, #2
 8001e8a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001e8e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001e92:	f1c3 0408 	rsb	r4, r3, #8
 8001e96:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001e9a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	3402      	adds	r4, #2
 8001ea2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8001ea6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001eaa:	f1c3 0509 	rsb	r5, r3, #9
 8001eae:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001eb2:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3502      	adds	r5, #2
 8001eba:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8001ebe:	4323      	orrs	r3, r4
 8001ec0:	4003      	ands	r3, r0
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8001eca:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001ece:	f1c3 020b 	rsb	r2, r3, #11
 8001ed2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001ed6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	3202      	adds	r2, #2
 8001ede:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ee2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001ee6:	f1c3 020b 	rsb	r2, r3, #11
 8001eea:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001eee:	4419      	add	r1, r3
 8001ef0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001ef4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	3202      	adds	r2, #2
 8001efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001f00:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001f04:	f1c3 020f 	rsb	r2, r3, #15
 8001f08:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8001f0c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001f10:	4419      	add	r1, r3
 8001f12:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001f16:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3202      	adds	r2, #2
 8001f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			ctx->state[12 - k], ctx->state[13 - k], ctx->state[14 - k], ctx->state[15 - k],
			temp, buffer_array[i]);

		++k;
 8001f22:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001f26:	3301      	adds	r3, #1
 8001f28:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

		if (k > 8) {
 8001f2c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	dd02      	ble.n	8001f3a <sha256_process+0x412>
			k = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    for (int i = 0; i < 64; ++i) {
 8001f3a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001f44:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001f48:	2b3f      	cmp	r3, #63	; 0x3f
 8001f4a:	f77f ae56 	ble.w	8001bfa <sha256_process+0xd2>
		}
    }
}
 8001f4e:	bf00      	nop
 8001f50:	bf00      	nop
 8001f52:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bdb0      	pop	{r4, r5, r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	08008bc8 	.word	0x08008bc8

08001f60 <sha256_update>:

void sha256_update( sha256_context *ctx, uint8 *input, uint32 length )
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
    uint32 left, fill;

    if( ! length ) return;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d059      	beq.n	8002026 <sha256_update+0xc6>

    left = ctx->total[0] & 0x3F;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f7a:	617b      	str	r3, [r7, #20]
    fill = 64 - left;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001f82:	613b      	str	r3, [r7, #16]

    ctx->total[0] += length;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	441a      	add	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < length )
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d904      	bls.n	8001fac <sha256_update+0x4c>
        ctx->total[1]++;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	605a      	str	r2, [r3, #4]

    if( left && length >= fill )
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d028      	beq.n	8002004 <sha256_update+0xa4>
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d324      	bcc.n	8002004 <sha256_update+0xa4>
    {
        memcpy( (void *) (ctx->buffer + left),
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f002 f917 	bl	80041fc <memcpy>
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3328      	adds	r3, #40	; 0x28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f7ff fda7 	bl	8001b28 <sha256_process>
        length -= fill;
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	607b      	str	r3, [r7, #4]
        input  += fill;
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	60bb      	str	r3, [r7, #8]
        left = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
    }

    while( length >= 64 )
 8001fee:	e009      	b.n	8002004 <sha256_update+0xa4>
    {
        sha256_process( ctx, input );
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7ff fd98 	bl	8001b28 <sha256_process>
        length -= 64;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b40      	subs	r3, #64	; 0x40
 8001ffc:	607b      	str	r3, [r7, #4]
        input  += 64;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3340      	adds	r3, #64	; 0x40
 8002002:	60bb      	str	r3, [r7, #8]
    while( length >= 64 )
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b3f      	cmp	r3, #63	; 0x3f
 8002008:	d8f2      	bhi.n	8001ff0 <sha256_update+0x90>
    }

    if( length )
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00b      	beq.n	8002028 <sha256_update+0xc8>
    {
        memcpy( (void *) (ctx->buffer + left),
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	4413      	add	r3, r2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	4618      	mov	r0, r3
 8002020:	f002 f8ec 	bl	80041fc <memcpy>
 8002024:	e000      	b.n	8002028 <sha256_update+0xc8>
    if( ! length ) return;
 8002026:	bf00      	nop
                (void *) input, length );
    }
}
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <sha256_finish>:
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
    uint32 last, padn;
    uint32 high, low;
    uint8 msglen[8];

    high = ( ctx->total[0] >> 29 )
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 8002046:	4313      	orrs	r3, r2
 8002048:	623b      	str	r3, [r7, #32]
    low  = ( ctx->total[0] <<  3 );
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	61fb      	str	r3, [r7, #28]

    PUT_UINT32( high, msglen, 0 );
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	0e1b      	lsrs	r3, r3, #24
 8002056:	b2db      	uxtb	r3, r3
 8002058:	733b      	strb	r3, [r7, #12]
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	0c1b      	lsrs	r3, r3, #16
 800205e:	b2db      	uxtb	r3, r3
 8002060:	737b      	strb	r3, [r7, #13]
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	b2db      	uxtb	r3, r3
 8002068:	73bb      	strb	r3, [r7, #14]
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	73fb      	strb	r3, [r7, #15]
    PUT_UINT32( low,  msglen, 4 );
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	0e1b      	lsrs	r3, r3, #24
 8002074:	b2db      	uxtb	r3, r3
 8002076:	743b      	strb	r3, [r7, #16]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	0c1b      	lsrs	r3, r3, #16
 800207c:	b2db      	uxtb	r3, r3
 800207e:	747b      	strb	r3, [r7, #17]
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	b2db      	uxtb	r3, r3
 8002086:	74bb      	strb	r3, [r7, #18]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	74fb      	strb	r3, [r7, #19]

    last = ctx->total[0] & 0x3F;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002096:	61bb      	str	r3, [r7, #24]
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b37      	cmp	r3, #55	; 0x37
 800209c:	d803      	bhi.n	80020a6 <sha256_finish+0x76>
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80020a4:	e002      	b.n	80020ac <sha256_finish+0x7c>
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80020ac:	617b      	str	r3, [r7, #20]

    sha256_update( ctx, sha256_padding, padn );
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4925      	ldr	r1, [pc, #148]	; (8002148 <sha256_finish+0x118>)
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ff54 	bl	8001f60 <sha256_update>
    sha256_update( ctx, msglen, 8 );
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	2208      	movs	r2, #8
 80020be:	4619      	mov	r1, r3
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff4d 	bl	8001f60 <sha256_update>

    for (int i = 0; i < 8; ++i) {
 80020c6:	2300      	movs	r3, #0
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	e035      	b.n	8002138 <sha256_finish+0x108>
    	PUT_UINT32( ctx->state[i], digest,  i * 4 );
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d0:	3202      	adds	r2, #2
 80020d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d6:	0e1a      	lsrs	r2, r3, #24
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4619      	mov	r1, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	440b      	add	r3, r1
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ea:	3202      	adds	r2, #2
 80020ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f0:	0c19      	lsrs	r1, r3, #16
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	3301      	adds	r3, #1
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	b2ca      	uxtb	r2, r1
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002104:	3202      	adds	r2, #2
 8002106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210a:	0a19      	lsrs	r1, r3, #8
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	3302      	adds	r3, #2
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	4413      	add	r3, r2
 8002116:	b2ca      	uxtb	r2, r1
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211e:	3202      	adds	r2, #2
 8002120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	3303      	adds	r3, #3
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	4413      	add	r3, r2
 800212e:	b2ca      	uxtb	r2, r1
 8002130:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; ++i) {
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	3301      	adds	r3, #1
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	2b07      	cmp	r3, #7
 800213c:	ddc6      	ble.n	80020cc <sha256_finish+0x9c>
    }
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3728      	adds	r7, #40	; 0x28
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000240 	.word	0x20000240

0800214c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <HAL_MspInit+0x40>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	4a0d      	ldr	r2, [pc, #52]	; (800218c <HAL_MspInit+0x40>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6193      	str	r3, [r2, #24]
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_MspInit+0x40>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_MspInit+0x40>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a07      	ldr	r2, [pc, #28]	; (800218c <HAL_MspInit+0x40>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002174:	61d3      	str	r3, [r2, #28]
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_MspInit+0x40>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	40021000 	.word	0x40021000

08002190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0318 	add.w	r3, r7, #24
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a3f      	ldr	r2, [pc, #252]	; (80022a8 <HAL_UART_MspInit+0x118>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d13a      	bne.n	8002226 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021b0:	4b3e      	ldr	r3, [pc, #248]	; (80022ac <HAL_UART_MspInit+0x11c>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4a3d      	ldr	r2, [pc, #244]	; (80022ac <HAL_UART_MspInit+0x11c>)
 80021b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ba:	6193      	str	r3, [r2, #24]
 80021bc:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <HAL_UART_MspInit+0x11c>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	4b38      	ldr	r3, [pc, #224]	; (80022ac <HAL_UART_MspInit+0x11c>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	4a37      	ldr	r2, [pc, #220]	; (80022ac <HAL_UART_MspInit+0x11c>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6193      	str	r3, [r2, #24]
 80021d4:	4b35      	ldr	r3, [pc, #212]	; (80022ac <HAL_UART_MspInit+0x11c>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ea:	2303      	movs	r3, #3
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0318 	add.w	r3, r7, #24
 80021f2:	4619      	mov	r1, r3
 80021f4:	482e      	ldr	r0, [pc, #184]	; (80022b0 <HAL_UART_MspInit+0x120>)
 80021f6:	f000 fbcd 	bl	8002994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002208:	f107 0318 	add.w	r3, r7, #24
 800220c:	4619      	mov	r1, r3
 800220e:	4828      	ldr	r0, [pc, #160]	; (80022b0 <HAL_UART_MspInit+0x120>)
 8002210:	f000 fbc0 	bl	8002994 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	2025      	movs	r0, #37	; 0x25
 800221a:	f000 fad2 	bl	80027c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800221e:	2025      	movs	r0, #37	; 0x25
 8002220:	f000 faeb 	bl	80027fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002224:	e03c      	b.n	80022a0 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a22      	ldr	r2, [pc, #136]	; (80022b4 <HAL_UART_MspInit+0x124>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d137      	bne.n	80022a0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_UART_MspInit+0x11c>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <HAL_UART_MspInit+0x11c>)
 8002236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223a:	61d3      	str	r3, [r2, #28]
 800223c:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <HAL_UART_MspInit+0x11c>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002248:	4b18      	ldr	r3, [pc, #96]	; (80022ac <HAL_UART_MspInit+0x11c>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4a17      	ldr	r2, [pc, #92]	; (80022ac <HAL_UART_MspInit+0x11c>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	6193      	str	r3, [r2, #24]
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <HAL_UART_MspInit+0x11c>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002260:	2304      	movs	r3, #4
 8002262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002268:	2303      	movs	r3, #3
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226c:	f107 0318 	add.w	r3, r7, #24
 8002270:	4619      	mov	r1, r3
 8002272:	480f      	ldr	r0, [pc, #60]	; (80022b0 <HAL_UART_MspInit+0x120>)
 8002274:	f000 fb8e 	bl	8002994 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002278:	2308      	movs	r3, #8
 800227a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002284:	f107 0318 	add.w	r3, r7, #24
 8002288:	4619      	mov	r1, r3
 800228a:	4809      	ldr	r0, [pc, #36]	; (80022b0 <HAL_UART_MspInit+0x120>)
 800228c:	f000 fb82 	bl	8002994 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2100      	movs	r1, #0
 8002294:	2026      	movs	r0, #38	; 0x26
 8002296:	f000 fa94 	bl	80027c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800229a:	2026      	movs	r0, #38	; 0x26
 800229c:	f000 faad 	bl	80027fa <HAL_NVIC_EnableIRQ>
}
 80022a0:	bf00      	nop
 80022a2:	3728      	adds	r7, #40	; 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40013800 	.word	0x40013800
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40010800 	.word	0x40010800
 80022b4:	40004400 	.word	0x40004400

080022b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <NMI_Handler+0x4>

080022be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <HardFault_Handler+0x4>

080022c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <MemManage_Handler+0x4>

080022ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ce:	e7fe      	b.n	80022ce <BusFault_Handler+0x4>

080022d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <UsageFault_Handler+0x4>

080022d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022fe:	f000 f949 	bl	8002594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <USART1_IRQHandler+0x10>)
 800230e:	f001 f9e7 	bl	80036e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000047c 	.word	0x2000047c

0800231c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <USART2_IRQHandler+0x10>)
 8002322:	f001 f9dd 	bl	80036e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200004c4 	.word	0x200004c4

08002330 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return 1;
 8002334:	2301      	movs	r3, #1
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <_kill>:

int _kill(int pid, int sig)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002348:	f001 ff22 	bl	8004190 <__errno>
 800234c:	4603      	mov	r3, r0
 800234e:	2216      	movs	r2, #22
 8002350:	601a      	str	r2, [r3, #0]
  return -1;
 8002352:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_exit>:

void _exit (int status)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002366:	f04f 31ff 	mov.w	r1, #4294967295
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffe7 	bl	800233e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002370:	e7fe      	b.n	8002370 <_exit+0x12>

08002372 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b086      	sub	sp, #24
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	e00a      	b.n	800239a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002384:	f3af 8000 	nop.w
 8002388:	4601      	mov	r1, r0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	60ba      	str	r2, [r7, #8]
 8002390:	b2ca      	uxtb	r2, r1
 8002392:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3301      	adds	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	dbf0      	blt.n	8002384 <_read+0x12>
  }

  return len;
 80023a2:	687b      	ldr	r3, [r7, #4]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	e009      	b.n	80023d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	60ba      	str	r2, [r7, #8]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3301      	adds	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	dbf1      	blt.n	80023be <_write+0x12>
  }
  return len;
 80023da:	687b      	ldr	r3, [r7, #4]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_close>:

int _close(int file)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800240a:	605a      	str	r2, [r3, #4]
  return 0;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <_isatty>:

int _isatty(int file)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002420:	2301      	movs	r3, #1
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800244c:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <_sbrk+0x5c>)
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <_sbrk+0x60>)
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002458:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <_sbrk+0x64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d102      	bne.n	8002466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <_sbrk+0x64>)
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <_sbrk+0x68>)
 8002464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <_sbrk+0x64>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	429a      	cmp	r2, r3
 8002472:	d207      	bcs.n	8002484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002474:	f001 fe8c 	bl	8004190 <__errno>
 8002478:	4603      	mov	r3, r0
 800247a:	220c      	movs	r2, #12
 800247c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800247e:	f04f 33ff 	mov.w	r3, #4294967295
 8002482:	e009      	b.n	8002498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <_sbrk+0x64>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <_sbrk+0x64>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <_sbrk+0x64>)
 8002494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20005000 	.word	0x20005000
 80024a4:	00000400 	.word	0x00000400
 80024a8:	20000510 	.word	0x20000510
 80024ac:	20000528 	.word	0x20000528

080024b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024bc:	f7ff fff8 	bl	80024b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c0:	480b      	ldr	r0, [pc, #44]	; (80024f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024c2:	490c      	ldr	r1, [pc, #48]	; (80024f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024c4:	4a0c      	ldr	r2, [pc, #48]	; (80024f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c8:	e002      	b.n	80024d0 <LoopCopyDataInit>

080024ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ce:	3304      	adds	r3, #4

080024d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d4:	d3f9      	bcc.n	80024ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d6:	4a09      	ldr	r2, [pc, #36]	; (80024fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024d8:	4c09      	ldr	r4, [pc, #36]	; (8002500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024dc:	e001      	b.n	80024e2 <LoopFillZerobss>

080024de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e0:	3204      	adds	r2, #4

080024e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e4:	d3fb      	bcc.n	80024de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024e6:	f001 fe59 	bl	800419c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ea:	f7fe feed 	bl	80012c8 <main>
  bx lr
 80024ee:	4770      	bx	lr
  ldr r0, =_sdata
 80024f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f4:	20000460 	.word	0x20000460
  ldr r2, =_sidata
 80024f8:	080091ac 	.word	0x080091ac
  ldr r2, =_sbss
 80024fc:	20000460 	.word	0x20000460
  ldr r4, =_ebss
 8002500:	20000528 	.word	0x20000528

08002504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002504:	e7fe      	b.n	8002504 <ADC1_2_IRQHandler>
	...

08002508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_Init+0x28>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a07      	ldr	r2, [pc, #28]	; (8002530 <HAL_Init+0x28>)
 8002512:	f043 0310 	orr.w	r3, r3, #16
 8002516:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002518:	2003      	movs	r0, #3
 800251a:	f000 f947 	bl	80027ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800251e:	200f      	movs	r0, #15
 8002520:	f000 f808 	bl	8002534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002524:	f7ff fe12 	bl	800214c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40022000 	.word	0x40022000

08002534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_InitTick+0x54>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_InitTick+0x58>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4619      	mov	r1, r3
 8002546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254a:	fbb3 f3f1 	udiv	r3, r3, r1
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f95f 	bl	8002816 <HAL_SYSTICK_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e00e      	b.n	8002580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b0f      	cmp	r3, #15
 8002566:	d80a      	bhi.n	800257e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002568:	2200      	movs	r2, #0
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	f04f 30ff 	mov.w	r0, #4294967295
 8002570:	f000 f927 	bl	80027c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002574:	4a06      	ldr	r2, [pc, #24]	; (8002590 <HAL_InitTick+0x5c>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e000      	b.n	8002580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000280 	.word	0x20000280
 800258c:	20000288 	.word	0x20000288
 8002590:	20000284 	.word	0x20000284

08002594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_IncTick+0x1c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_IncTick+0x20>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	4a03      	ldr	r2, [pc, #12]	; (80025b4 <HAL_IncTick+0x20>)
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	20000288 	.word	0x20000288
 80025b4:	20000514 	.word	0x20000514

080025b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return uwTick;
 80025bc:	4b02      	ldr	r3, [pc, #8]	; (80025c8 <HAL_GetTick+0x10>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	20000514 	.word	0x20000514

080025cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d4:	f7ff fff0 	bl	80025b8 <HAL_GetTick>
 80025d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d005      	beq.n	80025f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_Delay+0x44>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4413      	add	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025f2:	bf00      	nop
 80025f4:	f7ff ffe0 	bl	80025b8 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	429a      	cmp	r2, r3
 8002602:	d8f7      	bhi.n	80025f4 <HAL_Delay+0x28>
  {
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000288 	.word	0x20000288

08002614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800263c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002646:	4a04      	ldr	r2, [pc, #16]	; (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60d3      	str	r3, [r2, #12]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <__NVIC_GetPriorityGrouping+0x18>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	f003 0307 	and.w	r3, r3, #7
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	2b00      	cmp	r3, #0
 8002688:	db0b      	blt.n	80026a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	4906      	ldr	r1, [pc, #24]	; (80026ac <__NVIC_EnableIRQ+0x34>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2001      	movs	r0, #1
 800269a:	fa00 f202 	lsl.w	r2, r0, r2
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	e000e100 	.word	0xe000e100

080026b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db0a      	blt.n	80026da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	490c      	ldr	r1, [pc, #48]	; (80026fc <__NVIC_SetPriority+0x4c>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	440b      	add	r3, r1
 80026d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d8:	e00a      	b.n	80026f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4908      	ldr	r1, [pc, #32]	; (8002700 <__NVIC_SetPriority+0x50>)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3b04      	subs	r3, #4
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	440b      	add	r3, r1
 80026ee:	761a      	strb	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f1c3 0307 	rsb	r3, r3, #7
 800271e:	2b04      	cmp	r3, #4
 8002720:	bf28      	it	cs
 8002722:	2304      	movcs	r3, #4
 8002724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3304      	adds	r3, #4
 800272a:	2b06      	cmp	r3, #6
 800272c:	d902      	bls.n	8002734 <NVIC_EncodePriority+0x30>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3b03      	subs	r3, #3
 8002732:	e000      	b.n	8002736 <NVIC_EncodePriority+0x32>
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	f04f 32ff 	mov.w	r2, #4294967295
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	401a      	ands	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800274c:	f04f 31ff 	mov.w	r1, #4294967295
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43d9      	mvns	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	4313      	orrs	r3, r2
         );
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002778:	d301      	bcc.n	800277e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277a:	2301      	movs	r3, #1
 800277c:	e00f      	b.n	800279e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <SysTick_Config+0x40>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3b01      	subs	r3, #1
 8002784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002786:	210f      	movs	r1, #15
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	f7ff ff90 	bl	80026b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <SysTick_Config+0x40>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002796:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <SysTick_Config+0x40>)
 8002798:	2207      	movs	r2, #7
 800279a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	e000e010 	.word	0xe000e010

080027ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff2d 	bl	8002614 <__NVIC_SetPriorityGrouping>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d4:	f7ff ff42 	bl	800265c <__NVIC_GetPriorityGrouping>
 80027d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f7ff ff90 	bl	8002704 <NVIC_EncodePriority>
 80027e4:	4602      	mov	r2, r0
 80027e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff5f 	bl	80026b0 <__NVIC_SetPriority>
}
 80027f2:	bf00      	nop
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff35 	bl	8002678 <__NVIC_EnableIRQ>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff ffa2 	bl	8002768 <SysTick_Config>
 8002824:	4603      	mov	r3, r0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800282e:	b480      	push	{r7}
 8002830:	b085      	sub	sp, #20
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d008      	beq.n	8002858 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2204      	movs	r2, #4
 800284a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e020      	b.n	800289a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 020e 	bic.w	r2, r2, #14
 8002866:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002898:	7bfb      	ldrb	r3, [r7, #15]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d005      	beq.n	80028c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2204      	movs	r2, #4
 80028c0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e051      	b.n	800296c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 020e 	bic.w	r2, r2, #14
 80028d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a22      	ldr	r2, [pc, #136]	; (8002978 <HAL_DMA_Abort_IT+0xd4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d029      	beq.n	8002946 <HAL_DMA_Abort_IT+0xa2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a21      	ldr	r2, [pc, #132]	; (800297c <HAL_DMA_Abort_IT+0xd8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d022      	beq.n	8002942 <HAL_DMA_Abort_IT+0x9e>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <HAL_DMA_Abort_IT+0xdc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01a      	beq.n	800293c <HAL_DMA_Abort_IT+0x98>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <HAL_DMA_Abort_IT+0xe0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d012      	beq.n	8002936 <HAL_DMA_Abort_IT+0x92>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <HAL_DMA_Abort_IT+0xe4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00a      	beq.n	8002930 <HAL_DMA_Abort_IT+0x8c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1b      	ldr	r2, [pc, #108]	; (800298c <HAL_DMA_Abort_IT+0xe8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d102      	bne.n	800292a <HAL_DMA_Abort_IT+0x86>
 8002924:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002928:	e00e      	b.n	8002948 <HAL_DMA_Abort_IT+0xa4>
 800292a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800292e:	e00b      	b.n	8002948 <HAL_DMA_Abort_IT+0xa4>
 8002930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002934:	e008      	b.n	8002948 <HAL_DMA_Abort_IT+0xa4>
 8002936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800293a:	e005      	b.n	8002948 <HAL_DMA_Abort_IT+0xa4>
 800293c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002940:	e002      	b.n	8002948 <HAL_DMA_Abort_IT+0xa4>
 8002942:	2310      	movs	r3, #16
 8002944:	e000      	b.n	8002948 <HAL_DMA_Abort_IT+0xa4>
 8002946:	2301      	movs	r3, #1
 8002948:	4a11      	ldr	r2, [pc, #68]	; (8002990 <HAL_DMA_Abort_IT+0xec>)
 800294a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
    } 
  }
  return status;
 800296c:	7bfb      	ldrb	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40020008 	.word	0x40020008
 800297c:	4002001c 	.word	0x4002001c
 8002980:	40020030 	.word	0x40020030
 8002984:	40020044 	.word	0x40020044
 8002988:	40020058 	.word	0x40020058
 800298c:	4002006c 	.word	0x4002006c
 8002990:	40020000 	.word	0x40020000

08002994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002994:	b480      	push	{r7}
 8002996:	b08b      	sub	sp, #44	; 0x2c
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800299e:	2300      	movs	r3, #0
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029a2:	2300      	movs	r3, #0
 80029a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029a6:	e169      	b.n	8002c7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029a8:	2201      	movs	r2, #1
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	f040 8158 	bne.w	8002c76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a9a      	ldr	r2, [pc, #616]	; (8002c34 <HAL_GPIO_Init+0x2a0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d05e      	beq.n	8002a8e <HAL_GPIO_Init+0xfa>
 80029d0:	4a98      	ldr	r2, [pc, #608]	; (8002c34 <HAL_GPIO_Init+0x2a0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d875      	bhi.n	8002ac2 <HAL_GPIO_Init+0x12e>
 80029d6:	4a98      	ldr	r2, [pc, #608]	; (8002c38 <HAL_GPIO_Init+0x2a4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d058      	beq.n	8002a8e <HAL_GPIO_Init+0xfa>
 80029dc:	4a96      	ldr	r2, [pc, #600]	; (8002c38 <HAL_GPIO_Init+0x2a4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d86f      	bhi.n	8002ac2 <HAL_GPIO_Init+0x12e>
 80029e2:	4a96      	ldr	r2, [pc, #600]	; (8002c3c <HAL_GPIO_Init+0x2a8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d052      	beq.n	8002a8e <HAL_GPIO_Init+0xfa>
 80029e8:	4a94      	ldr	r2, [pc, #592]	; (8002c3c <HAL_GPIO_Init+0x2a8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d869      	bhi.n	8002ac2 <HAL_GPIO_Init+0x12e>
 80029ee:	4a94      	ldr	r2, [pc, #592]	; (8002c40 <HAL_GPIO_Init+0x2ac>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d04c      	beq.n	8002a8e <HAL_GPIO_Init+0xfa>
 80029f4:	4a92      	ldr	r2, [pc, #584]	; (8002c40 <HAL_GPIO_Init+0x2ac>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d863      	bhi.n	8002ac2 <HAL_GPIO_Init+0x12e>
 80029fa:	4a92      	ldr	r2, [pc, #584]	; (8002c44 <HAL_GPIO_Init+0x2b0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d046      	beq.n	8002a8e <HAL_GPIO_Init+0xfa>
 8002a00:	4a90      	ldr	r2, [pc, #576]	; (8002c44 <HAL_GPIO_Init+0x2b0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d85d      	bhi.n	8002ac2 <HAL_GPIO_Init+0x12e>
 8002a06:	2b12      	cmp	r3, #18
 8002a08:	d82a      	bhi.n	8002a60 <HAL_GPIO_Init+0xcc>
 8002a0a:	2b12      	cmp	r3, #18
 8002a0c:	d859      	bhi.n	8002ac2 <HAL_GPIO_Init+0x12e>
 8002a0e:	a201      	add	r2, pc, #4	; (adr r2, 8002a14 <HAL_GPIO_Init+0x80>)
 8002a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a14:	08002a8f 	.word	0x08002a8f
 8002a18:	08002a69 	.word	0x08002a69
 8002a1c:	08002a7b 	.word	0x08002a7b
 8002a20:	08002abd 	.word	0x08002abd
 8002a24:	08002ac3 	.word	0x08002ac3
 8002a28:	08002ac3 	.word	0x08002ac3
 8002a2c:	08002ac3 	.word	0x08002ac3
 8002a30:	08002ac3 	.word	0x08002ac3
 8002a34:	08002ac3 	.word	0x08002ac3
 8002a38:	08002ac3 	.word	0x08002ac3
 8002a3c:	08002ac3 	.word	0x08002ac3
 8002a40:	08002ac3 	.word	0x08002ac3
 8002a44:	08002ac3 	.word	0x08002ac3
 8002a48:	08002ac3 	.word	0x08002ac3
 8002a4c:	08002ac3 	.word	0x08002ac3
 8002a50:	08002ac3 	.word	0x08002ac3
 8002a54:	08002ac3 	.word	0x08002ac3
 8002a58:	08002a71 	.word	0x08002a71
 8002a5c:	08002a85 	.word	0x08002a85
 8002a60:	4a79      	ldr	r2, [pc, #484]	; (8002c48 <HAL_GPIO_Init+0x2b4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a66:	e02c      	b.n	8002ac2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	623b      	str	r3, [r7, #32]
          break;
 8002a6e:	e029      	b.n	8002ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	3304      	adds	r3, #4
 8002a76:	623b      	str	r3, [r7, #32]
          break;
 8002a78:	e024      	b.n	8002ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	3308      	adds	r3, #8
 8002a80:	623b      	str	r3, [r7, #32]
          break;
 8002a82:	e01f      	b.n	8002ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	330c      	adds	r3, #12
 8002a8a:	623b      	str	r3, [r7, #32]
          break;
 8002a8c:	e01a      	b.n	8002ac4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d102      	bne.n	8002a9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a96:	2304      	movs	r3, #4
 8002a98:	623b      	str	r3, [r7, #32]
          break;
 8002a9a:	e013      	b.n	8002ac4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d105      	bne.n	8002ab0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aa4:	2308      	movs	r3, #8
 8002aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	611a      	str	r2, [r3, #16]
          break;
 8002aae:	e009      	b.n	8002ac4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ab0:	2308      	movs	r3, #8
 8002ab2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	615a      	str	r2, [r3, #20]
          break;
 8002aba:	e003      	b.n	8002ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002abc:	2300      	movs	r3, #0
 8002abe:	623b      	str	r3, [r7, #32]
          break;
 8002ac0:	e000      	b.n	8002ac4 <HAL_GPIO_Init+0x130>
          break;
 8002ac2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2bff      	cmp	r3, #255	; 0xff
 8002ac8:	d801      	bhi.n	8002ace <HAL_GPIO_Init+0x13a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	e001      	b.n	8002ad2 <HAL_GPIO_Init+0x13e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2bff      	cmp	r3, #255	; 0xff
 8002ad8:	d802      	bhi.n	8002ae0 <HAL_GPIO_Init+0x14c>
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	e002      	b.n	8002ae6 <HAL_GPIO_Init+0x152>
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	3b08      	subs	r3, #8
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	210f      	movs	r1, #15
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	fa01 f303 	lsl.w	r3, r1, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	401a      	ands	r2, r3
 8002af8:	6a39      	ldr	r1, [r7, #32]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	fa01 f303 	lsl.w	r3, r1, r3
 8002b00:	431a      	orrs	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 80b1 	beq.w	8002c76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b14:	4b4d      	ldr	r3, [pc, #308]	; (8002c4c <HAL_GPIO_Init+0x2b8>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	4a4c      	ldr	r2, [pc, #304]	; (8002c4c <HAL_GPIO_Init+0x2b8>)
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	6193      	str	r3, [r2, #24]
 8002b20:	4b4a      	ldr	r3, [pc, #296]	; (8002c4c <HAL_GPIO_Init+0x2b8>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b2c:	4a48      	ldr	r2, [pc, #288]	; (8002c50 <HAL_GPIO_Init+0x2bc>)
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	3302      	adds	r3, #2
 8002b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	220f      	movs	r2, #15
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a40      	ldr	r2, [pc, #256]	; (8002c54 <HAL_GPIO_Init+0x2c0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d013      	beq.n	8002b80 <HAL_GPIO_Init+0x1ec>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a3f      	ldr	r2, [pc, #252]	; (8002c58 <HAL_GPIO_Init+0x2c4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00d      	beq.n	8002b7c <HAL_GPIO_Init+0x1e8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a3e      	ldr	r2, [pc, #248]	; (8002c5c <HAL_GPIO_Init+0x2c8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d007      	beq.n	8002b78 <HAL_GPIO_Init+0x1e4>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a3d      	ldr	r2, [pc, #244]	; (8002c60 <HAL_GPIO_Init+0x2cc>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d101      	bne.n	8002b74 <HAL_GPIO_Init+0x1e0>
 8002b70:	2303      	movs	r3, #3
 8002b72:	e006      	b.n	8002b82 <HAL_GPIO_Init+0x1ee>
 8002b74:	2304      	movs	r3, #4
 8002b76:	e004      	b.n	8002b82 <HAL_GPIO_Init+0x1ee>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e002      	b.n	8002b82 <HAL_GPIO_Init+0x1ee>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <HAL_GPIO_Init+0x1ee>
 8002b80:	2300      	movs	r3, #0
 8002b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b84:	f002 0203 	and.w	r2, r2, #3
 8002b88:	0092      	lsls	r2, r2, #2
 8002b8a:	4093      	lsls	r3, r2
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b92:	492f      	ldr	r1, [pc, #188]	; (8002c50 <HAL_GPIO_Init+0x2bc>)
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	3302      	adds	r3, #2
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d006      	beq.n	8002bba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bac:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	492c      	ldr	r1, [pc, #176]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]
 8002bb8:	e006      	b.n	8002bc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bba:	4b2a      	ldr	r3, [pc, #168]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	4928      	ldr	r1, [pc, #160]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d006      	beq.n	8002be2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bd4:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	4922      	ldr	r1, [pc, #136]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60cb      	str	r3, [r1, #12]
 8002be0:	e006      	b.n	8002bf0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	491e      	ldr	r1, [pc, #120]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d006      	beq.n	8002c0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	4918      	ldr	r1, [pc, #96]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
 8002c08:	e006      	b.n	8002c18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c0a:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	4914      	ldr	r1, [pc, #80]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d021      	beq.n	8002c68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	490e      	ldr	r1, [pc, #56]	; (8002c64 <HAL_GPIO_Init+0x2d0>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	600b      	str	r3, [r1, #0]
 8002c30:	e021      	b.n	8002c76 <HAL_GPIO_Init+0x2e2>
 8002c32:	bf00      	nop
 8002c34:	10320000 	.word	0x10320000
 8002c38:	10310000 	.word	0x10310000
 8002c3c:	10220000 	.word	0x10220000
 8002c40:	10210000 	.word	0x10210000
 8002c44:	10120000 	.word	0x10120000
 8002c48:	10110000 	.word	0x10110000
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40010800 	.word	0x40010800
 8002c58:	40010c00 	.word	0x40010c00
 8002c5c:	40011000 	.word	0x40011000
 8002c60:	40011400 	.word	0x40011400
 8002c64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_GPIO_Init+0x304>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	4909      	ldr	r1, [pc, #36]	; (8002c98 <HAL_GPIO_Init+0x304>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	3301      	adds	r3, #1
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f47f ae8e 	bne.w	80029a8 <HAL_GPIO_Init+0x14>
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	372c      	adds	r7, #44	; 0x2c
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	40010400 	.word	0x40010400

08002c9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	887b      	ldrh	r3, [r7, #2]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	e001      	b.n	8002cbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	807b      	strh	r3, [r7, #2]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cda:	787b      	ldrb	r3, [r7, #1]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce0:	887a      	ldrh	r2, [r7, #2]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ce6:	e003      	b.n	8002cf0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	041a      	lsls	r2, r3, #16
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	611a      	str	r2, [r3, #16]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e272      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8087 	beq.w	8002e2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d1c:	4b92      	ldr	r3, [pc, #584]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d00c      	beq.n	8002d42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d28:	4b8f      	ldr	r3, [pc, #572]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 030c 	and.w	r3, r3, #12
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d112      	bne.n	8002d5a <HAL_RCC_OscConfig+0x5e>
 8002d34:	4b8c      	ldr	r3, [pc, #560]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d40:	d10b      	bne.n	8002d5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d42:	4b89      	ldr	r3, [pc, #548]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d06c      	beq.n	8002e28 <HAL_RCC_OscConfig+0x12c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d168      	bne.n	8002e28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e24c      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d62:	d106      	bne.n	8002d72 <HAL_RCC_OscConfig+0x76>
 8002d64:	4b80      	ldr	r3, [pc, #512]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a7f      	ldr	r2, [pc, #508]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	e02e      	b.n	8002dd0 <HAL_RCC_OscConfig+0xd4>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x98>
 8002d7a:	4b7b      	ldr	r3, [pc, #492]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a7a      	ldr	r2, [pc, #488]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b78      	ldr	r3, [pc, #480]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a77      	ldr	r2, [pc, #476]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e01d      	b.n	8002dd0 <HAL_RCC_OscConfig+0xd4>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0xbc>
 8002d9e:	4b72      	ldr	r3, [pc, #456]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a71      	ldr	r2, [pc, #452]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4b6f      	ldr	r3, [pc, #444]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6e      	ldr	r2, [pc, #440]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCC_OscConfig+0xd4>
 8002db8:	4b6b      	ldr	r3, [pc, #428]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a6a      	ldr	r2, [pc, #424]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b68      	ldr	r3, [pc, #416]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a67      	ldr	r2, [pc, #412]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7ff fbee 	bl	80025b8 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de0:	f7ff fbea 	bl	80025b8 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b64      	cmp	r3, #100	; 0x64
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e200      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df2:	4b5d      	ldr	r3, [pc, #372]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0xe4>
 8002dfe:	e014      	b.n	8002e2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e00:	f7ff fbda 	bl	80025b8 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e08:	f7ff fbd6 	bl	80025b8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e1ec      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1a:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x10c>
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d063      	beq.n	8002efe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e36:	4b4c      	ldr	r3, [pc, #304]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e42:	4b49      	ldr	r3, [pc, #292]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d11c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x18c>
 8002e4e:	4b46      	ldr	r3, [pc, #280]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d116      	bne.n	8002e88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5a:	4b43      	ldr	r3, [pc, #268]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <HAL_RCC_OscConfig+0x176>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d001      	beq.n	8002e72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e1c0      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e72:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4939      	ldr	r1, [pc, #228]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e86:	e03a      	b.n	8002efe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d020      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e90:	4b36      	ldr	r3, [pc, #216]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7ff fb8f 	bl	80025b8 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e9e:	f7ff fb8b 	bl	80025b8 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e1a1      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb0:	4b2d      	ldr	r3, [pc, #180]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebc:	4b2a      	ldr	r3, [pc, #168]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4927      	ldr	r1, [pc, #156]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	600b      	str	r3, [r1, #0]
 8002ed0:	e015      	b.n	8002efe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed2:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7ff fb6e 	bl	80025b8 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee0:	f7ff fb6a 	bl	80025b8 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e180      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d03a      	beq.n	8002f80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d019      	beq.n	8002f46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f12:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f18:	f7ff fb4e 	bl	80025b8 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f20:	f7ff fb4a 	bl	80025b8 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e160      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f3e:	2001      	movs	r0, #1
 8002f40:	f000 face 	bl	80034e0 <RCC_Delay>
 8002f44:	e01c      	b.n	8002f80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4c:	f7ff fb34 	bl	80025b8 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f52:	e00f      	b.n	8002f74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f54:	f7ff fb30 	bl	80025b8 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d908      	bls.n	8002f74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e146      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>
 8002f66:	bf00      	nop
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	42420000 	.word	0x42420000
 8002f70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f74:	4b92      	ldr	r3, [pc, #584]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e9      	bne.n	8002f54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 80a6 	beq.w	80030da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f92:	4b8b      	ldr	r3, [pc, #556]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10d      	bne.n	8002fba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9e:	4b88      	ldr	r3, [pc, #544]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	4a87      	ldr	r2, [pc, #540]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	61d3      	str	r3, [r2, #28]
 8002faa:	4b85      	ldr	r3, [pc, #532]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fba:	4b82      	ldr	r3, [pc, #520]	; (80031c4 <HAL_RCC_OscConfig+0x4c8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc6:	4b7f      	ldr	r3, [pc, #508]	; (80031c4 <HAL_RCC_OscConfig+0x4c8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a7e      	ldr	r2, [pc, #504]	; (80031c4 <HAL_RCC_OscConfig+0x4c8>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd2:	f7ff faf1 	bl	80025b8 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fda:	f7ff faed 	bl	80025b8 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b64      	cmp	r3, #100	; 0x64
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e103      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	4b75      	ldr	r3, [pc, #468]	; (80031c4 <HAL_RCC_OscConfig+0x4c8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d106      	bne.n	800300e <HAL_RCC_OscConfig+0x312>
 8003000:	4b6f      	ldr	r3, [pc, #444]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	4a6e      	ldr	r2, [pc, #440]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	6213      	str	r3, [r2, #32]
 800300c:	e02d      	b.n	800306a <HAL_RCC_OscConfig+0x36e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10c      	bne.n	8003030 <HAL_RCC_OscConfig+0x334>
 8003016:	4b6a      	ldr	r3, [pc, #424]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	4a69      	ldr	r2, [pc, #420]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	6213      	str	r3, [r2, #32]
 8003022:	4b67      	ldr	r3, [pc, #412]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	4a66      	ldr	r2, [pc, #408]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	f023 0304 	bic.w	r3, r3, #4
 800302c:	6213      	str	r3, [r2, #32]
 800302e:	e01c      	b.n	800306a <HAL_RCC_OscConfig+0x36e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b05      	cmp	r3, #5
 8003036:	d10c      	bne.n	8003052 <HAL_RCC_OscConfig+0x356>
 8003038:	4b61      	ldr	r3, [pc, #388]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4a60      	ldr	r2, [pc, #384]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 800303e:	f043 0304 	orr.w	r3, r3, #4
 8003042:	6213      	str	r3, [r2, #32]
 8003044:	4b5e      	ldr	r3, [pc, #376]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	4a5d      	ldr	r2, [pc, #372]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6213      	str	r3, [r2, #32]
 8003050:	e00b      	b.n	800306a <HAL_RCC_OscConfig+0x36e>
 8003052:	4b5b      	ldr	r3, [pc, #364]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4a5a      	ldr	r2, [pc, #360]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	6213      	str	r3, [r2, #32]
 800305e:	4b58      	ldr	r3, [pc, #352]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4a57      	ldr	r2, [pc, #348]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	f023 0304 	bic.w	r3, r3, #4
 8003068:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d015      	beq.n	800309e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003072:	f7ff faa1 	bl	80025b8 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003078:	e00a      	b.n	8003090 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7ff fa9d 	bl	80025b8 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	; 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e0b1      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003090:	4b4b      	ldr	r3, [pc, #300]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0ee      	beq.n	800307a <HAL_RCC_OscConfig+0x37e>
 800309c:	e014      	b.n	80030c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309e:	f7ff fa8b 	bl	80025b8 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a4:	e00a      	b.n	80030bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a6:	f7ff fa87 	bl	80025b8 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e09b      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030bc:	4b40      	ldr	r3, [pc, #256]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ee      	bne.n	80030a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d105      	bne.n	80030da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ce:	4b3c      	ldr	r3, [pc, #240]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	4a3b      	ldr	r2, [pc, #236]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 8087 	beq.w	80031f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e4:	4b36      	ldr	r3, [pc, #216]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 030c 	and.w	r3, r3, #12
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d061      	beq.n	80031b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d146      	bne.n	8003186 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f8:	4b33      	ldr	r3, [pc, #204]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7ff fa5b 	bl	80025b8 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003106:	f7ff fa57 	bl	80025b8 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e06d      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003118:	4b29      	ldr	r3, [pc, #164]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f0      	bne.n	8003106 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312c:	d108      	bne.n	8003140 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800312e:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	4921      	ldr	r1, [pc, #132]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003140:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a19      	ldr	r1, [r3, #32]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	430b      	orrs	r3, r1
 8003152:	491b      	ldr	r1, [pc, #108]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315e:	f7ff fa2b 	bl	80025b8 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003166:	f7ff fa27 	bl	80025b8 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e03d      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003178:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x46a>
 8003184:	e035      	b.n	80031f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <HAL_RCC_OscConfig+0x4cc>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7ff fa14 	bl	80025b8 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003194:	f7ff fa10 	bl	80025b8 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e026      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x498>
 80031b2:	e01e      	b.n	80031f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e019      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40007000 	.word	0x40007000
 80031c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_OscConfig+0x500>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d106      	bne.n	80031ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000

08003200 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0d0      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003214:	4b6a      	ldr	r3, [pc, #424]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d910      	bls.n	8003244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b67      	ldr	r3, [pc, #412]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 0207 	bic.w	r2, r3, #7
 800322a:	4965      	ldr	r1, [pc, #404]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b63      	ldr	r3, [pc, #396]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0b8      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d020      	beq.n	8003292 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800325c:	4b59      	ldr	r3, [pc, #356]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4a58      	ldr	r2, [pc, #352]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003266:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003274:	4b53      	ldr	r3, [pc, #332]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a52      	ldr	r2, [pc, #328]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800327e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003280:	4b50      	ldr	r3, [pc, #320]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	494d      	ldr	r1, [pc, #308]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d040      	beq.n	8003320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d107      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a6:	4b47      	ldr	r3, [pc, #284]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d115      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e07f      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032be:	4b41      	ldr	r3, [pc, #260]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e073      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ce:	4b3d      	ldr	r3, [pc, #244]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e06b      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032de:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f023 0203 	bic.w	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	4936      	ldr	r1, [pc, #216]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f0:	f7ff f962 	bl	80025b8 <HAL_GetTick>
 80032f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f6:	e00a      	b.n	800330e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f8:	f7ff f95e 	bl	80025b8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	; 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e053      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	4b2d      	ldr	r3, [pc, #180]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 020c 	and.w	r2, r3, #12
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	429a      	cmp	r2, r3
 800331e:	d1eb      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003320:	4b27      	ldr	r3, [pc, #156]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d210      	bcs.n	8003350 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 0207 	bic.w	r2, r3, #7
 8003336:	4922      	ldr	r1, [pc, #136]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b20      	ldr	r3, [pc, #128]	; (80033c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e032      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800335c:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4916      	ldr	r1, [pc, #88]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d009      	beq.n	800338e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800337a:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	490e      	ldr	r1, [pc, #56]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800338e:	f000 f821 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8003392:	4602      	mov	r2, r0
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	091b      	lsrs	r3, r3, #4
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	490a      	ldr	r1, [pc, #40]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80033a0:	5ccb      	ldrb	r3, [r1, r3]
 80033a2:	fa22 f303 	lsr.w	r3, r2, r3
 80033a6:	4a09      	ldr	r2, [pc, #36]	; (80033cc <HAL_RCC_ClockConfig+0x1cc>)
 80033a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033aa:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCC_ClockConfig+0x1d0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff f8c0 	bl	8002534 <HAL_InitTick>

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40022000 	.word	0x40022000
 80033c4:	40021000 	.word	0x40021000
 80033c8:	08008cc8 	.word	0x08008cc8
 80033cc:	20000280 	.word	0x20000280
 80033d0:	20000284 	.word	0x20000284

080033d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	2300      	movs	r3, #0
 80033e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033ee:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <HAL_RCC_GetSysClockFreq+0x94>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d002      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x30>
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d003      	beq.n	800340a <HAL_RCC_GetSysClockFreq+0x36>
 8003402:	e027      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003404:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_RCC_GetSysClockFreq+0x98>)
 8003406:	613b      	str	r3, [r7, #16]
      break;
 8003408:	e027      	b.n	800345a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	0c9b      	lsrs	r3, r3, #18
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	4a17      	ldr	r2, [pc, #92]	; (8003470 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003414:	5cd3      	ldrb	r3, [r2, r3]
 8003416:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d010      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003422:	4b11      	ldr	r3, [pc, #68]	; (8003468 <HAL_RCC_GetSysClockFreq+0x94>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	0c5b      	lsrs	r3, r3, #17
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	4a11      	ldr	r2, [pc, #68]	; (8003474 <HAL_RCC_GetSysClockFreq+0xa0>)
 800342e:	5cd3      	ldrb	r3, [r2, r3]
 8003430:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a0d      	ldr	r2, [pc, #52]	; (800346c <HAL_RCC_GetSysClockFreq+0x98>)
 8003436:	fb03 f202 	mul.w	r2, r3, r2
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	e004      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003448:	fb02 f303 	mul.w	r3, r2, r3
 800344c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	613b      	str	r3, [r7, #16]
      break;
 8003452:	e002      	b.n	800345a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_GetSysClockFreq+0x98>)
 8003456:	613b      	str	r3, [r7, #16]
      break;
 8003458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800345a:	693b      	ldr	r3, [r7, #16]
}
 800345c:	4618      	mov	r0, r3
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	007a1200 	.word	0x007a1200
 8003470:	08008ce0 	.word	0x08008ce0
 8003474:	08008cf0 	.word	0x08008cf0
 8003478:	003d0900 	.word	0x003d0900

0800347c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003480:	4b02      	ldr	r3, [pc, #8]	; (800348c <HAL_RCC_GetHCLKFreq+0x10>)
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr
 800348c:	20000280 	.word	0x20000280

08003490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003494:	f7ff fff2 	bl	800347c <HAL_RCC_GetHCLKFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4903      	ldr	r1, [pc, #12]	; (80034b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034a6:	5ccb      	ldrb	r3, [r1, r3]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	08008cd8 	.word	0x08008cd8

080034b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034bc:	f7ff ffde 	bl	800347c <HAL_RCC_GetHCLKFreq>
 80034c0:	4602      	mov	r2, r0
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	0adb      	lsrs	r3, r3, #11
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	4903      	ldr	r1, [pc, #12]	; (80034dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ce:	5ccb      	ldrb	r3, [r1, r3]
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40021000 	.word	0x40021000
 80034dc:	08008cd8 	.word	0x08008cd8

080034e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <RCC_Delay+0x34>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0a      	ldr	r2, [pc, #40]	; (8003518 <RCC_Delay+0x38>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	0a5b      	lsrs	r3, r3, #9
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034fc:	bf00      	nop
  }
  while (Delay --);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1e5a      	subs	r2, r3, #1
 8003502:	60fa      	str	r2, [r7, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1f9      	bne.n	80034fc <RCC_Delay+0x1c>
}
 8003508:	bf00      	nop
 800350a:	bf00      	nop
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr
 8003514:	20000280 	.word	0x20000280
 8003518:	10624dd3 	.word	0x10624dd3

0800351c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e042      	b.n	80035b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fe fe24 	bl	8002190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2224      	movs	r2, #36	; 0x24
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800355e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fd7f 	bl	8004064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	; 0x28
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d17c      	bne.n	80036d6 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_UART_Receive+0x2c>
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e075      	b.n	80036d8 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2222      	movs	r2, #34	; 0x22
 80035f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003600:	f7fe ffda 	bl	80025b8 <HAL_GetTick>
 8003604:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	88fa      	ldrh	r2, [r7, #6]
 800360a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361a:	d108      	bne.n	800362e <HAL_UART_Receive+0x72>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d104      	bne.n	800362e <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003624:	2300      	movs	r3, #0
 8003626:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	e003      	b.n	8003636 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003636:	e043      	b.n	80036c0 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2200      	movs	r2, #0
 8003640:	2120      	movs	r1, #32
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fb04 	bl	8003c50 <UART_WaitOnFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e042      	b.n	80036d8 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10c      	bne.n	8003672 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	b29b      	uxth	r3, r3
 8003660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003664:	b29a      	uxth	r2, r3
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	3302      	adds	r3, #2
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	e01f      	b.n	80036b2 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367a:	d007      	beq.n	800368c <HAL_UART_Receive+0xd0>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10a      	bne.n	800369a <HAL_UART_Receive+0xde>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d106      	bne.n	800369a <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	b2da      	uxtb	r2, r3
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	e008      	b.n	80036ac <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3301      	adds	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1b6      	bne.n	8003638 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	e000      	b.n	80036d8 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
  }
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3720      	adds	r7, #32
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b0ba      	sub	sp, #232	; 0xe8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003706:	2300      	movs	r3, #0
 8003708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800371e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10f      	bne.n	8003746 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <HAL_UART_IRQHandler+0x66>
 8003732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fbd1 	bl	8003ee6 <UART_Receive_IT>
      return;
 8003744:	e25b      	b.n	8003bfe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80de 	beq.w	800390c <HAL_UART_IRQHandler+0x22c>
 8003750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800375c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003760:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 80d1 	beq.w	800390c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800376a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <HAL_UART_IRQHandler+0xae>
 8003776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f043 0201 	orr.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800378e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00b      	beq.n	80037b2 <HAL_UART_IRQHandler+0xd2>
 800379a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f043 0202 	orr.w	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <HAL_UART_IRQHandler+0xf6>
 80037be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f043 0204 	orr.w	r2, r3, #4
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d011      	beq.n	8003806 <HAL_UART_IRQHandler+0x126>
 80037e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d105      	bne.n	80037fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f043 0208 	orr.w	r2, r3, #8
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 81f2 	beq.w	8003bf4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_UART_IRQHandler+0x14e>
 800381c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fb5c 	bl	8003ee6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <HAL_UART_IRQHandler+0x17a>
 8003852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003856:	2b00      	cmp	r3, #0
 8003858:	d04f      	beq.n	80038fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fa66 	bl	8003d2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d041      	beq.n	80038f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3314      	adds	r3, #20
 8003874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800388c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3314      	adds	r3, #20
 8003896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800389a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800389e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1d9      	bne.n	800386e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d013      	beq.n	80038ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c6:	4a7e      	ldr	r2, [pc, #504]	; (8003ac0 <HAL_UART_IRQHandler+0x3e0>)
 80038c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe ffe8 	bl	80028a4 <HAL_DMA_Abort_IT>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d016      	beq.n	8003908 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038e4:	4610      	mov	r0, r2
 80038e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e8:	e00e      	b.n	8003908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f99c 	bl	8003c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f0:	e00a      	b.n	8003908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f998 	bl	8003c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f8:	e006      	b.n	8003908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f994 	bl	8003c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003906:	e175      	b.n	8003bf4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003908:	bf00      	nop
    return;
 800390a:	e173      	b.n	8003bf4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	2b01      	cmp	r3, #1
 8003912:	f040 814f 	bne.w	8003bb4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 8148 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8141 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003932:	2300      	movs	r3, #0
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 80b6 	beq.w	8003ac4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003964:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8145 	beq.w	8003bf8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003976:	429a      	cmp	r2, r3
 8003978:	f080 813e 	bcs.w	8003bf8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003982:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b20      	cmp	r3, #32
 800398c:	f000 8088 	beq.w	8003aa0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	330c      	adds	r3, #12
 80039b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039bc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039cc:	e841 2300 	strex	r3, r2, [r1]
 80039d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1d9      	bne.n	8003990 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3314      	adds	r3, #20
 80039e2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3314      	adds	r3, #20
 80039fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a00:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a04:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a0c:	e841 2300 	strex	r3, r2, [r1]
 8003a10:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1e1      	bne.n	80039dc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3314      	adds	r3, #20
 8003a1e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3314      	adds	r3, #20
 8003a38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a3c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a44:	e841 2300 	strex	r3, r2, [r1]
 8003a48:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e3      	bne.n	8003a18 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a70:	f023 0310 	bic.w	r3, r3, #16
 8003a74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a82:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a84:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e3      	bne.n	8003a5e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fec7 	bl	800282e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f8bf 	bl	8003c3a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003abc:	e09c      	b.n	8003bf8 <HAL_UART_IRQHandler+0x518>
 8003abe:	bf00      	nop
 8003ac0:	08003df1 	.word	0x08003df1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 808e 	beq.w	8003bfc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8089 	beq.w	8003bfc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b0e:	647a      	str	r2, [r7, #68]	; 0x44
 8003b10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e3      	bne.n	8003aea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3314      	adds	r3, #20
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	623b      	str	r3, [r7, #32]
   return(result);
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3314      	adds	r3, #20
 8003b42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b46:	633a      	str	r2, [r7, #48]	; 0x30
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e3      	bne.n	8003b22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	330c      	adds	r3, #12
 8003b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0310 	bic.w	r3, r3, #16
 8003b7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	330c      	adds	r3, #12
 8003b88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b8c:	61fa      	str	r2, [r7, #28]
 8003b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	69b9      	ldr	r1, [r7, #24]
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	617b      	str	r3, [r7, #20]
   return(result);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e3      	bne.n	8003b68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ba6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003baa:	4619      	mov	r1, r3
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f844 	bl	8003c3a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bb2:	e023      	b.n	8003bfc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d009      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x4f4>
 8003bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f923 	bl	8003e18 <UART_Transmit_IT>
    return;
 8003bd2:	e014      	b.n	8003bfe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00e      	beq.n	8003bfe <HAL_UART_IRQHandler+0x51e>
 8003be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f962 	bl	8003eb6 <UART_EndTransmit_IT>
    return;
 8003bf2:	e004      	b.n	8003bfe <HAL_UART_IRQHandler+0x51e>
    return;
 8003bf4:	bf00      	nop
 8003bf6:	e002      	b.n	8003bfe <HAL_UART_IRQHandler+0x51e>
      return;
 8003bf8:	bf00      	nop
 8003bfa:	e000      	b.n	8003bfe <HAL_UART_IRQHandler+0x51e>
      return;
 8003bfc:	bf00      	nop
  }
}
 8003bfe:	37e8      	adds	r7, #232	; 0xe8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr

08003c16 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr

08003c3a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	460b      	mov	r3, r1
 8003c44:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b090      	sub	sp, #64	; 0x40
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c60:	e050      	b.n	8003d04 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d04c      	beq.n	8003d04 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c70:	f7fe fca2 	bl	80025b8 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d241      	bcs.n	8003d04 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	330c      	adds	r3, #12
 8003c86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	330c      	adds	r3, #12
 8003c9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ca0:	637a      	str	r2, [r7, #52]	; 0x34
 8003ca2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e5      	bne.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3314      	adds	r3, #20
 8003cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	e853 3f00 	ldrex	r3, [r3]
 8003cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3314      	adds	r3, #20
 8003cd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cd4:	623a      	str	r2, [r7, #32]
 8003cd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd8:	69f9      	ldr	r1, [r7, #28]
 8003cda:	6a3a      	ldr	r2, [r7, #32]
 8003cdc:	e841 2300 	strex	r3, r2, [r1]
 8003ce0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e5      	bne.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e00f      	b.n	8003d24 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d09f      	beq.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3740      	adds	r7, #64	; 0x40
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b095      	sub	sp, #84	; 0x54
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	330c      	adds	r3, #12
 8003d52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d54:	643a      	str	r2, [r7, #64]	; 0x40
 8003d56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e5      	bne.n	8003d34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3314      	adds	r3, #20
 8003d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3314      	adds	r3, #20
 8003d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e5      	bne.n	8003d68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d119      	bne.n	8003dd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	330c      	adds	r3, #12
 8003daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	e853 3f00 	ldrex	r3, [r3]
 8003db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f023 0310 	bic.w	r3, r3, #16
 8003dba:	647b      	str	r3, [r7, #68]	; 0x44
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dc4:	61ba      	str	r2, [r7, #24]
 8003dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc8:	6979      	ldr	r1, [r7, #20]
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	e841 2300 	strex	r3, r2, [r1]
 8003dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e5      	bne.n	8003da4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003de6:	bf00      	nop
 8003de8:	3754      	adds	r7, #84	; 0x54
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f7ff ff0c 	bl	8003c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e10:	bf00      	nop
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b21      	cmp	r3, #33	; 0x21
 8003e2a:	d13e      	bne.n	8003eaa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e34:	d114      	bne.n	8003e60 <UART_Transmit_IT+0x48>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d110      	bne.n	8003e60 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	1c9a      	adds	r2, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	621a      	str	r2, [r3, #32]
 8003e5e:	e008      	b.n	8003e72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	1c59      	adds	r1, r3, #1
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6211      	str	r1, [r2, #32]
 8003e6a:	781a      	ldrb	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	4619      	mov	r1, r3
 8003e80:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10f      	bne.n	8003ea6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	e000      	b.n	8003eac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003eaa:	2302      	movs	r3, #2
  }
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr

08003eb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ecc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff fe94 	bl	8003c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b08c      	sub	sp, #48	; 0x30
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b22      	cmp	r3, #34	; 0x22
 8003ef8:	f040 80ae 	bne.w	8004058 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f04:	d117      	bne.n	8003f36 <UART_Receive_IT+0x50>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d113      	bne.n	8003f36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	1c9a      	adds	r2, r3, #2
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	629a      	str	r2, [r3, #40]	; 0x28
 8003f34:	e026      	b.n	8003f84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f48:	d007      	beq.n	8003f5a <UART_Receive_IT+0x74>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <UART_Receive_IT+0x82>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	e008      	b.n	8003f7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	4619      	mov	r1, r3
 8003f92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d15d      	bne.n	8004054 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0220 	bic.w	r2, r2, #32
 8003fa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d135      	bne.n	800404a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f023 0310 	bic.w	r3, r3, #16
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004004:	623a      	str	r2, [r7, #32]
 8004006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	69f9      	ldr	r1, [r7, #28]
 800400a:	6a3a      	ldr	r2, [r7, #32]
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	61bb      	str	r3, [r7, #24]
   return(result);
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e5      	bne.n	8003fe4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	2b10      	cmp	r3, #16
 8004024:	d10a      	bne.n	800403c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004040:	4619      	mov	r1, r3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff fdf9 	bl	8003c3a <HAL_UARTEx_RxEventCallback>
 8004048:	e002      	b.n	8004050 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff fde3 	bl	8003c16 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	e002      	b.n	800405a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e000      	b.n	800405a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004058:	2302      	movs	r3, #2
  }
}
 800405a:	4618      	mov	r0, r3
 800405c:	3730      	adds	r7, #48	; 0x30
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800409e:	f023 030c 	bic.w	r3, r3, #12
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6812      	ldr	r2, [r2, #0]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	430b      	orrs	r3, r1
 80040aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a2c      	ldr	r2, [pc, #176]	; (8004178 <UART_SetConfig+0x114>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d103      	bne.n	80040d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040cc:	f7ff f9f4 	bl	80034b8 <HAL_RCC_GetPCLK2Freq>
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	e002      	b.n	80040da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040d4:	f7ff f9dc 	bl	8003490 <HAL_RCC_GetPCLK1Freq>
 80040d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009a      	lsls	r2, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	4a22      	ldr	r2, [pc, #136]	; (800417c <UART_SetConfig+0x118>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	0119      	lsls	r1, r3, #4
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009a      	lsls	r2, r3, #2
 8004104:	441a      	add	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <UART_SetConfig+0x118>)
 8004112:	fba3 0302 	umull	r0, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2064      	movs	r0, #100	; 0x64
 800411a:	fb00 f303 	mul.w	r3, r0, r3
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	3332      	adds	r3, #50	; 0x32
 8004124:	4a15      	ldr	r2, [pc, #84]	; (800417c <UART_SetConfig+0x118>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004130:	4419      	add	r1, r3
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009a      	lsls	r2, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	fbb2 f2f3 	udiv	r2, r2, r3
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <UART_SetConfig+0x118>)
 800414a:	fba3 0302 	umull	r0, r3, r3, r2
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2064      	movs	r0, #100	; 0x64
 8004152:	fb00 f303 	mul.w	r3, r0, r3
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	3332      	adds	r3, #50	; 0x32
 800415c:	4a07      	ldr	r2, [pc, #28]	; (800417c <UART_SetConfig+0x118>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	f003 020f 	and.w	r2, r3, #15
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	440a      	add	r2, r1
 800416e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40013800 	.word	0x40013800
 800417c:	51eb851f 	.word	0x51eb851f

08004180 <calloc>:
 8004180:	4b02      	ldr	r3, [pc, #8]	; (800418c <calloc+0xc>)
 8004182:	460a      	mov	r2, r1
 8004184:	4601      	mov	r1, r0
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	f000 b84e 	b.w	8004228 <_calloc_r>
 800418c:	2000028c 	.word	0x2000028c

08004190 <__errno>:
 8004190:	4b01      	ldr	r3, [pc, #4]	; (8004198 <__errno+0x8>)
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	2000028c 	.word	0x2000028c

0800419c <__libc_init_array>:
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	2600      	movs	r6, #0
 80041a0:	4d0c      	ldr	r5, [pc, #48]	; (80041d4 <__libc_init_array+0x38>)
 80041a2:	4c0d      	ldr	r4, [pc, #52]	; (80041d8 <__libc_init_array+0x3c>)
 80041a4:	1b64      	subs	r4, r4, r5
 80041a6:	10a4      	asrs	r4, r4, #2
 80041a8:	42a6      	cmp	r6, r4
 80041aa:	d109      	bne.n	80041c0 <__libc_init_array+0x24>
 80041ac:	f004 fc50 	bl	8008a50 <_init>
 80041b0:	2600      	movs	r6, #0
 80041b2:	4d0a      	ldr	r5, [pc, #40]	; (80041dc <__libc_init_array+0x40>)
 80041b4:	4c0a      	ldr	r4, [pc, #40]	; (80041e0 <__libc_init_array+0x44>)
 80041b6:	1b64      	subs	r4, r4, r5
 80041b8:	10a4      	asrs	r4, r4, #2
 80041ba:	42a6      	cmp	r6, r4
 80041bc:	d105      	bne.n	80041ca <__libc_init_array+0x2e>
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c4:	4798      	blx	r3
 80041c6:	3601      	adds	r6, #1
 80041c8:	e7ee      	b.n	80041a8 <__libc_init_array+0xc>
 80041ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ce:	4798      	blx	r3
 80041d0:	3601      	adds	r6, #1
 80041d2:	e7f2      	b.n	80041ba <__libc_init_array+0x1e>
 80041d4:	080091a4 	.word	0x080091a4
 80041d8:	080091a4 	.word	0x080091a4
 80041dc:	080091a4 	.word	0x080091a4
 80041e0:	080091a8 	.word	0x080091a8

080041e4 <__retarget_lock_init_recursive>:
 80041e4:	4770      	bx	lr

080041e6 <__retarget_lock_acquire_recursive>:
 80041e6:	4770      	bx	lr

080041e8 <__retarget_lock_release_recursive>:
 80041e8:	4770      	bx	lr
	...

080041ec <malloc>:
 80041ec:	4b02      	ldr	r3, [pc, #8]	; (80041f8 <malloc+0xc>)
 80041ee:	4601      	mov	r1, r0
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	f000 b895 	b.w	8004320 <_malloc_r>
 80041f6:	bf00      	nop
 80041f8:	2000028c 	.word	0x2000028c

080041fc <memcpy>:
 80041fc:	440a      	add	r2, r1
 80041fe:	4291      	cmp	r1, r2
 8004200:	f100 33ff 	add.w	r3, r0, #4294967295
 8004204:	d100      	bne.n	8004208 <memcpy+0xc>
 8004206:	4770      	bx	lr
 8004208:	b510      	push	{r4, lr}
 800420a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800420e:	4291      	cmp	r1, r2
 8004210:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004214:	d1f9      	bne.n	800420a <memcpy+0xe>
 8004216:	bd10      	pop	{r4, pc}

08004218 <memset>:
 8004218:	4603      	mov	r3, r0
 800421a:	4402      	add	r2, r0
 800421c:	4293      	cmp	r3, r2
 800421e:	d100      	bne.n	8004222 <memset+0xa>
 8004220:	4770      	bx	lr
 8004222:	f803 1b01 	strb.w	r1, [r3], #1
 8004226:	e7f9      	b.n	800421c <memset+0x4>

08004228 <_calloc_r>:
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	fba1 5402 	umull	r5, r4, r1, r2
 800422e:	b934      	cbnz	r4, 800423e <_calloc_r+0x16>
 8004230:	4629      	mov	r1, r5
 8004232:	f000 f875 	bl	8004320 <_malloc_r>
 8004236:	4606      	mov	r6, r0
 8004238:	b928      	cbnz	r0, 8004246 <_calloc_r+0x1e>
 800423a:	4630      	mov	r0, r6
 800423c:	bd70      	pop	{r4, r5, r6, pc}
 800423e:	220c      	movs	r2, #12
 8004240:	2600      	movs	r6, #0
 8004242:	6002      	str	r2, [r0, #0]
 8004244:	e7f9      	b.n	800423a <_calloc_r+0x12>
 8004246:	462a      	mov	r2, r5
 8004248:	4621      	mov	r1, r4
 800424a:	f7ff ffe5 	bl	8004218 <memset>
 800424e:	e7f4      	b.n	800423a <_calloc_r+0x12>

08004250 <_free_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4605      	mov	r5, r0
 8004254:	2900      	cmp	r1, #0
 8004256:	d040      	beq.n	80042da <_free_r+0x8a>
 8004258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800425c:	1f0c      	subs	r4, r1, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	bfb8      	it	lt
 8004262:	18e4      	addlt	r4, r4, r3
 8004264:	f003 fa1e 	bl	80076a4 <__malloc_lock>
 8004268:	4a1c      	ldr	r2, [pc, #112]	; (80042dc <_free_r+0x8c>)
 800426a:	6813      	ldr	r3, [r2, #0]
 800426c:	b933      	cbnz	r3, 800427c <_free_r+0x2c>
 800426e:	6063      	str	r3, [r4, #4]
 8004270:	6014      	str	r4, [r2, #0]
 8004272:	4628      	mov	r0, r5
 8004274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004278:	f003 ba1a 	b.w	80076b0 <__malloc_unlock>
 800427c:	42a3      	cmp	r3, r4
 800427e:	d908      	bls.n	8004292 <_free_r+0x42>
 8004280:	6820      	ldr	r0, [r4, #0]
 8004282:	1821      	adds	r1, r4, r0
 8004284:	428b      	cmp	r3, r1
 8004286:	bf01      	itttt	eq
 8004288:	6819      	ldreq	r1, [r3, #0]
 800428a:	685b      	ldreq	r3, [r3, #4]
 800428c:	1809      	addeq	r1, r1, r0
 800428e:	6021      	streq	r1, [r4, #0]
 8004290:	e7ed      	b.n	800426e <_free_r+0x1e>
 8004292:	461a      	mov	r2, r3
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	b10b      	cbz	r3, 800429c <_free_r+0x4c>
 8004298:	42a3      	cmp	r3, r4
 800429a:	d9fa      	bls.n	8004292 <_free_r+0x42>
 800429c:	6811      	ldr	r1, [r2, #0]
 800429e:	1850      	adds	r0, r2, r1
 80042a0:	42a0      	cmp	r0, r4
 80042a2:	d10b      	bne.n	80042bc <_free_r+0x6c>
 80042a4:	6820      	ldr	r0, [r4, #0]
 80042a6:	4401      	add	r1, r0
 80042a8:	1850      	adds	r0, r2, r1
 80042aa:	4283      	cmp	r3, r0
 80042ac:	6011      	str	r1, [r2, #0]
 80042ae:	d1e0      	bne.n	8004272 <_free_r+0x22>
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4401      	add	r1, r0
 80042b6:	6011      	str	r1, [r2, #0]
 80042b8:	6053      	str	r3, [r2, #4]
 80042ba:	e7da      	b.n	8004272 <_free_r+0x22>
 80042bc:	d902      	bls.n	80042c4 <_free_r+0x74>
 80042be:	230c      	movs	r3, #12
 80042c0:	602b      	str	r3, [r5, #0]
 80042c2:	e7d6      	b.n	8004272 <_free_r+0x22>
 80042c4:	6820      	ldr	r0, [r4, #0]
 80042c6:	1821      	adds	r1, r4, r0
 80042c8:	428b      	cmp	r3, r1
 80042ca:	bf01      	itttt	eq
 80042cc:	6819      	ldreq	r1, [r3, #0]
 80042ce:	685b      	ldreq	r3, [r3, #4]
 80042d0:	1809      	addeq	r1, r1, r0
 80042d2:	6021      	streq	r1, [r4, #0]
 80042d4:	6063      	str	r3, [r4, #4]
 80042d6:	6054      	str	r4, [r2, #4]
 80042d8:	e7cb      	b.n	8004272 <_free_r+0x22>
 80042da:	bd38      	pop	{r3, r4, r5, pc}
 80042dc:	2000051c 	.word	0x2000051c

080042e0 <sbrk_aligned>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	4e0e      	ldr	r6, [pc, #56]	; (800431c <sbrk_aligned+0x3c>)
 80042e4:	460c      	mov	r4, r1
 80042e6:	6831      	ldr	r1, [r6, #0]
 80042e8:	4605      	mov	r5, r0
 80042ea:	b911      	cbnz	r1, 80042f2 <sbrk_aligned+0x12>
 80042ec:	f000 fefa 	bl	80050e4 <_sbrk_r>
 80042f0:	6030      	str	r0, [r6, #0]
 80042f2:	4621      	mov	r1, r4
 80042f4:	4628      	mov	r0, r5
 80042f6:	f000 fef5 	bl	80050e4 <_sbrk_r>
 80042fa:	1c43      	adds	r3, r0, #1
 80042fc:	d00a      	beq.n	8004314 <sbrk_aligned+0x34>
 80042fe:	1cc4      	adds	r4, r0, #3
 8004300:	f024 0403 	bic.w	r4, r4, #3
 8004304:	42a0      	cmp	r0, r4
 8004306:	d007      	beq.n	8004318 <sbrk_aligned+0x38>
 8004308:	1a21      	subs	r1, r4, r0
 800430a:	4628      	mov	r0, r5
 800430c:	f000 feea 	bl	80050e4 <_sbrk_r>
 8004310:	3001      	adds	r0, #1
 8004312:	d101      	bne.n	8004318 <sbrk_aligned+0x38>
 8004314:	f04f 34ff 	mov.w	r4, #4294967295
 8004318:	4620      	mov	r0, r4
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	20000520 	.word	0x20000520

08004320 <_malloc_r>:
 8004320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004324:	1ccd      	adds	r5, r1, #3
 8004326:	f025 0503 	bic.w	r5, r5, #3
 800432a:	3508      	adds	r5, #8
 800432c:	2d0c      	cmp	r5, #12
 800432e:	bf38      	it	cc
 8004330:	250c      	movcc	r5, #12
 8004332:	2d00      	cmp	r5, #0
 8004334:	4607      	mov	r7, r0
 8004336:	db01      	blt.n	800433c <_malloc_r+0x1c>
 8004338:	42a9      	cmp	r1, r5
 800433a:	d905      	bls.n	8004348 <_malloc_r+0x28>
 800433c:	230c      	movs	r3, #12
 800433e:	2600      	movs	r6, #0
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	4630      	mov	r0, r6
 8004344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004348:	4e2e      	ldr	r6, [pc, #184]	; (8004404 <_malloc_r+0xe4>)
 800434a:	f003 f9ab 	bl	80076a4 <__malloc_lock>
 800434e:	6833      	ldr	r3, [r6, #0]
 8004350:	461c      	mov	r4, r3
 8004352:	bb34      	cbnz	r4, 80043a2 <_malloc_r+0x82>
 8004354:	4629      	mov	r1, r5
 8004356:	4638      	mov	r0, r7
 8004358:	f7ff ffc2 	bl	80042e0 <sbrk_aligned>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	4604      	mov	r4, r0
 8004360:	d14d      	bne.n	80043fe <_malloc_r+0xde>
 8004362:	6834      	ldr	r4, [r6, #0]
 8004364:	4626      	mov	r6, r4
 8004366:	2e00      	cmp	r6, #0
 8004368:	d140      	bne.n	80043ec <_malloc_r+0xcc>
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	4631      	mov	r1, r6
 800436e:	4638      	mov	r0, r7
 8004370:	eb04 0803 	add.w	r8, r4, r3
 8004374:	f000 feb6 	bl	80050e4 <_sbrk_r>
 8004378:	4580      	cmp	r8, r0
 800437a:	d13a      	bne.n	80043f2 <_malloc_r+0xd2>
 800437c:	6821      	ldr	r1, [r4, #0]
 800437e:	3503      	adds	r5, #3
 8004380:	1a6d      	subs	r5, r5, r1
 8004382:	f025 0503 	bic.w	r5, r5, #3
 8004386:	3508      	adds	r5, #8
 8004388:	2d0c      	cmp	r5, #12
 800438a:	bf38      	it	cc
 800438c:	250c      	movcc	r5, #12
 800438e:	4638      	mov	r0, r7
 8004390:	4629      	mov	r1, r5
 8004392:	f7ff ffa5 	bl	80042e0 <sbrk_aligned>
 8004396:	3001      	adds	r0, #1
 8004398:	d02b      	beq.n	80043f2 <_malloc_r+0xd2>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	442b      	add	r3, r5
 800439e:	6023      	str	r3, [r4, #0]
 80043a0:	e00e      	b.n	80043c0 <_malloc_r+0xa0>
 80043a2:	6822      	ldr	r2, [r4, #0]
 80043a4:	1b52      	subs	r2, r2, r5
 80043a6:	d41e      	bmi.n	80043e6 <_malloc_r+0xc6>
 80043a8:	2a0b      	cmp	r2, #11
 80043aa:	d916      	bls.n	80043da <_malloc_r+0xba>
 80043ac:	1961      	adds	r1, r4, r5
 80043ae:	42a3      	cmp	r3, r4
 80043b0:	6025      	str	r5, [r4, #0]
 80043b2:	bf18      	it	ne
 80043b4:	6059      	strne	r1, [r3, #4]
 80043b6:	6863      	ldr	r3, [r4, #4]
 80043b8:	bf08      	it	eq
 80043ba:	6031      	streq	r1, [r6, #0]
 80043bc:	5162      	str	r2, [r4, r5]
 80043be:	604b      	str	r3, [r1, #4]
 80043c0:	4638      	mov	r0, r7
 80043c2:	f104 060b 	add.w	r6, r4, #11
 80043c6:	f003 f973 	bl	80076b0 <__malloc_unlock>
 80043ca:	f026 0607 	bic.w	r6, r6, #7
 80043ce:	1d23      	adds	r3, r4, #4
 80043d0:	1af2      	subs	r2, r6, r3
 80043d2:	d0b6      	beq.n	8004342 <_malloc_r+0x22>
 80043d4:	1b9b      	subs	r3, r3, r6
 80043d6:	50a3      	str	r3, [r4, r2]
 80043d8:	e7b3      	b.n	8004342 <_malloc_r+0x22>
 80043da:	6862      	ldr	r2, [r4, #4]
 80043dc:	42a3      	cmp	r3, r4
 80043de:	bf0c      	ite	eq
 80043e0:	6032      	streq	r2, [r6, #0]
 80043e2:	605a      	strne	r2, [r3, #4]
 80043e4:	e7ec      	b.n	80043c0 <_malloc_r+0xa0>
 80043e6:	4623      	mov	r3, r4
 80043e8:	6864      	ldr	r4, [r4, #4]
 80043ea:	e7b2      	b.n	8004352 <_malloc_r+0x32>
 80043ec:	4634      	mov	r4, r6
 80043ee:	6876      	ldr	r6, [r6, #4]
 80043f0:	e7b9      	b.n	8004366 <_malloc_r+0x46>
 80043f2:	230c      	movs	r3, #12
 80043f4:	4638      	mov	r0, r7
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	f003 f95a 	bl	80076b0 <__malloc_unlock>
 80043fc:	e7a1      	b.n	8004342 <_malloc_r+0x22>
 80043fe:	6025      	str	r5, [r4, #0]
 8004400:	e7de      	b.n	80043c0 <_malloc_r+0xa0>
 8004402:	bf00      	nop
 8004404:	2000051c 	.word	0x2000051c

08004408 <__cvt>:
 8004408:	2b00      	cmp	r3, #0
 800440a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800440e:	461f      	mov	r7, r3
 8004410:	bfbb      	ittet	lt
 8004412:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004416:	461f      	movlt	r7, r3
 8004418:	2300      	movge	r3, #0
 800441a:	232d      	movlt	r3, #45	; 0x2d
 800441c:	b088      	sub	sp, #32
 800441e:	4614      	mov	r4, r2
 8004420:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004422:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004424:	7013      	strb	r3, [r2, #0]
 8004426:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004428:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800442c:	f023 0820 	bic.w	r8, r3, #32
 8004430:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004434:	d005      	beq.n	8004442 <__cvt+0x3a>
 8004436:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800443a:	d100      	bne.n	800443e <__cvt+0x36>
 800443c:	3501      	adds	r5, #1
 800443e:	2302      	movs	r3, #2
 8004440:	e000      	b.n	8004444 <__cvt+0x3c>
 8004442:	2303      	movs	r3, #3
 8004444:	aa07      	add	r2, sp, #28
 8004446:	9204      	str	r2, [sp, #16]
 8004448:	aa06      	add	r2, sp, #24
 800444a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800444e:	e9cd 3500 	strd	r3, r5, [sp]
 8004452:	4622      	mov	r2, r4
 8004454:	463b      	mov	r3, r7
 8004456:	f001 fd93 	bl	8005f80 <_dtoa_r>
 800445a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800445e:	4606      	mov	r6, r0
 8004460:	d102      	bne.n	8004468 <__cvt+0x60>
 8004462:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004464:	07db      	lsls	r3, r3, #31
 8004466:	d522      	bpl.n	80044ae <__cvt+0xa6>
 8004468:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800446c:	eb06 0905 	add.w	r9, r6, r5
 8004470:	d110      	bne.n	8004494 <__cvt+0x8c>
 8004472:	7833      	ldrb	r3, [r6, #0]
 8004474:	2b30      	cmp	r3, #48	; 0x30
 8004476:	d10a      	bne.n	800448e <__cvt+0x86>
 8004478:	2200      	movs	r2, #0
 800447a:	2300      	movs	r3, #0
 800447c:	4620      	mov	r0, r4
 800447e:	4639      	mov	r1, r7
 8004480:	f7fc fa92 	bl	80009a8 <__aeabi_dcmpeq>
 8004484:	b918      	cbnz	r0, 800448e <__cvt+0x86>
 8004486:	f1c5 0501 	rsb	r5, r5, #1
 800448a:	f8ca 5000 	str.w	r5, [sl]
 800448e:	f8da 3000 	ldr.w	r3, [sl]
 8004492:	4499      	add	r9, r3
 8004494:	2200      	movs	r2, #0
 8004496:	2300      	movs	r3, #0
 8004498:	4620      	mov	r0, r4
 800449a:	4639      	mov	r1, r7
 800449c:	f7fc fa84 	bl	80009a8 <__aeabi_dcmpeq>
 80044a0:	b108      	cbz	r0, 80044a6 <__cvt+0x9e>
 80044a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80044a6:	2230      	movs	r2, #48	; 0x30
 80044a8:	9b07      	ldr	r3, [sp, #28]
 80044aa:	454b      	cmp	r3, r9
 80044ac:	d307      	bcc.n	80044be <__cvt+0xb6>
 80044ae:	4630      	mov	r0, r6
 80044b0:	9b07      	ldr	r3, [sp, #28]
 80044b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80044b4:	1b9b      	subs	r3, r3, r6
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	b008      	add	sp, #32
 80044ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044be:	1c59      	adds	r1, r3, #1
 80044c0:	9107      	str	r1, [sp, #28]
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	e7f0      	b.n	80044a8 <__cvt+0xa0>

080044c6 <__exponent>:
 80044c6:	4603      	mov	r3, r0
 80044c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044ca:	2900      	cmp	r1, #0
 80044cc:	f803 2b02 	strb.w	r2, [r3], #2
 80044d0:	bfb6      	itet	lt
 80044d2:	222d      	movlt	r2, #45	; 0x2d
 80044d4:	222b      	movge	r2, #43	; 0x2b
 80044d6:	4249      	neglt	r1, r1
 80044d8:	2909      	cmp	r1, #9
 80044da:	7042      	strb	r2, [r0, #1]
 80044dc:	dd2b      	ble.n	8004536 <__exponent+0x70>
 80044de:	f10d 0407 	add.w	r4, sp, #7
 80044e2:	46a4      	mov	ip, r4
 80044e4:	270a      	movs	r7, #10
 80044e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80044ea:	460a      	mov	r2, r1
 80044ec:	46a6      	mov	lr, r4
 80044ee:	fb07 1516 	mls	r5, r7, r6, r1
 80044f2:	2a63      	cmp	r2, #99	; 0x63
 80044f4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80044f8:	4631      	mov	r1, r6
 80044fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80044fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004502:	dcf0      	bgt.n	80044e6 <__exponent+0x20>
 8004504:	3130      	adds	r1, #48	; 0x30
 8004506:	f1ae 0502 	sub.w	r5, lr, #2
 800450a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800450e:	4629      	mov	r1, r5
 8004510:	1c44      	adds	r4, r0, #1
 8004512:	4561      	cmp	r1, ip
 8004514:	d30a      	bcc.n	800452c <__exponent+0x66>
 8004516:	f10d 0209 	add.w	r2, sp, #9
 800451a:	eba2 020e 	sub.w	r2, r2, lr
 800451e:	4565      	cmp	r5, ip
 8004520:	bf88      	it	hi
 8004522:	2200      	movhi	r2, #0
 8004524:	4413      	add	r3, r2
 8004526:	1a18      	subs	r0, r3, r0
 8004528:	b003      	add	sp, #12
 800452a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800452c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004530:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004534:	e7ed      	b.n	8004512 <__exponent+0x4c>
 8004536:	2330      	movs	r3, #48	; 0x30
 8004538:	3130      	adds	r1, #48	; 0x30
 800453a:	7083      	strb	r3, [r0, #2]
 800453c:	70c1      	strb	r1, [r0, #3]
 800453e:	1d03      	adds	r3, r0, #4
 8004540:	e7f1      	b.n	8004526 <__exponent+0x60>
	...

08004544 <_printf_float>:
 8004544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004548:	b091      	sub	sp, #68	; 0x44
 800454a:	460c      	mov	r4, r1
 800454c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004550:	4616      	mov	r6, r2
 8004552:	461f      	mov	r7, r3
 8004554:	4605      	mov	r5, r0
 8004556:	f003 f81b 	bl	8007590 <_localeconv_r>
 800455a:	6803      	ldr	r3, [r0, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	9309      	str	r3, [sp, #36]	; 0x24
 8004560:	f7fb fdf6 	bl	8000150 <strlen>
 8004564:	2300      	movs	r3, #0
 8004566:	930e      	str	r3, [sp, #56]	; 0x38
 8004568:	f8d8 3000 	ldr.w	r3, [r8]
 800456c:	900a      	str	r0, [sp, #40]	; 0x28
 800456e:	3307      	adds	r3, #7
 8004570:	f023 0307 	bic.w	r3, r3, #7
 8004574:	f103 0208 	add.w	r2, r3, #8
 8004578:	f894 9018 	ldrb.w	r9, [r4, #24]
 800457c:	f8d4 b000 	ldr.w	fp, [r4]
 8004580:	f8c8 2000 	str.w	r2, [r8]
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800458c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004590:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004594:	930b      	str	r3, [sp, #44]	; 0x2c
 8004596:	f04f 32ff 	mov.w	r2, #4294967295
 800459a:	4640      	mov	r0, r8
 800459c:	4b9c      	ldr	r3, [pc, #624]	; (8004810 <_printf_float+0x2cc>)
 800459e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045a0:	f7fc fa34 	bl	8000a0c <__aeabi_dcmpun>
 80045a4:	bb70      	cbnz	r0, 8004604 <_printf_float+0xc0>
 80045a6:	f04f 32ff 	mov.w	r2, #4294967295
 80045aa:	4640      	mov	r0, r8
 80045ac:	4b98      	ldr	r3, [pc, #608]	; (8004810 <_printf_float+0x2cc>)
 80045ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045b0:	f7fc fa0e 	bl	80009d0 <__aeabi_dcmple>
 80045b4:	bb30      	cbnz	r0, 8004604 <_printf_float+0xc0>
 80045b6:	2200      	movs	r2, #0
 80045b8:	2300      	movs	r3, #0
 80045ba:	4640      	mov	r0, r8
 80045bc:	4651      	mov	r1, sl
 80045be:	f7fc f9fd 	bl	80009bc <__aeabi_dcmplt>
 80045c2:	b110      	cbz	r0, 80045ca <_printf_float+0x86>
 80045c4:	232d      	movs	r3, #45	; 0x2d
 80045c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ca:	4b92      	ldr	r3, [pc, #584]	; (8004814 <_printf_float+0x2d0>)
 80045cc:	4892      	ldr	r0, [pc, #584]	; (8004818 <_printf_float+0x2d4>)
 80045ce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80045d2:	bf94      	ite	ls
 80045d4:	4698      	movls	r8, r3
 80045d6:	4680      	movhi	r8, r0
 80045d8:	2303      	movs	r3, #3
 80045da:	f04f 0a00 	mov.w	sl, #0
 80045de:	6123      	str	r3, [r4, #16]
 80045e0:	f02b 0304 	bic.w	r3, fp, #4
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	4633      	mov	r3, r6
 80045e8:	4621      	mov	r1, r4
 80045ea:	4628      	mov	r0, r5
 80045ec:	9700      	str	r7, [sp, #0]
 80045ee:	aa0f      	add	r2, sp, #60	; 0x3c
 80045f0:	f000 f9d4 	bl	800499c <_printf_common>
 80045f4:	3001      	adds	r0, #1
 80045f6:	f040 8090 	bne.w	800471a <_printf_float+0x1d6>
 80045fa:	f04f 30ff 	mov.w	r0, #4294967295
 80045fe:	b011      	add	sp, #68	; 0x44
 8004600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004604:	4642      	mov	r2, r8
 8004606:	4653      	mov	r3, sl
 8004608:	4640      	mov	r0, r8
 800460a:	4651      	mov	r1, sl
 800460c:	f7fc f9fe 	bl	8000a0c <__aeabi_dcmpun>
 8004610:	b148      	cbz	r0, 8004626 <_printf_float+0xe2>
 8004612:	f1ba 0f00 	cmp.w	sl, #0
 8004616:	bfb8      	it	lt
 8004618:	232d      	movlt	r3, #45	; 0x2d
 800461a:	4880      	ldr	r0, [pc, #512]	; (800481c <_printf_float+0x2d8>)
 800461c:	bfb8      	it	lt
 800461e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004622:	4b7f      	ldr	r3, [pc, #508]	; (8004820 <_printf_float+0x2dc>)
 8004624:	e7d3      	b.n	80045ce <_printf_float+0x8a>
 8004626:	6863      	ldr	r3, [r4, #4]
 8004628:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	d142      	bne.n	80046b6 <_printf_float+0x172>
 8004630:	2306      	movs	r3, #6
 8004632:	6063      	str	r3, [r4, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	9206      	str	r2, [sp, #24]
 8004638:	aa0e      	add	r2, sp, #56	; 0x38
 800463a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800463e:	aa0d      	add	r2, sp, #52	; 0x34
 8004640:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004644:	9203      	str	r2, [sp, #12]
 8004646:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800464a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800464e:	6023      	str	r3, [r4, #0]
 8004650:	6863      	ldr	r3, [r4, #4]
 8004652:	4642      	mov	r2, r8
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	4628      	mov	r0, r5
 8004658:	4653      	mov	r3, sl
 800465a:	910b      	str	r1, [sp, #44]	; 0x2c
 800465c:	f7ff fed4 	bl	8004408 <__cvt>
 8004660:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004662:	4680      	mov	r8, r0
 8004664:	2947      	cmp	r1, #71	; 0x47
 8004666:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004668:	d108      	bne.n	800467c <_printf_float+0x138>
 800466a:	1cc8      	adds	r0, r1, #3
 800466c:	db02      	blt.n	8004674 <_printf_float+0x130>
 800466e:	6863      	ldr	r3, [r4, #4]
 8004670:	4299      	cmp	r1, r3
 8004672:	dd40      	ble.n	80046f6 <_printf_float+0x1b2>
 8004674:	f1a9 0902 	sub.w	r9, r9, #2
 8004678:	fa5f f989 	uxtb.w	r9, r9
 800467c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004680:	d81f      	bhi.n	80046c2 <_printf_float+0x17e>
 8004682:	464a      	mov	r2, r9
 8004684:	3901      	subs	r1, #1
 8004686:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800468a:	910d      	str	r1, [sp, #52]	; 0x34
 800468c:	f7ff ff1b 	bl	80044c6 <__exponent>
 8004690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004692:	4682      	mov	sl, r0
 8004694:	1813      	adds	r3, r2, r0
 8004696:	2a01      	cmp	r2, #1
 8004698:	6123      	str	r3, [r4, #16]
 800469a:	dc02      	bgt.n	80046a2 <_printf_float+0x15e>
 800469c:	6822      	ldr	r2, [r4, #0]
 800469e:	07d2      	lsls	r2, r2, #31
 80046a0:	d501      	bpl.n	80046a6 <_printf_float+0x162>
 80046a2:	3301      	adds	r3, #1
 80046a4:	6123      	str	r3, [r4, #16]
 80046a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d09b      	beq.n	80045e6 <_printf_float+0xa2>
 80046ae:	232d      	movs	r3, #45	; 0x2d
 80046b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b4:	e797      	b.n	80045e6 <_printf_float+0xa2>
 80046b6:	2947      	cmp	r1, #71	; 0x47
 80046b8:	d1bc      	bne.n	8004634 <_printf_float+0xf0>
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ba      	bne.n	8004634 <_printf_float+0xf0>
 80046be:	2301      	movs	r3, #1
 80046c0:	e7b7      	b.n	8004632 <_printf_float+0xee>
 80046c2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80046c6:	d118      	bne.n	80046fa <_printf_float+0x1b6>
 80046c8:	2900      	cmp	r1, #0
 80046ca:	6863      	ldr	r3, [r4, #4]
 80046cc:	dd0b      	ble.n	80046e6 <_printf_float+0x1a2>
 80046ce:	6121      	str	r1, [r4, #16]
 80046d0:	b913      	cbnz	r3, 80046d8 <_printf_float+0x194>
 80046d2:	6822      	ldr	r2, [r4, #0]
 80046d4:	07d0      	lsls	r0, r2, #31
 80046d6:	d502      	bpl.n	80046de <_printf_float+0x19a>
 80046d8:	3301      	adds	r3, #1
 80046da:	440b      	add	r3, r1
 80046dc:	6123      	str	r3, [r4, #16]
 80046de:	f04f 0a00 	mov.w	sl, #0
 80046e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80046e4:	e7df      	b.n	80046a6 <_printf_float+0x162>
 80046e6:	b913      	cbnz	r3, 80046ee <_printf_float+0x1aa>
 80046e8:	6822      	ldr	r2, [r4, #0]
 80046ea:	07d2      	lsls	r2, r2, #31
 80046ec:	d501      	bpl.n	80046f2 <_printf_float+0x1ae>
 80046ee:	3302      	adds	r3, #2
 80046f0:	e7f4      	b.n	80046dc <_printf_float+0x198>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e7f2      	b.n	80046dc <_printf_float+0x198>
 80046f6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80046fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046fc:	4299      	cmp	r1, r3
 80046fe:	db05      	blt.n	800470c <_printf_float+0x1c8>
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	6121      	str	r1, [r4, #16]
 8004704:	07d8      	lsls	r0, r3, #31
 8004706:	d5ea      	bpl.n	80046de <_printf_float+0x19a>
 8004708:	1c4b      	adds	r3, r1, #1
 800470a:	e7e7      	b.n	80046dc <_printf_float+0x198>
 800470c:	2900      	cmp	r1, #0
 800470e:	bfcc      	ite	gt
 8004710:	2201      	movgt	r2, #1
 8004712:	f1c1 0202 	rsble	r2, r1, #2
 8004716:	4413      	add	r3, r2
 8004718:	e7e0      	b.n	80046dc <_printf_float+0x198>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	055a      	lsls	r2, r3, #21
 800471e:	d407      	bmi.n	8004730 <_printf_float+0x1ec>
 8004720:	6923      	ldr	r3, [r4, #16]
 8004722:	4642      	mov	r2, r8
 8004724:	4631      	mov	r1, r6
 8004726:	4628      	mov	r0, r5
 8004728:	47b8      	blx	r7
 800472a:	3001      	adds	r0, #1
 800472c:	d12b      	bne.n	8004786 <_printf_float+0x242>
 800472e:	e764      	b.n	80045fa <_printf_float+0xb6>
 8004730:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004734:	f240 80dd 	bls.w	80048f2 <_printf_float+0x3ae>
 8004738:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800473c:	2200      	movs	r2, #0
 800473e:	2300      	movs	r3, #0
 8004740:	f7fc f932 	bl	80009a8 <__aeabi_dcmpeq>
 8004744:	2800      	cmp	r0, #0
 8004746:	d033      	beq.n	80047b0 <_printf_float+0x26c>
 8004748:	2301      	movs	r3, #1
 800474a:	4631      	mov	r1, r6
 800474c:	4628      	mov	r0, r5
 800474e:	4a35      	ldr	r2, [pc, #212]	; (8004824 <_printf_float+0x2e0>)
 8004750:	47b8      	blx	r7
 8004752:	3001      	adds	r0, #1
 8004754:	f43f af51 	beq.w	80045fa <_printf_float+0xb6>
 8004758:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800475c:	429a      	cmp	r2, r3
 800475e:	db02      	blt.n	8004766 <_printf_float+0x222>
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	07d8      	lsls	r0, r3, #31
 8004764:	d50f      	bpl.n	8004786 <_printf_float+0x242>
 8004766:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800476a:	4631      	mov	r1, r6
 800476c:	4628      	mov	r0, r5
 800476e:	47b8      	blx	r7
 8004770:	3001      	adds	r0, #1
 8004772:	f43f af42 	beq.w	80045fa <_printf_float+0xb6>
 8004776:	f04f 0800 	mov.w	r8, #0
 800477a:	f104 091a 	add.w	r9, r4, #26
 800477e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004780:	3b01      	subs	r3, #1
 8004782:	4543      	cmp	r3, r8
 8004784:	dc09      	bgt.n	800479a <_printf_float+0x256>
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	079b      	lsls	r3, r3, #30
 800478a:	f100 8102 	bmi.w	8004992 <_printf_float+0x44e>
 800478e:	68e0      	ldr	r0, [r4, #12]
 8004790:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004792:	4298      	cmp	r0, r3
 8004794:	bfb8      	it	lt
 8004796:	4618      	movlt	r0, r3
 8004798:	e731      	b.n	80045fe <_printf_float+0xba>
 800479a:	2301      	movs	r3, #1
 800479c:	464a      	mov	r2, r9
 800479e:	4631      	mov	r1, r6
 80047a0:	4628      	mov	r0, r5
 80047a2:	47b8      	blx	r7
 80047a4:	3001      	adds	r0, #1
 80047a6:	f43f af28 	beq.w	80045fa <_printf_float+0xb6>
 80047aa:	f108 0801 	add.w	r8, r8, #1
 80047ae:	e7e6      	b.n	800477e <_printf_float+0x23a>
 80047b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	dc38      	bgt.n	8004828 <_printf_float+0x2e4>
 80047b6:	2301      	movs	r3, #1
 80047b8:	4631      	mov	r1, r6
 80047ba:	4628      	mov	r0, r5
 80047bc:	4a19      	ldr	r2, [pc, #100]	; (8004824 <_printf_float+0x2e0>)
 80047be:	47b8      	blx	r7
 80047c0:	3001      	adds	r0, #1
 80047c2:	f43f af1a 	beq.w	80045fa <_printf_float+0xb6>
 80047c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047ca:	4313      	orrs	r3, r2
 80047cc:	d102      	bne.n	80047d4 <_printf_float+0x290>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	07d9      	lsls	r1, r3, #31
 80047d2:	d5d8      	bpl.n	8004786 <_printf_float+0x242>
 80047d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047d8:	4631      	mov	r1, r6
 80047da:	4628      	mov	r0, r5
 80047dc:	47b8      	blx	r7
 80047de:	3001      	adds	r0, #1
 80047e0:	f43f af0b 	beq.w	80045fa <_printf_float+0xb6>
 80047e4:	f04f 0900 	mov.w	r9, #0
 80047e8:	f104 0a1a 	add.w	sl, r4, #26
 80047ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047ee:	425b      	negs	r3, r3
 80047f0:	454b      	cmp	r3, r9
 80047f2:	dc01      	bgt.n	80047f8 <_printf_float+0x2b4>
 80047f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047f6:	e794      	b.n	8004722 <_printf_float+0x1de>
 80047f8:	2301      	movs	r3, #1
 80047fa:	4652      	mov	r2, sl
 80047fc:	4631      	mov	r1, r6
 80047fe:	4628      	mov	r0, r5
 8004800:	47b8      	blx	r7
 8004802:	3001      	adds	r0, #1
 8004804:	f43f aef9 	beq.w	80045fa <_printf_float+0xb6>
 8004808:	f109 0901 	add.w	r9, r9, #1
 800480c:	e7ee      	b.n	80047ec <_printf_float+0x2a8>
 800480e:	bf00      	nop
 8004810:	7fefffff 	.word	0x7fefffff
 8004814:	08008cf8 	.word	0x08008cf8
 8004818:	08008cfc 	.word	0x08008cfc
 800481c:	08008d04 	.word	0x08008d04
 8004820:	08008d00 	.word	0x08008d00
 8004824:	08008d08 	.word	0x08008d08
 8004828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800482a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800482c:	429a      	cmp	r2, r3
 800482e:	bfa8      	it	ge
 8004830:	461a      	movge	r2, r3
 8004832:	2a00      	cmp	r2, #0
 8004834:	4691      	mov	r9, r2
 8004836:	dc37      	bgt.n	80048a8 <_printf_float+0x364>
 8004838:	f04f 0b00 	mov.w	fp, #0
 800483c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004840:	f104 021a 	add.w	r2, r4, #26
 8004844:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004848:	ebaa 0309 	sub.w	r3, sl, r9
 800484c:	455b      	cmp	r3, fp
 800484e:	dc33      	bgt.n	80048b8 <_printf_float+0x374>
 8004850:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004854:	429a      	cmp	r2, r3
 8004856:	db3b      	blt.n	80048d0 <_printf_float+0x38c>
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	07da      	lsls	r2, r3, #31
 800485c:	d438      	bmi.n	80048d0 <_printf_float+0x38c>
 800485e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004860:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004862:	eba3 020a 	sub.w	r2, r3, sl
 8004866:	eba3 0901 	sub.w	r9, r3, r1
 800486a:	4591      	cmp	r9, r2
 800486c:	bfa8      	it	ge
 800486e:	4691      	movge	r9, r2
 8004870:	f1b9 0f00 	cmp.w	r9, #0
 8004874:	dc34      	bgt.n	80048e0 <_printf_float+0x39c>
 8004876:	f04f 0800 	mov.w	r8, #0
 800487a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800487e:	f104 0a1a 	add.w	sl, r4, #26
 8004882:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004886:	1a9b      	subs	r3, r3, r2
 8004888:	eba3 0309 	sub.w	r3, r3, r9
 800488c:	4543      	cmp	r3, r8
 800488e:	f77f af7a 	ble.w	8004786 <_printf_float+0x242>
 8004892:	2301      	movs	r3, #1
 8004894:	4652      	mov	r2, sl
 8004896:	4631      	mov	r1, r6
 8004898:	4628      	mov	r0, r5
 800489a:	47b8      	blx	r7
 800489c:	3001      	adds	r0, #1
 800489e:	f43f aeac 	beq.w	80045fa <_printf_float+0xb6>
 80048a2:	f108 0801 	add.w	r8, r8, #1
 80048a6:	e7ec      	b.n	8004882 <_printf_float+0x33e>
 80048a8:	4613      	mov	r3, r2
 80048aa:	4631      	mov	r1, r6
 80048ac:	4642      	mov	r2, r8
 80048ae:	4628      	mov	r0, r5
 80048b0:	47b8      	blx	r7
 80048b2:	3001      	adds	r0, #1
 80048b4:	d1c0      	bne.n	8004838 <_printf_float+0x2f4>
 80048b6:	e6a0      	b.n	80045fa <_printf_float+0xb6>
 80048b8:	2301      	movs	r3, #1
 80048ba:	4631      	mov	r1, r6
 80048bc:	4628      	mov	r0, r5
 80048be:	920b      	str	r2, [sp, #44]	; 0x2c
 80048c0:	47b8      	blx	r7
 80048c2:	3001      	adds	r0, #1
 80048c4:	f43f ae99 	beq.w	80045fa <_printf_float+0xb6>
 80048c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048ca:	f10b 0b01 	add.w	fp, fp, #1
 80048ce:	e7b9      	b.n	8004844 <_printf_float+0x300>
 80048d0:	4631      	mov	r1, r6
 80048d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048d6:	4628      	mov	r0, r5
 80048d8:	47b8      	blx	r7
 80048da:	3001      	adds	r0, #1
 80048dc:	d1bf      	bne.n	800485e <_printf_float+0x31a>
 80048de:	e68c      	b.n	80045fa <_printf_float+0xb6>
 80048e0:	464b      	mov	r3, r9
 80048e2:	4631      	mov	r1, r6
 80048e4:	4628      	mov	r0, r5
 80048e6:	eb08 020a 	add.w	r2, r8, sl
 80048ea:	47b8      	blx	r7
 80048ec:	3001      	adds	r0, #1
 80048ee:	d1c2      	bne.n	8004876 <_printf_float+0x332>
 80048f0:	e683      	b.n	80045fa <_printf_float+0xb6>
 80048f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048f4:	2a01      	cmp	r2, #1
 80048f6:	dc01      	bgt.n	80048fc <_printf_float+0x3b8>
 80048f8:	07db      	lsls	r3, r3, #31
 80048fa:	d537      	bpl.n	800496c <_printf_float+0x428>
 80048fc:	2301      	movs	r3, #1
 80048fe:	4642      	mov	r2, r8
 8004900:	4631      	mov	r1, r6
 8004902:	4628      	mov	r0, r5
 8004904:	47b8      	blx	r7
 8004906:	3001      	adds	r0, #1
 8004908:	f43f ae77 	beq.w	80045fa <_printf_float+0xb6>
 800490c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004910:	4631      	mov	r1, r6
 8004912:	4628      	mov	r0, r5
 8004914:	47b8      	blx	r7
 8004916:	3001      	adds	r0, #1
 8004918:	f43f ae6f 	beq.w	80045fa <_printf_float+0xb6>
 800491c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004920:	2200      	movs	r2, #0
 8004922:	2300      	movs	r3, #0
 8004924:	f7fc f840 	bl	80009a8 <__aeabi_dcmpeq>
 8004928:	b9d8      	cbnz	r0, 8004962 <_printf_float+0x41e>
 800492a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800492c:	f108 0201 	add.w	r2, r8, #1
 8004930:	3b01      	subs	r3, #1
 8004932:	4631      	mov	r1, r6
 8004934:	4628      	mov	r0, r5
 8004936:	47b8      	blx	r7
 8004938:	3001      	adds	r0, #1
 800493a:	d10e      	bne.n	800495a <_printf_float+0x416>
 800493c:	e65d      	b.n	80045fa <_printf_float+0xb6>
 800493e:	2301      	movs	r3, #1
 8004940:	464a      	mov	r2, r9
 8004942:	4631      	mov	r1, r6
 8004944:	4628      	mov	r0, r5
 8004946:	47b8      	blx	r7
 8004948:	3001      	adds	r0, #1
 800494a:	f43f ae56 	beq.w	80045fa <_printf_float+0xb6>
 800494e:	f108 0801 	add.w	r8, r8, #1
 8004952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004954:	3b01      	subs	r3, #1
 8004956:	4543      	cmp	r3, r8
 8004958:	dcf1      	bgt.n	800493e <_printf_float+0x3fa>
 800495a:	4653      	mov	r3, sl
 800495c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004960:	e6e0      	b.n	8004724 <_printf_float+0x1e0>
 8004962:	f04f 0800 	mov.w	r8, #0
 8004966:	f104 091a 	add.w	r9, r4, #26
 800496a:	e7f2      	b.n	8004952 <_printf_float+0x40e>
 800496c:	2301      	movs	r3, #1
 800496e:	4642      	mov	r2, r8
 8004970:	e7df      	b.n	8004932 <_printf_float+0x3ee>
 8004972:	2301      	movs	r3, #1
 8004974:	464a      	mov	r2, r9
 8004976:	4631      	mov	r1, r6
 8004978:	4628      	mov	r0, r5
 800497a:	47b8      	blx	r7
 800497c:	3001      	adds	r0, #1
 800497e:	f43f ae3c 	beq.w	80045fa <_printf_float+0xb6>
 8004982:	f108 0801 	add.w	r8, r8, #1
 8004986:	68e3      	ldr	r3, [r4, #12]
 8004988:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800498a:	1a5b      	subs	r3, r3, r1
 800498c:	4543      	cmp	r3, r8
 800498e:	dcf0      	bgt.n	8004972 <_printf_float+0x42e>
 8004990:	e6fd      	b.n	800478e <_printf_float+0x24a>
 8004992:	f04f 0800 	mov.w	r8, #0
 8004996:	f104 0919 	add.w	r9, r4, #25
 800499a:	e7f4      	b.n	8004986 <_printf_float+0x442>

0800499c <_printf_common>:
 800499c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049a0:	4616      	mov	r6, r2
 80049a2:	4699      	mov	r9, r3
 80049a4:	688a      	ldr	r2, [r1, #8]
 80049a6:	690b      	ldr	r3, [r1, #16]
 80049a8:	4607      	mov	r7, r0
 80049aa:	4293      	cmp	r3, r2
 80049ac:	bfb8      	it	lt
 80049ae:	4613      	movlt	r3, r2
 80049b0:	6033      	str	r3, [r6, #0]
 80049b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049b6:	460c      	mov	r4, r1
 80049b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049bc:	b10a      	cbz	r2, 80049c2 <_printf_common+0x26>
 80049be:	3301      	adds	r3, #1
 80049c0:	6033      	str	r3, [r6, #0]
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	0699      	lsls	r1, r3, #26
 80049c6:	bf42      	ittt	mi
 80049c8:	6833      	ldrmi	r3, [r6, #0]
 80049ca:	3302      	addmi	r3, #2
 80049cc:	6033      	strmi	r3, [r6, #0]
 80049ce:	6825      	ldr	r5, [r4, #0]
 80049d0:	f015 0506 	ands.w	r5, r5, #6
 80049d4:	d106      	bne.n	80049e4 <_printf_common+0x48>
 80049d6:	f104 0a19 	add.w	sl, r4, #25
 80049da:	68e3      	ldr	r3, [r4, #12]
 80049dc:	6832      	ldr	r2, [r6, #0]
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	42ab      	cmp	r3, r5
 80049e2:	dc28      	bgt.n	8004a36 <_printf_common+0x9a>
 80049e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049e8:	1e13      	subs	r3, r2, #0
 80049ea:	6822      	ldr	r2, [r4, #0]
 80049ec:	bf18      	it	ne
 80049ee:	2301      	movne	r3, #1
 80049f0:	0692      	lsls	r2, r2, #26
 80049f2:	d42d      	bmi.n	8004a50 <_printf_common+0xb4>
 80049f4:	4649      	mov	r1, r9
 80049f6:	4638      	mov	r0, r7
 80049f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049fc:	47c0      	blx	r8
 80049fe:	3001      	adds	r0, #1
 8004a00:	d020      	beq.n	8004a44 <_printf_common+0xa8>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	68e5      	ldr	r5, [r4, #12]
 8004a06:	f003 0306 	and.w	r3, r3, #6
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	bf18      	it	ne
 8004a0e:	2500      	movne	r5, #0
 8004a10:	6832      	ldr	r2, [r6, #0]
 8004a12:	f04f 0600 	mov.w	r6, #0
 8004a16:	68a3      	ldr	r3, [r4, #8]
 8004a18:	bf08      	it	eq
 8004a1a:	1aad      	subeq	r5, r5, r2
 8004a1c:	6922      	ldr	r2, [r4, #16]
 8004a1e:	bf08      	it	eq
 8004a20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a24:	4293      	cmp	r3, r2
 8004a26:	bfc4      	itt	gt
 8004a28:	1a9b      	subgt	r3, r3, r2
 8004a2a:	18ed      	addgt	r5, r5, r3
 8004a2c:	341a      	adds	r4, #26
 8004a2e:	42b5      	cmp	r5, r6
 8004a30:	d11a      	bne.n	8004a68 <_printf_common+0xcc>
 8004a32:	2000      	movs	r0, #0
 8004a34:	e008      	b.n	8004a48 <_printf_common+0xac>
 8004a36:	2301      	movs	r3, #1
 8004a38:	4652      	mov	r2, sl
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	4638      	mov	r0, r7
 8004a3e:	47c0      	blx	r8
 8004a40:	3001      	adds	r0, #1
 8004a42:	d103      	bne.n	8004a4c <_printf_common+0xb0>
 8004a44:	f04f 30ff 	mov.w	r0, #4294967295
 8004a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a4c:	3501      	adds	r5, #1
 8004a4e:	e7c4      	b.n	80049da <_printf_common+0x3e>
 8004a50:	2030      	movs	r0, #48	; 0x30
 8004a52:	18e1      	adds	r1, r4, r3
 8004a54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a5e:	4422      	add	r2, r4
 8004a60:	3302      	adds	r3, #2
 8004a62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a66:	e7c5      	b.n	80049f4 <_printf_common+0x58>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	4638      	mov	r0, r7
 8004a70:	47c0      	blx	r8
 8004a72:	3001      	adds	r0, #1
 8004a74:	d0e6      	beq.n	8004a44 <_printf_common+0xa8>
 8004a76:	3601      	adds	r6, #1
 8004a78:	e7d9      	b.n	8004a2e <_printf_common+0x92>
	...

08004a7c <_printf_i>:
 8004a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a80:	7e0f      	ldrb	r7, [r1, #24]
 8004a82:	4691      	mov	r9, r2
 8004a84:	2f78      	cmp	r7, #120	; 0x78
 8004a86:	4680      	mov	r8, r0
 8004a88:	460c      	mov	r4, r1
 8004a8a:	469a      	mov	sl, r3
 8004a8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a92:	d807      	bhi.n	8004aa4 <_printf_i+0x28>
 8004a94:	2f62      	cmp	r7, #98	; 0x62
 8004a96:	d80a      	bhi.n	8004aae <_printf_i+0x32>
 8004a98:	2f00      	cmp	r7, #0
 8004a9a:	f000 80d9 	beq.w	8004c50 <_printf_i+0x1d4>
 8004a9e:	2f58      	cmp	r7, #88	; 0x58
 8004aa0:	f000 80a4 	beq.w	8004bec <_printf_i+0x170>
 8004aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004aac:	e03a      	b.n	8004b24 <_printf_i+0xa8>
 8004aae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ab2:	2b15      	cmp	r3, #21
 8004ab4:	d8f6      	bhi.n	8004aa4 <_printf_i+0x28>
 8004ab6:	a101      	add	r1, pc, #4	; (adr r1, 8004abc <_printf_i+0x40>)
 8004ab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004abc:	08004b15 	.word	0x08004b15
 8004ac0:	08004b29 	.word	0x08004b29
 8004ac4:	08004aa5 	.word	0x08004aa5
 8004ac8:	08004aa5 	.word	0x08004aa5
 8004acc:	08004aa5 	.word	0x08004aa5
 8004ad0:	08004aa5 	.word	0x08004aa5
 8004ad4:	08004b29 	.word	0x08004b29
 8004ad8:	08004aa5 	.word	0x08004aa5
 8004adc:	08004aa5 	.word	0x08004aa5
 8004ae0:	08004aa5 	.word	0x08004aa5
 8004ae4:	08004aa5 	.word	0x08004aa5
 8004ae8:	08004c37 	.word	0x08004c37
 8004aec:	08004b59 	.word	0x08004b59
 8004af0:	08004c19 	.word	0x08004c19
 8004af4:	08004aa5 	.word	0x08004aa5
 8004af8:	08004aa5 	.word	0x08004aa5
 8004afc:	08004c59 	.word	0x08004c59
 8004b00:	08004aa5 	.word	0x08004aa5
 8004b04:	08004b59 	.word	0x08004b59
 8004b08:	08004aa5 	.word	0x08004aa5
 8004b0c:	08004aa5 	.word	0x08004aa5
 8004b10:	08004c21 	.word	0x08004c21
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	1d1a      	adds	r2, r3, #4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	602a      	str	r2, [r5, #0]
 8004b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0a4      	b.n	8004c72 <_printf_i+0x1f6>
 8004b28:	6820      	ldr	r0, [r4, #0]
 8004b2a:	6829      	ldr	r1, [r5, #0]
 8004b2c:	0606      	lsls	r6, r0, #24
 8004b2e:	f101 0304 	add.w	r3, r1, #4
 8004b32:	d50a      	bpl.n	8004b4a <_printf_i+0xce>
 8004b34:	680e      	ldr	r6, [r1, #0]
 8004b36:	602b      	str	r3, [r5, #0]
 8004b38:	2e00      	cmp	r6, #0
 8004b3a:	da03      	bge.n	8004b44 <_printf_i+0xc8>
 8004b3c:	232d      	movs	r3, #45	; 0x2d
 8004b3e:	4276      	negs	r6, r6
 8004b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b44:	230a      	movs	r3, #10
 8004b46:	485e      	ldr	r0, [pc, #376]	; (8004cc0 <_printf_i+0x244>)
 8004b48:	e019      	b.n	8004b7e <_printf_i+0x102>
 8004b4a:	680e      	ldr	r6, [r1, #0]
 8004b4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b50:	602b      	str	r3, [r5, #0]
 8004b52:	bf18      	it	ne
 8004b54:	b236      	sxthne	r6, r6
 8004b56:	e7ef      	b.n	8004b38 <_printf_i+0xbc>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	6820      	ldr	r0, [r4, #0]
 8004b5c:	1d19      	adds	r1, r3, #4
 8004b5e:	6029      	str	r1, [r5, #0]
 8004b60:	0601      	lsls	r1, r0, #24
 8004b62:	d501      	bpl.n	8004b68 <_printf_i+0xec>
 8004b64:	681e      	ldr	r6, [r3, #0]
 8004b66:	e002      	b.n	8004b6e <_printf_i+0xf2>
 8004b68:	0646      	lsls	r6, r0, #25
 8004b6a:	d5fb      	bpl.n	8004b64 <_printf_i+0xe8>
 8004b6c:	881e      	ldrh	r6, [r3, #0]
 8004b6e:	2f6f      	cmp	r7, #111	; 0x6f
 8004b70:	bf0c      	ite	eq
 8004b72:	2308      	moveq	r3, #8
 8004b74:	230a      	movne	r3, #10
 8004b76:	4852      	ldr	r0, [pc, #328]	; (8004cc0 <_printf_i+0x244>)
 8004b78:	2100      	movs	r1, #0
 8004b7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b7e:	6865      	ldr	r5, [r4, #4]
 8004b80:	2d00      	cmp	r5, #0
 8004b82:	bfa8      	it	ge
 8004b84:	6821      	ldrge	r1, [r4, #0]
 8004b86:	60a5      	str	r5, [r4, #8]
 8004b88:	bfa4      	itt	ge
 8004b8a:	f021 0104 	bicge.w	r1, r1, #4
 8004b8e:	6021      	strge	r1, [r4, #0]
 8004b90:	b90e      	cbnz	r6, 8004b96 <_printf_i+0x11a>
 8004b92:	2d00      	cmp	r5, #0
 8004b94:	d04d      	beq.n	8004c32 <_printf_i+0x1b6>
 8004b96:	4615      	mov	r5, r2
 8004b98:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b9c:	fb03 6711 	mls	r7, r3, r1, r6
 8004ba0:	5dc7      	ldrb	r7, [r0, r7]
 8004ba2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ba6:	4637      	mov	r7, r6
 8004ba8:	42bb      	cmp	r3, r7
 8004baa:	460e      	mov	r6, r1
 8004bac:	d9f4      	bls.n	8004b98 <_printf_i+0x11c>
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d10b      	bne.n	8004bca <_printf_i+0x14e>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	07de      	lsls	r6, r3, #31
 8004bb6:	d508      	bpl.n	8004bca <_printf_i+0x14e>
 8004bb8:	6923      	ldr	r3, [r4, #16]
 8004bba:	6861      	ldr	r1, [r4, #4]
 8004bbc:	4299      	cmp	r1, r3
 8004bbe:	bfde      	ittt	le
 8004bc0:	2330      	movle	r3, #48	; 0x30
 8004bc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bca:	1b52      	subs	r2, r2, r5
 8004bcc:	6122      	str	r2, [r4, #16]
 8004bce:	464b      	mov	r3, r9
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	f8cd a000 	str.w	sl, [sp]
 8004bd8:	aa03      	add	r2, sp, #12
 8004bda:	f7ff fedf 	bl	800499c <_printf_common>
 8004bde:	3001      	adds	r0, #1
 8004be0:	d14c      	bne.n	8004c7c <_printf_i+0x200>
 8004be2:	f04f 30ff 	mov.w	r0, #4294967295
 8004be6:	b004      	add	sp, #16
 8004be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bec:	4834      	ldr	r0, [pc, #208]	; (8004cc0 <_printf_i+0x244>)
 8004bee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bf2:	6829      	ldr	r1, [r5, #0]
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bfa:	6029      	str	r1, [r5, #0]
 8004bfc:	061d      	lsls	r5, r3, #24
 8004bfe:	d514      	bpl.n	8004c2a <_printf_i+0x1ae>
 8004c00:	07df      	lsls	r7, r3, #31
 8004c02:	bf44      	itt	mi
 8004c04:	f043 0320 	orrmi.w	r3, r3, #32
 8004c08:	6023      	strmi	r3, [r4, #0]
 8004c0a:	b91e      	cbnz	r6, 8004c14 <_printf_i+0x198>
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	f023 0320 	bic.w	r3, r3, #32
 8004c12:	6023      	str	r3, [r4, #0]
 8004c14:	2310      	movs	r3, #16
 8004c16:	e7af      	b.n	8004b78 <_printf_i+0xfc>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	f043 0320 	orr.w	r3, r3, #32
 8004c1e:	6023      	str	r3, [r4, #0]
 8004c20:	2378      	movs	r3, #120	; 0x78
 8004c22:	4828      	ldr	r0, [pc, #160]	; (8004cc4 <_printf_i+0x248>)
 8004c24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c28:	e7e3      	b.n	8004bf2 <_printf_i+0x176>
 8004c2a:	0659      	lsls	r1, r3, #25
 8004c2c:	bf48      	it	mi
 8004c2e:	b2b6      	uxthmi	r6, r6
 8004c30:	e7e6      	b.n	8004c00 <_printf_i+0x184>
 8004c32:	4615      	mov	r5, r2
 8004c34:	e7bb      	b.n	8004bae <_printf_i+0x132>
 8004c36:	682b      	ldr	r3, [r5, #0]
 8004c38:	6826      	ldr	r6, [r4, #0]
 8004c3a:	1d18      	adds	r0, r3, #4
 8004c3c:	6961      	ldr	r1, [r4, #20]
 8004c3e:	6028      	str	r0, [r5, #0]
 8004c40:	0635      	lsls	r5, r6, #24
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	d501      	bpl.n	8004c4a <_printf_i+0x1ce>
 8004c46:	6019      	str	r1, [r3, #0]
 8004c48:	e002      	b.n	8004c50 <_printf_i+0x1d4>
 8004c4a:	0670      	lsls	r0, r6, #25
 8004c4c:	d5fb      	bpl.n	8004c46 <_printf_i+0x1ca>
 8004c4e:	8019      	strh	r1, [r3, #0]
 8004c50:	2300      	movs	r3, #0
 8004c52:	4615      	mov	r5, r2
 8004c54:	6123      	str	r3, [r4, #16]
 8004c56:	e7ba      	b.n	8004bce <_printf_i+0x152>
 8004c58:	682b      	ldr	r3, [r5, #0]
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	1d1a      	adds	r2, r3, #4
 8004c5e:	602a      	str	r2, [r5, #0]
 8004c60:	681d      	ldr	r5, [r3, #0]
 8004c62:	6862      	ldr	r2, [r4, #4]
 8004c64:	4628      	mov	r0, r5
 8004c66:	f002 fd0f 	bl	8007688 <memchr>
 8004c6a:	b108      	cbz	r0, 8004c70 <_printf_i+0x1f4>
 8004c6c:	1b40      	subs	r0, r0, r5
 8004c6e:	6060      	str	r0, [r4, #4]
 8004c70:	6863      	ldr	r3, [r4, #4]
 8004c72:	6123      	str	r3, [r4, #16]
 8004c74:	2300      	movs	r3, #0
 8004c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c7a:	e7a8      	b.n	8004bce <_printf_i+0x152>
 8004c7c:	462a      	mov	r2, r5
 8004c7e:	4649      	mov	r1, r9
 8004c80:	4640      	mov	r0, r8
 8004c82:	6923      	ldr	r3, [r4, #16]
 8004c84:	47d0      	blx	sl
 8004c86:	3001      	adds	r0, #1
 8004c88:	d0ab      	beq.n	8004be2 <_printf_i+0x166>
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	079b      	lsls	r3, r3, #30
 8004c8e:	d413      	bmi.n	8004cb8 <_printf_i+0x23c>
 8004c90:	68e0      	ldr	r0, [r4, #12]
 8004c92:	9b03      	ldr	r3, [sp, #12]
 8004c94:	4298      	cmp	r0, r3
 8004c96:	bfb8      	it	lt
 8004c98:	4618      	movlt	r0, r3
 8004c9a:	e7a4      	b.n	8004be6 <_printf_i+0x16a>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	4632      	mov	r2, r6
 8004ca0:	4649      	mov	r1, r9
 8004ca2:	4640      	mov	r0, r8
 8004ca4:	47d0      	blx	sl
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d09b      	beq.n	8004be2 <_printf_i+0x166>
 8004caa:	3501      	adds	r5, #1
 8004cac:	68e3      	ldr	r3, [r4, #12]
 8004cae:	9903      	ldr	r1, [sp, #12]
 8004cb0:	1a5b      	subs	r3, r3, r1
 8004cb2:	42ab      	cmp	r3, r5
 8004cb4:	dcf2      	bgt.n	8004c9c <_printf_i+0x220>
 8004cb6:	e7eb      	b.n	8004c90 <_printf_i+0x214>
 8004cb8:	2500      	movs	r5, #0
 8004cba:	f104 0619 	add.w	r6, r4, #25
 8004cbe:	e7f5      	b.n	8004cac <_printf_i+0x230>
 8004cc0:	08008d0a 	.word	0x08008d0a
 8004cc4:	08008d1b 	.word	0x08008d1b

08004cc8 <_scanf_float>:
 8004cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ccc:	b087      	sub	sp, #28
 8004cce:	9303      	str	r3, [sp, #12]
 8004cd0:	688b      	ldr	r3, [r1, #8]
 8004cd2:	4617      	mov	r7, r2
 8004cd4:	1e5a      	subs	r2, r3, #1
 8004cd6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004cda:	bf85      	ittet	hi
 8004cdc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004ce0:	195b      	addhi	r3, r3, r5
 8004ce2:	2300      	movls	r3, #0
 8004ce4:	9302      	strhi	r3, [sp, #8]
 8004ce6:	bf88      	it	hi
 8004ce8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004cec:	468b      	mov	fp, r1
 8004cee:	f04f 0500 	mov.w	r5, #0
 8004cf2:	bf8c      	ite	hi
 8004cf4:	608b      	strhi	r3, [r1, #8]
 8004cf6:	9302      	strls	r3, [sp, #8]
 8004cf8:	680b      	ldr	r3, [r1, #0]
 8004cfa:	4680      	mov	r8, r0
 8004cfc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004d00:	f84b 3b1c 	str.w	r3, [fp], #28
 8004d04:	460c      	mov	r4, r1
 8004d06:	465e      	mov	r6, fp
 8004d08:	46aa      	mov	sl, r5
 8004d0a:	46a9      	mov	r9, r5
 8004d0c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004d10:	9501      	str	r5, [sp, #4]
 8004d12:	68a2      	ldr	r2, [r4, #8]
 8004d14:	b152      	cbz	r2, 8004d2c <_scanf_float+0x64>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b4e      	cmp	r3, #78	; 0x4e
 8004d1c:	d864      	bhi.n	8004de8 <_scanf_float+0x120>
 8004d1e:	2b40      	cmp	r3, #64	; 0x40
 8004d20:	d83c      	bhi.n	8004d9c <_scanf_float+0xd4>
 8004d22:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004d26:	b2c8      	uxtb	r0, r1
 8004d28:	280e      	cmp	r0, #14
 8004d2a:	d93a      	bls.n	8004da2 <_scanf_float+0xda>
 8004d2c:	f1b9 0f00 	cmp.w	r9, #0
 8004d30:	d003      	beq.n	8004d3a <_scanf_float+0x72>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d3e:	f1ba 0f01 	cmp.w	sl, #1
 8004d42:	f200 8113 	bhi.w	8004f6c <_scanf_float+0x2a4>
 8004d46:	455e      	cmp	r6, fp
 8004d48:	f200 8105 	bhi.w	8004f56 <_scanf_float+0x28e>
 8004d4c:	2501      	movs	r5, #1
 8004d4e:	4628      	mov	r0, r5
 8004d50:	b007      	add	sp, #28
 8004d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d56:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004d5a:	2a0d      	cmp	r2, #13
 8004d5c:	d8e6      	bhi.n	8004d2c <_scanf_float+0x64>
 8004d5e:	a101      	add	r1, pc, #4	; (adr r1, 8004d64 <_scanf_float+0x9c>)
 8004d60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004d64:	08004ea3 	.word	0x08004ea3
 8004d68:	08004d2d 	.word	0x08004d2d
 8004d6c:	08004d2d 	.word	0x08004d2d
 8004d70:	08004d2d 	.word	0x08004d2d
 8004d74:	08004f03 	.word	0x08004f03
 8004d78:	08004edb 	.word	0x08004edb
 8004d7c:	08004d2d 	.word	0x08004d2d
 8004d80:	08004d2d 	.word	0x08004d2d
 8004d84:	08004eb1 	.word	0x08004eb1
 8004d88:	08004d2d 	.word	0x08004d2d
 8004d8c:	08004d2d 	.word	0x08004d2d
 8004d90:	08004d2d 	.word	0x08004d2d
 8004d94:	08004d2d 	.word	0x08004d2d
 8004d98:	08004e69 	.word	0x08004e69
 8004d9c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004da0:	e7db      	b.n	8004d5a <_scanf_float+0x92>
 8004da2:	290e      	cmp	r1, #14
 8004da4:	d8c2      	bhi.n	8004d2c <_scanf_float+0x64>
 8004da6:	a001      	add	r0, pc, #4	; (adr r0, 8004dac <_scanf_float+0xe4>)
 8004da8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004dac:	08004e5b 	.word	0x08004e5b
 8004db0:	08004d2d 	.word	0x08004d2d
 8004db4:	08004e5b 	.word	0x08004e5b
 8004db8:	08004eef 	.word	0x08004eef
 8004dbc:	08004d2d 	.word	0x08004d2d
 8004dc0:	08004e09 	.word	0x08004e09
 8004dc4:	08004e45 	.word	0x08004e45
 8004dc8:	08004e45 	.word	0x08004e45
 8004dcc:	08004e45 	.word	0x08004e45
 8004dd0:	08004e45 	.word	0x08004e45
 8004dd4:	08004e45 	.word	0x08004e45
 8004dd8:	08004e45 	.word	0x08004e45
 8004ddc:	08004e45 	.word	0x08004e45
 8004de0:	08004e45 	.word	0x08004e45
 8004de4:	08004e45 	.word	0x08004e45
 8004de8:	2b6e      	cmp	r3, #110	; 0x6e
 8004dea:	d809      	bhi.n	8004e00 <_scanf_float+0x138>
 8004dec:	2b60      	cmp	r3, #96	; 0x60
 8004dee:	d8b2      	bhi.n	8004d56 <_scanf_float+0x8e>
 8004df0:	2b54      	cmp	r3, #84	; 0x54
 8004df2:	d077      	beq.n	8004ee4 <_scanf_float+0x21c>
 8004df4:	2b59      	cmp	r3, #89	; 0x59
 8004df6:	d199      	bne.n	8004d2c <_scanf_float+0x64>
 8004df8:	2d07      	cmp	r5, #7
 8004dfa:	d197      	bne.n	8004d2c <_scanf_float+0x64>
 8004dfc:	2508      	movs	r5, #8
 8004dfe:	e029      	b.n	8004e54 <_scanf_float+0x18c>
 8004e00:	2b74      	cmp	r3, #116	; 0x74
 8004e02:	d06f      	beq.n	8004ee4 <_scanf_float+0x21c>
 8004e04:	2b79      	cmp	r3, #121	; 0x79
 8004e06:	e7f6      	b.n	8004df6 <_scanf_float+0x12e>
 8004e08:	6821      	ldr	r1, [r4, #0]
 8004e0a:	05c8      	lsls	r0, r1, #23
 8004e0c:	d51a      	bpl.n	8004e44 <_scanf_float+0x17c>
 8004e0e:	9b02      	ldr	r3, [sp, #8]
 8004e10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004e14:	6021      	str	r1, [r4, #0]
 8004e16:	f109 0901 	add.w	r9, r9, #1
 8004e1a:	b11b      	cbz	r3, 8004e24 <_scanf_float+0x15c>
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	3201      	adds	r2, #1
 8004e20:	9302      	str	r3, [sp, #8]
 8004e22:	60a2      	str	r2, [r4, #8]
 8004e24:	68a3      	ldr	r3, [r4, #8]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	60a3      	str	r3, [r4, #8]
 8004e2a:	6923      	ldr	r3, [r4, #16]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	6123      	str	r3, [r4, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	607b      	str	r3, [r7, #4]
 8004e38:	f340 8084 	ble.w	8004f44 <_scanf_float+0x27c>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	603b      	str	r3, [r7, #0]
 8004e42:	e766      	b.n	8004d12 <_scanf_float+0x4a>
 8004e44:	eb1a 0f05 	cmn.w	sl, r5
 8004e48:	f47f af70 	bne.w	8004d2c <_scanf_float+0x64>
 8004e4c:	6822      	ldr	r2, [r4, #0]
 8004e4e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004e52:	6022      	str	r2, [r4, #0]
 8004e54:	f806 3b01 	strb.w	r3, [r6], #1
 8004e58:	e7e4      	b.n	8004e24 <_scanf_float+0x15c>
 8004e5a:	6822      	ldr	r2, [r4, #0]
 8004e5c:	0610      	lsls	r0, r2, #24
 8004e5e:	f57f af65 	bpl.w	8004d2c <_scanf_float+0x64>
 8004e62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e66:	e7f4      	b.n	8004e52 <_scanf_float+0x18a>
 8004e68:	f1ba 0f00 	cmp.w	sl, #0
 8004e6c:	d10e      	bne.n	8004e8c <_scanf_float+0x1c4>
 8004e6e:	f1b9 0f00 	cmp.w	r9, #0
 8004e72:	d10e      	bne.n	8004e92 <_scanf_float+0x1ca>
 8004e74:	6822      	ldr	r2, [r4, #0]
 8004e76:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004e7a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004e7e:	d108      	bne.n	8004e92 <_scanf_float+0x1ca>
 8004e80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e84:	f04f 0a01 	mov.w	sl, #1
 8004e88:	6022      	str	r2, [r4, #0]
 8004e8a:	e7e3      	b.n	8004e54 <_scanf_float+0x18c>
 8004e8c:	f1ba 0f02 	cmp.w	sl, #2
 8004e90:	d055      	beq.n	8004f3e <_scanf_float+0x276>
 8004e92:	2d01      	cmp	r5, #1
 8004e94:	d002      	beq.n	8004e9c <_scanf_float+0x1d4>
 8004e96:	2d04      	cmp	r5, #4
 8004e98:	f47f af48 	bne.w	8004d2c <_scanf_float+0x64>
 8004e9c:	3501      	adds	r5, #1
 8004e9e:	b2ed      	uxtb	r5, r5
 8004ea0:	e7d8      	b.n	8004e54 <_scanf_float+0x18c>
 8004ea2:	f1ba 0f01 	cmp.w	sl, #1
 8004ea6:	f47f af41 	bne.w	8004d2c <_scanf_float+0x64>
 8004eaa:	f04f 0a02 	mov.w	sl, #2
 8004eae:	e7d1      	b.n	8004e54 <_scanf_float+0x18c>
 8004eb0:	b97d      	cbnz	r5, 8004ed2 <_scanf_float+0x20a>
 8004eb2:	f1b9 0f00 	cmp.w	r9, #0
 8004eb6:	f47f af3c 	bne.w	8004d32 <_scanf_float+0x6a>
 8004eba:	6822      	ldr	r2, [r4, #0]
 8004ebc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004ec0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004ec4:	f47f af39 	bne.w	8004d3a <_scanf_float+0x72>
 8004ec8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004ecc:	2501      	movs	r5, #1
 8004ece:	6022      	str	r2, [r4, #0]
 8004ed0:	e7c0      	b.n	8004e54 <_scanf_float+0x18c>
 8004ed2:	2d03      	cmp	r5, #3
 8004ed4:	d0e2      	beq.n	8004e9c <_scanf_float+0x1d4>
 8004ed6:	2d05      	cmp	r5, #5
 8004ed8:	e7de      	b.n	8004e98 <_scanf_float+0x1d0>
 8004eda:	2d02      	cmp	r5, #2
 8004edc:	f47f af26 	bne.w	8004d2c <_scanf_float+0x64>
 8004ee0:	2503      	movs	r5, #3
 8004ee2:	e7b7      	b.n	8004e54 <_scanf_float+0x18c>
 8004ee4:	2d06      	cmp	r5, #6
 8004ee6:	f47f af21 	bne.w	8004d2c <_scanf_float+0x64>
 8004eea:	2507      	movs	r5, #7
 8004eec:	e7b2      	b.n	8004e54 <_scanf_float+0x18c>
 8004eee:	6822      	ldr	r2, [r4, #0]
 8004ef0:	0591      	lsls	r1, r2, #22
 8004ef2:	f57f af1b 	bpl.w	8004d2c <_scanf_float+0x64>
 8004ef6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004efa:	6022      	str	r2, [r4, #0]
 8004efc:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f00:	e7a8      	b.n	8004e54 <_scanf_float+0x18c>
 8004f02:	6822      	ldr	r2, [r4, #0]
 8004f04:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004f08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004f0c:	d006      	beq.n	8004f1c <_scanf_float+0x254>
 8004f0e:	0550      	lsls	r0, r2, #21
 8004f10:	f57f af0c 	bpl.w	8004d2c <_scanf_float+0x64>
 8004f14:	f1b9 0f00 	cmp.w	r9, #0
 8004f18:	f43f af0f 	beq.w	8004d3a <_scanf_float+0x72>
 8004f1c:	0591      	lsls	r1, r2, #22
 8004f1e:	bf58      	it	pl
 8004f20:	9901      	ldrpl	r1, [sp, #4]
 8004f22:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f26:	bf58      	it	pl
 8004f28:	eba9 0101 	subpl.w	r1, r9, r1
 8004f2c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004f30:	f04f 0900 	mov.w	r9, #0
 8004f34:	bf58      	it	pl
 8004f36:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004f3a:	6022      	str	r2, [r4, #0]
 8004f3c:	e78a      	b.n	8004e54 <_scanf_float+0x18c>
 8004f3e:	f04f 0a03 	mov.w	sl, #3
 8004f42:	e787      	b.n	8004e54 <_scanf_float+0x18c>
 8004f44:	4639      	mov	r1, r7
 8004f46:	4640      	mov	r0, r8
 8004f48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004f4c:	4798      	blx	r3
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	f43f aedf 	beq.w	8004d12 <_scanf_float+0x4a>
 8004f54:	e6ea      	b.n	8004d2c <_scanf_float+0x64>
 8004f56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f5a:	463a      	mov	r2, r7
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f62:	4798      	blx	r3
 8004f64:	6923      	ldr	r3, [r4, #16]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	6123      	str	r3, [r4, #16]
 8004f6a:	e6ec      	b.n	8004d46 <_scanf_float+0x7e>
 8004f6c:	1e6b      	subs	r3, r5, #1
 8004f6e:	2b06      	cmp	r3, #6
 8004f70:	d825      	bhi.n	8004fbe <_scanf_float+0x2f6>
 8004f72:	2d02      	cmp	r5, #2
 8004f74:	d836      	bhi.n	8004fe4 <_scanf_float+0x31c>
 8004f76:	455e      	cmp	r6, fp
 8004f78:	f67f aee8 	bls.w	8004d4c <_scanf_float+0x84>
 8004f7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f80:	463a      	mov	r2, r7
 8004f82:	4640      	mov	r0, r8
 8004f84:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f88:	4798      	blx	r3
 8004f8a:	6923      	ldr	r3, [r4, #16]
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	6123      	str	r3, [r4, #16]
 8004f90:	e7f1      	b.n	8004f76 <_scanf_float+0x2ae>
 8004f92:	9802      	ldr	r0, [sp, #8]
 8004f94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f98:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004f9c:	463a      	mov	r2, r7
 8004f9e:	9002      	str	r0, [sp, #8]
 8004fa0:	4640      	mov	r0, r8
 8004fa2:	4798      	blx	r3
 8004fa4:	6923      	ldr	r3, [r4, #16]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	6123      	str	r3, [r4, #16]
 8004faa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fae:	fa5f fa8a 	uxtb.w	sl, sl
 8004fb2:	f1ba 0f02 	cmp.w	sl, #2
 8004fb6:	d1ec      	bne.n	8004f92 <_scanf_float+0x2ca>
 8004fb8:	3d03      	subs	r5, #3
 8004fba:	b2ed      	uxtb	r5, r5
 8004fbc:	1b76      	subs	r6, r6, r5
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	05da      	lsls	r2, r3, #23
 8004fc2:	d52f      	bpl.n	8005024 <_scanf_float+0x35c>
 8004fc4:	055b      	lsls	r3, r3, #21
 8004fc6:	d510      	bpl.n	8004fea <_scanf_float+0x322>
 8004fc8:	455e      	cmp	r6, fp
 8004fca:	f67f aebf 	bls.w	8004d4c <_scanf_float+0x84>
 8004fce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fd2:	463a      	mov	r2, r7
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004fda:	4798      	blx	r3
 8004fdc:	6923      	ldr	r3, [r4, #16]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	6123      	str	r3, [r4, #16]
 8004fe2:	e7f1      	b.n	8004fc8 <_scanf_float+0x300>
 8004fe4:	46aa      	mov	sl, r5
 8004fe6:	9602      	str	r6, [sp, #8]
 8004fe8:	e7df      	b.n	8004faa <_scanf_float+0x2e2>
 8004fea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004fee:	6923      	ldr	r3, [r4, #16]
 8004ff0:	2965      	cmp	r1, #101	; 0x65
 8004ff2:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ff6:	f106 35ff 	add.w	r5, r6, #4294967295
 8004ffa:	6123      	str	r3, [r4, #16]
 8004ffc:	d00c      	beq.n	8005018 <_scanf_float+0x350>
 8004ffe:	2945      	cmp	r1, #69	; 0x45
 8005000:	d00a      	beq.n	8005018 <_scanf_float+0x350>
 8005002:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005006:	463a      	mov	r2, r7
 8005008:	4640      	mov	r0, r8
 800500a:	4798      	blx	r3
 800500c:	6923      	ldr	r3, [r4, #16]
 800500e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005012:	3b01      	subs	r3, #1
 8005014:	1eb5      	subs	r5, r6, #2
 8005016:	6123      	str	r3, [r4, #16]
 8005018:	463a      	mov	r2, r7
 800501a:	4640      	mov	r0, r8
 800501c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005020:	4798      	blx	r3
 8005022:	462e      	mov	r6, r5
 8005024:	6825      	ldr	r5, [r4, #0]
 8005026:	f015 0510 	ands.w	r5, r5, #16
 800502a:	d155      	bne.n	80050d8 <_scanf_float+0x410>
 800502c:	7035      	strb	r5, [r6, #0]
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005038:	d11b      	bne.n	8005072 <_scanf_float+0x3aa>
 800503a:	9b01      	ldr	r3, [sp, #4]
 800503c:	454b      	cmp	r3, r9
 800503e:	eba3 0209 	sub.w	r2, r3, r9
 8005042:	d123      	bne.n	800508c <_scanf_float+0x3c4>
 8005044:	2200      	movs	r2, #0
 8005046:	4659      	mov	r1, fp
 8005048:	4640      	mov	r0, r8
 800504a:	f000 fe89 	bl	8005d60 <_strtod_r>
 800504e:	6822      	ldr	r2, [r4, #0]
 8005050:	9b03      	ldr	r3, [sp, #12]
 8005052:	f012 0f02 	tst.w	r2, #2
 8005056:	4606      	mov	r6, r0
 8005058:	460f      	mov	r7, r1
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	d021      	beq.n	80050a2 <_scanf_float+0x3da>
 800505e:	1d1a      	adds	r2, r3, #4
 8005060:	9903      	ldr	r1, [sp, #12]
 8005062:	600a      	str	r2, [r1, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	e9c3 6700 	strd	r6, r7, [r3]
 800506a:	68e3      	ldr	r3, [r4, #12]
 800506c:	3301      	adds	r3, #1
 800506e:	60e3      	str	r3, [r4, #12]
 8005070:	e66d      	b.n	8004d4e <_scanf_float+0x86>
 8005072:	9b04      	ldr	r3, [sp, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0e5      	beq.n	8005044 <_scanf_float+0x37c>
 8005078:	9905      	ldr	r1, [sp, #20]
 800507a:	230a      	movs	r3, #10
 800507c:	462a      	mov	r2, r5
 800507e:	4640      	mov	r0, r8
 8005080:	3101      	adds	r1, #1
 8005082:	f000 feef 	bl	8005e64 <_strtol_r>
 8005086:	9b04      	ldr	r3, [sp, #16]
 8005088:	9e05      	ldr	r6, [sp, #20]
 800508a:	1ac2      	subs	r2, r0, r3
 800508c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005090:	429e      	cmp	r6, r3
 8005092:	bf28      	it	cs
 8005094:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005098:	4630      	mov	r0, r6
 800509a:	4910      	ldr	r1, [pc, #64]	; (80050dc <_scanf_float+0x414>)
 800509c:	f000 f836 	bl	800510c <siprintf>
 80050a0:	e7d0      	b.n	8005044 <_scanf_float+0x37c>
 80050a2:	f012 0f04 	tst.w	r2, #4
 80050a6:	f103 0204 	add.w	r2, r3, #4
 80050aa:	d1d9      	bne.n	8005060 <_scanf_float+0x398>
 80050ac:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80050b0:	f8cc 2000 	str.w	r2, [ip]
 80050b4:	f8d3 8000 	ldr.w	r8, [r3]
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	f7fb fca6 	bl	8000a0c <__aeabi_dcmpun>
 80050c0:	b128      	cbz	r0, 80050ce <_scanf_float+0x406>
 80050c2:	4807      	ldr	r0, [pc, #28]	; (80050e0 <_scanf_float+0x418>)
 80050c4:	f000 f81e 	bl	8005104 <nanf>
 80050c8:	f8c8 0000 	str.w	r0, [r8]
 80050cc:	e7cd      	b.n	800506a <_scanf_float+0x3a2>
 80050ce:	4630      	mov	r0, r6
 80050d0:	4639      	mov	r1, r7
 80050d2:	f7fb fcf9 	bl	8000ac8 <__aeabi_d2f>
 80050d6:	e7f7      	b.n	80050c8 <_scanf_float+0x400>
 80050d8:	2500      	movs	r5, #0
 80050da:	e638      	b.n	8004d4e <_scanf_float+0x86>
 80050dc:	08008d2c 	.word	0x08008d2c
 80050e0:	080091a0 	.word	0x080091a0

080050e4 <_sbrk_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	2300      	movs	r3, #0
 80050e8:	4d05      	ldr	r5, [pc, #20]	; (8005100 <_sbrk_r+0x1c>)
 80050ea:	4604      	mov	r4, r0
 80050ec:	4608      	mov	r0, r1
 80050ee:	602b      	str	r3, [r5, #0]
 80050f0:	f7fd f9a8 	bl	8002444 <_sbrk>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d102      	bne.n	80050fe <_sbrk_r+0x1a>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	b103      	cbz	r3, 80050fe <_sbrk_r+0x1a>
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	bd38      	pop	{r3, r4, r5, pc}
 8005100:	20000524 	.word	0x20000524

08005104 <nanf>:
 8005104:	4800      	ldr	r0, [pc, #0]	; (8005108 <nanf+0x4>)
 8005106:	4770      	bx	lr
 8005108:	7fc00000 	.word	0x7fc00000

0800510c <siprintf>:
 800510c:	b40e      	push	{r1, r2, r3}
 800510e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005112:	b500      	push	{lr}
 8005114:	b09c      	sub	sp, #112	; 0x70
 8005116:	ab1d      	add	r3, sp, #116	; 0x74
 8005118:	9002      	str	r0, [sp, #8]
 800511a:	9006      	str	r0, [sp, #24]
 800511c:	9107      	str	r1, [sp, #28]
 800511e:	9104      	str	r1, [sp, #16]
 8005120:	4808      	ldr	r0, [pc, #32]	; (8005144 <siprintf+0x38>)
 8005122:	4909      	ldr	r1, [pc, #36]	; (8005148 <siprintf+0x3c>)
 8005124:	f853 2b04 	ldr.w	r2, [r3], #4
 8005128:	9105      	str	r1, [sp, #20]
 800512a:	6800      	ldr	r0, [r0, #0]
 800512c:	a902      	add	r1, sp, #8
 800512e:	9301      	str	r3, [sp, #4]
 8005130:	f002 ffd8 	bl	80080e4 <_svfiprintf_r>
 8005134:	2200      	movs	r2, #0
 8005136:	9b02      	ldr	r3, [sp, #8]
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	b01c      	add	sp, #112	; 0x70
 800513c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005140:	b003      	add	sp, #12
 8005142:	4770      	bx	lr
 8005144:	2000028c 	.word	0x2000028c
 8005148:	ffff0208 	.word	0xffff0208

0800514c <sulp>:
 800514c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005150:	460f      	mov	r7, r1
 8005152:	4690      	mov	r8, r2
 8005154:	f002 fe22 	bl	8007d9c <__ulp>
 8005158:	4604      	mov	r4, r0
 800515a:	460d      	mov	r5, r1
 800515c:	f1b8 0f00 	cmp.w	r8, #0
 8005160:	d011      	beq.n	8005186 <sulp+0x3a>
 8005162:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005166:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800516a:	2b00      	cmp	r3, #0
 800516c:	dd0b      	ble.n	8005186 <sulp+0x3a>
 800516e:	2400      	movs	r4, #0
 8005170:	051b      	lsls	r3, r3, #20
 8005172:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005176:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800517a:	4622      	mov	r2, r4
 800517c:	462b      	mov	r3, r5
 800517e:	f7fb f9ab 	bl	80004d8 <__aeabi_dmul>
 8005182:	4604      	mov	r4, r0
 8005184:	460d      	mov	r5, r1
 8005186:	4620      	mov	r0, r4
 8005188:	4629      	mov	r1, r5
 800518a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005190 <_strtod_l>:
 8005190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005194:	469b      	mov	fp, r3
 8005196:	2300      	movs	r3, #0
 8005198:	b09f      	sub	sp, #124	; 0x7c
 800519a:	931a      	str	r3, [sp, #104]	; 0x68
 800519c:	4b9e      	ldr	r3, [pc, #632]	; (8005418 <_strtod_l+0x288>)
 800519e:	4682      	mov	sl, r0
 80051a0:	681f      	ldr	r7, [r3, #0]
 80051a2:	460e      	mov	r6, r1
 80051a4:	4638      	mov	r0, r7
 80051a6:	9215      	str	r2, [sp, #84]	; 0x54
 80051a8:	f7fa ffd2 	bl	8000150 <strlen>
 80051ac:	f04f 0800 	mov.w	r8, #0
 80051b0:	4604      	mov	r4, r0
 80051b2:	f04f 0900 	mov.w	r9, #0
 80051b6:	9619      	str	r6, [sp, #100]	; 0x64
 80051b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051ba:	781a      	ldrb	r2, [r3, #0]
 80051bc:	2a2b      	cmp	r2, #43	; 0x2b
 80051be:	d04c      	beq.n	800525a <_strtod_l+0xca>
 80051c0:	d83a      	bhi.n	8005238 <_strtod_l+0xa8>
 80051c2:	2a0d      	cmp	r2, #13
 80051c4:	d833      	bhi.n	800522e <_strtod_l+0x9e>
 80051c6:	2a08      	cmp	r2, #8
 80051c8:	d833      	bhi.n	8005232 <_strtod_l+0xa2>
 80051ca:	2a00      	cmp	r2, #0
 80051cc:	d03d      	beq.n	800524a <_strtod_l+0xba>
 80051ce:	2300      	movs	r3, #0
 80051d0:	930a      	str	r3, [sp, #40]	; 0x28
 80051d2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80051d4:	782b      	ldrb	r3, [r5, #0]
 80051d6:	2b30      	cmp	r3, #48	; 0x30
 80051d8:	f040 80aa 	bne.w	8005330 <_strtod_l+0x1a0>
 80051dc:	786b      	ldrb	r3, [r5, #1]
 80051de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80051e2:	2b58      	cmp	r3, #88	; 0x58
 80051e4:	d166      	bne.n	80052b4 <_strtod_l+0x124>
 80051e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051e8:	4650      	mov	r0, sl
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	ab1a      	add	r3, sp, #104	; 0x68
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	4a8a      	ldr	r2, [pc, #552]	; (800541c <_strtod_l+0x28c>)
 80051f2:	f8cd b008 	str.w	fp, [sp, #8]
 80051f6:	ab1b      	add	r3, sp, #108	; 0x6c
 80051f8:	a919      	add	r1, sp, #100	; 0x64
 80051fa:	f001 fecb 	bl	8006f94 <__gethex>
 80051fe:	f010 0607 	ands.w	r6, r0, #7
 8005202:	4604      	mov	r4, r0
 8005204:	d005      	beq.n	8005212 <_strtod_l+0x82>
 8005206:	2e06      	cmp	r6, #6
 8005208:	d129      	bne.n	800525e <_strtod_l+0xce>
 800520a:	2300      	movs	r3, #0
 800520c:	3501      	adds	r5, #1
 800520e:	9519      	str	r5, [sp, #100]	; 0x64
 8005210:	930a      	str	r3, [sp, #40]	; 0x28
 8005212:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005214:	2b00      	cmp	r3, #0
 8005216:	f040 858a 	bne.w	8005d2e <_strtod_l+0xb9e>
 800521a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800521c:	b1d3      	cbz	r3, 8005254 <_strtod_l+0xc4>
 800521e:	4642      	mov	r2, r8
 8005220:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005224:	4610      	mov	r0, r2
 8005226:	4619      	mov	r1, r3
 8005228:	b01f      	add	sp, #124	; 0x7c
 800522a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522e:	2a20      	cmp	r2, #32
 8005230:	d1cd      	bne.n	80051ce <_strtod_l+0x3e>
 8005232:	3301      	adds	r3, #1
 8005234:	9319      	str	r3, [sp, #100]	; 0x64
 8005236:	e7bf      	b.n	80051b8 <_strtod_l+0x28>
 8005238:	2a2d      	cmp	r2, #45	; 0x2d
 800523a:	d1c8      	bne.n	80051ce <_strtod_l+0x3e>
 800523c:	2201      	movs	r2, #1
 800523e:	920a      	str	r2, [sp, #40]	; 0x28
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	9219      	str	r2, [sp, #100]	; 0x64
 8005244:	785b      	ldrb	r3, [r3, #1]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1c3      	bne.n	80051d2 <_strtod_l+0x42>
 800524a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800524c:	9619      	str	r6, [sp, #100]	; 0x64
 800524e:	2b00      	cmp	r3, #0
 8005250:	f040 856b 	bne.w	8005d2a <_strtod_l+0xb9a>
 8005254:	4642      	mov	r2, r8
 8005256:	464b      	mov	r3, r9
 8005258:	e7e4      	b.n	8005224 <_strtod_l+0x94>
 800525a:	2200      	movs	r2, #0
 800525c:	e7ef      	b.n	800523e <_strtod_l+0xae>
 800525e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005260:	b13a      	cbz	r2, 8005272 <_strtod_l+0xe2>
 8005262:	2135      	movs	r1, #53	; 0x35
 8005264:	a81c      	add	r0, sp, #112	; 0x70
 8005266:	f002 fe9d 	bl	8007fa4 <__copybits>
 800526a:	4650      	mov	r0, sl
 800526c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800526e:	f002 fa65 	bl	800773c <_Bfree>
 8005272:	3e01      	subs	r6, #1
 8005274:	2e04      	cmp	r6, #4
 8005276:	d806      	bhi.n	8005286 <_strtod_l+0xf6>
 8005278:	e8df f006 	tbb	[pc, r6]
 800527c:	1714030a 	.word	0x1714030a
 8005280:	0a          	.byte	0x0a
 8005281:	00          	.byte	0x00
 8005282:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005286:	0721      	lsls	r1, r4, #28
 8005288:	d5c3      	bpl.n	8005212 <_strtod_l+0x82>
 800528a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800528e:	e7c0      	b.n	8005212 <_strtod_l+0x82>
 8005290:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005292:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005296:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800529a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800529e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80052a2:	e7f0      	b.n	8005286 <_strtod_l+0xf6>
 80052a4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005420 <_strtod_l+0x290>
 80052a8:	e7ed      	b.n	8005286 <_strtod_l+0xf6>
 80052aa:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80052ae:	f04f 38ff 	mov.w	r8, #4294967295
 80052b2:	e7e8      	b.n	8005286 <_strtod_l+0xf6>
 80052b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	9219      	str	r2, [sp, #100]	; 0x64
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	2b30      	cmp	r3, #48	; 0x30
 80052be:	d0f9      	beq.n	80052b4 <_strtod_l+0x124>
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0a6      	beq.n	8005212 <_strtod_l+0x82>
 80052c4:	2301      	movs	r3, #1
 80052c6:	9307      	str	r3, [sp, #28]
 80052c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052ca:	220a      	movs	r2, #10
 80052cc:	9308      	str	r3, [sp, #32]
 80052ce:	2300      	movs	r3, #0
 80052d0:	469b      	mov	fp, r3
 80052d2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80052d6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80052d8:	7805      	ldrb	r5, [r0, #0]
 80052da:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80052de:	b2d9      	uxtb	r1, r3
 80052e0:	2909      	cmp	r1, #9
 80052e2:	d927      	bls.n	8005334 <_strtod_l+0x1a4>
 80052e4:	4622      	mov	r2, r4
 80052e6:	4639      	mov	r1, r7
 80052e8:	f003 f845 	bl	8008376 <strncmp>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d033      	beq.n	8005358 <_strtod_l+0x1c8>
 80052f0:	2000      	movs	r0, #0
 80052f2:	462a      	mov	r2, r5
 80052f4:	465c      	mov	r4, fp
 80052f6:	4603      	mov	r3, r0
 80052f8:	9004      	str	r0, [sp, #16]
 80052fa:	2a65      	cmp	r2, #101	; 0x65
 80052fc:	d001      	beq.n	8005302 <_strtod_l+0x172>
 80052fe:	2a45      	cmp	r2, #69	; 0x45
 8005300:	d114      	bne.n	800532c <_strtod_l+0x19c>
 8005302:	b91c      	cbnz	r4, 800530c <_strtod_l+0x17c>
 8005304:	9a07      	ldr	r2, [sp, #28]
 8005306:	4302      	orrs	r2, r0
 8005308:	d09f      	beq.n	800524a <_strtod_l+0xba>
 800530a:	2400      	movs	r4, #0
 800530c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800530e:	1c72      	adds	r2, r6, #1
 8005310:	9219      	str	r2, [sp, #100]	; 0x64
 8005312:	7872      	ldrb	r2, [r6, #1]
 8005314:	2a2b      	cmp	r2, #43	; 0x2b
 8005316:	d079      	beq.n	800540c <_strtod_l+0x27c>
 8005318:	2a2d      	cmp	r2, #45	; 0x2d
 800531a:	f000 8083 	beq.w	8005424 <_strtod_l+0x294>
 800531e:	2700      	movs	r7, #0
 8005320:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005324:	2909      	cmp	r1, #9
 8005326:	f240 8083 	bls.w	8005430 <_strtod_l+0x2a0>
 800532a:	9619      	str	r6, [sp, #100]	; 0x64
 800532c:	2500      	movs	r5, #0
 800532e:	e09f      	b.n	8005470 <_strtod_l+0x2e0>
 8005330:	2300      	movs	r3, #0
 8005332:	e7c8      	b.n	80052c6 <_strtod_l+0x136>
 8005334:	f1bb 0f08 	cmp.w	fp, #8
 8005338:	bfd5      	itete	le
 800533a:	9906      	ldrle	r1, [sp, #24]
 800533c:	9905      	ldrgt	r1, [sp, #20]
 800533e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005342:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005346:	f100 0001 	add.w	r0, r0, #1
 800534a:	bfd4      	ite	le
 800534c:	9306      	strle	r3, [sp, #24]
 800534e:	9305      	strgt	r3, [sp, #20]
 8005350:	f10b 0b01 	add.w	fp, fp, #1
 8005354:	9019      	str	r0, [sp, #100]	; 0x64
 8005356:	e7be      	b.n	80052d6 <_strtod_l+0x146>
 8005358:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800535a:	191a      	adds	r2, r3, r4
 800535c:	9219      	str	r2, [sp, #100]	; 0x64
 800535e:	5d1a      	ldrb	r2, [r3, r4]
 8005360:	f1bb 0f00 	cmp.w	fp, #0
 8005364:	d036      	beq.n	80053d4 <_strtod_l+0x244>
 8005366:	465c      	mov	r4, fp
 8005368:	9004      	str	r0, [sp, #16]
 800536a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800536e:	2b09      	cmp	r3, #9
 8005370:	d912      	bls.n	8005398 <_strtod_l+0x208>
 8005372:	2301      	movs	r3, #1
 8005374:	e7c1      	b.n	80052fa <_strtod_l+0x16a>
 8005376:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005378:	3001      	adds	r0, #1
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	9219      	str	r2, [sp, #100]	; 0x64
 800537e:	785a      	ldrb	r2, [r3, #1]
 8005380:	2a30      	cmp	r2, #48	; 0x30
 8005382:	d0f8      	beq.n	8005376 <_strtod_l+0x1e6>
 8005384:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005388:	2b08      	cmp	r3, #8
 800538a:	f200 84d5 	bhi.w	8005d38 <_strtod_l+0xba8>
 800538e:	9004      	str	r0, [sp, #16]
 8005390:	2000      	movs	r0, #0
 8005392:	4604      	mov	r4, r0
 8005394:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005396:	9308      	str	r3, [sp, #32]
 8005398:	3a30      	subs	r2, #48	; 0x30
 800539a:	f100 0301 	add.w	r3, r0, #1
 800539e:	d013      	beq.n	80053c8 <_strtod_l+0x238>
 80053a0:	9904      	ldr	r1, [sp, #16]
 80053a2:	1905      	adds	r5, r0, r4
 80053a4:	4419      	add	r1, r3
 80053a6:	9104      	str	r1, [sp, #16]
 80053a8:	4623      	mov	r3, r4
 80053aa:	210a      	movs	r1, #10
 80053ac:	42ab      	cmp	r3, r5
 80053ae:	d113      	bne.n	80053d8 <_strtod_l+0x248>
 80053b0:	1823      	adds	r3, r4, r0
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	f104 0401 	add.w	r4, r4, #1
 80053b8:	4404      	add	r4, r0
 80053ba:	dc1b      	bgt.n	80053f4 <_strtod_l+0x264>
 80053bc:	230a      	movs	r3, #10
 80053be:	9906      	ldr	r1, [sp, #24]
 80053c0:	fb03 2301 	mla	r3, r3, r1, r2
 80053c4:	9306      	str	r3, [sp, #24]
 80053c6:	2300      	movs	r3, #0
 80053c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053ca:	4618      	mov	r0, r3
 80053cc:	1c51      	adds	r1, r2, #1
 80053ce:	9119      	str	r1, [sp, #100]	; 0x64
 80053d0:	7852      	ldrb	r2, [r2, #1]
 80053d2:	e7ca      	b.n	800536a <_strtod_l+0x1da>
 80053d4:	4658      	mov	r0, fp
 80053d6:	e7d3      	b.n	8005380 <_strtod_l+0x1f0>
 80053d8:	2b08      	cmp	r3, #8
 80053da:	dc04      	bgt.n	80053e6 <_strtod_l+0x256>
 80053dc:	9f06      	ldr	r7, [sp, #24]
 80053de:	434f      	muls	r7, r1
 80053e0:	9706      	str	r7, [sp, #24]
 80053e2:	3301      	adds	r3, #1
 80053e4:	e7e2      	b.n	80053ac <_strtod_l+0x21c>
 80053e6:	1c5f      	adds	r7, r3, #1
 80053e8:	2f10      	cmp	r7, #16
 80053ea:	bfde      	ittt	le
 80053ec:	9f05      	ldrle	r7, [sp, #20]
 80053ee:	434f      	mulle	r7, r1
 80053f0:	9705      	strle	r7, [sp, #20]
 80053f2:	e7f6      	b.n	80053e2 <_strtod_l+0x252>
 80053f4:	2c10      	cmp	r4, #16
 80053f6:	bfdf      	itttt	le
 80053f8:	230a      	movle	r3, #10
 80053fa:	9905      	ldrle	r1, [sp, #20]
 80053fc:	fb03 2301 	mlale	r3, r3, r1, r2
 8005400:	9305      	strle	r3, [sp, #20]
 8005402:	e7e0      	b.n	80053c6 <_strtod_l+0x236>
 8005404:	2300      	movs	r3, #0
 8005406:	9304      	str	r3, [sp, #16]
 8005408:	2301      	movs	r3, #1
 800540a:	e77b      	b.n	8005304 <_strtod_l+0x174>
 800540c:	2700      	movs	r7, #0
 800540e:	1cb2      	adds	r2, r6, #2
 8005410:	9219      	str	r2, [sp, #100]	; 0x64
 8005412:	78b2      	ldrb	r2, [r6, #2]
 8005414:	e784      	b.n	8005320 <_strtod_l+0x190>
 8005416:	bf00      	nop
 8005418:	08008fe4 	.word	0x08008fe4
 800541c:	08008d34 	.word	0x08008d34
 8005420:	7ff00000 	.word	0x7ff00000
 8005424:	2701      	movs	r7, #1
 8005426:	e7f2      	b.n	800540e <_strtod_l+0x27e>
 8005428:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800542a:	1c51      	adds	r1, r2, #1
 800542c:	9119      	str	r1, [sp, #100]	; 0x64
 800542e:	7852      	ldrb	r2, [r2, #1]
 8005430:	2a30      	cmp	r2, #48	; 0x30
 8005432:	d0f9      	beq.n	8005428 <_strtod_l+0x298>
 8005434:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005438:	2908      	cmp	r1, #8
 800543a:	f63f af77 	bhi.w	800532c <_strtod_l+0x19c>
 800543e:	f04f 0e0a 	mov.w	lr, #10
 8005442:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005446:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005448:	9209      	str	r2, [sp, #36]	; 0x24
 800544a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800544c:	1c51      	adds	r1, r2, #1
 800544e:	9119      	str	r1, [sp, #100]	; 0x64
 8005450:	7852      	ldrb	r2, [r2, #1]
 8005452:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005456:	2d09      	cmp	r5, #9
 8005458:	d935      	bls.n	80054c6 <_strtod_l+0x336>
 800545a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800545c:	1b49      	subs	r1, r1, r5
 800545e:	2908      	cmp	r1, #8
 8005460:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005464:	dc02      	bgt.n	800546c <_strtod_l+0x2dc>
 8005466:	4565      	cmp	r5, ip
 8005468:	bfa8      	it	ge
 800546a:	4665      	movge	r5, ip
 800546c:	b107      	cbz	r7, 8005470 <_strtod_l+0x2e0>
 800546e:	426d      	negs	r5, r5
 8005470:	2c00      	cmp	r4, #0
 8005472:	d14c      	bne.n	800550e <_strtod_l+0x37e>
 8005474:	9907      	ldr	r1, [sp, #28]
 8005476:	4301      	orrs	r1, r0
 8005478:	f47f aecb 	bne.w	8005212 <_strtod_l+0x82>
 800547c:	2b00      	cmp	r3, #0
 800547e:	f47f aee4 	bne.w	800524a <_strtod_l+0xba>
 8005482:	2a69      	cmp	r2, #105	; 0x69
 8005484:	d026      	beq.n	80054d4 <_strtod_l+0x344>
 8005486:	dc23      	bgt.n	80054d0 <_strtod_l+0x340>
 8005488:	2a49      	cmp	r2, #73	; 0x49
 800548a:	d023      	beq.n	80054d4 <_strtod_l+0x344>
 800548c:	2a4e      	cmp	r2, #78	; 0x4e
 800548e:	f47f aedc 	bne.w	800524a <_strtod_l+0xba>
 8005492:	499d      	ldr	r1, [pc, #628]	; (8005708 <_strtod_l+0x578>)
 8005494:	a819      	add	r0, sp, #100	; 0x64
 8005496:	f001 ffcb 	bl	8007430 <__match>
 800549a:	2800      	cmp	r0, #0
 800549c:	f43f aed5 	beq.w	800524a <_strtod_l+0xba>
 80054a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b28      	cmp	r3, #40	; 0x28
 80054a6:	d12c      	bne.n	8005502 <_strtod_l+0x372>
 80054a8:	4998      	ldr	r1, [pc, #608]	; (800570c <_strtod_l+0x57c>)
 80054aa:	aa1c      	add	r2, sp, #112	; 0x70
 80054ac:	a819      	add	r0, sp, #100	; 0x64
 80054ae:	f001 ffd3 	bl	8007458 <__hexnan>
 80054b2:	2805      	cmp	r0, #5
 80054b4:	d125      	bne.n	8005502 <_strtod_l+0x372>
 80054b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80054b8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80054bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80054c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80054c4:	e6a5      	b.n	8005212 <_strtod_l+0x82>
 80054c6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80054ca:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80054ce:	e7bc      	b.n	800544a <_strtod_l+0x2ba>
 80054d0:	2a6e      	cmp	r2, #110	; 0x6e
 80054d2:	e7dc      	b.n	800548e <_strtod_l+0x2fe>
 80054d4:	498e      	ldr	r1, [pc, #568]	; (8005710 <_strtod_l+0x580>)
 80054d6:	a819      	add	r0, sp, #100	; 0x64
 80054d8:	f001 ffaa 	bl	8007430 <__match>
 80054dc:	2800      	cmp	r0, #0
 80054de:	f43f aeb4 	beq.w	800524a <_strtod_l+0xba>
 80054e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80054e4:	498b      	ldr	r1, [pc, #556]	; (8005714 <_strtod_l+0x584>)
 80054e6:	3b01      	subs	r3, #1
 80054e8:	a819      	add	r0, sp, #100	; 0x64
 80054ea:	9319      	str	r3, [sp, #100]	; 0x64
 80054ec:	f001 ffa0 	bl	8007430 <__match>
 80054f0:	b910      	cbnz	r0, 80054f8 <_strtod_l+0x368>
 80054f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80054f4:	3301      	adds	r3, #1
 80054f6:	9319      	str	r3, [sp, #100]	; 0x64
 80054f8:	f04f 0800 	mov.w	r8, #0
 80054fc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005718 <_strtod_l+0x588>
 8005500:	e687      	b.n	8005212 <_strtod_l+0x82>
 8005502:	4886      	ldr	r0, [pc, #536]	; (800571c <_strtod_l+0x58c>)
 8005504:	f002 feee 	bl	80082e4 <nan>
 8005508:	4680      	mov	r8, r0
 800550a:	4689      	mov	r9, r1
 800550c:	e681      	b.n	8005212 <_strtod_l+0x82>
 800550e:	9b04      	ldr	r3, [sp, #16]
 8005510:	f1bb 0f00 	cmp.w	fp, #0
 8005514:	bf08      	it	eq
 8005516:	46a3      	moveq	fp, r4
 8005518:	1aeb      	subs	r3, r5, r3
 800551a:	2c10      	cmp	r4, #16
 800551c:	9806      	ldr	r0, [sp, #24]
 800551e:	4626      	mov	r6, r4
 8005520:	9307      	str	r3, [sp, #28]
 8005522:	bfa8      	it	ge
 8005524:	2610      	movge	r6, #16
 8005526:	f7fa ff5d 	bl	80003e4 <__aeabi_ui2d>
 800552a:	2c09      	cmp	r4, #9
 800552c:	4680      	mov	r8, r0
 800552e:	4689      	mov	r9, r1
 8005530:	dd13      	ble.n	800555a <_strtod_l+0x3ca>
 8005532:	4b7b      	ldr	r3, [pc, #492]	; (8005720 <_strtod_l+0x590>)
 8005534:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005538:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800553c:	f7fa ffcc 	bl	80004d8 <__aeabi_dmul>
 8005540:	4680      	mov	r8, r0
 8005542:	9805      	ldr	r0, [sp, #20]
 8005544:	4689      	mov	r9, r1
 8005546:	f7fa ff4d 	bl	80003e4 <__aeabi_ui2d>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4640      	mov	r0, r8
 8005550:	4649      	mov	r1, r9
 8005552:	f7fa fe0b 	bl	800016c <__adddf3>
 8005556:	4680      	mov	r8, r0
 8005558:	4689      	mov	r9, r1
 800555a:	2c0f      	cmp	r4, #15
 800555c:	dc36      	bgt.n	80055cc <_strtod_l+0x43c>
 800555e:	9b07      	ldr	r3, [sp, #28]
 8005560:	2b00      	cmp	r3, #0
 8005562:	f43f ae56 	beq.w	8005212 <_strtod_l+0x82>
 8005566:	dd22      	ble.n	80055ae <_strtod_l+0x41e>
 8005568:	2b16      	cmp	r3, #22
 800556a:	dc09      	bgt.n	8005580 <_strtod_l+0x3f0>
 800556c:	496c      	ldr	r1, [pc, #432]	; (8005720 <_strtod_l+0x590>)
 800556e:	4642      	mov	r2, r8
 8005570:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005574:	464b      	mov	r3, r9
 8005576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800557a:	f7fa ffad 	bl	80004d8 <__aeabi_dmul>
 800557e:	e7c3      	b.n	8005508 <_strtod_l+0x378>
 8005580:	9a07      	ldr	r2, [sp, #28]
 8005582:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005586:	4293      	cmp	r3, r2
 8005588:	db20      	blt.n	80055cc <_strtod_l+0x43c>
 800558a:	4d65      	ldr	r5, [pc, #404]	; (8005720 <_strtod_l+0x590>)
 800558c:	f1c4 040f 	rsb	r4, r4, #15
 8005590:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005594:	4642      	mov	r2, r8
 8005596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800559a:	464b      	mov	r3, r9
 800559c:	f7fa ff9c 	bl	80004d8 <__aeabi_dmul>
 80055a0:	9b07      	ldr	r3, [sp, #28]
 80055a2:	1b1c      	subs	r4, r3, r4
 80055a4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80055a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055ac:	e7e5      	b.n	800557a <_strtod_l+0x3ea>
 80055ae:	9b07      	ldr	r3, [sp, #28]
 80055b0:	3316      	adds	r3, #22
 80055b2:	db0b      	blt.n	80055cc <_strtod_l+0x43c>
 80055b4:	9b04      	ldr	r3, [sp, #16]
 80055b6:	4640      	mov	r0, r8
 80055b8:	1b5d      	subs	r5, r3, r5
 80055ba:	4b59      	ldr	r3, [pc, #356]	; (8005720 <_strtod_l+0x590>)
 80055bc:	4649      	mov	r1, r9
 80055be:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80055c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055c6:	f7fb f8b1 	bl	800072c <__aeabi_ddiv>
 80055ca:	e79d      	b.n	8005508 <_strtod_l+0x378>
 80055cc:	9b07      	ldr	r3, [sp, #28]
 80055ce:	1ba6      	subs	r6, r4, r6
 80055d0:	441e      	add	r6, r3
 80055d2:	2e00      	cmp	r6, #0
 80055d4:	dd74      	ble.n	80056c0 <_strtod_l+0x530>
 80055d6:	f016 030f 	ands.w	r3, r6, #15
 80055da:	d00a      	beq.n	80055f2 <_strtod_l+0x462>
 80055dc:	4950      	ldr	r1, [pc, #320]	; (8005720 <_strtod_l+0x590>)
 80055de:	4642      	mov	r2, r8
 80055e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80055e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055e8:	464b      	mov	r3, r9
 80055ea:	f7fa ff75 	bl	80004d8 <__aeabi_dmul>
 80055ee:	4680      	mov	r8, r0
 80055f0:	4689      	mov	r9, r1
 80055f2:	f036 060f 	bics.w	r6, r6, #15
 80055f6:	d052      	beq.n	800569e <_strtod_l+0x50e>
 80055f8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80055fc:	dd27      	ble.n	800564e <_strtod_l+0x4be>
 80055fe:	f04f 0b00 	mov.w	fp, #0
 8005602:	f8cd b010 	str.w	fp, [sp, #16]
 8005606:	f8cd b020 	str.w	fp, [sp, #32]
 800560a:	f8cd b018 	str.w	fp, [sp, #24]
 800560e:	2322      	movs	r3, #34	; 0x22
 8005610:	f04f 0800 	mov.w	r8, #0
 8005614:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005718 <_strtod_l+0x588>
 8005618:	f8ca 3000 	str.w	r3, [sl]
 800561c:	9b08      	ldr	r3, [sp, #32]
 800561e:	2b00      	cmp	r3, #0
 8005620:	f43f adf7 	beq.w	8005212 <_strtod_l+0x82>
 8005624:	4650      	mov	r0, sl
 8005626:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005628:	f002 f888 	bl	800773c <_Bfree>
 800562c:	4650      	mov	r0, sl
 800562e:	9906      	ldr	r1, [sp, #24]
 8005630:	f002 f884 	bl	800773c <_Bfree>
 8005634:	4650      	mov	r0, sl
 8005636:	9904      	ldr	r1, [sp, #16]
 8005638:	f002 f880 	bl	800773c <_Bfree>
 800563c:	4650      	mov	r0, sl
 800563e:	9908      	ldr	r1, [sp, #32]
 8005640:	f002 f87c 	bl	800773c <_Bfree>
 8005644:	4659      	mov	r1, fp
 8005646:	4650      	mov	r0, sl
 8005648:	f002 f878 	bl	800773c <_Bfree>
 800564c:	e5e1      	b.n	8005212 <_strtod_l+0x82>
 800564e:	4b35      	ldr	r3, [pc, #212]	; (8005724 <_strtod_l+0x594>)
 8005650:	4640      	mov	r0, r8
 8005652:	9305      	str	r3, [sp, #20]
 8005654:	2300      	movs	r3, #0
 8005656:	4649      	mov	r1, r9
 8005658:	461f      	mov	r7, r3
 800565a:	1136      	asrs	r6, r6, #4
 800565c:	2e01      	cmp	r6, #1
 800565e:	dc21      	bgt.n	80056a4 <_strtod_l+0x514>
 8005660:	b10b      	cbz	r3, 8005666 <_strtod_l+0x4d6>
 8005662:	4680      	mov	r8, r0
 8005664:	4689      	mov	r9, r1
 8005666:	4b2f      	ldr	r3, [pc, #188]	; (8005724 <_strtod_l+0x594>)
 8005668:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800566c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005670:	4642      	mov	r2, r8
 8005672:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005676:	464b      	mov	r3, r9
 8005678:	f7fa ff2e 	bl	80004d8 <__aeabi_dmul>
 800567c:	4b26      	ldr	r3, [pc, #152]	; (8005718 <_strtod_l+0x588>)
 800567e:	460a      	mov	r2, r1
 8005680:	400b      	ands	r3, r1
 8005682:	4929      	ldr	r1, [pc, #164]	; (8005728 <_strtod_l+0x598>)
 8005684:	4680      	mov	r8, r0
 8005686:	428b      	cmp	r3, r1
 8005688:	d8b9      	bhi.n	80055fe <_strtod_l+0x46e>
 800568a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800568e:	428b      	cmp	r3, r1
 8005690:	bf86      	itte	hi
 8005692:	f04f 38ff 	movhi.w	r8, #4294967295
 8005696:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800572c <_strtod_l+0x59c>
 800569a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800569e:	2300      	movs	r3, #0
 80056a0:	9305      	str	r3, [sp, #20]
 80056a2:	e07f      	b.n	80057a4 <_strtod_l+0x614>
 80056a4:	07f2      	lsls	r2, r6, #31
 80056a6:	d505      	bpl.n	80056b4 <_strtod_l+0x524>
 80056a8:	9b05      	ldr	r3, [sp, #20]
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f7fa ff13 	bl	80004d8 <__aeabi_dmul>
 80056b2:	2301      	movs	r3, #1
 80056b4:	9a05      	ldr	r2, [sp, #20]
 80056b6:	3701      	adds	r7, #1
 80056b8:	3208      	adds	r2, #8
 80056ba:	1076      	asrs	r6, r6, #1
 80056bc:	9205      	str	r2, [sp, #20]
 80056be:	e7cd      	b.n	800565c <_strtod_l+0x4cc>
 80056c0:	d0ed      	beq.n	800569e <_strtod_l+0x50e>
 80056c2:	4276      	negs	r6, r6
 80056c4:	f016 020f 	ands.w	r2, r6, #15
 80056c8:	d00a      	beq.n	80056e0 <_strtod_l+0x550>
 80056ca:	4b15      	ldr	r3, [pc, #84]	; (8005720 <_strtod_l+0x590>)
 80056cc:	4640      	mov	r0, r8
 80056ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056d2:	4649      	mov	r1, r9
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	f7fb f828 	bl	800072c <__aeabi_ddiv>
 80056dc:	4680      	mov	r8, r0
 80056de:	4689      	mov	r9, r1
 80056e0:	1136      	asrs	r6, r6, #4
 80056e2:	d0dc      	beq.n	800569e <_strtod_l+0x50e>
 80056e4:	2e1f      	cmp	r6, #31
 80056e6:	dd23      	ble.n	8005730 <_strtod_l+0x5a0>
 80056e8:	f04f 0b00 	mov.w	fp, #0
 80056ec:	f8cd b010 	str.w	fp, [sp, #16]
 80056f0:	f8cd b020 	str.w	fp, [sp, #32]
 80056f4:	f8cd b018 	str.w	fp, [sp, #24]
 80056f8:	2322      	movs	r3, #34	; 0x22
 80056fa:	f04f 0800 	mov.w	r8, #0
 80056fe:	f04f 0900 	mov.w	r9, #0
 8005702:	f8ca 3000 	str.w	r3, [sl]
 8005706:	e789      	b.n	800561c <_strtod_l+0x48c>
 8005708:	08008d05 	.word	0x08008d05
 800570c:	08008d48 	.word	0x08008d48
 8005710:	08008cfd 	.word	0x08008cfd
 8005714:	08008e8c 	.word	0x08008e8c
 8005718:	7ff00000 	.word	0x7ff00000
 800571c:	080091a0 	.word	0x080091a0
 8005720:	08009080 	.word	0x08009080
 8005724:	08009058 	.word	0x08009058
 8005728:	7ca00000 	.word	0x7ca00000
 800572c:	7fefffff 	.word	0x7fefffff
 8005730:	f016 0310 	ands.w	r3, r6, #16
 8005734:	bf18      	it	ne
 8005736:	236a      	movne	r3, #106	; 0x6a
 8005738:	4640      	mov	r0, r8
 800573a:	9305      	str	r3, [sp, #20]
 800573c:	4649      	mov	r1, r9
 800573e:	2300      	movs	r3, #0
 8005740:	4fb0      	ldr	r7, [pc, #704]	; (8005a04 <_strtod_l+0x874>)
 8005742:	07f2      	lsls	r2, r6, #31
 8005744:	d504      	bpl.n	8005750 <_strtod_l+0x5c0>
 8005746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800574a:	f7fa fec5 	bl	80004d8 <__aeabi_dmul>
 800574e:	2301      	movs	r3, #1
 8005750:	1076      	asrs	r6, r6, #1
 8005752:	f107 0708 	add.w	r7, r7, #8
 8005756:	d1f4      	bne.n	8005742 <_strtod_l+0x5b2>
 8005758:	b10b      	cbz	r3, 800575e <_strtod_l+0x5ce>
 800575a:	4680      	mov	r8, r0
 800575c:	4689      	mov	r9, r1
 800575e:	9b05      	ldr	r3, [sp, #20]
 8005760:	b1c3      	cbz	r3, 8005794 <_strtod_l+0x604>
 8005762:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005766:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800576a:	2b00      	cmp	r3, #0
 800576c:	4649      	mov	r1, r9
 800576e:	dd11      	ble.n	8005794 <_strtod_l+0x604>
 8005770:	2b1f      	cmp	r3, #31
 8005772:	f340 8127 	ble.w	80059c4 <_strtod_l+0x834>
 8005776:	2b34      	cmp	r3, #52	; 0x34
 8005778:	bfd8      	it	le
 800577a:	f04f 33ff 	movle.w	r3, #4294967295
 800577e:	f04f 0800 	mov.w	r8, #0
 8005782:	bfcf      	iteee	gt
 8005784:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005788:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800578c:	fa03 f202 	lslle.w	r2, r3, r2
 8005790:	ea02 0901 	andle.w	r9, r2, r1
 8005794:	2200      	movs	r2, #0
 8005796:	2300      	movs	r3, #0
 8005798:	4640      	mov	r0, r8
 800579a:	4649      	mov	r1, r9
 800579c:	f7fb f904 	bl	80009a8 <__aeabi_dcmpeq>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d1a1      	bne.n	80056e8 <_strtod_l+0x558>
 80057a4:	9b06      	ldr	r3, [sp, #24]
 80057a6:	465a      	mov	r2, fp
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	4650      	mov	r0, sl
 80057ac:	4623      	mov	r3, r4
 80057ae:	9908      	ldr	r1, [sp, #32]
 80057b0:	f002 f82c 	bl	800780c <__s2b>
 80057b4:	9008      	str	r0, [sp, #32]
 80057b6:	2800      	cmp	r0, #0
 80057b8:	f43f af21 	beq.w	80055fe <_strtod_l+0x46e>
 80057bc:	9b04      	ldr	r3, [sp, #16]
 80057be:	f04f 0b00 	mov.w	fp, #0
 80057c2:	1b5d      	subs	r5, r3, r5
 80057c4:	9b07      	ldr	r3, [sp, #28]
 80057c6:	f8cd b010 	str.w	fp, [sp, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bfb4      	ite	lt
 80057ce:	462b      	movlt	r3, r5
 80057d0:	2300      	movge	r3, #0
 80057d2:	930e      	str	r3, [sp, #56]	; 0x38
 80057d4:	9b07      	ldr	r3, [sp, #28]
 80057d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80057da:	9314      	str	r3, [sp, #80]	; 0x50
 80057dc:	9b08      	ldr	r3, [sp, #32]
 80057de:	4650      	mov	r0, sl
 80057e0:	6859      	ldr	r1, [r3, #4]
 80057e2:	f001 ff6b 	bl	80076bc <_Balloc>
 80057e6:	9006      	str	r0, [sp, #24]
 80057e8:	2800      	cmp	r0, #0
 80057ea:	f43f af10 	beq.w	800560e <_strtod_l+0x47e>
 80057ee:	9b08      	ldr	r3, [sp, #32]
 80057f0:	300c      	adds	r0, #12
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	f103 010c 	add.w	r1, r3, #12
 80057f8:	3202      	adds	r2, #2
 80057fa:	0092      	lsls	r2, r2, #2
 80057fc:	f7fe fcfe 	bl	80041fc <memcpy>
 8005800:	ab1c      	add	r3, sp, #112	; 0x70
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	ab1b      	add	r3, sp, #108	; 0x6c
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	4642      	mov	r2, r8
 800580a:	464b      	mov	r3, r9
 800580c:	4650      	mov	r0, sl
 800580e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005812:	f002 fb3d 	bl	8007e90 <__d2b>
 8005816:	901a      	str	r0, [sp, #104]	; 0x68
 8005818:	2800      	cmp	r0, #0
 800581a:	f43f aef8 	beq.w	800560e <_strtod_l+0x47e>
 800581e:	2101      	movs	r1, #1
 8005820:	4650      	mov	r0, sl
 8005822:	f002 f88b 	bl	800793c <__i2b>
 8005826:	4603      	mov	r3, r0
 8005828:	9004      	str	r0, [sp, #16]
 800582a:	2800      	cmp	r0, #0
 800582c:	f43f aeef 	beq.w	800560e <_strtod_l+0x47e>
 8005830:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005832:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005834:	2d00      	cmp	r5, #0
 8005836:	bfab      	itete	ge
 8005838:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800583a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800583c:	18ee      	addge	r6, r5, r3
 800583e:	1b5c      	sublt	r4, r3, r5
 8005840:	9b05      	ldr	r3, [sp, #20]
 8005842:	bfa8      	it	ge
 8005844:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005846:	eba5 0503 	sub.w	r5, r5, r3
 800584a:	4415      	add	r5, r2
 800584c:	4b6e      	ldr	r3, [pc, #440]	; (8005a08 <_strtod_l+0x878>)
 800584e:	f105 35ff 	add.w	r5, r5, #4294967295
 8005852:	bfb8      	it	lt
 8005854:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005856:	429d      	cmp	r5, r3
 8005858:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800585c:	f280 80c4 	bge.w	80059e8 <_strtod_l+0x858>
 8005860:	1b5b      	subs	r3, r3, r5
 8005862:	2b1f      	cmp	r3, #31
 8005864:	f04f 0701 	mov.w	r7, #1
 8005868:	eba2 0203 	sub.w	r2, r2, r3
 800586c:	f300 80b1 	bgt.w	80059d2 <_strtod_l+0x842>
 8005870:	2500      	movs	r5, #0
 8005872:	fa07 f303 	lsl.w	r3, r7, r3
 8005876:	930f      	str	r3, [sp, #60]	; 0x3c
 8005878:	18b7      	adds	r7, r6, r2
 800587a:	9b05      	ldr	r3, [sp, #20]
 800587c:	42be      	cmp	r6, r7
 800587e:	4414      	add	r4, r2
 8005880:	441c      	add	r4, r3
 8005882:	4633      	mov	r3, r6
 8005884:	bfa8      	it	ge
 8005886:	463b      	movge	r3, r7
 8005888:	42a3      	cmp	r3, r4
 800588a:	bfa8      	it	ge
 800588c:	4623      	movge	r3, r4
 800588e:	2b00      	cmp	r3, #0
 8005890:	bfc2      	ittt	gt
 8005892:	1aff      	subgt	r7, r7, r3
 8005894:	1ae4      	subgt	r4, r4, r3
 8005896:	1af6      	subgt	r6, r6, r3
 8005898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800589a:	2b00      	cmp	r3, #0
 800589c:	dd17      	ble.n	80058ce <_strtod_l+0x73e>
 800589e:	461a      	mov	r2, r3
 80058a0:	4650      	mov	r0, sl
 80058a2:	9904      	ldr	r1, [sp, #16]
 80058a4:	f002 f908 	bl	8007ab8 <__pow5mult>
 80058a8:	9004      	str	r0, [sp, #16]
 80058aa:	2800      	cmp	r0, #0
 80058ac:	f43f aeaf 	beq.w	800560e <_strtod_l+0x47e>
 80058b0:	4601      	mov	r1, r0
 80058b2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80058b4:	4650      	mov	r0, sl
 80058b6:	f002 f857 	bl	8007968 <__multiply>
 80058ba:	9009      	str	r0, [sp, #36]	; 0x24
 80058bc:	2800      	cmp	r0, #0
 80058be:	f43f aea6 	beq.w	800560e <_strtod_l+0x47e>
 80058c2:	4650      	mov	r0, sl
 80058c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80058c6:	f001 ff39 	bl	800773c <_Bfree>
 80058ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058cc:	931a      	str	r3, [sp, #104]	; 0x68
 80058ce:	2f00      	cmp	r7, #0
 80058d0:	f300 808e 	bgt.w	80059f0 <_strtod_l+0x860>
 80058d4:	9b07      	ldr	r3, [sp, #28]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	dd08      	ble.n	80058ec <_strtod_l+0x75c>
 80058da:	4650      	mov	r0, sl
 80058dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80058de:	9906      	ldr	r1, [sp, #24]
 80058e0:	f002 f8ea 	bl	8007ab8 <__pow5mult>
 80058e4:	9006      	str	r0, [sp, #24]
 80058e6:	2800      	cmp	r0, #0
 80058e8:	f43f ae91 	beq.w	800560e <_strtod_l+0x47e>
 80058ec:	2c00      	cmp	r4, #0
 80058ee:	dd08      	ble.n	8005902 <_strtod_l+0x772>
 80058f0:	4622      	mov	r2, r4
 80058f2:	4650      	mov	r0, sl
 80058f4:	9906      	ldr	r1, [sp, #24]
 80058f6:	f002 f939 	bl	8007b6c <__lshift>
 80058fa:	9006      	str	r0, [sp, #24]
 80058fc:	2800      	cmp	r0, #0
 80058fe:	f43f ae86 	beq.w	800560e <_strtod_l+0x47e>
 8005902:	2e00      	cmp	r6, #0
 8005904:	dd08      	ble.n	8005918 <_strtod_l+0x788>
 8005906:	4632      	mov	r2, r6
 8005908:	4650      	mov	r0, sl
 800590a:	9904      	ldr	r1, [sp, #16]
 800590c:	f002 f92e 	bl	8007b6c <__lshift>
 8005910:	9004      	str	r0, [sp, #16]
 8005912:	2800      	cmp	r0, #0
 8005914:	f43f ae7b 	beq.w	800560e <_strtod_l+0x47e>
 8005918:	4650      	mov	r0, sl
 800591a:	9a06      	ldr	r2, [sp, #24]
 800591c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800591e:	f002 f9b1 	bl	8007c84 <__mdiff>
 8005922:	4683      	mov	fp, r0
 8005924:	2800      	cmp	r0, #0
 8005926:	f43f ae72 	beq.w	800560e <_strtod_l+0x47e>
 800592a:	2400      	movs	r4, #0
 800592c:	68c3      	ldr	r3, [r0, #12]
 800592e:	9904      	ldr	r1, [sp, #16]
 8005930:	60c4      	str	r4, [r0, #12]
 8005932:	930b      	str	r3, [sp, #44]	; 0x2c
 8005934:	f002 f98a 	bl	8007c4c <__mcmp>
 8005938:	42a0      	cmp	r0, r4
 800593a:	da6b      	bge.n	8005a14 <_strtod_l+0x884>
 800593c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800593e:	ea53 0308 	orrs.w	r3, r3, r8
 8005942:	f040 8091 	bne.w	8005a68 <_strtod_l+0x8d8>
 8005946:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800594a:	2b00      	cmp	r3, #0
 800594c:	f040 808c 	bne.w	8005a68 <_strtod_l+0x8d8>
 8005950:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005954:	0d1b      	lsrs	r3, r3, #20
 8005956:	051b      	lsls	r3, r3, #20
 8005958:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800595c:	f240 8084 	bls.w	8005a68 <_strtod_l+0x8d8>
 8005960:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005964:	b91b      	cbnz	r3, 800596e <_strtod_l+0x7de>
 8005966:	f8db 3010 	ldr.w	r3, [fp, #16]
 800596a:	2b01      	cmp	r3, #1
 800596c:	dd7c      	ble.n	8005a68 <_strtod_l+0x8d8>
 800596e:	4659      	mov	r1, fp
 8005970:	2201      	movs	r2, #1
 8005972:	4650      	mov	r0, sl
 8005974:	f002 f8fa 	bl	8007b6c <__lshift>
 8005978:	9904      	ldr	r1, [sp, #16]
 800597a:	4683      	mov	fp, r0
 800597c:	f002 f966 	bl	8007c4c <__mcmp>
 8005980:	2800      	cmp	r0, #0
 8005982:	dd71      	ble.n	8005a68 <_strtod_l+0x8d8>
 8005984:	9905      	ldr	r1, [sp, #20]
 8005986:	464b      	mov	r3, r9
 8005988:	4a20      	ldr	r2, [pc, #128]	; (8005a0c <_strtod_l+0x87c>)
 800598a:	2900      	cmp	r1, #0
 800598c:	f000 808c 	beq.w	8005aa8 <_strtod_l+0x918>
 8005990:	ea02 0109 	and.w	r1, r2, r9
 8005994:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005998:	f300 8086 	bgt.w	8005aa8 <_strtod_l+0x918>
 800599c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80059a0:	f77f aeaa 	ble.w	80056f8 <_strtod_l+0x568>
 80059a4:	4640      	mov	r0, r8
 80059a6:	4649      	mov	r1, r9
 80059a8:	4b19      	ldr	r3, [pc, #100]	; (8005a10 <_strtod_l+0x880>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	f7fa fd94 	bl	80004d8 <__aeabi_dmul>
 80059b0:	460b      	mov	r3, r1
 80059b2:	4303      	orrs	r3, r0
 80059b4:	bf08      	it	eq
 80059b6:	2322      	moveq	r3, #34	; 0x22
 80059b8:	4680      	mov	r8, r0
 80059ba:	4689      	mov	r9, r1
 80059bc:	bf08      	it	eq
 80059be:	f8ca 3000 	streq.w	r3, [sl]
 80059c2:	e62f      	b.n	8005624 <_strtod_l+0x494>
 80059c4:	f04f 32ff 	mov.w	r2, #4294967295
 80059c8:	fa02 f303 	lsl.w	r3, r2, r3
 80059cc:	ea03 0808 	and.w	r8, r3, r8
 80059d0:	e6e0      	b.n	8005794 <_strtod_l+0x604>
 80059d2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80059d6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80059da:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80059de:	35e2      	adds	r5, #226	; 0xe2
 80059e0:	fa07 f505 	lsl.w	r5, r7, r5
 80059e4:	970f      	str	r7, [sp, #60]	; 0x3c
 80059e6:	e747      	b.n	8005878 <_strtod_l+0x6e8>
 80059e8:	2301      	movs	r3, #1
 80059ea:	2500      	movs	r5, #0
 80059ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80059ee:	e743      	b.n	8005878 <_strtod_l+0x6e8>
 80059f0:	463a      	mov	r2, r7
 80059f2:	4650      	mov	r0, sl
 80059f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80059f6:	f002 f8b9 	bl	8007b6c <__lshift>
 80059fa:	901a      	str	r0, [sp, #104]	; 0x68
 80059fc:	2800      	cmp	r0, #0
 80059fe:	f47f af69 	bne.w	80058d4 <_strtod_l+0x744>
 8005a02:	e604      	b.n	800560e <_strtod_l+0x47e>
 8005a04:	08008d60 	.word	0x08008d60
 8005a08:	fffffc02 	.word	0xfffffc02
 8005a0c:	7ff00000 	.word	0x7ff00000
 8005a10:	39500000 	.word	0x39500000
 8005a14:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005a18:	d165      	bne.n	8005ae6 <_strtod_l+0x956>
 8005a1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a20:	b35a      	cbz	r2, 8005a7a <_strtod_l+0x8ea>
 8005a22:	4a99      	ldr	r2, [pc, #612]	; (8005c88 <_strtod_l+0xaf8>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d12b      	bne.n	8005a80 <_strtod_l+0x8f0>
 8005a28:	9b05      	ldr	r3, [sp, #20]
 8005a2a:	4641      	mov	r1, r8
 8005a2c:	b303      	cbz	r3, 8005a70 <_strtod_l+0x8e0>
 8005a2e:	464a      	mov	r2, r9
 8005a30:	4b96      	ldr	r3, [pc, #600]	; (8005c8c <_strtod_l+0xafc>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005a38:	f04f 32ff 	mov.w	r2, #4294967295
 8005a3c:	d81b      	bhi.n	8005a76 <_strtod_l+0x8e6>
 8005a3e:	0d1b      	lsrs	r3, r3, #20
 8005a40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	4299      	cmp	r1, r3
 8005a4a:	d119      	bne.n	8005a80 <_strtod_l+0x8f0>
 8005a4c:	4b90      	ldr	r3, [pc, #576]	; (8005c90 <_strtod_l+0xb00>)
 8005a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d102      	bne.n	8005a5a <_strtod_l+0x8ca>
 8005a54:	3101      	adds	r1, #1
 8005a56:	f43f adda 	beq.w	800560e <_strtod_l+0x47e>
 8005a5a:	f04f 0800 	mov.w	r8, #0
 8005a5e:	4b8b      	ldr	r3, [pc, #556]	; (8005c8c <_strtod_l+0xafc>)
 8005a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a62:	401a      	ands	r2, r3
 8005a64:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005a68:	9b05      	ldr	r3, [sp, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d19a      	bne.n	80059a4 <_strtod_l+0x814>
 8005a6e:	e5d9      	b.n	8005624 <_strtod_l+0x494>
 8005a70:	f04f 33ff 	mov.w	r3, #4294967295
 8005a74:	e7e8      	b.n	8005a48 <_strtod_l+0x8b8>
 8005a76:	4613      	mov	r3, r2
 8005a78:	e7e6      	b.n	8005a48 <_strtod_l+0x8b8>
 8005a7a:	ea53 0308 	orrs.w	r3, r3, r8
 8005a7e:	d081      	beq.n	8005984 <_strtod_l+0x7f4>
 8005a80:	b1e5      	cbz	r5, 8005abc <_strtod_l+0x92c>
 8005a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a84:	421d      	tst	r5, r3
 8005a86:	d0ef      	beq.n	8005a68 <_strtod_l+0x8d8>
 8005a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a8a:	4640      	mov	r0, r8
 8005a8c:	4649      	mov	r1, r9
 8005a8e:	9a05      	ldr	r2, [sp, #20]
 8005a90:	b1c3      	cbz	r3, 8005ac4 <_strtod_l+0x934>
 8005a92:	f7ff fb5b 	bl	800514c <sulp>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a9e:	f7fa fb65 	bl	800016c <__adddf3>
 8005aa2:	4680      	mov	r8, r0
 8005aa4:	4689      	mov	r9, r1
 8005aa6:	e7df      	b.n	8005a68 <_strtod_l+0x8d8>
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005aae:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005ab2:	f04f 38ff 	mov.w	r8, #4294967295
 8005ab6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005aba:	e7d5      	b.n	8005a68 <_strtod_l+0x8d8>
 8005abc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005abe:	ea13 0f08 	tst.w	r3, r8
 8005ac2:	e7e0      	b.n	8005a86 <_strtod_l+0x8f6>
 8005ac4:	f7ff fb42 	bl	800514c <sulp>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005ad0:	f7fa fb4a 	bl	8000168 <__aeabi_dsub>
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	4680      	mov	r8, r0
 8005ada:	4689      	mov	r9, r1
 8005adc:	f7fa ff64 	bl	80009a8 <__aeabi_dcmpeq>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d0c1      	beq.n	8005a68 <_strtod_l+0x8d8>
 8005ae4:	e608      	b.n	80056f8 <_strtod_l+0x568>
 8005ae6:	4658      	mov	r0, fp
 8005ae8:	9904      	ldr	r1, [sp, #16]
 8005aea:	f002 fa2d 	bl	8007f48 <__ratio>
 8005aee:	2200      	movs	r2, #0
 8005af0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005af4:	4606      	mov	r6, r0
 8005af6:	460f      	mov	r7, r1
 8005af8:	f7fa ff6a 	bl	80009d0 <__aeabi_dcmple>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	d070      	beq.n	8005be2 <_strtod_l+0xa52>
 8005b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d042      	beq.n	8005b8c <_strtod_l+0x9fc>
 8005b06:	2600      	movs	r6, #0
 8005b08:	4f62      	ldr	r7, [pc, #392]	; (8005c94 <_strtod_l+0xb04>)
 8005b0a:	4d62      	ldr	r5, [pc, #392]	; (8005c94 <_strtod_l+0xb04>)
 8005b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b12:	0d1b      	lsrs	r3, r3, #20
 8005b14:	051b      	lsls	r3, r3, #20
 8005b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b1a:	4b5f      	ldr	r3, [pc, #380]	; (8005c98 <_strtod_l+0xb08>)
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	f040 80c3 	bne.w	8005ca8 <_strtod_l+0xb18>
 8005b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b24:	4640      	mov	r0, r8
 8005b26:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	f002 f936 	bl	8007d9c <__ulp>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4630      	mov	r0, r6
 8005b36:	4639      	mov	r1, r7
 8005b38:	f7fa fcce 	bl	80004d8 <__aeabi_dmul>
 8005b3c:	4642      	mov	r2, r8
 8005b3e:	464b      	mov	r3, r9
 8005b40:	f7fa fb14 	bl	800016c <__adddf3>
 8005b44:	460b      	mov	r3, r1
 8005b46:	4951      	ldr	r1, [pc, #324]	; (8005c8c <_strtod_l+0xafc>)
 8005b48:	4a54      	ldr	r2, [pc, #336]	; (8005c9c <_strtod_l+0xb0c>)
 8005b4a:	4019      	ands	r1, r3
 8005b4c:	4291      	cmp	r1, r2
 8005b4e:	4680      	mov	r8, r0
 8005b50:	d95d      	bls.n	8005c0e <_strtod_l+0xa7e>
 8005b52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b54:	4b4e      	ldr	r3, [pc, #312]	; (8005c90 <_strtod_l+0xb00>)
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d103      	bne.n	8005b62 <_strtod_l+0x9d2>
 8005b5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	f43f ad56 	beq.w	800560e <_strtod_l+0x47e>
 8005b62:	f04f 38ff 	mov.w	r8, #4294967295
 8005b66:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005c90 <_strtod_l+0xb00>
 8005b6a:	4650      	mov	r0, sl
 8005b6c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005b6e:	f001 fde5 	bl	800773c <_Bfree>
 8005b72:	4650      	mov	r0, sl
 8005b74:	9906      	ldr	r1, [sp, #24]
 8005b76:	f001 fde1 	bl	800773c <_Bfree>
 8005b7a:	4650      	mov	r0, sl
 8005b7c:	9904      	ldr	r1, [sp, #16]
 8005b7e:	f001 fddd 	bl	800773c <_Bfree>
 8005b82:	4659      	mov	r1, fp
 8005b84:	4650      	mov	r0, sl
 8005b86:	f001 fdd9 	bl	800773c <_Bfree>
 8005b8a:	e627      	b.n	80057dc <_strtod_l+0x64c>
 8005b8c:	f1b8 0f00 	cmp.w	r8, #0
 8005b90:	d119      	bne.n	8005bc6 <_strtod_l+0xa36>
 8005b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b98:	b9e3      	cbnz	r3, 8005bd4 <_strtod_l+0xa44>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	4639      	mov	r1, r7
 8005ba0:	4b3c      	ldr	r3, [pc, #240]	; (8005c94 <_strtod_l+0xb04>)
 8005ba2:	f7fa ff0b 	bl	80009bc <__aeabi_dcmplt>
 8005ba6:	b9c8      	cbnz	r0, 8005bdc <_strtod_l+0xa4c>
 8005ba8:	2200      	movs	r2, #0
 8005baa:	4630      	mov	r0, r6
 8005bac:	4639      	mov	r1, r7
 8005bae:	4b3c      	ldr	r3, [pc, #240]	; (8005ca0 <_strtod_l+0xb10>)
 8005bb0:	f7fa fc92 	bl	80004d8 <__aeabi_dmul>
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	460d      	mov	r5, r1
 8005bb8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005bbc:	9416      	str	r4, [sp, #88]	; 0x58
 8005bbe:	9317      	str	r3, [sp, #92]	; 0x5c
 8005bc0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005bc4:	e7a2      	b.n	8005b0c <_strtod_l+0x97c>
 8005bc6:	f1b8 0f01 	cmp.w	r8, #1
 8005bca:	d103      	bne.n	8005bd4 <_strtod_l+0xa44>
 8005bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f43f ad92 	beq.w	80056f8 <_strtod_l+0x568>
 8005bd4:	2600      	movs	r6, #0
 8005bd6:	2400      	movs	r4, #0
 8005bd8:	4f32      	ldr	r7, [pc, #200]	; (8005ca4 <_strtod_l+0xb14>)
 8005bda:	e796      	b.n	8005b0a <_strtod_l+0x97a>
 8005bdc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005bde:	4d30      	ldr	r5, [pc, #192]	; (8005ca0 <_strtod_l+0xb10>)
 8005be0:	e7ea      	b.n	8005bb8 <_strtod_l+0xa28>
 8005be2:	4b2f      	ldr	r3, [pc, #188]	; (8005ca0 <_strtod_l+0xb10>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	4630      	mov	r0, r6
 8005be8:	4639      	mov	r1, r7
 8005bea:	f7fa fc75 	bl	80004d8 <__aeabi_dmul>
 8005bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	460d      	mov	r5, r1
 8005bf4:	b933      	cbnz	r3, 8005c04 <_strtod_l+0xa74>
 8005bf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bfa:	9010      	str	r0, [sp, #64]	; 0x40
 8005bfc:	9311      	str	r3, [sp, #68]	; 0x44
 8005bfe:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005c02:	e783      	b.n	8005b0c <_strtod_l+0x97c>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005c0c:	e7f7      	b.n	8005bfe <_strtod_l+0xa6e>
 8005c0e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005c12:	9b05      	ldr	r3, [sp, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1a8      	bne.n	8005b6a <_strtod_l+0x9da>
 8005c18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c1e:	0d1b      	lsrs	r3, r3, #20
 8005c20:	051b      	lsls	r3, r3, #20
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d1a1      	bne.n	8005b6a <_strtod_l+0x9da>
 8005c26:	4620      	mov	r0, r4
 8005c28:	4629      	mov	r1, r5
 8005c2a:	f7fa ff9d 	bl	8000b68 <__aeabi_d2lz>
 8005c2e:	f7fa fc25 	bl	800047c <__aeabi_l2d>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4620      	mov	r0, r4
 8005c38:	4629      	mov	r1, r5
 8005c3a:	f7fa fa95 	bl	8000168 <__aeabi_dsub>
 8005c3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005c44:	ea43 0308 	orr.w	r3, r3, r8
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	460d      	mov	r5, r1
 8005c4e:	d066      	beq.n	8005d1e <_strtod_l+0xb8e>
 8005c50:	a309      	add	r3, pc, #36	; (adr r3, 8005c78 <_strtod_l+0xae8>)
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	f7fa feb1 	bl	80009bc <__aeabi_dcmplt>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	f47f ace2 	bne.w	8005624 <_strtod_l+0x494>
 8005c60:	a307      	add	r3, pc, #28	; (adr r3, 8005c80 <_strtod_l+0xaf0>)
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	4620      	mov	r0, r4
 8005c68:	4629      	mov	r1, r5
 8005c6a:	f7fa fec5 	bl	80009f8 <__aeabi_dcmpgt>
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	f43f af7b 	beq.w	8005b6a <_strtod_l+0x9da>
 8005c74:	e4d6      	b.n	8005624 <_strtod_l+0x494>
 8005c76:	bf00      	nop
 8005c78:	94a03595 	.word	0x94a03595
 8005c7c:	3fdfffff 	.word	0x3fdfffff
 8005c80:	35afe535 	.word	0x35afe535
 8005c84:	3fe00000 	.word	0x3fe00000
 8005c88:	000fffff 	.word	0x000fffff
 8005c8c:	7ff00000 	.word	0x7ff00000
 8005c90:	7fefffff 	.word	0x7fefffff
 8005c94:	3ff00000 	.word	0x3ff00000
 8005c98:	7fe00000 	.word	0x7fe00000
 8005c9c:	7c9fffff 	.word	0x7c9fffff
 8005ca0:	3fe00000 	.word	0x3fe00000
 8005ca4:	bff00000 	.word	0xbff00000
 8005ca8:	9b05      	ldr	r3, [sp, #20]
 8005caa:	b313      	cbz	r3, 8005cf2 <_strtod_l+0xb62>
 8005cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005cb2:	d81e      	bhi.n	8005cf2 <_strtod_l+0xb62>
 8005cb4:	a326      	add	r3, pc, #152	; (adr r3, 8005d50 <_strtod_l+0xbc0>)
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	4620      	mov	r0, r4
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	f7fa fe87 	bl	80009d0 <__aeabi_dcmple>
 8005cc2:	b190      	cbz	r0, 8005cea <_strtod_l+0xb5a>
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f7fa fede 	bl	8000a88 <__aeabi_d2uiz>
 8005ccc:	2801      	cmp	r0, #1
 8005cce:	bf38      	it	cc
 8005cd0:	2001      	movcc	r0, #1
 8005cd2:	f7fa fb87 	bl	80003e4 <__aeabi_ui2d>
 8005cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cd8:	4604      	mov	r4, r0
 8005cda:	460d      	mov	r5, r1
 8005cdc:	b9d3      	cbnz	r3, 8005d14 <_strtod_l+0xb84>
 8005cde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ce2:	9012      	str	r0, [sp, #72]	; 0x48
 8005ce4:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ce6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005cea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cec:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005cf0:	1a9f      	subs	r7, r3, r2
 8005cf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cf6:	f002 f851 	bl	8007d9c <__ulp>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4630      	mov	r0, r6
 8005d00:	4639      	mov	r1, r7
 8005d02:	f7fa fbe9 	bl	80004d8 <__aeabi_dmul>
 8005d06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d0a:	f7fa fa2f 	bl	800016c <__adddf3>
 8005d0e:	4680      	mov	r8, r0
 8005d10:	4689      	mov	r9, r1
 8005d12:	e77e      	b.n	8005c12 <_strtod_l+0xa82>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005d1c:	e7e3      	b.n	8005ce6 <_strtod_l+0xb56>
 8005d1e:	a30e      	add	r3, pc, #56	; (adr r3, 8005d58 <_strtod_l+0xbc8>)
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	f7fa fe4a 	bl	80009bc <__aeabi_dcmplt>
 8005d28:	e7a1      	b.n	8005c6e <_strtod_l+0xade>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8005d2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d30:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	f7ff ba71 	b.w	800521a <_strtod_l+0x8a>
 8005d38:	2a65      	cmp	r2, #101	; 0x65
 8005d3a:	f43f ab63 	beq.w	8005404 <_strtod_l+0x274>
 8005d3e:	2a45      	cmp	r2, #69	; 0x45
 8005d40:	f43f ab60 	beq.w	8005404 <_strtod_l+0x274>
 8005d44:	2301      	movs	r3, #1
 8005d46:	f7ff bb95 	b.w	8005474 <_strtod_l+0x2e4>
 8005d4a:	bf00      	nop
 8005d4c:	f3af 8000 	nop.w
 8005d50:	ffc00000 	.word	0xffc00000
 8005d54:	41dfffff 	.word	0x41dfffff
 8005d58:	94a03595 	.word	0x94a03595
 8005d5c:	3fcfffff 	.word	0x3fcfffff

08005d60 <_strtod_r>:
 8005d60:	4b01      	ldr	r3, [pc, #4]	; (8005d68 <_strtod_r+0x8>)
 8005d62:	f7ff ba15 	b.w	8005190 <_strtod_l>
 8005d66:	bf00      	nop
 8005d68:	200002f4 	.word	0x200002f4

08005d6c <_strtol_l.constprop.0>:
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d72:	4680      	mov	r8, r0
 8005d74:	d001      	beq.n	8005d7a <_strtol_l.constprop.0+0xe>
 8005d76:	2b24      	cmp	r3, #36	; 0x24
 8005d78:	d906      	bls.n	8005d88 <_strtol_l.constprop.0+0x1c>
 8005d7a:	f7fe fa09 	bl	8004190 <__errno>
 8005d7e:	2316      	movs	r3, #22
 8005d80:	6003      	str	r3, [r0, #0]
 8005d82:	2000      	movs	r0, #0
 8005d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d88:	460d      	mov	r5, r1
 8005d8a:	4f35      	ldr	r7, [pc, #212]	; (8005e60 <_strtol_l.constprop.0+0xf4>)
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d92:	5de6      	ldrb	r6, [r4, r7]
 8005d94:	f016 0608 	ands.w	r6, r6, #8
 8005d98:	d1f8      	bne.n	8005d8c <_strtol_l.constprop.0+0x20>
 8005d9a:	2c2d      	cmp	r4, #45	; 0x2d
 8005d9c:	d12f      	bne.n	8005dfe <_strtol_l.constprop.0+0x92>
 8005d9e:	2601      	movs	r6, #1
 8005da0:	782c      	ldrb	r4, [r5, #0]
 8005da2:	1c85      	adds	r5, r0, #2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d057      	beq.n	8005e58 <_strtol_l.constprop.0+0xec>
 8005da8:	2b10      	cmp	r3, #16
 8005daa:	d109      	bne.n	8005dc0 <_strtol_l.constprop.0+0x54>
 8005dac:	2c30      	cmp	r4, #48	; 0x30
 8005dae:	d107      	bne.n	8005dc0 <_strtol_l.constprop.0+0x54>
 8005db0:	7828      	ldrb	r0, [r5, #0]
 8005db2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005db6:	2858      	cmp	r0, #88	; 0x58
 8005db8:	d149      	bne.n	8005e4e <_strtol_l.constprop.0+0xe2>
 8005dba:	2310      	movs	r3, #16
 8005dbc:	786c      	ldrb	r4, [r5, #1]
 8005dbe:	3502      	adds	r5, #2
 8005dc0:	2700      	movs	r7, #0
 8005dc2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005dc6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005dca:	fbbe f9f3 	udiv	r9, lr, r3
 8005dce:	4638      	mov	r0, r7
 8005dd0:	fb03 ea19 	mls	sl, r3, r9, lr
 8005dd4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005dd8:	f1bc 0f09 	cmp.w	ip, #9
 8005ddc:	d814      	bhi.n	8005e08 <_strtol_l.constprop.0+0x9c>
 8005dde:	4664      	mov	r4, ip
 8005de0:	42a3      	cmp	r3, r4
 8005de2:	dd22      	ble.n	8005e2a <_strtol_l.constprop.0+0xbe>
 8005de4:	2f00      	cmp	r7, #0
 8005de6:	db1d      	blt.n	8005e24 <_strtol_l.constprop.0+0xb8>
 8005de8:	4581      	cmp	r9, r0
 8005dea:	d31b      	bcc.n	8005e24 <_strtol_l.constprop.0+0xb8>
 8005dec:	d101      	bne.n	8005df2 <_strtol_l.constprop.0+0x86>
 8005dee:	45a2      	cmp	sl, r4
 8005df0:	db18      	blt.n	8005e24 <_strtol_l.constprop.0+0xb8>
 8005df2:	2701      	movs	r7, #1
 8005df4:	fb00 4003 	mla	r0, r0, r3, r4
 8005df8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dfc:	e7ea      	b.n	8005dd4 <_strtol_l.constprop.0+0x68>
 8005dfe:	2c2b      	cmp	r4, #43	; 0x2b
 8005e00:	bf04      	itt	eq
 8005e02:	782c      	ldrbeq	r4, [r5, #0]
 8005e04:	1c85      	addeq	r5, r0, #2
 8005e06:	e7cd      	b.n	8005da4 <_strtol_l.constprop.0+0x38>
 8005e08:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005e0c:	f1bc 0f19 	cmp.w	ip, #25
 8005e10:	d801      	bhi.n	8005e16 <_strtol_l.constprop.0+0xaa>
 8005e12:	3c37      	subs	r4, #55	; 0x37
 8005e14:	e7e4      	b.n	8005de0 <_strtol_l.constprop.0+0x74>
 8005e16:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005e1a:	f1bc 0f19 	cmp.w	ip, #25
 8005e1e:	d804      	bhi.n	8005e2a <_strtol_l.constprop.0+0xbe>
 8005e20:	3c57      	subs	r4, #87	; 0x57
 8005e22:	e7dd      	b.n	8005de0 <_strtol_l.constprop.0+0x74>
 8005e24:	f04f 37ff 	mov.w	r7, #4294967295
 8005e28:	e7e6      	b.n	8005df8 <_strtol_l.constprop.0+0x8c>
 8005e2a:	2f00      	cmp	r7, #0
 8005e2c:	da07      	bge.n	8005e3e <_strtol_l.constprop.0+0xd2>
 8005e2e:	2322      	movs	r3, #34	; 0x22
 8005e30:	4670      	mov	r0, lr
 8005e32:	f8c8 3000 	str.w	r3, [r8]
 8005e36:	2a00      	cmp	r2, #0
 8005e38:	d0a4      	beq.n	8005d84 <_strtol_l.constprop.0+0x18>
 8005e3a:	1e69      	subs	r1, r5, #1
 8005e3c:	e005      	b.n	8005e4a <_strtol_l.constprop.0+0xde>
 8005e3e:	b106      	cbz	r6, 8005e42 <_strtol_l.constprop.0+0xd6>
 8005e40:	4240      	negs	r0, r0
 8005e42:	2a00      	cmp	r2, #0
 8005e44:	d09e      	beq.n	8005d84 <_strtol_l.constprop.0+0x18>
 8005e46:	2f00      	cmp	r7, #0
 8005e48:	d1f7      	bne.n	8005e3a <_strtol_l.constprop.0+0xce>
 8005e4a:	6011      	str	r1, [r2, #0]
 8005e4c:	e79a      	b.n	8005d84 <_strtol_l.constprop.0+0x18>
 8005e4e:	2430      	movs	r4, #48	; 0x30
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1b5      	bne.n	8005dc0 <_strtol_l.constprop.0+0x54>
 8005e54:	2308      	movs	r3, #8
 8005e56:	e7b3      	b.n	8005dc0 <_strtol_l.constprop.0+0x54>
 8005e58:	2c30      	cmp	r4, #48	; 0x30
 8005e5a:	d0a9      	beq.n	8005db0 <_strtol_l.constprop.0+0x44>
 8005e5c:	230a      	movs	r3, #10
 8005e5e:	e7af      	b.n	8005dc0 <_strtol_l.constprop.0+0x54>
 8005e60:	08008d89 	.word	0x08008d89

08005e64 <_strtol_r>:
 8005e64:	f7ff bf82 	b.w	8005d6c <_strtol_l.constprop.0>

08005e68 <quorem>:
 8005e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6c:	6903      	ldr	r3, [r0, #16]
 8005e6e:	690c      	ldr	r4, [r1, #16]
 8005e70:	4607      	mov	r7, r0
 8005e72:	42a3      	cmp	r3, r4
 8005e74:	f2c0 8082 	blt.w	8005f7c <quorem+0x114>
 8005e78:	3c01      	subs	r4, #1
 8005e7a:	f100 0514 	add.w	r5, r0, #20
 8005e7e:	f101 0814 	add.w	r8, r1, #20
 8005e82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e86:	9301      	str	r3, [sp, #4]
 8005e88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e90:	3301      	adds	r3, #1
 8005e92:	429a      	cmp	r2, r3
 8005e94:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ea0:	d331      	bcc.n	8005f06 <quorem+0x9e>
 8005ea2:	f04f 0e00 	mov.w	lr, #0
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	46ac      	mov	ip, r5
 8005eaa:	46f2      	mov	sl, lr
 8005eac:	f850 2b04 	ldr.w	r2, [r0], #4
 8005eb0:	b293      	uxth	r3, r2
 8005eb2:	fb06 e303 	mla	r3, r6, r3, lr
 8005eb6:	0c12      	lsrs	r2, r2, #16
 8005eb8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	fb06 e202 	mla	r2, r6, r2, lr
 8005ec2:	ebaa 0303 	sub.w	r3, sl, r3
 8005ec6:	f8dc a000 	ldr.w	sl, [ip]
 8005eca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ece:	fa1f fa8a 	uxth.w	sl, sl
 8005ed2:	4453      	add	r3, sl
 8005ed4:	f8dc a000 	ldr.w	sl, [ip]
 8005ed8:	b292      	uxth	r2, r2
 8005eda:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ede:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ee8:	4581      	cmp	r9, r0
 8005eea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005eee:	f84c 3b04 	str.w	r3, [ip], #4
 8005ef2:	d2db      	bcs.n	8005eac <quorem+0x44>
 8005ef4:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ef8:	b92b      	cbnz	r3, 8005f06 <quorem+0x9e>
 8005efa:	9b01      	ldr	r3, [sp, #4]
 8005efc:	3b04      	subs	r3, #4
 8005efe:	429d      	cmp	r5, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	d32f      	bcc.n	8005f64 <quorem+0xfc>
 8005f04:	613c      	str	r4, [r7, #16]
 8005f06:	4638      	mov	r0, r7
 8005f08:	f001 fea0 	bl	8007c4c <__mcmp>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	db25      	blt.n	8005f5c <quorem+0xf4>
 8005f10:	4628      	mov	r0, r5
 8005f12:	f04f 0c00 	mov.w	ip, #0
 8005f16:	3601      	adds	r6, #1
 8005f18:	f858 1b04 	ldr.w	r1, [r8], #4
 8005f1c:	f8d0 e000 	ldr.w	lr, [r0]
 8005f20:	b28b      	uxth	r3, r1
 8005f22:	ebac 0303 	sub.w	r3, ip, r3
 8005f26:	fa1f f28e 	uxth.w	r2, lr
 8005f2a:	4413      	add	r3, r2
 8005f2c:	0c0a      	lsrs	r2, r1, #16
 8005f2e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f3c:	45c1      	cmp	r9, r8
 8005f3e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f42:	f840 3b04 	str.w	r3, [r0], #4
 8005f46:	d2e7      	bcs.n	8005f18 <quorem+0xb0>
 8005f48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f50:	b922      	cbnz	r2, 8005f5c <quorem+0xf4>
 8005f52:	3b04      	subs	r3, #4
 8005f54:	429d      	cmp	r5, r3
 8005f56:	461a      	mov	r2, r3
 8005f58:	d30a      	bcc.n	8005f70 <quorem+0x108>
 8005f5a:	613c      	str	r4, [r7, #16]
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	b003      	add	sp, #12
 8005f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f64:	6812      	ldr	r2, [r2, #0]
 8005f66:	3b04      	subs	r3, #4
 8005f68:	2a00      	cmp	r2, #0
 8005f6a:	d1cb      	bne.n	8005f04 <quorem+0x9c>
 8005f6c:	3c01      	subs	r4, #1
 8005f6e:	e7c6      	b.n	8005efe <quorem+0x96>
 8005f70:	6812      	ldr	r2, [r2, #0]
 8005f72:	3b04      	subs	r3, #4
 8005f74:	2a00      	cmp	r2, #0
 8005f76:	d1f0      	bne.n	8005f5a <quorem+0xf2>
 8005f78:	3c01      	subs	r4, #1
 8005f7a:	e7eb      	b.n	8005f54 <quorem+0xec>
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	e7ee      	b.n	8005f5e <quorem+0xf6>

08005f80 <_dtoa_r>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	4616      	mov	r6, r2
 8005f86:	461f      	mov	r7, r3
 8005f88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f8a:	b099      	sub	sp, #100	; 0x64
 8005f8c:	4605      	mov	r5, r0
 8005f8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005f92:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005f96:	b974      	cbnz	r4, 8005fb6 <_dtoa_r+0x36>
 8005f98:	2010      	movs	r0, #16
 8005f9a:	f7fe f927 	bl	80041ec <malloc>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	6268      	str	r0, [r5, #36]	; 0x24
 8005fa2:	b920      	cbnz	r0, 8005fae <_dtoa_r+0x2e>
 8005fa4:	21ea      	movs	r1, #234	; 0xea
 8005fa6:	4ba8      	ldr	r3, [pc, #672]	; (8006248 <_dtoa_r+0x2c8>)
 8005fa8:	48a8      	ldr	r0, [pc, #672]	; (800624c <_dtoa_r+0x2cc>)
 8005faa:	f002 fa17 	bl	80083dc <__assert_func>
 8005fae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fb2:	6004      	str	r4, [r0, #0]
 8005fb4:	60c4      	str	r4, [r0, #12]
 8005fb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fb8:	6819      	ldr	r1, [r3, #0]
 8005fba:	b151      	cbz	r1, 8005fd2 <_dtoa_r+0x52>
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4093      	lsls	r3, r2
 8005fc2:	604a      	str	r2, [r1, #4]
 8005fc4:	608b      	str	r3, [r1, #8]
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f001 fbb8 	bl	800773c <_Bfree>
 8005fcc:	2200      	movs	r2, #0
 8005fce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	1e3b      	subs	r3, r7, #0
 8005fd4:	bfaf      	iteee	ge
 8005fd6:	2300      	movge	r3, #0
 8005fd8:	2201      	movlt	r2, #1
 8005fda:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005fde:	9305      	strlt	r3, [sp, #20]
 8005fe0:	bfa8      	it	ge
 8005fe2:	f8c8 3000 	strge.w	r3, [r8]
 8005fe6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005fea:	4b99      	ldr	r3, [pc, #612]	; (8006250 <_dtoa_r+0x2d0>)
 8005fec:	bfb8      	it	lt
 8005fee:	f8c8 2000 	strlt.w	r2, [r8]
 8005ff2:	ea33 0309 	bics.w	r3, r3, r9
 8005ff6:	d119      	bne.n	800602c <_dtoa_r+0xac>
 8005ff8:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ffc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006004:	4333      	orrs	r3, r6
 8006006:	f000 857f 	beq.w	8006b08 <_dtoa_r+0xb88>
 800600a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800600c:	b953      	cbnz	r3, 8006024 <_dtoa_r+0xa4>
 800600e:	4b91      	ldr	r3, [pc, #580]	; (8006254 <_dtoa_r+0x2d4>)
 8006010:	e022      	b.n	8006058 <_dtoa_r+0xd8>
 8006012:	4b91      	ldr	r3, [pc, #580]	; (8006258 <_dtoa_r+0x2d8>)
 8006014:	9303      	str	r3, [sp, #12]
 8006016:	3308      	adds	r3, #8
 8006018:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	9803      	ldr	r0, [sp, #12]
 800601e:	b019      	add	sp, #100	; 0x64
 8006020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006024:	4b8b      	ldr	r3, [pc, #556]	; (8006254 <_dtoa_r+0x2d4>)
 8006026:	9303      	str	r3, [sp, #12]
 8006028:	3303      	adds	r3, #3
 800602a:	e7f5      	b.n	8006018 <_dtoa_r+0x98>
 800602c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006030:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006034:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006038:	2200      	movs	r2, #0
 800603a:	2300      	movs	r3, #0
 800603c:	f7fa fcb4 	bl	80009a8 <__aeabi_dcmpeq>
 8006040:	4680      	mov	r8, r0
 8006042:	b158      	cbz	r0, 800605c <_dtoa_r+0xdc>
 8006044:	2301      	movs	r3, #1
 8006046:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 8558 	beq.w	8006b02 <_dtoa_r+0xb82>
 8006052:	4882      	ldr	r0, [pc, #520]	; (800625c <_dtoa_r+0x2dc>)
 8006054:	6018      	str	r0, [r3, #0]
 8006056:	1e43      	subs	r3, r0, #1
 8006058:	9303      	str	r3, [sp, #12]
 800605a:	e7df      	b.n	800601c <_dtoa_r+0x9c>
 800605c:	ab16      	add	r3, sp, #88	; 0x58
 800605e:	9301      	str	r3, [sp, #4]
 8006060:	ab17      	add	r3, sp, #92	; 0x5c
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	4628      	mov	r0, r5
 8006066:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800606a:	f001 ff11 	bl	8007e90 <__d2b>
 800606e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006072:	4683      	mov	fp, r0
 8006074:	2c00      	cmp	r4, #0
 8006076:	d07f      	beq.n	8006178 <_dtoa_r+0x1f8>
 8006078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800607c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800607e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006082:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006086:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800608a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800608e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006092:	2200      	movs	r2, #0
 8006094:	4b72      	ldr	r3, [pc, #456]	; (8006260 <_dtoa_r+0x2e0>)
 8006096:	f7fa f867 	bl	8000168 <__aeabi_dsub>
 800609a:	a365      	add	r3, pc, #404	; (adr r3, 8006230 <_dtoa_r+0x2b0>)
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f7fa fa1a 	bl	80004d8 <__aeabi_dmul>
 80060a4:	a364      	add	r3, pc, #400	; (adr r3, 8006238 <_dtoa_r+0x2b8>)
 80060a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060aa:	f7fa f85f 	bl	800016c <__adddf3>
 80060ae:	4606      	mov	r6, r0
 80060b0:	4620      	mov	r0, r4
 80060b2:	460f      	mov	r7, r1
 80060b4:	f7fa f9a6 	bl	8000404 <__aeabi_i2d>
 80060b8:	a361      	add	r3, pc, #388	; (adr r3, 8006240 <_dtoa_r+0x2c0>)
 80060ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060be:	f7fa fa0b 	bl	80004d8 <__aeabi_dmul>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	4630      	mov	r0, r6
 80060c8:	4639      	mov	r1, r7
 80060ca:	f7fa f84f 	bl	800016c <__adddf3>
 80060ce:	4606      	mov	r6, r0
 80060d0:	460f      	mov	r7, r1
 80060d2:	f7fa fcb1 	bl	8000a38 <__aeabi_d2iz>
 80060d6:	2200      	movs	r2, #0
 80060d8:	4682      	mov	sl, r0
 80060da:	2300      	movs	r3, #0
 80060dc:	4630      	mov	r0, r6
 80060de:	4639      	mov	r1, r7
 80060e0:	f7fa fc6c 	bl	80009bc <__aeabi_dcmplt>
 80060e4:	b148      	cbz	r0, 80060fa <_dtoa_r+0x17a>
 80060e6:	4650      	mov	r0, sl
 80060e8:	f7fa f98c 	bl	8000404 <__aeabi_i2d>
 80060ec:	4632      	mov	r2, r6
 80060ee:	463b      	mov	r3, r7
 80060f0:	f7fa fc5a 	bl	80009a8 <__aeabi_dcmpeq>
 80060f4:	b908      	cbnz	r0, 80060fa <_dtoa_r+0x17a>
 80060f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060fa:	f1ba 0f16 	cmp.w	sl, #22
 80060fe:	d858      	bhi.n	80061b2 <_dtoa_r+0x232>
 8006100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006104:	4b57      	ldr	r3, [pc, #348]	; (8006264 <_dtoa_r+0x2e4>)
 8006106:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	f7fa fc55 	bl	80009bc <__aeabi_dcmplt>
 8006112:	2800      	cmp	r0, #0
 8006114:	d04f      	beq.n	80061b6 <_dtoa_r+0x236>
 8006116:	2300      	movs	r3, #0
 8006118:	f10a 3aff 	add.w	sl, sl, #4294967295
 800611c:	930f      	str	r3, [sp, #60]	; 0x3c
 800611e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006120:	1b1c      	subs	r4, r3, r4
 8006122:	1e63      	subs	r3, r4, #1
 8006124:	9309      	str	r3, [sp, #36]	; 0x24
 8006126:	bf49      	itett	mi
 8006128:	f1c4 0301 	rsbmi	r3, r4, #1
 800612c:	2300      	movpl	r3, #0
 800612e:	9306      	strmi	r3, [sp, #24]
 8006130:	2300      	movmi	r3, #0
 8006132:	bf54      	ite	pl
 8006134:	9306      	strpl	r3, [sp, #24]
 8006136:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006138:	f1ba 0f00 	cmp.w	sl, #0
 800613c:	db3d      	blt.n	80061ba <_dtoa_r+0x23a>
 800613e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006140:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006144:	4453      	add	r3, sl
 8006146:	9309      	str	r3, [sp, #36]	; 0x24
 8006148:	2300      	movs	r3, #0
 800614a:	930a      	str	r3, [sp, #40]	; 0x28
 800614c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800614e:	2b09      	cmp	r3, #9
 8006150:	f200 808c 	bhi.w	800626c <_dtoa_r+0x2ec>
 8006154:	2b05      	cmp	r3, #5
 8006156:	bfc4      	itt	gt
 8006158:	3b04      	subgt	r3, #4
 800615a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800615c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800615e:	bfc8      	it	gt
 8006160:	2400      	movgt	r4, #0
 8006162:	f1a3 0302 	sub.w	r3, r3, #2
 8006166:	bfd8      	it	le
 8006168:	2401      	movle	r4, #1
 800616a:	2b03      	cmp	r3, #3
 800616c:	f200 808a 	bhi.w	8006284 <_dtoa_r+0x304>
 8006170:	e8df f003 	tbb	[pc, r3]
 8006174:	5b4d4f2d 	.word	0x5b4d4f2d
 8006178:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800617c:	441c      	add	r4, r3
 800617e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006182:	2b20      	cmp	r3, #32
 8006184:	bfc3      	ittte	gt
 8006186:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800618a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800618e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006192:	f1c3 0320 	rsble	r3, r3, #32
 8006196:	bfc6      	itte	gt
 8006198:	fa26 f000 	lsrgt.w	r0, r6, r0
 800619c:	4318      	orrgt	r0, r3
 800619e:	fa06 f003 	lslle.w	r0, r6, r3
 80061a2:	f7fa f91f 	bl	80003e4 <__aeabi_ui2d>
 80061a6:	2301      	movs	r3, #1
 80061a8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80061ac:	3c01      	subs	r4, #1
 80061ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80061b0:	e76f      	b.n	8006092 <_dtoa_r+0x112>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e7b2      	b.n	800611c <_dtoa_r+0x19c>
 80061b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80061b8:	e7b1      	b.n	800611e <_dtoa_r+0x19e>
 80061ba:	9b06      	ldr	r3, [sp, #24]
 80061bc:	eba3 030a 	sub.w	r3, r3, sl
 80061c0:	9306      	str	r3, [sp, #24]
 80061c2:	f1ca 0300 	rsb	r3, sl, #0
 80061c6:	930a      	str	r3, [sp, #40]	; 0x28
 80061c8:	2300      	movs	r3, #0
 80061ca:	930e      	str	r3, [sp, #56]	; 0x38
 80061cc:	e7be      	b.n	800614c <_dtoa_r+0x1cc>
 80061ce:	2300      	movs	r3, #0
 80061d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80061d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	dc58      	bgt.n	800628a <_dtoa_r+0x30a>
 80061d8:	f04f 0901 	mov.w	r9, #1
 80061dc:	464b      	mov	r3, r9
 80061de:	f8cd 9020 	str.w	r9, [sp, #32]
 80061e2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80061e6:	2200      	movs	r2, #0
 80061e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80061ea:	6042      	str	r2, [r0, #4]
 80061ec:	2204      	movs	r2, #4
 80061ee:	f102 0614 	add.w	r6, r2, #20
 80061f2:	429e      	cmp	r6, r3
 80061f4:	6841      	ldr	r1, [r0, #4]
 80061f6:	d94e      	bls.n	8006296 <_dtoa_r+0x316>
 80061f8:	4628      	mov	r0, r5
 80061fa:	f001 fa5f 	bl	80076bc <_Balloc>
 80061fe:	9003      	str	r0, [sp, #12]
 8006200:	2800      	cmp	r0, #0
 8006202:	d14c      	bne.n	800629e <_dtoa_r+0x31e>
 8006204:	4602      	mov	r2, r0
 8006206:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800620a:	4b17      	ldr	r3, [pc, #92]	; (8006268 <_dtoa_r+0x2e8>)
 800620c:	e6cc      	b.n	8005fa8 <_dtoa_r+0x28>
 800620e:	2301      	movs	r3, #1
 8006210:	e7de      	b.n	80061d0 <_dtoa_r+0x250>
 8006212:	2300      	movs	r3, #0
 8006214:	930b      	str	r3, [sp, #44]	; 0x2c
 8006216:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006218:	eb0a 0903 	add.w	r9, sl, r3
 800621c:	f109 0301 	add.w	r3, r9, #1
 8006220:	2b01      	cmp	r3, #1
 8006222:	9308      	str	r3, [sp, #32]
 8006224:	bfb8      	it	lt
 8006226:	2301      	movlt	r3, #1
 8006228:	e7dd      	b.n	80061e6 <_dtoa_r+0x266>
 800622a:	2301      	movs	r3, #1
 800622c:	e7f2      	b.n	8006214 <_dtoa_r+0x294>
 800622e:	bf00      	nop
 8006230:	636f4361 	.word	0x636f4361
 8006234:	3fd287a7 	.word	0x3fd287a7
 8006238:	8b60c8b3 	.word	0x8b60c8b3
 800623c:	3fc68a28 	.word	0x3fc68a28
 8006240:	509f79fb 	.word	0x509f79fb
 8006244:	3fd34413 	.word	0x3fd34413
 8006248:	08008e96 	.word	0x08008e96
 800624c:	08008ead 	.word	0x08008ead
 8006250:	7ff00000 	.word	0x7ff00000
 8006254:	08008e92 	.word	0x08008e92
 8006258:	08008e89 	.word	0x08008e89
 800625c:	08008d09 	.word	0x08008d09
 8006260:	3ff80000 	.word	0x3ff80000
 8006264:	08009080 	.word	0x08009080
 8006268:	08008f08 	.word	0x08008f08
 800626c:	2401      	movs	r4, #1
 800626e:	2300      	movs	r3, #0
 8006270:	940b      	str	r4, [sp, #44]	; 0x2c
 8006272:	9322      	str	r3, [sp, #136]	; 0x88
 8006274:	f04f 39ff 	mov.w	r9, #4294967295
 8006278:	2200      	movs	r2, #0
 800627a:	2312      	movs	r3, #18
 800627c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006280:	9223      	str	r2, [sp, #140]	; 0x8c
 8006282:	e7b0      	b.n	80061e6 <_dtoa_r+0x266>
 8006284:	2301      	movs	r3, #1
 8006286:	930b      	str	r3, [sp, #44]	; 0x2c
 8006288:	e7f4      	b.n	8006274 <_dtoa_r+0x2f4>
 800628a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800628e:	464b      	mov	r3, r9
 8006290:	f8cd 9020 	str.w	r9, [sp, #32]
 8006294:	e7a7      	b.n	80061e6 <_dtoa_r+0x266>
 8006296:	3101      	adds	r1, #1
 8006298:	6041      	str	r1, [r0, #4]
 800629a:	0052      	lsls	r2, r2, #1
 800629c:	e7a7      	b.n	80061ee <_dtoa_r+0x26e>
 800629e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062a0:	9a03      	ldr	r2, [sp, #12]
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	9b08      	ldr	r3, [sp, #32]
 80062a6:	2b0e      	cmp	r3, #14
 80062a8:	f200 80a8 	bhi.w	80063fc <_dtoa_r+0x47c>
 80062ac:	2c00      	cmp	r4, #0
 80062ae:	f000 80a5 	beq.w	80063fc <_dtoa_r+0x47c>
 80062b2:	f1ba 0f00 	cmp.w	sl, #0
 80062b6:	dd34      	ble.n	8006322 <_dtoa_r+0x3a2>
 80062b8:	4a9a      	ldr	r2, [pc, #616]	; (8006524 <_dtoa_r+0x5a4>)
 80062ba:	f00a 030f 	and.w	r3, sl, #15
 80062be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062c2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80062c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80062ce:	ea4f 142a 	mov.w	r4, sl, asr #4
 80062d2:	d016      	beq.n	8006302 <_dtoa_r+0x382>
 80062d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062d8:	4b93      	ldr	r3, [pc, #588]	; (8006528 <_dtoa_r+0x5a8>)
 80062da:	2703      	movs	r7, #3
 80062dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062e0:	f7fa fa24 	bl	800072c <__aeabi_ddiv>
 80062e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062e8:	f004 040f 	and.w	r4, r4, #15
 80062ec:	4e8e      	ldr	r6, [pc, #568]	; (8006528 <_dtoa_r+0x5a8>)
 80062ee:	b954      	cbnz	r4, 8006306 <_dtoa_r+0x386>
 80062f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062f8:	f7fa fa18 	bl	800072c <__aeabi_ddiv>
 80062fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006300:	e029      	b.n	8006356 <_dtoa_r+0x3d6>
 8006302:	2702      	movs	r7, #2
 8006304:	e7f2      	b.n	80062ec <_dtoa_r+0x36c>
 8006306:	07e1      	lsls	r1, r4, #31
 8006308:	d508      	bpl.n	800631c <_dtoa_r+0x39c>
 800630a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800630e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006312:	f7fa f8e1 	bl	80004d8 <__aeabi_dmul>
 8006316:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800631a:	3701      	adds	r7, #1
 800631c:	1064      	asrs	r4, r4, #1
 800631e:	3608      	adds	r6, #8
 8006320:	e7e5      	b.n	80062ee <_dtoa_r+0x36e>
 8006322:	f000 80a5 	beq.w	8006470 <_dtoa_r+0x4f0>
 8006326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800632a:	f1ca 0400 	rsb	r4, sl, #0
 800632e:	4b7d      	ldr	r3, [pc, #500]	; (8006524 <_dtoa_r+0x5a4>)
 8006330:	f004 020f 	and.w	r2, r4, #15
 8006334:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	f7fa f8cc 	bl	80004d8 <__aeabi_dmul>
 8006340:	2702      	movs	r7, #2
 8006342:	2300      	movs	r3, #0
 8006344:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006348:	4e77      	ldr	r6, [pc, #476]	; (8006528 <_dtoa_r+0x5a8>)
 800634a:	1124      	asrs	r4, r4, #4
 800634c:	2c00      	cmp	r4, #0
 800634e:	f040 8084 	bne.w	800645a <_dtoa_r+0x4da>
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1d2      	bne.n	80062fc <_dtoa_r+0x37c>
 8006356:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 808b 	beq.w	8006474 <_dtoa_r+0x4f4>
 800635e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006362:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006366:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800636a:	2200      	movs	r2, #0
 800636c:	4b6f      	ldr	r3, [pc, #444]	; (800652c <_dtoa_r+0x5ac>)
 800636e:	f7fa fb25 	bl	80009bc <__aeabi_dcmplt>
 8006372:	2800      	cmp	r0, #0
 8006374:	d07e      	beq.n	8006474 <_dtoa_r+0x4f4>
 8006376:	9b08      	ldr	r3, [sp, #32]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d07b      	beq.n	8006474 <_dtoa_r+0x4f4>
 800637c:	f1b9 0f00 	cmp.w	r9, #0
 8006380:	dd38      	ble.n	80063f4 <_dtoa_r+0x474>
 8006382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006386:	2200      	movs	r2, #0
 8006388:	4b69      	ldr	r3, [pc, #420]	; (8006530 <_dtoa_r+0x5b0>)
 800638a:	f7fa f8a5 	bl	80004d8 <__aeabi_dmul>
 800638e:	464c      	mov	r4, r9
 8006390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006394:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006398:	3701      	adds	r7, #1
 800639a:	4638      	mov	r0, r7
 800639c:	f7fa f832 	bl	8000404 <__aeabi_i2d>
 80063a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063a4:	f7fa f898 	bl	80004d8 <__aeabi_dmul>
 80063a8:	2200      	movs	r2, #0
 80063aa:	4b62      	ldr	r3, [pc, #392]	; (8006534 <_dtoa_r+0x5b4>)
 80063ac:	f7f9 fede 	bl	800016c <__adddf3>
 80063b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80063b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063b8:	9611      	str	r6, [sp, #68]	; 0x44
 80063ba:	2c00      	cmp	r4, #0
 80063bc:	d15d      	bne.n	800647a <_dtoa_r+0x4fa>
 80063be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063c2:	2200      	movs	r2, #0
 80063c4:	4b5c      	ldr	r3, [pc, #368]	; (8006538 <_dtoa_r+0x5b8>)
 80063c6:	f7f9 fecf 	bl	8000168 <__aeabi_dsub>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063d2:	4633      	mov	r3, r6
 80063d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063d6:	f7fa fb0f 	bl	80009f8 <__aeabi_dcmpgt>
 80063da:	2800      	cmp	r0, #0
 80063dc:	f040 829c 	bne.w	8006918 <_dtoa_r+0x998>
 80063e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80063ea:	f7fa fae7 	bl	80009bc <__aeabi_dcmplt>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	f040 8290 	bne.w	8006914 <_dtoa_r+0x994>
 80063f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80063f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80063fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f2c0 8152 	blt.w	80066a8 <_dtoa_r+0x728>
 8006404:	f1ba 0f0e 	cmp.w	sl, #14
 8006408:	f300 814e 	bgt.w	80066a8 <_dtoa_r+0x728>
 800640c:	4b45      	ldr	r3, [pc, #276]	; (8006524 <_dtoa_r+0x5a4>)
 800640e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006412:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006416:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800641a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800641c:	2b00      	cmp	r3, #0
 800641e:	f280 80db 	bge.w	80065d8 <_dtoa_r+0x658>
 8006422:	9b08      	ldr	r3, [sp, #32]
 8006424:	2b00      	cmp	r3, #0
 8006426:	f300 80d7 	bgt.w	80065d8 <_dtoa_r+0x658>
 800642a:	f040 8272 	bne.w	8006912 <_dtoa_r+0x992>
 800642e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006432:	2200      	movs	r2, #0
 8006434:	4b40      	ldr	r3, [pc, #256]	; (8006538 <_dtoa_r+0x5b8>)
 8006436:	f7fa f84f 	bl	80004d8 <__aeabi_dmul>
 800643a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800643e:	f7fa fad1 	bl	80009e4 <__aeabi_dcmpge>
 8006442:	9c08      	ldr	r4, [sp, #32]
 8006444:	4626      	mov	r6, r4
 8006446:	2800      	cmp	r0, #0
 8006448:	f040 8248 	bne.w	80068dc <_dtoa_r+0x95c>
 800644c:	2331      	movs	r3, #49	; 0x31
 800644e:	9f03      	ldr	r7, [sp, #12]
 8006450:	f10a 0a01 	add.w	sl, sl, #1
 8006454:	f807 3b01 	strb.w	r3, [r7], #1
 8006458:	e244      	b.n	80068e4 <_dtoa_r+0x964>
 800645a:	07e2      	lsls	r2, r4, #31
 800645c:	d505      	bpl.n	800646a <_dtoa_r+0x4ea>
 800645e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006462:	f7fa f839 	bl	80004d8 <__aeabi_dmul>
 8006466:	2301      	movs	r3, #1
 8006468:	3701      	adds	r7, #1
 800646a:	1064      	asrs	r4, r4, #1
 800646c:	3608      	adds	r6, #8
 800646e:	e76d      	b.n	800634c <_dtoa_r+0x3cc>
 8006470:	2702      	movs	r7, #2
 8006472:	e770      	b.n	8006356 <_dtoa_r+0x3d6>
 8006474:	46d0      	mov	r8, sl
 8006476:	9c08      	ldr	r4, [sp, #32]
 8006478:	e78f      	b.n	800639a <_dtoa_r+0x41a>
 800647a:	9903      	ldr	r1, [sp, #12]
 800647c:	4b29      	ldr	r3, [pc, #164]	; (8006524 <_dtoa_r+0x5a4>)
 800647e:	4421      	add	r1, r4
 8006480:	9112      	str	r1, [sp, #72]	; 0x48
 8006482:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006484:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006488:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800648c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006490:	2900      	cmp	r1, #0
 8006492:	d055      	beq.n	8006540 <_dtoa_r+0x5c0>
 8006494:	2000      	movs	r0, #0
 8006496:	4929      	ldr	r1, [pc, #164]	; (800653c <_dtoa_r+0x5bc>)
 8006498:	f7fa f948 	bl	800072c <__aeabi_ddiv>
 800649c:	463b      	mov	r3, r7
 800649e:	4632      	mov	r2, r6
 80064a0:	f7f9 fe62 	bl	8000168 <__aeabi_dsub>
 80064a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064a8:	9f03      	ldr	r7, [sp, #12]
 80064aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064ae:	f7fa fac3 	bl	8000a38 <__aeabi_d2iz>
 80064b2:	4604      	mov	r4, r0
 80064b4:	f7f9 ffa6 	bl	8000404 <__aeabi_i2d>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064c0:	f7f9 fe52 	bl	8000168 <__aeabi_dsub>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	3430      	adds	r4, #48	; 0x30
 80064ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064d2:	f807 4b01 	strb.w	r4, [r7], #1
 80064d6:	f7fa fa71 	bl	80009bc <__aeabi_dcmplt>
 80064da:	2800      	cmp	r0, #0
 80064dc:	d174      	bne.n	80065c8 <_dtoa_r+0x648>
 80064de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064e2:	2000      	movs	r0, #0
 80064e4:	4911      	ldr	r1, [pc, #68]	; (800652c <_dtoa_r+0x5ac>)
 80064e6:	f7f9 fe3f 	bl	8000168 <__aeabi_dsub>
 80064ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064ee:	f7fa fa65 	bl	80009bc <__aeabi_dcmplt>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	f040 80b7 	bne.w	8006666 <_dtoa_r+0x6e6>
 80064f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064fa:	429f      	cmp	r7, r3
 80064fc:	f43f af7a 	beq.w	80063f4 <_dtoa_r+0x474>
 8006500:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006504:	2200      	movs	r2, #0
 8006506:	4b0a      	ldr	r3, [pc, #40]	; (8006530 <_dtoa_r+0x5b0>)
 8006508:	f7f9 ffe6 	bl	80004d8 <__aeabi_dmul>
 800650c:	2200      	movs	r2, #0
 800650e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006516:	4b06      	ldr	r3, [pc, #24]	; (8006530 <_dtoa_r+0x5b0>)
 8006518:	f7f9 ffde 	bl	80004d8 <__aeabi_dmul>
 800651c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006520:	e7c3      	b.n	80064aa <_dtoa_r+0x52a>
 8006522:	bf00      	nop
 8006524:	08009080 	.word	0x08009080
 8006528:	08009058 	.word	0x08009058
 800652c:	3ff00000 	.word	0x3ff00000
 8006530:	40240000 	.word	0x40240000
 8006534:	401c0000 	.word	0x401c0000
 8006538:	40140000 	.word	0x40140000
 800653c:	3fe00000 	.word	0x3fe00000
 8006540:	4630      	mov	r0, r6
 8006542:	4639      	mov	r1, r7
 8006544:	f7f9 ffc8 	bl	80004d8 <__aeabi_dmul>
 8006548:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800654a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800654e:	9c03      	ldr	r4, [sp, #12]
 8006550:	9314      	str	r3, [sp, #80]	; 0x50
 8006552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006556:	f7fa fa6f 	bl	8000a38 <__aeabi_d2iz>
 800655a:	9015      	str	r0, [sp, #84]	; 0x54
 800655c:	f7f9 ff52 	bl	8000404 <__aeabi_i2d>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006568:	f7f9 fdfe 	bl	8000168 <__aeabi_dsub>
 800656c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800656e:	4606      	mov	r6, r0
 8006570:	3330      	adds	r3, #48	; 0x30
 8006572:	f804 3b01 	strb.w	r3, [r4], #1
 8006576:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006578:	460f      	mov	r7, r1
 800657a:	429c      	cmp	r4, r3
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	d124      	bne.n	80065cc <_dtoa_r+0x64c>
 8006582:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006586:	4bb0      	ldr	r3, [pc, #704]	; (8006848 <_dtoa_r+0x8c8>)
 8006588:	f7f9 fdf0 	bl	800016c <__adddf3>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4630      	mov	r0, r6
 8006592:	4639      	mov	r1, r7
 8006594:	f7fa fa30 	bl	80009f8 <__aeabi_dcmpgt>
 8006598:	2800      	cmp	r0, #0
 800659a:	d163      	bne.n	8006664 <_dtoa_r+0x6e4>
 800659c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065a0:	2000      	movs	r0, #0
 80065a2:	49a9      	ldr	r1, [pc, #676]	; (8006848 <_dtoa_r+0x8c8>)
 80065a4:	f7f9 fde0 	bl	8000168 <__aeabi_dsub>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4630      	mov	r0, r6
 80065ae:	4639      	mov	r1, r7
 80065b0:	f7fa fa04 	bl	80009bc <__aeabi_dcmplt>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	f43f af1d 	beq.w	80063f4 <_dtoa_r+0x474>
 80065ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80065bc:	1e7b      	subs	r3, r7, #1
 80065be:	9314      	str	r3, [sp, #80]	; 0x50
 80065c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80065c4:	2b30      	cmp	r3, #48	; 0x30
 80065c6:	d0f8      	beq.n	80065ba <_dtoa_r+0x63a>
 80065c8:	46c2      	mov	sl, r8
 80065ca:	e03b      	b.n	8006644 <_dtoa_r+0x6c4>
 80065cc:	4b9f      	ldr	r3, [pc, #636]	; (800684c <_dtoa_r+0x8cc>)
 80065ce:	f7f9 ff83 	bl	80004d8 <__aeabi_dmul>
 80065d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065d6:	e7bc      	b.n	8006552 <_dtoa_r+0x5d2>
 80065d8:	9f03      	ldr	r7, [sp, #12]
 80065da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80065de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065e2:	4640      	mov	r0, r8
 80065e4:	4649      	mov	r1, r9
 80065e6:	f7fa f8a1 	bl	800072c <__aeabi_ddiv>
 80065ea:	f7fa fa25 	bl	8000a38 <__aeabi_d2iz>
 80065ee:	4604      	mov	r4, r0
 80065f0:	f7f9 ff08 	bl	8000404 <__aeabi_i2d>
 80065f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065f8:	f7f9 ff6e 	bl	80004d8 <__aeabi_dmul>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4640      	mov	r0, r8
 8006602:	4649      	mov	r1, r9
 8006604:	f7f9 fdb0 	bl	8000168 <__aeabi_dsub>
 8006608:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800660c:	f807 6b01 	strb.w	r6, [r7], #1
 8006610:	9e03      	ldr	r6, [sp, #12]
 8006612:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006616:	1bbe      	subs	r6, r7, r6
 8006618:	45b4      	cmp	ip, r6
 800661a:	4602      	mov	r2, r0
 800661c:	460b      	mov	r3, r1
 800661e:	d136      	bne.n	800668e <_dtoa_r+0x70e>
 8006620:	f7f9 fda4 	bl	800016c <__adddf3>
 8006624:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006628:	4680      	mov	r8, r0
 800662a:	4689      	mov	r9, r1
 800662c:	f7fa f9e4 	bl	80009f8 <__aeabi_dcmpgt>
 8006630:	bb58      	cbnz	r0, 800668a <_dtoa_r+0x70a>
 8006632:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006636:	4640      	mov	r0, r8
 8006638:	4649      	mov	r1, r9
 800663a:	f7fa f9b5 	bl	80009a8 <__aeabi_dcmpeq>
 800663e:	b108      	cbz	r0, 8006644 <_dtoa_r+0x6c4>
 8006640:	07e1      	lsls	r1, r4, #31
 8006642:	d422      	bmi.n	800668a <_dtoa_r+0x70a>
 8006644:	4628      	mov	r0, r5
 8006646:	4659      	mov	r1, fp
 8006648:	f001 f878 	bl	800773c <_Bfree>
 800664c:	2300      	movs	r3, #0
 800664e:	703b      	strb	r3, [r7, #0]
 8006650:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006652:	f10a 0001 	add.w	r0, sl, #1
 8006656:	6018      	str	r0, [r3, #0]
 8006658:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800665a:	2b00      	cmp	r3, #0
 800665c:	f43f acde 	beq.w	800601c <_dtoa_r+0x9c>
 8006660:	601f      	str	r7, [r3, #0]
 8006662:	e4db      	b.n	800601c <_dtoa_r+0x9c>
 8006664:	4627      	mov	r7, r4
 8006666:	463b      	mov	r3, r7
 8006668:	461f      	mov	r7, r3
 800666a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800666e:	2a39      	cmp	r2, #57	; 0x39
 8006670:	d107      	bne.n	8006682 <_dtoa_r+0x702>
 8006672:	9a03      	ldr	r2, [sp, #12]
 8006674:	429a      	cmp	r2, r3
 8006676:	d1f7      	bne.n	8006668 <_dtoa_r+0x6e8>
 8006678:	2230      	movs	r2, #48	; 0x30
 800667a:	9903      	ldr	r1, [sp, #12]
 800667c:	f108 0801 	add.w	r8, r8, #1
 8006680:	700a      	strb	r2, [r1, #0]
 8006682:	781a      	ldrb	r2, [r3, #0]
 8006684:	3201      	adds	r2, #1
 8006686:	701a      	strb	r2, [r3, #0]
 8006688:	e79e      	b.n	80065c8 <_dtoa_r+0x648>
 800668a:	46d0      	mov	r8, sl
 800668c:	e7eb      	b.n	8006666 <_dtoa_r+0x6e6>
 800668e:	2200      	movs	r2, #0
 8006690:	4b6e      	ldr	r3, [pc, #440]	; (800684c <_dtoa_r+0x8cc>)
 8006692:	f7f9 ff21 	bl	80004d8 <__aeabi_dmul>
 8006696:	2200      	movs	r2, #0
 8006698:	2300      	movs	r3, #0
 800669a:	4680      	mov	r8, r0
 800669c:	4689      	mov	r9, r1
 800669e:	f7fa f983 	bl	80009a8 <__aeabi_dcmpeq>
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d09b      	beq.n	80065de <_dtoa_r+0x65e>
 80066a6:	e7cd      	b.n	8006644 <_dtoa_r+0x6c4>
 80066a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066aa:	2a00      	cmp	r2, #0
 80066ac:	f000 80d0 	beq.w	8006850 <_dtoa_r+0x8d0>
 80066b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80066b2:	2a01      	cmp	r2, #1
 80066b4:	f300 80ae 	bgt.w	8006814 <_dtoa_r+0x894>
 80066b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066ba:	2a00      	cmp	r2, #0
 80066bc:	f000 80a6 	beq.w	800680c <_dtoa_r+0x88c>
 80066c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80066c6:	9f06      	ldr	r7, [sp, #24]
 80066c8:	9a06      	ldr	r2, [sp, #24]
 80066ca:	2101      	movs	r1, #1
 80066cc:	441a      	add	r2, r3
 80066ce:	9206      	str	r2, [sp, #24]
 80066d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066d2:	4628      	mov	r0, r5
 80066d4:	441a      	add	r2, r3
 80066d6:	9209      	str	r2, [sp, #36]	; 0x24
 80066d8:	f001 f930 	bl	800793c <__i2b>
 80066dc:	4606      	mov	r6, r0
 80066de:	2f00      	cmp	r7, #0
 80066e0:	dd0c      	ble.n	80066fc <_dtoa_r+0x77c>
 80066e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	dd09      	ble.n	80066fc <_dtoa_r+0x77c>
 80066e8:	42bb      	cmp	r3, r7
 80066ea:	bfa8      	it	ge
 80066ec:	463b      	movge	r3, r7
 80066ee:	9a06      	ldr	r2, [sp, #24]
 80066f0:	1aff      	subs	r7, r7, r3
 80066f2:	1ad2      	subs	r2, r2, r3
 80066f4:	9206      	str	r2, [sp, #24]
 80066f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	9309      	str	r3, [sp, #36]	; 0x24
 80066fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066fe:	b1f3      	cbz	r3, 800673e <_dtoa_r+0x7be>
 8006700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 80a8 	beq.w	8006858 <_dtoa_r+0x8d8>
 8006708:	2c00      	cmp	r4, #0
 800670a:	dd10      	ble.n	800672e <_dtoa_r+0x7ae>
 800670c:	4631      	mov	r1, r6
 800670e:	4622      	mov	r2, r4
 8006710:	4628      	mov	r0, r5
 8006712:	f001 f9d1 	bl	8007ab8 <__pow5mult>
 8006716:	465a      	mov	r2, fp
 8006718:	4601      	mov	r1, r0
 800671a:	4606      	mov	r6, r0
 800671c:	4628      	mov	r0, r5
 800671e:	f001 f923 	bl	8007968 <__multiply>
 8006722:	4680      	mov	r8, r0
 8006724:	4659      	mov	r1, fp
 8006726:	4628      	mov	r0, r5
 8006728:	f001 f808 	bl	800773c <_Bfree>
 800672c:	46c3      	mov	fp, r8
 800672e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006730:	1b1a      	subs	r2, r3, r4
 8006732:	d004      	beq.n	800673e <_dtoa_r+0x7be>
 8006734:	4659      	mov	r1, fp
 8006736:	4628      	mov	r0, r5
 8006738:	f001 f9be 	bl	8007ab8 <__pow5mult>
 800673c:	4683      	mov	fp, r0
 800673e:	2101      	movs	r1, #1
 8006740:	4628      	mov	r0, r5
 8006742:	f001 f8fb 	bl	800793c <__i2b>
 8006746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006748:	4604      	mov	r4, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	f340 8086 	ble.w	800685c <_dtoa_r+0x8dc>
 8006750:	461a      	mov	r2, r3
 8006752:	4601      	mov	r1, r0
 8006754:	4628      	mov	r0, r5
 8006756:	f001 f9af 	bl	8007ab8 <__pow5mult>
 800675a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800675c:	4604      	mov	r4, r0
 800675e:	2b01      	cmp	r3, #1
 8006760:	dd7f      	ble.n	8006862 <_dtoa_r+0x8e2>
 8006762:	f04f 0800 	mov.w	r8, #0
 8006766:	6923      	ldr	r3, [r4, #16]
 8006768:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800676c:	6918      	ldr	r0, [r3, #16]
 800676e:	f001 f897 	bl	80078a0 <__hi0bits>
 8006772:	f1c0 0020 	rsb	r0, r0, #32
 8006776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006778:	4418      	add	r0, r3
 800677a:	f010 001f 	ands.w	r0, r0, #31
 800677e:	f000 8092 	beq.w	80068a6 <_dtoa_r+0x926>
 8006782:	f1c0 0320 	rsb	r3, r0, #32
 8006786:	2b04      	cmp	r3, #4
 8006788:	f340 808a 	ble.w	80068a0 <_dtoa_r+0x920>
 800678c:	f1c0 001c 	rsb	r0, r0, #28
 8006790:	9b06      	ldr	r3, [sp, #24]
 8006792:	4407      	add	r7, r0
 8006794:	4403      	add	r3, r0
 8006796:	9306      	str	r3, [sp, #24]
 8006798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800679a:	4403      	add	r3, r0
 800679c:	9309      	str	r3, [sp, #36]	; 0x24
 800679e:	9b06      	ldr	r3, [sp, #24]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	dd05      	ble.n	80067b0 <_dtoa_r+0x830>
 80067a4:	4659      	mov	r1, fp
 80067a6:	461a      	mov	r2, r3
 80067a8:	4628      	mov	r0, r5
 80067aa:	f001 f9df 	bl	8007b6c <__lshift>
 80067ae:	4683      	mov	fp, r0
 80067b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dd05      	ble.n	80067c2 <_dtoa_r+0x842>
 80067b6:	4621      	mov	r1, r4
 80067b8:	461a      	mov	r2, r3
 80067ba:	4628      	mov	r0, r5
 80067bc:	f001 f9d6 	bl	8007b6c <__lshift>
 80067c0:	4604      	mov	r4, r0
 80067c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d070      	beq.n	80068aa <_dtoa_r+0x92a>
 80067c8:	4621      	mov	r1, r4
 80067ca:	4658      	mov	r0, fp
 80067cc:	f001 fa3e 	bl	8007c4c <__mcmp>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	da6a      	bge.n	80068aa <_dtoa_r+0x92a>
 80067d4:	2300      	movs	r3, #0
 80067d6:	4659      	mov	r1, fp
 80067d8:	220a      	movs	r2, #10
 80067da:	4628      	mov	r0, r5
 80067dc:	f000 ffd0 	bl	8007780 <__multadd>
 80067e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067e2:	4683      	mov	fp, r0
 80067e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 8194 	beq.w	8006b16 <_dtoa_r+0xb96>
 80067ee:	4631      	mov	r1, r6
 80067f0:	2300      	movs	r3, #0
 80067f2:	220a      	movs	r2, #10
 80067f4:	4628      	mov	r0, r5
 80067f6:	f000 ffc3 	bl	8007780 <__multadd>
 80067fa:	f1b9 0f00 	cmp.w	r9, #0
 80067fe:	4606      	mov	r6, r0
 8006800:	f300 8093 	bgt.w	800692a <_dtoa_r+0x9aa>
 8006804:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006806:	2b02      	cmp	r3, #2
 8006808:	dc57      	bgt.n	80068ba <_dtoa_r+0x93a>
 800680a:	e08e      	b.n	800692a <_dtoa_r+0x9aa>
 800680c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800680e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006812:	e757      	b.n	80066c4 <_dtoa_r+0x744>
 8006814:	9b08      	ldr	r3, [sp, #32]
 8006816:	1e5c      	subs	r4, r3, #1
 8006818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800681a:	42a3      	cmp	r3, r4
 800681c:	bfb7      	itett	lt
 800681e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006820:	1b1c      	subge	r4, r3, r4
 8006822:	1ae2      	sublt	r2, r4, r3
 8006824:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006826:	bfbe      	ittt	lt
 8006828:	940a      	strlt	r4, [sp, #40]	; 0x28
 800682a:	189b      	addlt	r3, r3, r2
 800682c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800682e:	9b08      	ldr	r3, [sp, #32]
 8006830:	bfb8      	it	lt
 8006832:	2400      	movlt	r4, #0
 8006834:	2b00      	cmp	r3, #0
 8006836:	bfbb      	ittet	lt
 8006838:	9b06      	ldrlt	r3, [sp, #24]
 800683a:	9a08      	ldrlt	r2, [sp, #32]
 800683c:	9f06      	ldrge	r7, [sp, #24]
 800683e:	1a9f      	sublt	r7, r3, r2
 8006840:	bfac      	ite	ge
 8006842:	9b08      	ldrge	r3, [sp, #32]
 8006844:	2300      	movlt	r3, #0
 8006846:	e73f      	b.n	80066c8 <_dtoa_r+0x748>
 8006848:	3fe00000 	.word	0x3fe00000
 800684c:	40240000 	.word	0x40240000
 8006850:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006852:	9f06      	ldr	r7, [sp, #24]
 8006854:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006856:	e742      	b.n	80066de <_dtoa_r+0x75e>
 8006858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800685a:	e76b      	b.n	8006734 <_dtoa_r+0x7b4>
 800685c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800685e:	2b01      	cmp	r3, #1
 8006860:	dc19      	bgt.n	8006896 <_dtoa_r+0x916>
 8006862:	9b04      	ldr	r3, [sp, #16]
 8006864:	b9bb      	cbnz	r3, 8006896 <_dtoa_r+0x916>
 8006866:	9b05      	ldr	r3, [sp, #20]
 8006868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800686c:	b99b      	cbnz	r3, 8006896 <_dtoa_r+0x916>
 800686e:	9b05      	ldr	r3, [sp, #20]
 8006870:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006874:	0d1b      	lsrs	r3, r3, #20
 8006876:	051b      	lsls	r3, r3, #20
 8006878:	b183      	cbz	r3, 800689c <_dtoa_r+0x91c>
 800687a:	f04f 0801 	mov.w	r8, #1
 800687e:	9b06      	ldr	r3, [sp, #24]
 8006880:	3301      	adds	r3, #1
 8006882:	9306      	str	r3, [sp, #24]
 8006884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006886:	3301      	adds	r3, #1
 8006888:	9309      	str	r3, [sp, #36]	; 0x24
 800688a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800688c:	2b00      	cmp	r3, #0
 800688e:	f47f af6a 	bne.w	8006766 <_dtoa_r+0x7e6>
 8006892:	2001      	movs	r0, #1
 8006894:	e76f      	b.n	8006776 <_dtoa_r+0x7f6>
 8006896:	f04f 0800 	mov.w	r8, #0
 800689a:	e7f6      	b.n	800688a <_dtoa_r+0x90a>
 800689c:	4698      	mov	r8, r3
 800689e:	e7f4      	b.n	800688a <_dtoa_r+0x90a>
 80068a0:	f43f af7d 	beq.w	800679e <_dtoa_r+0x81e>
 80068a4:	4618      	mov	r0, r3
 80068a6:	301c      	adds	r0, #28
 80068a8:	e772      	b.n	8006790 <_dtoa_r+0x810>
 80068aa:	9b08      	ldr	r3, [sp, #32]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	dc36      	bgt.n	800691e <_dtoa_r+0x99e>
 80068b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	dd33      	ble.n	800691e <_dtoa_r+0x99e>
 80068b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068ba:	f1b9 0f00 	cmp.w	r9, #0
 80068be:	d10d      	bne.n	80068dc <_dtoa_r+0x95c>
 80068c0:	4621      	mov	r1, r4
 80068c2:	464b      	mov	r3, r9
 80068c4:	2205      	movs	r2, #5
 80068c6:	4628      	mov	r0, r5
 80068c8:	f000 ff5a 	bl	8007780 <__multadd>
 80068cc:	4601      	mov	r1, r0
 80068ce:	4604      	mov	r4, r0
 80068d0:	4658      	mov	r0, fp
 80068d2:	f001 f9bb 	bl	8007c4c <__mcmp>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f73f adb8 	bgt.w	800644c <_dtoa_r+0x4cc>
 80068dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068de:	9f03      	ldr	r7, [sp, #12]
 80068e0:	ea6f 0a03 	mvn.w	sl, r3
 80068e4:	f04f 0800 	mov.w	r8, #0
 80068e8:	4621      	mov	r1, r4
 80068ea:	4628      	mov	r0, r5
 80068ec:	f000 ff26 	bl	800773c <_Bfree>
 80068f0:	2e00      	cmp	r6, #0
 80068f2:	f43f aea7 	beq.w	8006644 <_dtoa_r+0x6c4>
 80068f6:	f1b8 0f00 	cmp.w	r8, #0
 80068fa:	d005      	beq.n	8006908 <_dtoa_r+0x988>
 80068fc:	45b0      	cmp	r8, r6
 80068fe:	d003      	beq.n	8006908 <_dtoa_r+0x988>
 8006900:	4641      	mov	r1, r8
 8006902:	4628      	mov	r0, r5
 8006904:	f000 ff1a 	bl	800773c <_Bfree>
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	f000 ff16 	bl	800773c <_Bfree>
 8006910:	e698      	b.n	8006644 <_dtoa_r+0x6c4>
 8006912:	2400      	movs	r4, #0
 8006914:	4626      	mov	r6, r4
 8006916:	e7e1      	b.n	80068dc <_dtoa_r+0x95c>
 8006918:	46c2      	mov	sl, r8
 800691a:	4626      	mov	r6, r4
 800691c:	e596      	b.n	800644c <_dtoa_r+0x4cc>
 800691e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006920:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 80fd 	beq.w	8006b24 <_dtoa_r+0xba4>
 800692a:	2f00      	cmp	r7, #0
 800692c:	dd05      	ble.n	800693a <_dtoa_r+0x9ba>
 800692e:	4631      	mov	r1, r6
 8006930:	463a      	mov	r2, r7
 8006932:	4628      	mov	r0, r5
 8006934:	f001 f91a 	bl	8007b6c <__lshift>
 8006938:	4606      	mov	r6, r0
 800693a:	f1b8 0f00 	cmp.w	r8, #0
 800693e:	d05c      	beq.n	80069fa <_dtoa_r+0xa7a>
 8006940:	4628      	mov	r0, r5
 8006942:	6871      	ldr	r1, [r6, #4]
 8006944:	f000 feba 	bl	80076bc <_Balloc>
 8006948:	4607      	mov	r7, r0
 800694a:	b928      	cbnz	r0, 8006958 <_dtoa_r+0x9d8>
 800694c:	4602      	mov	r2, r0
 800694e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006952:	4b7f      	ldr	r3, [pc, #508]	; (8006b50 <_dtoa_r+0xbd0>)
 8006954:	f7ff bb28 	b.w	8005fa8 <_dtoa_r+0x28>
 8006958:	6932      	ldr	r2, [r6, #16]
 800695a:	f106 010c 	add.w	r1, r6, #12
 800695e:	3202      	adds	r2, #2
 8006960:	0092      	lsls	r2, r2, #2
 8006962:	300c      	adds	r0, #12
 8006964:	f7fd fc4a 	bl	80041fc <memcpy>
 8006968:	2201      	movs	r2, #1
 800696a:	4639      	mov	r1, r7
 800696c:	4628      	mov	r0, r5
 800696e:	f001 f8fd 	bl	8007b6c <__lshift>
 8006972:	46b0      	mov	r8, r6
 8006974:	4606      	mov	r6, r0
 8006976:	9b03      	ldr	r3, [sp, #12]
 8006978:	3301      	adds	r3, #1
 800697a:	9308      	str	r3, [sp, #32]
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	444b      	add	r3, r9
 8006980:	930a      	str	r3, [sp, #40]	; 0x28
 8006982:	9b04      	ldr	r3, [sp, #16]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	9309      	str	r3, [sp, #36]	; 0x24
 800698a:	9b08      	ldr	r3, [sp, #32]
 800698c:	4621      	mov	r1, r4
 800698e:	3b01      	subs	r3, #1
 8006990:	4658      	mov	r0, fp
 8006992:	9304      	str	r3, [sp, #16]
 8006994:	f7ff fa68 	bl	8005e68 <quorem>
 8006998:	4603      	mov	r3, r0
 800699a:	4641      	mov	r1, r8
 800699c:	3330      	adds	r3, #48	; 0x30
 800699e:	9006      	str	r0, [sp, #24]
 80069a0:	4658      	mov	r0, fp
 80069a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80069a4:	f001 f952 	bl	8007c4c <__mcmp>
 80069a8:	4632      	mov	r2, r6
 80069aa:	4681      	mov	r9, r0
 80069ac:	4621      	mov	r1, r4
 80069ae:	4628      	mov	r0, r5
 80069b0:	f001 f968 	bl	8007c84 <__mdiff>
 80069b4:	68c2      	ldr	r2, [r0, #12]
 80069b6:	4607      	mov	r7, r0
 80069b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ba:	bb02      	cbnz	r2, 80069fe <_dtoa_r+0xa7e>
 80069bc:	4601      	mov	r1, r0
 80069be:	4658      	mov	r0, fp
 80069c0:	f001 f944 	bl	8007c4c <__mcmp>
 80069c4:	4602      	mov	r2, r0
 80069c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069c8:	4639      	mov	r1, r7
 80069ca:	4628      	mov	r0, r5
 80069cc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80069d0:	f000 feb4 	bl	800773c <_Bfree>
 80069d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069d8:	9f08      	ldr	r7, [sp, #32]
 80069da:	ea43 0102 	orr.w	r1, r3, r2
 80069de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e0:	430b      	orrs	r3, r1
 80069e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069e4:	d10d      	bne.n	8006a02 <_dtoa_r+0xa82>
 80069e6:	2b39      	cmp	r3, #57	; 0x39
 80069e8:	d029      	beq.n	8006a3e <_dtoa_r+0xabe>
 80069ea:	f1b9 0f00 	cmp.w	r9, #0
 80069ee:	dd01      	ble.n	80069f4 <_dtoa_r+0xa74>
 80069f0:	9b06      	ldr	r3, [sp, #24]
 80069f2:	3331      	adds	r3, #49	; 0x31
 80069f4:	9a04      	ldr	r2, [sp, #16]
 80069f6:	7013      	strb	r3, [r2, #0]
 80069f8:	e776      	b.n	80068e8 <_dtoa_r+0x968>
 80069fa:	4630      	mov	r0, r6
 80069fc:	e7b9      	b.n	8006972 <_dtoa_r+0x9f2>
 80069fe:	2201      	movs	r2, #1
 8006a00:	e7e2      	b.n	80069c8 <_dtoa_r+0xa48>
 8006a02:	f1b9 0f00 	cmp.w	r9, #0
 8006a06:	db06      	blt.n	8006a16 <_dtoa_r+0xa96>
 8006a08:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006a0a:	ea41 0909 	orr.w	r9, r1, r9
 8006a0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a10:	ea59 0101 	orrs.w	r1, r9, r1
 8006a14:	d120      	bne.n	8006a58 <_dtoa_r+0xad8>
 8006a16:	2a00      	cmp	r2, #0
 8006a18:	ddec      	ble.n	80069f4 <_dtoa_r+0xa74>
 8006a1a:	4659      	mov	r1, fp
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4628      	mov	r0, r5
 8006a20:	9308      	str	r3, [sp, #32]
 8006a22:	f001 f8a3 	bl	8007b6c <__lshift>
 8006a26:	4621      	mov	r1, r4
 8006a28:	4683      	mov	fp, r0
 8006a2a:	f001 f90f 	bl	8007c4c <__mcmp>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	9b08      	ldr	r3, [sp, #32]
 8006a32:	dc02      	bgt.n	8006a3a <_dtoa_r+0xaba>
 8006a34:	d1de      	bne.n	80069f4 <_dtoa_r+0xa74>
 8006a36:	07da      	lsls	r2, r3, #31
 8006a38:	d5dc      	bpl.n	80069f4 <_dtoa_r+0xa74>
 8006a3a:	2b39      	cmp	r3, #57	; 0x39
 8006a3c:	d1d8      	bne.n	80069f0 <_dtoa_r+0xa70>
 8006a3e:	2339      	movs	r3, #57	; 0x39
 8006a40:	9a04      	ldr	r2, [sp, #16]
 8006a42:	7013      	strb	r3, [r2, #0]
 8006a44:	463b      	mov	r3, r7
 8006a46:	461f      	mov	r7, r3
 8006a48:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	2a39      	cmp	r2, #57	; 0x39
 8006a50:	d050      	beq.n	8006af4 <_dtoa_r+0xb74>
 8006a52:	3201      	adds	r2, #1
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	e747      	b.n	80068e8 <_dtoa_r+0x968>
 8006a58:	2a00      	cmp	r2, #0
 8006a5a:	dd03      	ble.n	8006a64 <_dtoa_r+0xae4>
 8006a5c:	2b39      	cmp	r3, #57	; 0x39
 8006a5e:	d0ee      	beq.n	8006a3e <_dtoa_r+0xabe>
 8006a60:	3301      	adds	r3, #1
 8006a62:	e7c7      	b.n	80069f4 <_dtoa_r+0xa74>
 8006a64:	9a08      	ldr	r2, [sp, #32]
 8006a66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a68:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a6c:	428a      	cmp	r2, r1
 8006a6e:	d02a      	beq.n	8006ac6 <_dtoa_r+0xb46>
 8006a70:	4659      	mov	r1, fp
 8006a72:	2300      	movs	r3, #0
 8006a74:	220a      	movs	r2, #10
 8006a76:	4628      	mov	r0, r5
 8006a78:	f000 fe82 	bl	8007780 <__multadd>
 8006a7c:	45b0      	cmp	r8, r6
 8006a7e:	4683      	mov	fp, r0
 8006a80:	f04f 0300 	mov.w	r3, #0
 8006a84:	f04f 020a 	mov.w	r2, #10
 8006a88:	4641      	mov	r1, r8
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	d107      	bne.n	8006a9e <_dtoa_r+0xb1e>
 8006a8e:	f000 fe77 	bl	8007780 <__multadd>
 8006a92:	4680      	mov	r8, r0
 8006a94:	4606      	mov	r6, r0
 8006a96:	9b08      	ldr	r3, [sp, #32]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	9308      	str	r3, [sp, #32]
 8006a9c:	e775      	b.n	800698a <_dtoa_r+0xa0a>
 8006a9e:	f000 fe6f 	bl	8007780 <__multadd>
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4680      	mov	r8, r0
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	220a      	movs	r2, #10
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f000 fe68 	bl	8007780 <__multadd>
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	e7f0      	b.n	8006a96 <_dtoa_r+0xb16>
 8006ab4:	f1b9 0f00 	cmp.w	r9, #0
 8006ab8:	bfcc      	ite	gt
 8006aba:	464f      	movgt	r7, r9
 8006abc:	2701      	movle	r7, #1
 8006abe:	f04f 0800 	mov.w	r8, #0
 8006ac2:	9a03      	ldr	r2, [sp, #12]
 8006ac4:	4417      	add	r7, r2
 8006ac6:	4659      	mov	r1, fp
 8006ac8:	2201      	movs	r2, #1
 8006aca:	4628      	mov	r0, r5
 8006acc:	9308      	str	r3, [sp, #32]
 8006ace:	f001 f84d 	bl	8007b6c <__lshift>
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	4683      	mov	fp, r0
 8006ad6:	f001 f8b9 	bl	8007c4c <__mcmp>
 8006ada:	2800      	cmp	r0, #0
 8006adc:	dcb2      	bgt.n	8006a44 <_dtoa_r+0xac4>
 8006ade:	d102      	bne.n	8006ae6 <_dtoa_r+0xb66>
 8006ae0:	9b08      	ldr	r3, [sp, #32]
 8006ae2:	07db      	lsls	r3, r3, #31
 8006ae4:	d4ae      	bmi.n	8006a44 <_dtoa_r+0xac4>
 8006ae6:	463b      	mov	r3, r7
 8006ae8:	461f      	mov	r7, r3
 8006aea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006aee:	2a30      	cmp	r2, #48	; 0x30
 8006af0:	d0fa      	beq.n	8006ae8 <_dtoa_r+0xb68>
 8006af2:	e6f9      	b.n	80068e8 <_dtoa_r+0x968>
 8006af4:	9a03      	ldr	r2, [sp, #12]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d1a5      	bne.n	8006a46 <_dtoa_r+0xac6>
 8006afa:	2331      	movs	r3, #49	; 0x31
 8006afc:	f10a 0a01 	add.w	sl, sl, #1
 8006b00:	e779      	b.n	80069f6 <_dtoa_r+0xa76>
 8006b02:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <_dtoa_r+0xbd4>)
 8006b04:	f7ff baa8 	b.w	8006058 <_dtoa_r+0xd8>
 8006b08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f47f aa81 	bne.w	8006012 <_dtoa_r+0x92>
 8006b10:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <_dtoa_r+0xbd8>)
 8006b12:	f7ff baa1 	b.w	8006058 <_dtoa_r+0xd8>
 8006b16:	f1b9 0f00 	cmp.w	r9, #0
 8006b1a:	dc03      	bgt.n	8006b24 <_dtoa_r+0xba4>
 8006b1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	f73f aecb 	bgt.w	80068ba <_dtoa_r+0x93a>
 8006b24:	9f03      	ldr	r7, [sp, #12]
 8006b26:	4621      	mov	r1, r4
 8006b28:	4658      	mov	r0, fp
 8006b2a:	f7ff f99d 	bl	8005e68 <quorem>
 8006b2e:	9a03      	ldr	r2, [sp, #12]
 8006b30:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006b34:	f807 3b01 	strb.w	r3, [r7], #1
 8006b38:	1aba      	subs	r2, r7, r2
 8006b3a:	4591      	cmp	r9, r2
 8006b3c:	ddba      	ble.n	8006ab4 <_dtoa_r+0xb34>
 8006b3e:	4659      	mov	r1, fp
 8006b40:	2300      	movs	r3, #0
 8006b42:	220a      	movs	r2, #10
 8006b44:	4628      	mov	r0, r5
 8006b46:	f000 fe1b 	bl	8007780 <__multadd>
 8006b4a:	4683      	mov	fp, r0
 8006b4c:	e7eb      	b.n	8006b26 <_dtoa_r+0xba6>
 8006b4e:	bf00      	nop
 8006b50:	08008f08 	.word	0x08008f08
 8006b54:	08008d08 	.word	0x08008d08
 8006b58:	08008e89 	.word	0x08008e89

08006b5c <__sflush_r>:
 8006b5c:	898a      	ldrh	r2, [r1, #12]
 8006b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b60:	4605      	mov	r5, r0
 8006b62:	0710      	lsls	r0, r2, #28
 8006b64:	460c      	mov	r4, r1
 8006b66:	d457      	bmi.n	8006c18 <__sflush_r+0xbc>
 8006b68:	684b      	ldr	r3, [r1, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	dc04      	bgt.n	8006b78 <__sflush_r+0x1c>
 8006b6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	dc01      	bgt.n	8006b78 <__sflush_r+0x1c>
 8006b74:	2000      	movs	r0, #0
 8006b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b7a:	2e00      	cmp	r6, #0
 8006b7c:	d0fa      	beq.n	8006b74 <__sflush_r+0x18>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b84:	682f      	ldr	r7, [r5, #0]
 8006b86:	602b      	str	r3, [r5, #0]
 8006b88:	d032      	beq.n	8006bf0 <__sflush_r+0x94>
 8006b8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b8c:	89a3      	ldrh	r3, [r4, #12]
 8006b8e:	075a      	lsls	r2, r3, #29
 8006b90:	d505      	bpl.n	8006b9e <__sflush_r+0x42>
 8006b92:	6863      	ldr	r3, [r4, #4]
 8006b94:	1ac0      	subs	r0, r0, r3
 8006b96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b98:	b10b      	cbz	r3, 8006b9e <__sflush_r+0x42>
 8006b9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b9c:	1ac0      	subs	r0, r0, r3
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	6a21      	ldr	r1, [r4, #32]
 8006ba8:	47b0      	blx	r6
 8006baa:	1c43      	adds	r3, r0, #1
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	d106      	bne.n	8006bbe <__sflush_r+0x62>
 8006bb0:	6829      	ldr	r1, [r5, #0]
 8006bb2:	291d      	cmp	r1, #29
 8006bb4:	d82c      	bhi.n	8006c10 <__sflush_r+0xb4>
 8006bb6:	4a29      	ldr	r2, [pc, #164]	; (8006c5c <__sflush_r+0x100>)
 8006bb8:	40ca      	lsrs	r2, r1
 8006bba:	07d6      	lsls	r6, r2, #31
 8006bbc:	d528      	bpl.n	8006c10 <__sflush_r+0xb4>
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	6062      	str	r2, [r4, #4]
 8006bc2:	6922      	ldr	r2, [r4, #16]
 8006bc4:	04d9      	lsls	r1, r3, #19
 8006bc6:	6022      	str	r2, [r4, #0]
 8006bc8:	d504      	bpl.n	8006bd4 <__sflush_r+0x78>
 8006bca:	1c42      	adds	r2, r0, #1
 8006bcc:	d101      	bne.n	8006bd2 <__sflush_r+0x76>
 8006bce:	682b      	ldr	r3, [r5, #0]
 8006bd0:	b903      	cbnz	r3, 8006bd4 <__sflush_r+0x78>
 8006bd2:	6560      	str	r0, [r4, #84]	; 0x54
 8006bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bd6:	602f      	str	r7, [r5, #0]
 8006bd8:	2900      	cmp	r1, #0
 8006bda:	d0cb      	beq.n	8006b74 <__sflush_r+0x18>
 8006bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006be0:	4299      	cmp	r1, r3
 8006be2:	d002      	beq.n	8006bea <__sflush_r+0x8e>
 8006be4:	4628      	mov	r0, r5
 8006be6:	f7fd fb33 	bl	8004250 <_free_r>
 8006bea:	2000      	movs	r0, #0
 8006bec:	6360      	str	r0, [r4, #52]	; 0x34
 8006bee:	e7c2      	b.n	8006b76 <__sflush_r+0x1a>
 8006bf0:	6a21      	ldr	r1, [r4, #32]
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	47b0      	blx	r6
 8006bf8:	1c41      	adds	r1, r0, #1
 8006bfa:	d1c7      	bne.n	8006b8c <__sflush_r+0x30>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0c4      	beq.n	8006b8c <__sflush_r+0x30>
 8006c02:	2b1d      	cmp	r3, #29
 8006c04:	d001      	beq.n	8006c0a <__sflush_r+0xae>
 8006c06:	2b16      	cmp	r3, #22
 8006c08:	d101      	bne.n	8006c0e <__sflush_r+0xb2>
 8006c0a:	602f      	str	r7, [r5, #0]
 8006c0c:	e7b2      	b.n	8006b74 <__sflush_r+0x18>
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c14:	81a3      	strh	r3, [r4, #12]
 8006c16:	e7ae      	b.n	8006b76 <__sflush_r+0x1a>
 8006c18:	690f      	ldr	r7, [r1, #16]
 8006c1a:	2f00      	cmp	r7, #0
 8006c1c:	d0aa      	beq.n	8006b74 <__sflush_r+0x18>
 8006c1e:	0793      	lsls	r3, r2, #30
 8006c20:	bf18      	it	ne
 8006c22:	2300      	movne	r3, #0
 8006c24:	680e      	ldr	r6, [r1, #0]
 8006c26:	bf08      	it	eq
 8006c28:	694b      	ldreq	r3, [r1, #20]
 8006c2a:	1bf6      	subs	r6, r6, r7
 8006c2c:	600f      	str	r7, [r1, #0]
 8006c2e:	608b      	str	r3, [r1, #8]
 8006c30:	2e00      	cmp	r6, #0
 8006c32:	dd9f      	ble.n	8006b74 <__sflush_r+0x18>
 8006c34:	4633      	mov	r3, r6
 8006c36:	463a      	mov	r2, r7
 8006c38:	4628      	mov	r0, r5
 8006c3a:	6a21      	ldr	r1, [r4, #32]
 8006c3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006c40:	47e0      	blx	ip
 8006c42:	2800      	cmp	r0, #0
 8006c44:	dc06      	bgt.n	8006c54 <__sflush_r+0xf8>
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c50:	81a3      	strh	r3, [r4, #12]
 8006c52:	e790      	b.n	8006b76 <__sflush_r+0x1a>
 8006c54:	4407      	add	r7, r0
 8006c56:	1a36      	subs	r6, r6, r0
 8006c58:	e7ea      	b.n	8006c30 <__sflush_r+0xd4>
 8006c5a:	bf00      	nop
 8006c5c:	20400001 	.word	0x20400001

08006c60 <_fflush_r>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	690b      	ldr	r3, [r1, #16]
 8006c64:	4605      	mov	r5, r0
 8006c66:	460c      	mov	r4, r1
 8006c68:	b913      	cbnz	r3, 8006c70 <_fflush_r+0x10>
 8006c6a:	2500      	movs	r5, #0
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
 8006c70:	b118      	cbz	r0, 8006c7a <_fflush_r+0x1a>
 8006c72:	6983      	ldr	r3, [r0, #24]
 8006c74:	b90b      	cbnz	r3, 8006c7a <_fflush_r+0x1a>
 8006c76:	f000 f887 	bl	8006d88 <__sinit>
 8006c7a:	4b14      	ldr	r3, [pc, #80]	; (8006ccc <_fflush_r+0x6c>)
 8006c7c:	429c      	cmp	r4, r3
 8006c7e:	d11b      	bne.n	8006cb8 <_fflush_r+0x58>
 8006c80:	686c      	ldr	r4, [r5, #4]
 8006c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0ef      	beq.n	8006c6a <_fflush_r+0xa>
 8006c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c8c:	07d0      	lsls	r0, r2, #31
 8006c8e:	d404      	bmi.n	8006c9a <_fflush_r+0x3a>
 8006c90:	0599      	lsls	r1, r3, #22
 8006c92:	d402      	bmi.n	8006c9a <_fflush_r+0x3a>
 8006c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c96:	f7fd faa6 	bl	80041e6 <__retarget_lock_acquire_recursive>
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	4621      	mov	r1, r4
 8006c9e:	f7ff ff5d 	bl	8006b5c <__sflush_r>
 8006ca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ca4:	4605      	mov	r5, r0
 8006ca6:	07da      	lsls	r2, r3, #31
 8006ca8:	d4e0      	bmi.n	8006c6c <_fflush_r+0xc>
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	059b      	lsls	r3, r3, #22
 8006cae:	d4dd      	bmi.n	8006c6c <_fflush_r+0xc>
 8006cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cb2:	f7fd fa99 	bl	80041e8 <__retarget_lock_release_recursive>
 8006cb6:	e7d9      	b.n	8006c6c <_fflush_r+0xc>
 8006cb8:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <_fflush_r+0x70>)
 8006cba:	429c      	cmp	r4, r3
 8006cbc:	d101      	bne.n	8006cc2 <_fflush_r+0x62>
 8006cbe:	68ac      	ldr	r4, [r5, #8]
 8006cc0:	e7df      	b.n	8006c82 <_fflush_r+0x22>
 8006cc2:	4b04      	ldr	r3, [pc, #16]	; (8006cd4 <_fflush_r+0x74>)
 8006cc4:	429c      	cmp	r4, r3
 8006cc6:	bf08      	it	eq
 8006cc8:	68ec      	ldreq	r4, [r5, #12]
 8006cca:	e7da      	b.n	8006c82 <_fflush_r+0x22>
 8006ccc:	08008f3c 	.word	0x08008f3c
 8006cd0:	08008f5c 	.word	0x08008f5c
 8006cd4:	08008f1c 	.word	0x08008f1c

08006cd8 <std>:
 8006cd8:	2300      	movs	r3, #0
 8006cda:	b510      	push	{r4, lr}
 8006cdc:	4604      	mov	r4, r0
 8006cde:	e9c0 3300 	strd	r3, r3, [r0]
 8006ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ce6:	6083      	str	r3, [r0, #8]
 8006ce8:	8181      	strh	r1, [r0, #12]
 8006cea:	6643      	str	r3, [r0, #100]	; 0x64
 8006cec:	81c2      	strh	r2, [r0, #14]
 8006cee:	6183      	str	r3, [r0, #24]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	2208      	movs	r2, #8
 8006cf4:	305c      	adds	r0, #92	; 0x5c
 8006cf6:	f7fd fa8f 	bl	8004218 <memset>
 8006cfa:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <std+0x38>)
 8006cfc:	6224      	str	r4, [r4, #32]
 8006cfe:	6263      	str	r3, [r4, #36]	; 0x24
 8006d00:	4b04      	ldr	r3, [pc, #16]	; (8006d14 <std+0x3c>)
 8006d02:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d04:	4b04      	ldr	r3, [pc, #16]	; (8006d18 <std+0x40>)
 8006d06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d08:	4b04      	ldr	r3, [pc, #16]	; (8006d1c <std+0x44>)
 8006d0a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d0c:	bd10      	pop	{r4, pc}
 8006d0e:	bf00      	nop
 8006d10:	080082f1 	.word	0x080082f1
 8006d14:	08008313 	.word	0x08008313
 8006d18:	0800834b 	.word	0x0800834b
 8006d1c:	0800836f 	.word	0x0800836f

08006d20 <_cleanup_r>:
 8006d20:	4901      	ldr	r1, [pc, #4]	; (8006d28 <_cleanup_r+0x8>)
 8006d22:	f000 b8af 	b.w	8006e84 <_fwalk_reent>
 8006d26:	bf00      	nop
 8006d28:	08006c61 	.word	0x08006c61

08006d2c <__sfmoreglue>:
 8006d2c:	2268      	movs	r2, #104	; 0x68
 8006d2e:	b570      	push	{r4, r5, r6, lr}
 8006d30:	1e4d      	subs	r5, r1, #1
 8006d32:	4355      	muls	r5, r2
 8006d34:	460e      	mov	r6, r1
 8006d36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d3a:	f7fd faf1 	bl	8004320 <_malloc_r>
 8006d3e:	4604      	mov	r4, r0
 8006d40:	b140      	cbz	r0, 8006d54 <__sfmoreglue+0x28>
 8006d42:	2100      	movs	r1, #0
 8006d44:	e9c0 1600 	strd	r1, r6, [r0]
 8006d48:	300c      	adds	r0, #12
 8006d4a:	60a0      	str	r0, [r4, #8]
 8006d4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d50:	f7fd fa62 	bl	8004218 <memset>
 8006d54:	4620      	mov	r0, r4
 8006d56:	bd70      	pop	{r4, r5, r6, pc}

08006d58 <__sfp_lock_acquire>:
 8006d58:	4801      	ldr	r0, [pc, #4]	; (8006d60 <__sfp_lock_acquire+0x8>)
 8006d5a:	f7fd ba44 	b.w	80041e6 <__retarget_lock_acquire_recursive>
 8006d5e:	bf00      	nop
 8006d60:	20000519 	.word	0x20000519

08006d64 <__sfp_lock_release>:
 8006d64:	4801      	ldr	r0, [pc, #4]	; (8006d6c <__sfp_lock_release+0x8>)
 8006d66:	f7fd ba3f 	b.w	80041e8 <__retarget_lock_release_recursive>
 8006d6a:	bf00      	nop
 8006d6c:	20000519 	.word	0x20000519

08006d70 <__sinit_lock_acquire>:
 8006d70:	4801      	ldr	r0, [pc, #4]	; (8006d78 <__sinit_lock_acquire+0x8>)
 8006d72:	f7fd ba38 	b.w	80041e6 <__retarget_lock_acquire_recursive>
 8006d76:	bf00      	nop
 8006d78:	2000051a 	.word	0x2000051a

08006d7c <__sinit_lock_release>:
 8006d7c:	4801      	ldr	r0, [pc, #4]	; (8006d84 <__sinit_lock_release+0x8>)
 8006d7e:	f7fd ba33 	b.w	80041e8 <__retarget_lock_release_recursive>
 8006d82:	bf00      	nop
 8006d84:	2000051a 	.word	0x2000051a

08006d88 <__sinit>:
 8006d88:	b510      	push	{r4, lr}
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	f7ff fff0 	bl	8006d70 <__sinit_lock_acquire>
 8006d90:	69a3      	ldr	r3, [r4, #24]
 8006d92:	b11b      	cbz	r3, 8006d9c <__sinit+0x14>
 8006d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d98:	f7ff bff0 	b.w	8006d7c <__sinit_lock_release>
 8006d9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006da0:	6523      	str	r3, [r4, #80]	; 0x50
 8006da2:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <__sinit+0x68>)
 8006da4:	4a13      	ldr	r2, [pc, #76]	; (8006df4 <__sinit+0x6c>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006daa:	42a3      	cmp	r3, r4
 8006dac:	bf08      	it	eq
 8006dae:	2301      	moveq	r3, #1
 8006db0:	4620      	mov	r0, r4
 8006db2:	bf08      	it	eq
 8006db4:	61a3      	streq	r3, [r4, #24]
 8006db6:	f000 f81f 	bl	8006df8 <__sfp>
 8006dba:	6060      	str	r0, [r4, #4]
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f000 f81b 	bl	8006df8 <__sfp>
 8006dc2:	60a0      	str	r0, [r4, #8]
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 f817 	bl	8006df8 <__sfp>
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2104      	movs	r1, #4
 8006dce:	60e0      	str	r0, [r4, #12]
 8006dd0:	6860      	ldr	r0, [r4, #4]
 8006dd2:	f7ff ff81 	bl	8006cd8 <std>
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	2109      	movs	r1, #9
 8006dda:	68a0      	ldr	r0, [r4, #8]
 8006ddc:	f7ff ff7c 	bl	8006cd8 <std>
 8006de0:	2202      	movs	r2, #2
 8006de2:	2112      	movs	r1, #18
 8006de4:	68e0      	ldr	r0, [r4, #12]
 8006de6:	f7ff ff77 	bl	8006cd8 <std>
 8006dea:	2301      	movs	r3, #1
 8006dec:	61a3      	str	r3, [r4, #24]
 8006dee:	e7d1      	b.n	8006d94 <__sinit+0xc>
 8006df0:	08008cf4 	.word	0x08008cf4
 8006df4:	08006d21 	.word	0x08006d21

08006df8 <__sfp>:
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	4607      	mov	r7, r0
 8006dfc:	f7ff ffac 	bl	8006d58 <__sfp_lock_acquire>
 8006e00:	4b1e      	ldr	r3, [pc, #120]	; (8006e7c <__sfp+0x84>)
 8006e02:	681e      	ldr	r6, [r3, #0]
 8006e04:	69b3      	ldr	r3, [r6, #24]
 8006e06:	b913      	cbnz	r3, 8006e0e <__sfp+0x16>
 8006e08:	4630      	mov	r0, r6
 8006e0a:	f7ff ffbd 	bl	8006d88 <__sinit>
 8006e0e:	3648      	adds	r6, #72	; 0x48
 8006e10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	d503      	bpl.n	8006e20 <__sfp+0x28>
 8006e18:	6833      	ldr	r3, [r6, #0]
 8006e1a:	b30b      	cbz	r3, 8006e60 <__sfp+0x68>
 8006e1c:	6836      	ldr	r6, [r6, #0]
 8006e1e:	e7f7      	b.n	8006e10 <__sfp+0x18>
 8006e20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e24:	b9d5      	cbnz	r5, 8006e5c <__sfp+0x64>
 8006e26:	4b16      	ldr	r3, [pc, #88]	; (8006e80 <__sfp+0x88>)
 8006e28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e2c:	60e3      	str	r3, [r4, #12]
 8006e2e:	6665      	str	r5, [r4, #100]	; 0x64
 8006e30:	f7fd f9d8 	bl	80041e4 <__retarget_lock_init_recursive>
 8006e34:	f7ff ff96 	bl	8006d64 <__sfp_lock_release>
 8006e38:	2208      	movs	r2, #8
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e44:	6025      	str	r5, [r4, #0]
 8006e46:	61a5      	str	r5, [r4, #24]
 8006e48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e4c:	f7fd f9e4 	bl	8004218 <memset>
 8006e50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e58:	4620      	mov	r0, r4
 8006e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e5c:	3468      	adds	r4, #104	; 0x68
 8006e5e:	e7d9      	b.n	8006e14 <__sfp+0x1c>
 8006e60:	2104      	movs	r1, #4
 8006e62:	4638      	mov	r0, r7
 8006e64:	f7ff ff62 	bl	8006d2c <__sfmoreglue>
 8006e68:	4604      	mov	r4, r0
 8006e6a:	6030      	str	r0, [r6, #0]
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d1d5      	bne.n	8006e1c <__sfp+0x24>
 8006e70:	f7ff ff78 	bl	8006d64 <__sfp_lock_release>
 8006e74:	230c      	movs	r3, #12
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	e7ee      	b.n	8006e58 <__sfp+0x60>
 8006e7a:	bf00      	nop
 8006e7c:	08008cf4 	.word	0x08008cf4
 8006e80:	ffff0001 	.word	0xffff0001

08006e84 <_fwalk_reent>:
 8006e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e88:	4606      	mov	r6, r0
 8006e8a:	4688      	mov	r8, r1
 8006e8c:	2700      	movs	r7, #0
 8006e8e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e96:	f1b9 0901 	subs.w	r9, r9, #1
 8006e9a:	d505      	bpl.n	8006ea8 <_fwalk_reent+0x24>
 8006e9c:	6824      	ldr	r4, [r4, #0]
 8006e9e:	2c00      	cmp	r4, #0
 8006ea0:	d1f7      	bne.n	8006e92 <_fwalk_reent+0xe>
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ea8:	89ab      	ldrh	r3, [r5, #12]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d907      	bls.n	8006ebe <_fwalk_reent+0x3a>
 8006eae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	d003      	beq.n	8006ebe <_fwalk_reent+0x3a>
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	4630      	mov	r0, r6
 8006eba:	47c0      	blx	r8
 8006ebc:	4307      	orrs	r7, r0
 8006ebe:	3568      	adds	r5, #104	; 0x68
 8006ec0:	e7e9      	b.n	8006e96 <_fwalk_reent+0x12>

08006ec2 <rshift>:
 8006ec2:	6903      	ldr	r3, [r0, #16]
 8006ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ec8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006ecc:	f100 0414 	add.w	r4, r0, #20
 8006ed0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006ed4:	dd46      	ble.n	8006f64 <rshift+0xa2>
 8006ed6:	f011 011f 	ands.w	r1, r1, #31
 8006eda:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006ede:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006ee2:	d10c      	bne.n	8006efe <rshift+0x3c>
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	f100 0710 	add.w	r7, r0, #16
 8006eea:	42b1      	cmp	r1, r6
 8006eec:	d335      	bcc.n	8006f5a <rshift+0x98>
 8006eee:	1a9b      	subs	r3, r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	1eea      	subs	r2, r5, #3
 8006ef4:	4296      	cmp	r6, r2
 8006ef6:	bf38      	it	cc
 8006ef8:	2300      	movcc	r3, #0
 8006efa:	4423      	add	r3, r4
 8006efc:	e015      	b.n	8006f2a <rshift+0x68>
 8006efe:	46a1      	mov	r9, r4
 8006f00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006f04:	f1c1 0820 	rsb	r8, r1, #32
 8006f08:	40cf      	lsrs	r7, r1
 8006f0a:	f105 0e04 	add.w	lr, r5, #4
 8006f0e:	4576      	cmp	r6, lr
 8006f10:	46f4      	mov	ip, lr
 8006f12:	d816      	bhi.n	8006f42 <rshift+0x80>
 8006f14:	1a9a      	subs	r2, r3, r2
 8006f16:	0092      	lsls	r2, r2, #2
 8006f18:	3a04      	subs	r2, #4
 8006f1a:	3501      	adds	r5, #1
 8006f1c:	42ae      	cmp	r6, r5
 8006f1e:	bf38      	it	cc
 8006f20:	2200      	movcc	r2, #0
 8006f22:	18a3      	adds	r3, r4, r2
 8006f24:	50a7      	str	r7, [r4, r2]
 8006f26:	b107      	cbz	r7, 8006f2a <rshift+0x68>
 8006f28:	3304      	adds	r3, #4
 8006f2a:	42a3      	cmp	r3, r4
 8006f2c:	eba3 0204 	sub.w	r2, r3, r4
 8006f30:	bf08      	it	eq
 8006f32:	2300      	moveq	r3, #0
 8006f34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006f38:	6102      	str	r2, [r0, #16]
 8006f3a:	bf08      	it	eq
 8006f3c:	6143      	streq	r3, [r0, #20]
 8006f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f42:	f8dc c000 	ldr.w	ip, [ip]
 8006f46:	fa0c fc08 	lsl.w	ip, ip, r8
 8006f4a:	ea4c 0707 	orr.w	r7, ip, r7
 8006f4e:	f849 7b04 	str.w	r7, [r9], #4
 8006f52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006f56:	40cf      	lsrs	r7, r1
 8006f58:	e7d9      	b.n	8006f0e <rshift+0x4c>
 8006f5a:	f851 cb04 	ldr.w	ip, [r1], #4
 8006f5e:	f847 cf04 	str.w	ip, [r7, #4]!
 8006f62:	e7c2      	b.n	8006eea <rshift+0x28>
 8006f64:	4623      	mov	r3, r4
 8006f66:	e7e0      	b.n	8006f2a <rshift+0x68>

08006f68 <__hexdig_fun>:
 8006f68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006f6c:	2b09      	cmp	r3, #9
 8006f6e:	d802      	bhi.n	8006f76 <__hexdig_fun+0xe>
 8006f70:	3820      	subs	r0, #32
 8006f72:	b2c0      	uxtb	r0, r0
 8006f74:	4770      	bx	lr
 8006f76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006f7a:	2b05      	cmp	r3, #5
 8006f7c:	d801      	bhi.n	8006f82 <__hexdig_fun+0x1a>
 8006f7e:	3847      	subs	r0, #71	; 0x47
 8006f80:	e7f7      	b.n	8006f72 <__hexdig_fun+0xa>
 8006f82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006f86:	2b05      	cmp	r3, #5
 8006f88:	d801      	bhi.n	8006f8e <__hexdig_fun+0x26>
 8006f8a:	3827      	subs	r0, #39	; 0x27
 8006f8c:	e7f1      	b.n	8006f72 <__hexdig_fun+0xa>
 8006f8e:	2000      	movs	r0, #0
 8006f90:	4770      	bx	lr
	...

08006f94 <__gethex>:
 8006f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f98:	b08b      	sub	sp, #44	; 0x2c
 8006f9a:	9305      	str	r3, [sp, #20]
 8006f9c:	4bb2      	ldr	r3, [pc, #712]	; (8007268 <__gethex+0x2d4>)
 8006f9e:	9002      	str	r0, [sp, #8]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	468b      	mov	fp, r1
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	4690      	mov	r8, r2
 8006fa8:	9303      	str	r3, [sp, #12]
 8006faa:	f7f9 f8d1 	bl	8000150 <strlen>
 8006fae:	4682      	mov	sl, r0
 8006fb0:	9b03      	ldr	r3, [sp, #12]
 8006fb2:	f8db 2000 	ldr.w	r2, [fp]
 8006fb6:	4403      	add	r3, r0
 8006fb8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006fbc:	9306      	str	r3, [sp, #24]
 8006fbe:	1c93      	adds	r3, r2, #2
 8006fc0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006fc4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006fc8:	32fe      	adds	r2, #254	; 0xfe
 8006fca:	18d1      	adds	r1, r2, r3
 8006fcc:	461f      	mov	r7, r3
 8006fce:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006fd2:	9101      	str	r1, [sp, #4]
 8006fd4:	2830      	cmp	r0, #48	; 0x30
 8006fd6:	d0f8      	beq.n	8006fca <__gethex+0x36>
 8006fd8:	f7ff ffc6 	bl	8006f68 <__hexdig_fun>
 8006fdc:	4604      	mov	r4, r0
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d13a      	bne.n	8007058 <__gethex+0xc4>
 8006fe2:	4652      	mov	r2, sl
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	9903      	ldr	r1, [sp, #12]
 8006fe8:	f001 f9c5 	bl	8008376 <strncmp>
 8006fec:	4605      	mov	r5, r0
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d166      	bne.n	80070c0 <__gethex+0x12c>
 8006ff2:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006ff6:	eb07 060a 	add.w	r6, r7, sl
 8006ffa:	f7ff ffb5 	bl	8006f68 <__hexdig_fun>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d060      	beq.n	80070c4 <__gethex+0x130>
 8007002:	4633      	mov	r3, r6
 8007004:	7818      	ldrb	r0, [r3, #0]
 8007006:	461f      	mov	r7, r3
 8007008:	2830      	cmp	r0, #48	; 0x30
 800700a:	f103 0301 	add.w	r3, r3, #1
 800700e:	d0f9      	beq.n	8007004 <__gethex+0x70>
 8007010:	f7ff ffaa 	bl	8006f68 <__hexdig_fun>
 8007014:	2301      	movs	r3, #1
 8007016:	fab0 f480 	clz	r4, r0
 800701a:	4635      	mov	r5, r6
 800701c:	0964      	lsrs	r4, r4, #5
 800701e:	9301      	str	r3, [sp, #4]
 8007020:	463a      	mov	r2, r7
 8007022:	4616      	mov	r6, r2
 8007024:	7830      	ldrb	r0, [r6, #0]
 8007026:	3201      	adds	r2, #1
 8007028:	f7ff ff9e 	bl	8006f68 <__hexdig_fun>
 800702c:	2800      	cmp	r0, #0
 800702e:	d1f8      	bne.n	8007022 <__gethex+0x8e>
 8007030:	4652      	mov	r2, sl
 8007032:	4630      	mov	r0, r6
 8007034:	9903      	ldr	r1, [sp, #12]
 8007036:	f001 f99e 	bl	8008376 <strncmp>
 800703a:	b980      	cbnz	r0, 800705e <__gethex+0xca>
 800703c:	b94d      	cbnz	r5, 8007052 <__gethex+0xbe>
 800703e:	eb06 050a 	add.w	r5, r6, sl
 8007042:	462a      	mov	r2, r5
 8007044:	4616      	mov	r6, r2
 8007046:	7830      	ldrb	r0, [r6, #0]
 8007048:	3201      	adds	r2, #1
 800704a:	f7ff ff8d 	bl	8006f68 <__hexdig_fun>
 800704e:	2800      	cmp	r0, #0
 8007050:	d1f8      	bne.n	8007044 <__gethex+0xb0>
 8007052:	1bad      	subs	r5, r5, r6
 8007054:	00ad      	lsls	r5, r5, #2
 8007056:	e004      	b.n	8007062 <__gethex+0xce>
 8007058:	2400      	movs	r4, #0
 800705a:	4625      	mov	r5, r4
 800705c:	e7e0      	b.n	8007020 <__gethex+0x8c>
 800705e:	2d00      	cmp	r5, #0
 8007060:	d1f7      	bne.n	8007052 <__gethex+0xbe>
 8007062:	7833      	ldrb	r3, [r6, #0]
 8007064:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007068:	2b50      	cmp	r3, #80	; 0x50
 800706a:	d139      	bne.n	80070e0 <__gethex+0x14c>
 800706c:	7873      	ldrb	r3, [r6, #1]
 800706e:	2b2b      	cmp	r3, #43	; 0x2b
 8007070:	d02a      	beq.n	80070c8 <__gethex+0x134>
 8007072:	2b2d      	cmp	r3, #45	; 0x2d
 8007074:	d02c      	beq.n	80070d0 <__gethex+0x13c>
 8007076:	f04f 0900 	mov.w	r9, #0
 800707a:	1c71      	adds	r1, r6, #1
 800707c:	7808      	ldrb	r0, [r1, #0]
 800707e:	f7ff ff73 	bl	8006f68 <__hexdig_fun>
 8007082:	1e43      	subs	r3, r0, #1
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b18      	cmp	r3, #24
 8007088:	d82a      	bhi.n	80070e0 <__gethex+0x14c>
 800708a:	f1a0 0210 	sub.w	r2, r0, #16
 800708e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007092:	f7ff ff69 	bl	8006f68 <__hexdig_fun>
 8007096:	1e43      	subs	r3, r0, #1
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b18      	cmp	r3, #24
 800709c:	d91b      	bls.n	80070d6 <__gethex+0x142>
 800709e:	f1b9 0f00 	cmp.w	r9, #0
 80070a2:	d000      	beq.n	80070a6 <__gethex+0x112>
 80070a4:	4252      	negs	r2, r2
 80070a6:	4415      	add	r5, r2
 80070a8:	f8cb 1000 	str.w	r1, [fp]
 80070ac:	b1d4      	cbz	r4, 80070e4 <__gethex+0x150>
 80070ae:	9b01      	ldr	r3, [sp, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	bf14      	ite	ne
 80070b4:	2700      	movne	r7, #0
 80070b6:	2706      	moveq	r7, #6
 80070b8:	4638      	mov	r0, r7
 80070ba:	b00b      	add	sp, #44	; 0x2c
 80070bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c0:	463e      	mov	r6, r7
 80070c2:	4625      	mov	r5, r4
 80070c4:	2401      	movs	r4, #1
 80070c6:	e7cc      	b.n	8007062 <__gethex+0xce>
 80070c8:	f04f 0900 	mov.w	r9, #0
 80070cc:	1cb1      	adds	r1, r6, #2
 80070ce:	e7d5      	b.n	800707c <__gethex+0xe8>
 80070d0:	f04f 0901 	mov.w	r9, #1
 80070d4:	e7fa      	b.n	80070cc <__gethex+0x138>
 80070d6:	230a      	movs	r3, #10
 80070d8:	fb03 0202 	mla	r2, r3, r2, r0
 80070dc:	3a10      	subs	r2, #16
 80070de:	e7d6      	b.n	800708e <__gethex+0xfa>
 80070e0:	4631      	mov	r1, r6
 80070e2:	e7e1      	b.n	80070a8 <__gethex+0x114>
 80070e4:	4621      	mov	r1, r4
 80070e6:	1bf3      	subs	r3, r6, r7
 80070e8:	3b01      	subs	r3, #1
 80070ea:	2b07      	cmp	r3, #7
 80070ec:	dc0a      	bgt.n	8007104 <__gethex+0x170>
 80070ee:	9802      	ldr	r0, [sp, #8]
 80070f0:	f000 fae4 	bl	80076bc <_Balloc>
 80070f4:	4604      	mov	r4, r0
 80070f6:	b940      	cbnz	r0, 800710a <__gethex+0x176>
 80070f8:	4602      	mov	r2, r0
 80070fa:	21de      	movs	r1, #222	; 0xde
 80070fc:	4b5b      	ldr	r3, [pc, #364]	; (800726c <__gethex+0x2d8>)
 80070fe:	485c      	ldr	r0, [pc, #368]	; (8007270 <__gethex+0x2dc>)
 8007100:	f001 f96c 	bl	80083dc <__assert_func>
 8007104:	3101      	adds	r1, #1
 8007106:	105b      	asrs	r3, r3, #1
 8007108:	e7ef      	b.n	80070ea <__gethex+0x156>
 800710a:	f04f 0b00 	mov.w	fp, #0
 800710e:	f100 0914 	add.w	r9, r0, #20
 8007112:	f1ca 0301 	rsb	r3, sl, #1
 8007116:	f8cd 9010 	str.w	r9, [sp, #16]
 800711a:	f8cd b004 	str.w	fp, [sp, #4]
 800711e:	9308      	str	r3, [sp, #32]
 8007120:	42b7      	cmp	r7, r6
 8007122:	d33f      	bcc.n	80071a4 <__gethex+0x210>
 8007124:	9f04      	ldr	r7, [sp, #16]
 8007126:	9b01      	ldr	r3, [sp, #4]
 8007128:	f847 3b04 	str.w	r3, [r7], #4
 800712c:	eba7 0709 	sub.w	r7, r7, r9
 8007130:	10bf      	asrs	r7, r7, #2
 8007132:	6127      	str	r7, [r4, #16]
 8007134:	4618      	mov	r0, r3
 8007136:	f000 fbb3 	bl	80078a0 <__hi0bits>
 800713a:	017f      	lsls	r7, r7, #5
 800713c:	f8d8 6000 	ldr.w	r6, [r8]
 8007140:	1a3f      	subs	r7, r7, r0
 8007142:	42b7      	cmp	r7, r6
 8007144:	dd62      	ble.n	800720c <__gethex+0x278>
 8007146:	1bbf      	subs	r7, r7, r6
 8007148:	4639      	mov	r1, r7
 800714a:	4620      	mov	r0, r4
 800714c:	f000 ff4d 	bl	8007fea <__any_on>
 8007150:	4682      	mov	sl, r0
 8007152:	b1a8      	cbz	r0, 8007180 <__gethex+0x1ec>
 8007154:	f04f 0a01 	mov.w	sl, #1
 8007158:	1e7b      	subs	r3, r7, #1
 800715a:	1159      	asrs	r1, r3, #5
 800715c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007160:	f003 021f 	and.w	r2, r3, #31
 8007164:	fa0a f202 	lsl.w	r2, sl, r2
 8007168:	420a      	tst	r2, r1
 800716a:	d009      	beq.n	8007180 <__gethex+0x1ec>
 800716c:	4553      	cmp	r3, sl
 800716e:	dd05      	ble.n	800717c <__gethex+0x1e8>
 8007170:	4620      	mov	r0, r4
 8007172:	1eb9      	subs	r1, r7, #2
 8007174:	f000 ff39 	bl	8007fea <__any_on>
 8007178:	2800      	cmp	r0, #0
 800717a:	d144      	bne.n	8007206 <__gethex+0x272>
 800717c:	f04f 0a02 	mov.w	sl, #2
 8007180:	4639      	mov	r1, r7
 8007182:	4620      	mov	r0, r4
 8007184:	f7ff fe9d 	bl	8006ec2 <rshift>
 8007188:	443d      	add	r5, r7
 800718a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800718e:	42ab      	cmp	r3, r5
 8007190:	da4a      	bge.n	8007228 <__gethex+0x294>
 8007192:	4621      	mov	r1, r4
 8007194:	9802      	ldr	r0, [sp, #8]
 8007196:	f000 fad1 	bl	800773c <_Bfree>
 800719a:	2300      	movs	r3, #0
 800719c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800719e:	27a3      	movs	r7, #163	; 0xa3
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	e789      	b.n	80070b8 <__gethex+0x124>
 80071a4:	1e73      	subs	r3, r6, #1
 80071a6:	9a06      	ldr	r2, [sp, #24]
 80071a8:	9307      	str	r3, [sp, #28]
 80071aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d019      	beq.n	80071e6 <__gethex+0x252>
 80071b2:	f1bb 0f20 	cmp.w	fp, #32
 80071b6:	d107      	bne.n	80071c8 <__gethex+0x234>
 80071b8:	9b04      	ldr	r3, [sp, #16]
 80071ba:	9a01      	ldr	r2, [sp, #4]
 80071bc:	f843 2b04 	str.w	r2, [r3], #4
 80071c0:	9304      	str	r3, [sp, #16]
 80071c2:	2300      	movs	r3, #0
 80071c4:	469b      	mov	fp, r3
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80071cc:	f7ff fecc 	bl	8006f68 <__hexdig_fun>
 80071d0:	9b01      	ldr	r3, [sp, #4]
 80071d2:	f000 000f 	and.w	r0, r0, #15
 80071d6:	fa00 f00b 	lsl.w	r0, r0, fp
 80071da:	4303      	orrs	r3, r0
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	f10b 0b04 	add.w	fp, fp, #4
 80071e2:	9b07      	ldr	r3, [sp, #28]
 80071e4:	e00d      	b.n	8007202 <__gethex+0x26e>
 80071e6:	9a08      	ldr	r2, [sp, #32]
 80071e8:	1e73      	subs	r3, r6, #1
 80071ea:	4413      	add	r3, r2
 80071ec:	42bb      	cmp	r3, r7
 80071ee:	d3e0      	bcc.n	80071b2 <__gethex+0x21e>
 80071f0:	4618      	mov	r0, r3
 80071f2:	4652      	mov	r2, sl
 80071f4:	9903      	ldr	r1, [sp, #12]
 80071f6:	9309      	str	r3, [sp, #36]	; 0x24
 80071f8:	f001 f8bd 	bl	8008376 <strncmp>
 80071fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071fe:	2800      	cmp	r0, #0
 8007200:	d1d7      	bne.n	80071b2 <__gethex+0x21e>
 8007202:	461e      	mov	r6, r3
 8007204:	e78c      	b.n	8007120 <__gethex+0x18c>
 8007206:	f04f 0a03 	mov.w	sl, #3
 800720a:	e7b9      	b.n	8007180 <__gethex+0x1ec>
 800720c:	da09      	bge.n	8007222 <__gethex+0x28e>
 800720e:	1bf7      	subs	r7, r6, r7
 8007210:	4621      	mov	r1, r4
 8007212:	463a      	mov	r2, r7
 8007214:	9802      	ldr	r0, [sp, #8]
 8007216:	f000 fca9 	bl	8007b6c <__lshift>
 800721a:	4604      	mov	r4, r0
 800721c:	1bed      	subs	r5, r5, r7
 800721e:	f100 0914 	add.w	r9, r0, #20
 8007222:	f04f 0a00 	mov.w	sl, #0
 8007226:	e7b0      	b.n	800718a <__gethex+0x1f6>
 8007228:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800722c:	42a8      	cmp	r0, r5
 800722e:	dd72      	ble.n	8007316 <__gethex+0x382>
 8007230:	1b45      	subs	r5, r0, r5
 8007232:	42ae      	cmp	r6, r5
 8007234:	dc35      	bgt.n	80072a2 <__gethex+0x30e>
 8007236:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800723a:	2b02      	cmp	r3, #2
 800723c:	d029      	beq.n	8007292 <__gethex+0x2fe>
 800723e:	2b03      	cmp	r3, #3
 8007240:	d02b      	beq.n	800729a <__gethex+0x306>
 8007242:	2b01      	cmp	r3, #1
 8007244:	d11c      	bne.n	8007280 <__gethex+0x2ec>
 8007246:	42ae      	cmp	r6, r5
 8007248:	d11a      	bne.n	8007280 <__gethex+0x2ec>
 800724a:	2e01      	cmp	r6, #1
 800724c:	d112      	bne.n	8007274 <__gethex+0x2e0>
 800724e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007252:	9a05      	ldr	r2, [sp, #20]
 8007254:	2762      	movs	r7, #98	; 0x62
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	2301      	movs	r3, #1
 800725a:	6123      	str	r3, [r4, #16]
 800725c:	f8c9 3000 	str.w	r3, [r9]
 8007260:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007262:	601c      	str	r4, [r3, #0]
 8007264:	e728      	b.n	80070b8 <__gethex+0x124>
 8007266:	bf00      	nop
 8007268:	08008fe4 	.word	0x08008fe4
 800726c:	08008f08 	.word	0x08008f08
 8007270:	08008f7c 	.word	0x08008f7c
 8007274:	4620      	mov	r0, r4
 8007276:	1e71      	subs	r1, r6, #1
 8007278:	f000 feb7 	bl	8007fea <__any_on>
 800727c:	2800      	cmp	r0, #0
 800727e:	d1e6      	bne.n	800724e <__gethex+0x2ba>
 8007280:	4621      	mov	r1, r4
 8007282:	9802      	ldr	r0, [sp, #8]
 8007284:	f000 fa5a 	bl	800773c <_Bfree>
 8007288:	2300      	movs	r3, #0
 800728a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800728c:	2750      	movs	r7, #80	; 0x50
 800728e:	6013      	str	r3, [r2, #0]
 8007290:	e712      	b.n	80070b8 <__gethex+0x124>
 8007292:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1f3      	bne.n	8007280 <__gethex+0x2ec>
 8007298:	e7d9      	b.n	800724e <__gethex+0x2ba>
 800729a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1d6      	bne.n	800724e <__gethex+0x2ba>
 80072a0:	e7ee      	b.n	8007280 <__gethex+0x2ec>
 80072a2:	1e6f      	subs	r7, r5, #1
 80072a4:	f1ba 0f00 	cmp.w	sl, #0
 80072a8:	d132      	bne.n	8007310 <__gethex+0x37c>
 80072aa:	b127      	cbz	r7, 80072b6 <__gethex+0x322>
 80072ac:	4639      	mov	r1, r7
 80072ae:	4620      	mov	r0, r4
 80072b0:	f000 fe9b 	bl	8007fea <__any_on>
 80072b4:	4682      	mov	sl, r0
 80072b6:	2101      	movs	r1, #1
 80072b8:	117b      	asrs	r3, r7, #5
 80072ba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80072be:	f007 071f 	and.w	r7, r7, #31
 80072c2:	fa01 f707 	lsl.w	r7, r1, r7
 80072c6:	421f      	tst	r7, r3
 80072c8:	f04f 0702 	mov.w	r7, #2
 80072cc:	4629      	mov	r1, r5
 80072ce:	4620      	mov	r0, r4
 80072d0:	bf18      	it	ne
 80072d2:	f04a 0a02 	orrne.w	sl, sl, #2
 80072d6:	1b76      	subs	r6, r6, r5
 80072d8:	f7ff fdf3 	bl	8006ec2 <rshift>
 80072dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80072e0:	f1ba 0f00 	cmp.w	sl, #0
 80072e4:	d048      	beq.n	8007378 <__gethex+0x3e4>
 80072e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d015      	beq.n	800731a <__gethex+0x386>
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d017      	beq.n	8007322 <__gethex+0x38e>
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d109      	bne.n	800730a <__gethex+0x376>
 80072f6:	f01a 0f02 	tst.w	sl, #2
 80072fa:	d006      	beq.n	800730a <__gethex+0x376>
 80072fc:	f8d9 0000 	ldr.w	r0, [r9]
 8007300:	ea4a 0a00 	orr.w	sl, sl, r0
 8007304:	f01a 0f01 	tst.w	sl, #1
 8007308:	d10e      	bne.n	8007328 <__gethex+0x394>
 800730a:	f047 0710 	orr.w	r7, r7, #16
 800730e:	e033      	b.n	8007378 <__gethex+0x3e4>
 8007310:	f04f 0a01 	mov.w	sl, #1
 8007314:	e7cf      	b.n	80072b6 <__gethex+0x322>
 8007316:	2701      	movs	r7, #1
 8007318:	e7e2      	b.n	80072e0 <__gethex+0x34c>
 800731a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800731c:	f1c3 0301 	rsb	r3, r3, #1
 8007320:	9315      	str	r3, [sp, #84]	; 0x54
 8007322:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007324:	2b00      	cmp	r3, #0
 8007326:	d0f0      	beq.n	800730a <__gethex+0x376>
 8007328:	f04f 0c00 	mov.w	ip, #0
 800732c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007330:	f104 0314 	add.w	r3, r4, #20
 8007334:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007338:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800733c:	4618      	mov	r0, r3
 800733e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007342:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007346:	d01c      	beq.n	8007382 <__gethex+0x3ee>
 8007348:	3201      	adds	r2, #1
 800734a:	6002      	str	r2, [r0, #0]
 800734c:	2f02      	cmp	r7, #2
 800734e:	f104 0314 	add.w	r3, r4, #20
 8007352:	d13d      	bne.n	80073d0 <__gethex+0x43c>
 8007354:	f8d8 2000 	ldr.w	r2, [r8]
 8007358:	3a01      	subs	r2, #1
 800735a:	42b2      	cmp	r2, r6
 800735c:	d10a      	bne.n	8007374 <__gethex+0x3e0>
 800735e:	2201      	movs	r2, #1
 8007360:	1171      	asrs	r1, r6, #5
 8007362:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007366:	f006 061f 	and.w	r6, r6, #31
 800736a:	fa02 f606 	lsl.w	r6, r2, r6
 800736e:	421e      	tst	r6, r3
 8007370:	bf18      	it	ne
 8007372:	4617      	movne	r7, r2
 8007374:	f047 0720 	orr.w	r7, r7, #32
 8007378:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800737a:	601c      	str	r4, [r3, #0]
 800737c:	9b05      	ldr	r3, [sp, #20]
 800737e:	601d      	str	r5, [r3, #0]
 8007380:	e69a      	b.n	80070b8 <__gethex+0x124>
 8007382:	4299      	cmp	r1, r3
 8007384:	f843 cc04 	str.w	ip, [r3, #-4]
 8007388:	d8d8      	bhi.n	800733c <__gethex+0x3a8>
 800738a:	68a3      	ldr	r3, [r4, #8]
 800738c:	459b      	cmp	fp, r3
 800738e:	db17      	blt.n	80073c0 <__gethex+0x42c>
 8007390:	6861      	ldr	r1, [r4, #4]
 8007392:	9802      	ldr	r0, [sp, #8]
 8007394:	3101      	adds	r1, #1
 8007396:	f000 f991 	bl	80076bc <_Balloc>
 800739a:	4681      	mov	r9, r0
 800739c:	b918      	cbnz	r0, 80073a6 <__gethex+0x412>
 800739e:	4602      	mov	r2, r0
 80073a0:	2184      	movs	r1, #132	; 0x84
 80073a2:	4b19      	ldr	r3, [pc, #100]	; (8007408 <__gethex+0x474>)
 80073a4:	e6ab      	b.n	80070fe <__gethex+0x16a>
 80073a6:	6922      	ldr	r2, [r4, #16]
 80073a8:	f104 010c 	add.w	r1, r4, #12
 80073ac:	3202      	adds	r2, #2
 80073ae:	0092      	lsls	r2, r2, #2
 80073b0:	300c      	adds	r0, #12
 80073b2:	f7fc ff23 	bl	80041fc <memcpy>
 80073b6:	4621      	mov	r1, r4
 80073b8:	9802      	ldr	r0, [sp, #8]
 80073ba:	f000 f9bf 	bl	800773c <_Bfree>
 80073be:	464c      	mov	r4, r9
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	6122      	str	r2, [r4, #16]
 80073c6:	2201      	movs	r2, #1
 80073c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073cc:	615a      	str	r2, [r3, #20]
 80073ce:	e7bd      	b.n	800734c <__gethex+0x3b8>
 80073d0:	6922      	ldr	r2, [r4, #16]
 80073d2:	455a      	cmp	r2, fp
 80073d4:	dd0b      	ble.n	80073ee <__gethex+0x45a>
 80073d6:	2101      	movs	r1, #1
 80073d8:	4620      	mov	r0, r4
 80073da:	f7ff fd72 	bl	8006ec2 <rshift>
 80073de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80073e2:	3501      	adds	r5, #1
 80073e4:	42ab      	cmp	r3, r5
 80073e6:	f6ff aed4 	blt.w	8007192 <__gethex+0x1fe>
 80073ea:	2701      	movs	r7, #1
 80073ec:	e7c2      	b.n	8007374 <__gethex+0x3e0>
 80073ee:	f016 061f 	ands.w	r6, r6, #31
 80073f2:	d0fa      	beq.n	80073ea <__gethex+0x456>
 80073f4:	4453      	add	r3, sl
 80073f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80073fa:	f000 fa51 	bl	80078a0 <__hi0bits>
 80073fe:	f1c6 0620 	rsb	r6, r6, #32
 8007402:	42b0      	cmp	r0, r6
 8007404:	dbe7      	blt.n	80073d6 <__gethex+0x442>
 8007406:	e7f0      	b.n	80073ea <__gethex+0x456>
 8007408:	08008f08 	.word	0x08008f08

0800740c <L_shift>:
 800740c:	f1c2 0208 	rsb	r2, r2, #8
 8007410:	0092      	lsls	r2, r2, #2
 8007412:	b570      	push	{r4, r5, r6, lr}
 8007414:	f1c2 0620 	rsb	r6, r2, #32
 8007418:	6843      	ldr	r3, [r0, #4]
 800741a:	6804      	ldr	r4, [r0, #0]
 800741c:	fa03 f506 	lsl.w	r5, r3, r6
 8007420:	432c      	orrs	r4, r5
 8007422:	40d3      	lsrs	r3, r2
 8007424:	6004      	str	r4, [r0, #0]
 8007426:	f840 3f04 	str.w	r3, [r0, #4]!
 800742a:	4288      	cmp	r0, r1
 800742c:	d3f4      	bcc.n	8007418 <L_shift+0xc>
 800742e:	bd70      	pop	{r4, r5, r6, pc}

08007430 <__match>:
 8007430:	b530      	push	{r4, r5, lr}
 8007432:	6803      	ldr	r3, [r0, #0]
 8007434:	3301      	adds	r3, #1
 8007436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800743a:	b914      	cbnz	r4, 8007442 <__match+0x12>
 800743c:	6003      	str	r3, [r0, #0]
 800743e:	2001      	movs	r0, #1
 8007440:	bd30      	pop	{r4, r5, pc}
 8007442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007446:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800744a:	2d19      	cmp	r5, #25
 800744c:	bf98      	it	ls
 800744e:	3220      	addls	r2, #32
 8007450:	42a2      	cmp	r2, r4
 8007452:	d0f0      	beq.n	8007436 <__match+0x6>
 8007454:	2000      	movs	r0, #0
 8007456:	e7f3      	b.n	8007440 <__match+0x10>

08007458 <__hexnan>:
 8007458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	2500      	movs	r5, #0
 800745e:	680b      	ldr	r3, [r1, #0]
 8007460:	4682      	mov	sl, r0
 8007462:	115e      	asrs	r6, r3, #5
 8007464:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007468:	f013 031f 	ands.w	r3, r3, #31
 800746c:	bf18      	it	ne
 800746e:	3604      	addne	r6, #4
 8007470:	1f37      	subs	r7, r6, #4
 8007472:	46b9      	mov	r9, r7
 8007474:	463c      	mov	r4, r7
 8007476:	46ab      	mov	fp, r5
 8007478:	b087      	sub	sp, #28
 800747a:	4690      	mov	r8, r2
 800747c:	6802      	ldr	r2, [r0, #0]
 800747e:	9301      	str	r3, [sp, #4]
 8007480:	f846 5c04 	str.w	r5, [r6, #-4]
 8007484:	9502      	str	r5, [sp, #8]
 8007486:	7851      	ldrb	r1, [r2, #1]
 8007488:	1c53      	adds	r3, r2, #1
 800748a:	9303      	str	r3, [sp, #12]
 800748c:	b341      	cbz	r1, 80074e0 <__hexnan+0x88>
 800748e:	4608      	mov	r0, r1
 8007490:	9205      	str	r2, [sp, #20]
 8007492:	9104      	str	r1, [sp, #16]
 8007494:	f7ff fd68 	bl	8006f68 <__hexdig_fun>
 8007498:	2800      	cmp	r0, #0
 800749a:	d14f      	bne.n	800753c <__hexnan+0xe4>
 800749c:	9904      	ldr	r1, [sp, #16]
 800749e:	9a05      	ldr	r2, [sp, #20]
 80074a0:	2920      	cmp	r1, #32
 80074a2:	d818      	bhi.n	80074d6 <__hexnan+0x7e>
 80074a4:	9b02      	ldr	r3, [sp, #8]
 80074a6:	459b      	cmp	fp, r3
 80074a8:	dd13      	ble.n	80074d2 <__hexnan+0x7a>
 80074aa:	454c      	cmp	r4, r9
 80074ac:	d206      	bcs.n	80074bc <__hexnan+0x64>
 80074ae:	2d07      	cmp	r5, #7
 80074b0:	dc04      	bgt.n	80074bc <__hexnan+0x64>
 80074b2:	462a      	mov	r2, r5
 80074b4:	4649      	mov	r1, r9
 80074b6:	4620      	mov	r0, r4
 80074b8:	f7ff ffa8 	bl	800740c <L_shift>
 80074bc:	4544      	cmp	r4, r8
 80074be:	d950      	bls.n	8007562 <__hexnan+0x10a>
 80074c0:	2300      	movs	r3, #0
 80074c2:	f1a4 0904 	sub.w	r9, r4, #4
 80074c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80074ca:	461d      	mov	r5, r3
 80074cc:	464c      	mov	r4, r9
 80074ce:	f8cd b008 	str.w	fp, [sp, #8]
 80074d2:	9a03      	ldr	r2, [sp, #12]
 80074d4:	e7d7      	b.n	8007486 <__hexnan+0x2e>
 80074d6:	2929      	cmp	r1, #41	; 0x29
 80074d8:	d156      	bne.n	8007588 <__hexnan+0x130>
 80074da:	3202      	adds	r2, #2
 80074dc:	f8ca 2000 	str.w	r2, [sl]
 80074e0:	f1bb 0f00 	cmp.w	fp, #0
 80074e4:	d050      	beq.n	8007588 <__hexnan+0x130>
 80074e6:	454c      	cmp	r4, r9
 80074e8:	d206      	bcs.n	80074f8 <__hexnan+0xa0>
 80074ea:	2d07      	cmp	r5, #7
 80074ec:	dc04      	bgt.n	80074f8 <__hexnan+0xa0>
 80074ee:	462a      	mov	r2, r5
 80074f0:	4649      	mov	r1, r9
 80074f2:	4620      	mov	r0, r4
 80074f4:	f7ff ff8a 	bl	800740c <L_shift>
 80074f8:	4544      	cmp	r4, r8
 80074fa:	d934      	bls.n	8007566 <__hexnan+0x10e>
 80074fc:	4623      	mov	r3, r4
 80074fe:	f1a8 0204 	sub.w	r2, r8, #4
 8007502:	f853 1b04 	ldr.w	r1, [r3], #4
 8007506:	429f      	cmp	r7, r3
 8007508:	f842 1f04 	str.w	r1, [r2, #4]!
 800750c:	d2f9      	bcs.n	8007502 <__hexnan+0xaa>
 800750e:	1b3b      	subs	r3, r7, r4
 8007510:	f023 0303 	bic.w	r3, r3, #3
 8007514:	3304      	adds	r3, #4
 8007516:	3401      	adds	r4, #1
 8007518:	3e03      	subs	r6, #3
 800751a:	42b4      	cmp	r4, r6
 800751c:	bf88      	it	hi
 800751e:	2304      	movhi	r3, #4
 8007520:	2200      	movs	r2, #0
 8007522:	4443      	add	r3, r8
 8007524:	f843 2b04 	str.w	r2, [r3], #4
 8007528:	429f      	cmp	r7, r3
 800752a:	d2fb      	bcs.n	8007524 <__hexnan+0xcc>
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	b91b      	cbnz	r3, 8007538 <__hexnan+0xe0>
 8007530:	4547      	cmp	r7, r8
 8007532:	d127      	bne.n	8007584 <__hexnan+0x12c>
 8007534:	2301      	movs	r3, #1
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	2005      	movs	r0, #5
 800753a:	e026      	b.n	800758a <__hexnan+0x132>
 800753c:	3501      	adds	r5, #1
 800753e:	2d08      	cmp	r5, #8
 8007540:	f10b 0b01 	add.w	fp, fp, #1
 8007544:	dd06      	ble.n	8007554 <__hexnan+0xfc>
 8007546:	4544      	cmp	r4, r8
 8007548:	d9c3      	bls.n	80074d2 <__hexnan+0x7a>
 800754a:	2300      	movs	r3, #0
 800754c:	2501      	movs	r5, #1
 800754e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007552:	3c04      	subs	r4, #4
 8007554:	6822      	ldr	r2, [r4, #0]
 8007556:	f000 000f 	and.w	r0, r0, #15
 800755a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800755e:	6022      	str	r2, [r4, #0]
 8007560:	e7b7      	b.n	80074d2 <__hexnan+0x7a>
 8007562:	2508      	movs	r5, #8
 8007564:	e7b5      	b.n	80074d2 <__hexnan+0x7a>
 8007566:	9b01      	ldr	r3, [sp, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d0df      	beq.n	800752c <__hexnan+0xd4>
 800756c:	f04f 32ff 	mov.w	r2, #4294967295
 8007570:	f1c3 0320 	rsb	r3, r3, #32
 8007574:	fa22 f303 	lsr.w	r3, r2, r3
 8007578:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800757c:	401a      	ands	r2, r3
 800757e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007582:	e7d3      	b.n	800752c <__hexnan+0xd4>
 8007584:	3f04      	subs	r7, #4
 8007586:	e7d1      	b.n	800752c <__hexnan+0xd4>
 8007588:	2004      	movs	r0, #4
 800758a:	b007      	add	sp, #28
 800758c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007590 <_localeconv_r>:
 8007590:	4800      	ldr	r0, [pc, #0]	; (8007594 <_localeconv_r+0x4>)
 8007592:	4770      	bx	lr
 8007594:	200003e4 	.word	0x200003e4

08007598 <__swhatbuf_r>:
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	460e      	mov	r6, r1
 800759c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a0:	4614      	mov	r4, r2
 80075a2:	2900      	cmp	r1, #0
 80075a4:	461d      	mov	r5, r3
 80075a6:	b096      	sub	sp, #88	; 0x58
 80075a8:	da08      	bge.n	80075bc <__swhatbuf_r+0x24>
 80075aa:	2200      	movs	r2, #0
 80075ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80075b0:	602a      	str	r2, [r5, #0]
 80075b2:	061a      	lsls	r2, r3, #24
 80075b4:	d410      	bmi.n	80075d8 <__swhatbuf_r+0x40>
 80075b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ba:	e00e      	b.n	80075da <__swhatbuf_r+0x42>
 80075bc:	466a      	mov	r2, sp
 80075be:	f000 ff4d 	bl	800845c <_fstat_r>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	dbf1      	blt.n	80075aa <__swhatbuf_r+0x12>
 80075c6:	9a01      	ldr	r2, [sp, #4]
 80075c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075d0:	425a      	negs	r2, r3
 80075d2:	415a      	adcs	r2, r3
 80075d4:	602a      	str	r2, [r5, #0]
 80075d6:	e7ee      	b.n	80075b6 <__swhatbuf_r+0x1e>
 80075d8:	2340      	movs	r3, #64	; 0x40
 80075da:	2000      	movs	r0, #0
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	b016      	add	sp, #88	; 0x58
 80075e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080075e4 <__smakebuf_r>:
 80075e4:	898b      	ldrh	r3, [r1, #12]
 80075e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075e8:	079d      	lsls	r5, r3, #30
 80075ea:	4606      	mov	r6, r0
 80075ec:	460c      	mov	r4, r1
 80075ee:	d507      	bpl.n	8007600 <__smakebuf_r+0x1c>
 80075f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	6123      	str	r3, [r4, #16]
 80075f8:	2301      	movs	r3, #1
 80075fa:	6163      	str	r3, [r4, #20]
 80075fc:	b002      	add	sp, #8
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	466a      	mov	r2, sp
 8007602:	ab01      	add	r3, sp, #4
 8007604:	f7ff ffc8 	bl	8007598 <__swhatbuf_r>
 8007608:	9900      	ldr	r1, [sp, #0]
 800760a:	4605      	mov	r5, r0
 800760c:	4630      	mov	r0, r6
 800760e:	f7fc fe87 	bl	8004320 <_malloc_r>
 8007612:	b948      	cbnz	r0, 8007628 <__smakebuf_r+0x44>
 8007614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007618:	059a      	lsls	r2, r3, #22
 800761a:	d4ef      	bmi.n	80075fc <__smakebuf_r+0x18>
 800761c:	f023 0303 	bic.w	r3, r3, #3
 8007620:	f043 0302 	orr.w	r3, r3, #2
 8007624:	81a3      	strh	r3, [r4, #12]
 8007626:	e7e3      	b.n	80075f0 <__smakebuf_r+0xc>
 8007628:	4b0d      	ldr	r3, [pc, #52]	; (8007660 <__smakebuf_r+0x7c>)
 800762a:	62b3      	str	r3, [r6, #40]	; 0x28
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	6020      	str	r0, [r4, #0]
 8007630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007634:	81a3      	strh	r3, [r4, #12]
 8007636:	9b00      	ldr	r3, [sp, #0]
 8007638:	6120      	str	r0, [r4, #16]
 800763a:	6163      	str	r3, [r4, #20]
 800763c:	9b01      	ldr	r3, [sp, #4]
 800763e:	b15b      	cbz	r3, 8007658 <__smakebuf_r+0x74>
 8007640:	4630      	mov	r0, r6
 8007642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007646:	f000 ff1b 	bl	8008480 <_isatty_r>
 800764a:	b128      	cbz	r0, 8007658 <__smakebuf_r+0x74>
 800764c:	89a3      	ldrh	r3, [r4, #12]
 800764e:	f023 0303 	bic.w	r3, r3, #3
 8007652:	f043 0301 	orr.w	r3, r3, #1
 8007656:	81a3      	strh	r3, [r4, #12]
 8007658:	89a0      	ldrh	r0, [r4, #12]
 800765a:	4305      	orrs	r5, r0
 800765c:	81a5      	strh	r5, [r4, #12]
 800765e:	e7cd      	b.n	80075fc <__smakebuf_r+0x18>
 8007660:	08006d21 	.word	0x08006d21

08007664 <__ascii_mbtowc>:
 8007664:	b082      	sub	sp, #8
 8007666:	b901      	cbnz	r1, 800766a <__ascii_mbtowc+0x6>
 8007668:	a901      	add	r1, sp, #4
 800766a:	b142      	cbz	r2, 800767e <__ascii_mbtowc+0x1a>
 800766c:	b14b      	cbz	r3, 8007682 <__ascii_mbtowc+0x1e>
 800766e:	7813      	ldrb	r3, [r2, #0]
 8007670:	600b      	str	r3, [r1, #0]
 8007672:	7812      	ldrb	r2, [r2, #0]
 8007674:	1e10      	subs	r0, r2, #0
 8007676:	bf18      	it	ne
 8007678:	2001      	movne	r0, #1
 800767a:	b002      	add	sp, #8
 800767c:	4770      	bx	lr
 800767e:	4610      	mov	r0, r2
 8007680:	e7fb      	b.n	800767a <__ascii_mbtowc+0x16>
 8007682:	f06f 0001 	mvn.w	r0, #1
 8007686:	e7f8      	b.n	800767a <__ascii_mbtowc+0x16>

08007688 <memchr>:
 8007688:	4603      	mov	r3, r0
 800768a:	b510      	push	{r4, lr}
 800768c:	b2c9      	uxtb	r1, r1
 800768e:	4402      	add	r2, r0
 8007690:	4293      	cmp	r3, r2
 8007692:	4618      	mov	r0, r3
 8007694:	d101      	bne.n	800769a <memchr+0x12>
 8007696:	2000      	movs	r0, #0
 8007698:	e003      	b.n	80076a2 <memchr+0x1a>
 800769a:	7804      	ldrb	r4, [r0, #0]
 800769c:	3301      	adds	r3, #1
 800769e:	428c      	cmp	r4, r1
 80076a0:	d1f6      	bne.n	8007690 <memchr+0x8>
 80076a2:	bd10      	pop	{r4, pc}

080076a4 <__malloc_lock>:
 80076a4:	4801      	ldr	r0, [pc, #4]	; (80076ac <__malloc_lock+0x8>)
 80076a6:	f7fc bd9e 	b.w	80041e6 <__retarget_lock_acquire_recursive>
 80076aa:	bf00      	nop
 80076ac:	20000518 	.word	0x20000518

080076b0 <__malloc_unlock>:
 80076b0:	4801      	ldr	r0, [pc, #4]	; (80076b8 <__malloc_unlock+0x8>)
 80076b2:	f7fc bd99 	b.w	80041e8 <__retarget_lock_release_recursive>
 80076b6:	bf00      	nop
 80076b8:	20000518 	.word	0x20000518

080076bc <_Balloc>:
 80076bc:	b570      	push	{r4, r5, r6, lr}
 80076be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076c0:	4604      	mov	r4, r0
 80076c2:	460d      	mov	r5, r1
 80076c4:	b976      	cbnz	r6, 80076e4 <_Balloc+0x28>
 80076c6:	2010      	movs	r0, #16
 80076c8:	f7fc fd90 	bl	80041ec <malloc>
 80076cc:	4602      	mov	r2, r0
 80076ce:	6260      	str	r0, [r4, #36]	; 0x24
 80076d0:	b920      	cbnz	r0, 80076dc <_Balloc+0x20>
 80076d2:	2166      	movs	r1, #102	; 0x66
 80076d4:	4b17      	ldr	r3, [pc, #92]	; (8007734 <_Balloc+0x78>)
 80076d6:	4818      	ldr	r0, [pc, #96]	; (8007738 <_Balloc+0x7c>)
 80076d8:	f000 fe80 	bl	80083dc <__assert_func>
 80076dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076e0:	6006      	str	r6, [r0, #0]
 80076e2:	60c6      	str	r6, [r0, #12]
 80076e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80076e6:	68f3      	ldr	r3, [r6, #12]
 80076e8:	b183      	cbz	r3, 800770c <_Balloc+0x50>
 80076ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076f2:	b9b8      	cbnz	r0, 8007724 <_Balloc+0x68>
 80076f4:	2101      	movs	r1, #1
 80076f6:	fa01 f605 	lsl.w	r6, r1, r5
 80076fa:	1d72      	adds	r2, r6, #5
 80076fc:	4620      	mov	r0, r4
 80076fe:	0092      	lsls	r2, r2, #2
 8007700:	f7fc fd92 	bl	8004228 <_calloc_r>
 8007704:	b160      	cbz	r0, 8007720 <_Balloc+0x64>
 8007706:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800770a:	e00e      	b.n	800772a <_Balloc+0x6e>
 800770c:	2221      	movs	r2, #33	; 0x21
 800770e:	2104      	movs	r1, #4
 8007710:	4620      	mov	r0, r4
 8007712:	f7fc fd89 	bl	8004228 <_calloc_r>
 8007716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007718:	60f0      	str	r0, [r6, #12]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e4      	bne.n	80076ea <_Balloc+0x2e>
 8007720:	2000      	movs	r0, #0
 8007722:	bd70      	pop	{r4, r5, r6, pc}
 8007724:	6802      	ldr	r2, [r0, #0]
 8007726:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800772a:	2300      	movs	r3, #0
 800772c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007730:	e7f7      	b.n	8007722 <_Balloc+0x66>
 8007732:	bf00      	nop
 8007734:	08008e96 	.word	0x08008e96
 8007738:	08008ff8 	.word	0x08008ff8

0800773c <_Bfree>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007740:	4605      	mov	r5, r0
 8007742:	460c      	mov	r4, r1
 8007744:	b976      	cbnz	r6, 8007764 <_Bfree+0x28>
 8007746:	2010      	movs	r0, #16
 8007748:	f7fc fd50 	bl	80041ec <malloc>
 800774c:	4602      	mov	r2, r0
 800774e:	6268      	str	r0, [r5, #36]	; 0x24
 8007750:	b920      	cbnz	r0, 800775c <_Bfree+0x20>
 8007752:	218a      	movs	r1, #138	; 0x8a
 8007754:	4b08      	ldr	r3, [pc, #32]	; (8007778 <_Bfree+0x3c>)
 8007756:	4809      	ldr	r0, [pc, #36]	; (800777c <_Bfree+0x40>)
 8007758:	f000 fe40 	bl	80083dc <__assert_func>
 800775c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007760:	6006      	str	r6, [r0, #0]
 8007762:	60c6      	str	r6, [r0, #12]
 8007764:	b13c      	cbz	r4, 8007776 <_Bfree+0x3a>
 8007766:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007768:	6862      	ldr	r2, [r4, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007770:	6021      	str	r1, [r4, #0]
 8007772:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007776:	bd70      	pop	{r4, r5, r6, pc}
 8007778:	08008e96 	.word	0x08008e96
 800777c:	08008ff8 	.word	0x08008ff8

08007780 <__multadd>:
 8007780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007784:	4607      	mov	r7, r0
 8007786:	460c      	mov	r4, r1
 8007788:	461e      	mov	r6, r3
 800778a:	2000      	movs	r0, #0
 800778c:	690d      	ldr	r5, [r1, #16]
 800778e:	f101 0c14 	add.w	ip, r1, #20
 8007792:	f8dc 3000 	ldr.w	r3, [ip]
 8007796:	3001      	adds	r0, #1
 8007798:	b299      	uxth	r1, r3
 800779a:	fb02 6101 	mla	r1, r2, r1, r6
 800779e:	0c1e      	lsrs	r6, r3, #16
 80077a0:	0c0b      	lsrs	r3, r1, #16
 80077a2:	fb02 3306 	mla	r3, r2, r6, r3
 80077a6:	b289      	uxth	r1, r1
 80077a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077ac:	4285      	cmp	r5, r0
 80077ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077b2:	f84c 1b04 	str.w	r1, [ip], #4
 80077b6:	dcec      	bgt.n	8007792 <__multadd+0x12>
 80077b8:	b30e      	cbz	r6, 80077fe <__multadd+0x7e>
 80077ba:	68a3      	ldr	r3, [r4, #8]
 80077bc:	42ab      	cmp	r3, r5
 80077be:	dc19      	bgt.n	80077f4 <__multadd+0x74>
 80077c0:	6861      	ldr	r1, [r4, #4]
 80077c2:	4638      	mov	r0, r7
 80077c4:	3101      	adds	r1, #1
 80077c6:	f7ff ff79 	bl	80076bc <_Balloc>
 80077ca:	4680      	mov	r8, r0
 80077cc:	b928      	cbnz	r0, 80077da <__multadd+0x5a>
 80077ce:	4602      	mov	r2, r0
 80077d0:	21b5      	movs	r1, #181	; 0xb5
 80077d2:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <__multadd+0x84>)
 80077d4:	480c      	ldr	r0, [pc, #48]	; (8007808 <__multadd+0x88>)
 80077d6:	f000 fe01 	bl	80083dc <__assert_func>
 80077da:	6922      	ldr	r2, [r4, #16]
 80077dc:	f104 010c 	add.w	r1, r4, #12
 80077e0:	3202      	adds	r2, #2
 80077e2:	0092      	lsls	r2, r2, #2
 80077e4:	300c      	adds	r0, #12
 80077e6:	f7fc fd09 	bl	80041fc <memcpy>
 80077ea:	4621      	mov	r1, r4
 80077ec:	4638      	mov	r0, r7
 80077ee:	f7ff ffa5 	bl	800773c <_Bfree>
 80077f2:	4644      	mov	r4, r8
 80077f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077f8:	3501      	adds	r5, #1
 80077fa:	615e      	str	r6, [r3, #20]
 80077fc:	6125      	str	r5, [r4, #16]
 80077fe:	4620      	mov	r0, r4
 8007800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007804:	08008f08 	.word	0x08008f08
 8007808:	08008ff8 	.word	0x08008ff8

0800780c <__s2b>:
 800780c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007810:	4615      	mov	r5, r2
 8007812:	2209      	movs	r2, #9
 8007814:	461f      	mov	r7, r3
 8007816:	3308      	adds	r3, #8
 8007818:	460c      	mov	r4, r1
 800781a:	fb93 f3f2 	sdiv	r3, r3, r2
 800781e:	4606      	mov	r6, r0
 8007820:	2201      	movs	r2, #1
 8007822:	2100      	movs	r1, #0
 8007824:	429a      	cmp	r2, r3
 8007826:	db09      	blt.n	800783c <__s2b+0x30>
 8007828:	4630      	mov	r0, r6
 800782a:	f7ff ff47 	bl	80076bc <_Balloc>
 800782e:	b940      	cbnz	r0, 8007842 <__s2b+0x36>
 8007830:	4602      	mov	r2, r0
 8007832:	21ce      	movs	r1, #206	; 0xce
 8007834:	4b18      	ldr	r3, [pc, #96]	; (8007898 <__s2b+0x8c>)
 8007836:	4819      	ldr	r0, [pc, #100]	; (800789c <__s2b+0x90>)
 8007838:	f000 fdd0 	bl	80083dc <__assert_func>
 800783c:	0052      	lsls	r2, r2, #1
 800783e:	3101      	adds	r1, #1
 8007840:	e7f0      	b.n	8007824 <__s2b+0x18>
 8007842:	9b08      	ldr	r3, [sp, #32]
 8007844:	2d09      	cmp	r5, #9
 8007846:	6143      	str	r3, [r0, #20]
 8007848:	f04f 0301 	mov.w	r3, #1
 800784c:	6103      	str	r3, [r0, #16]
 800784e:	dd16      	ble.n	800787e <__s2b+0x72>
 8007850:	f104 0909 	add.w	r9, r4, #9
 8007854:	46c8      	mov	r8, r9
 8007856:	442c      	add	r4, r5
 8007858:	f818 3b01 	ldrb.w	r3, [r8], #1
 800785c:	4601      	mov	r1, r0
 800785e:	220a      	movs	r2, #10
 8007860:	4630      	mov	r0, r6
 8007862:	3b30      	subs	r3, #48	; 0x30
 8007864:	f7ff ff8c 	bl	8007780 <__multadd>
 8007868:	45a0      	cmp	r8, r4
 800786a:	d1f5      	bne.n	8007858 <__s2b+0x4c>
 800786c:	f1a5 0408 	sub.w	r4, r5, #8
 8007870:	444c      	add	r4, r9
 8007872:	1b2d      	subs	r5, r5, r4
 8007874:	1963      	adds	r3, r4, r5
 8007876:	42bb      	cmp	r3, r7
 8007878:	db04      	blt.n	8007884 <__s2b+0x78>
 800787a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800787e:	2509      	movs	r5, #9
 8007880:	340a      	adds	r4, #10
 8007882:	e7f6      	b.n	8007872 <__s2b+0x66>
 8007884:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007888:	4601      	mov	r1, r0
 800788a:	220a      	movs	r2, #10
 800788c:	4630      	mov	r0, r6
 800788e:	3b30      	subs	r3, #48	; 0x30
 8007890:	f7ff ff76 	bl	8007780 <__multadd>
 8007894:	e7ee      	b.n	8007874 <__s2b+0x68>
 8007896:	bf00      	nop
 8007898:	08008f08 	.word	0x08008f08
 800789c:	08008ff8 	.word	0x08008ff8

080078a0 <__hi0bits>:
 80078a0:	0c02      	lsrs	r2, r0, #16
 80078a2:	0412      	lsls	r2, r2, #16
 80078a4:	4603      	mov	r3, r0
 80078a6:	b9ca      	cbnz	r2, 80078dc <__hi0bits+0x3c>
 80078a8:	0403      	lsls	r3, r0, #16
 80078aa:	2010      	movs	r0, #16
 80078ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80078b0:	bf04      	itt	eq
 80078b2:	021b      	lsleq	r3, r3, #8
 80078b4:	3008      	addeq	r0, #8
 80078b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80078ba:	bf04      	itt	eq
 80078bc:	011b      	lsleq	r3, r3, #4
 80078be:	3004      	addeq	r0, #4
 80078c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80078c4:	bf04      	itt	eq
 80078c6:	009b      	lsleq	r3, r3, #2
 80078c8:	3002      	addeq	r0, #2
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	db05      	blt.n	80078da <__hi0bits+0x3a>
 80078ce:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80078d2:	f100 0001 	add.w	r0, r0, #1
 80078d6:	bf08      	it	eq
 80078d8:	2020      	moveq	r0, #32
 80078da:	4770      	bx	lr
 80078dc:	2000      	movs	r0, #0
 80078de:	e7e5      	b.n	80078ac <__hi0bits+0xc>

080078e0 <__lo0bits>:
 80078e0:	6803      	ldr	r3, [r0, #0]
 80078e2:	4602      	mov	r2, r0
 80078e4:	f013 0007 	ands.w	r0, r3, #7
 80078e8:	d00b      	beq.n	8007902 <__lo0bits+0x22>
 80078ea:	07d9      	lsls	r1, r3, #31
 80078ec:	d421      	bmi.n	8007932 <__lo0bits+0x52>
 80078ee:	0798      	lsls	r0, r3, #30
 80078f0:	bf49      	itett	mi
 80078f2:	085b      	lsrmi	r3, r3, #1
 80078f4:	089b      	lsrpl	r3, r3, #2
 80078f6:	2001      	movmi	r0, #1
 80078f8:	6013      	strmi	r3, [r2, #0]
 80078fa:	bf5c      	itt	pl
 80078fc:	2002      	movpl	r0, #2
 80078fe:	6013      	strpl	r3, [r2, #0]
 8007900:	4770      	bx	lr
 8007902:	b299      	uxth	r1, r3
 8007904:	b909      	cbnz	r1, 800790a <__lo0bits+0x2a>
 8007906:	2010      	movs	r0, #16
 8007908:	0c1b      	lsrs	r3, r3, #16
 800790a:	b2d9      	uxtb	r1, r3
 800790c:	b909      	cbnz	r1, 8007912 <__lo0bits+0x32>
 800790e:	3008      	adds	r0, #8
 8007910:	0a1b      	lsrs	r3, r3, #8
 8007912:	0719      	lsls	r1, r3, #28
 8007914:	bf04      	itt	eq
 8007916:	091b      	lsreq	r3, r3, #4
 8007918:	3004      	addeq	r0, #4
 800791a:	0799      	lsls	r1, r3, #30
 800791c:	bf04      	itt	eq
 800791e:	089b      	lsreq	r3, r3, #2
 8007920:	3002      	addeq	r0, #2
 8007922:	07d9      	lsls	r1, r3, #31
 8007924:	d403      	bmi.n	800792e <__lo0bits+0x4e>
 8007926:	085b      	lsrs	r3, r3, #1
 8007928:	f100 0001 	add.w	r0, r0, #1
 800792c:	d003      	beq.n	8007936 <__lo0bits+0x56>
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	4770      	bx	lr
 8007932:	2000      	movs	r0, #0
 8007934:	4770      	bx	lr
 8007936:	2020      	movs	r0, #32
 8007938:	4770      	bx	lr
	...

0800793c <__i2b>:
 800793c:	b510      	push	{r4, lr}
 800793e:	460c      	mov	r4, r1
 8007940:	2101      	movs	r1, #1
 8007942:	f7ff febb 	bl	80076bc <_Balloc>
 8007946:	4602      	mov	r2, r0
 8007948:	b928      	cbnz	r0, 8007956 <__i2b+0x1a>
 800794a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800794e:	4b04      	ldr	r3, [pc, #16]	; (8007960 <__i2b+0x24>)
 8007950:	4804      	ldr	r0, [pc, #16]	; (8007964 <__i2b+0x28>)
 8007952:	f000 fd43 	bl	80083dc <__assert_func>
 8007956:	2301      	movs	r3, #1
 8007958:	6144      	str	r4, [r0, #20]
 800795a:	6103      	str	r3, [r0, #16]
 800795c:	bd10      	pop	{r4, pc}
 800795e:	bf00      	nop
 8007960:	08008f08 	.word	0x08008f08
 8007964:	08008ff8 	.word	0x08008ff8

08007968 <__multiply>:
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	4691      	mov	r9, r2
 800796e:	690a      	ldr	r2, [r1, #16]
 8007970:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007974:	460c      	mov	r4, r1
 8007976:	429a      	cmp	r2, r3
 8007978:	bfbe      	ittt	lt
 800797a:	460b      	movlt	r3, r1
 800797c:	464c      	movlt	r4, r9
 800797e:	4699      	movlt	r9, r3
 8007980:	6927      	ldr	r7, [r4, #16]
 8007982:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007986:	68a3      	ldr	r3, [r4, #8]
 8007988:	6861      	ldr	r1, [r4, #4]
 800798a:	eb07 060a 	add.w	r6, r7, sl
 800798e:	42b3      	cmp	r3, r6
 8007990:	b085      	sub	sp, #20
 8007992:	bfb8      	it	lt
 8007994:	3101      	addlt	r1, #1
 8007996:	f7ff fe91 	bl	80076bc <_Balloc>
 800799a:	b930      	cbnz	r0, 80079aa <__multiply+0x42>
 800799c:	4602      	mov	r2, r0
 800799e:	f240 115d 	movw	r1, #349	; 0x15d
 80079a2:	4b43      	ldr	r3, [pc, #268]	; (8007ab0 <__multiply+0x148>)
 80079a4:	4843      	ldr	r0, [pc, #268]	; (8007ab4 <__multiply+0x14c>)
 80079a6:	f000 fd19 	bl	80083dc <__assert_func>
 80079aa:	f100 0514 	add.w	r5, r0, #20
 80079ae:	462b      	mov	r3, r5
 80079b0:	2200      	movs	r2, #0
 80079b2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079b6:	4543      	cmp	r3, r8
 80079b8:	d321      	bcc.n	80079fe <__multiply+0x96>
 80079ba:	f104 0314 	add.w	r3, r4, #20
 80079be:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079c2:	f109 0314 	add.w	r3, r9, #20
 80079c6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079ca:	9202      	str	r2, [sp, #8]
 80079cc:	1b3a      	subs	r2, r7, r4
 80079ce:	3a15      	subs	r2, #21
 80079d0:	f022 0203 	bic.w	r2, r2, #3
 80079d4:	3204      	adds	r2, #4
 80079d6:	f104 0115 	add.w	r1, r4, #21
 80079da:	428f      	cmp	r7, r1
 80079dc:	bf38      	it	cc
 80079de:	2204      	movcc	r2, #4
 80079e0:	9201      	str	r2, [sp, #4]
 80079e2:	9a02      	ldr	r2, [sp, #8]
 80079e4:	9303      	str	r3, [sp, #12]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d80c      	bhi.n	8007a04 <__multiply+0x9c>
 80079ea:	2e00      	cmp	r6, #0
 80079ec:	dd03      	ble.n	80079f6 <__multiply+0x8e>
 80079ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d059      	beq.n	8007aaa <__multiply+0x142>
 80079f6:	6106      	str	r6, [r0, #16]
 80079f8:	b005      	add	sp, #20
 80079fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fe:	f843 2b04 	str.w	r2, [r3], #4
 8007a02:	e7d8      	b.n	80079b6 <__multiply+0x4e>
 8007a04:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a08:	f1ba 0f00 	cmp.w	sl, #0
 8007a0c:	d023      	beq.n	8007a56 <__multiply+0xee>
 8007a0e:	46a9      	mov	r9, r5
 8007a10:	f04f 0c00 	mov.w	ip, #0
 8007a14:	f104 0e14 	add.w	lr, r4, #20
 8007a18:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a1c:	f8d9 1000 	ldr.w	r1, [r9]
 8007a20:	fa1f fb82 	uxth.w	fp, r2
 8007a24:	b289      	uxth	r1, r1
 8007a26:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a2a:	4461      	add	r1, ip
 8007a2c:	f8d9 c000 	ldr.w	ip, [r9]
 8007a30:	0c12      	lsrs	r2, r2, #16
 8007a32:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007a36:	fb0a c202 	mla	r2, sl, r2, ip
 8007a3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a3e:	b289      	uxth	r1, r1
 8007a40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a44:	4577      	cmp	r7, lr
 8007a46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a4a:	f849 1b04 	str.w	r1, [r9], #4
 8007a4e:	d8e3      	bhi.n	8007a18 <__multiply+0xb0>
 8007a50:	9a01      	ldr	r2, [sp, #4]
 8007a52:	f845 c002 	str.w	ip, [r5, r2]
 8007a56:	9a03      	ldr	r2, [sp, #12]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a5e:	f1b9 0f00 	cmp.w	r9, #0
 8007a62:	d020      	beq.n	8007aa6 <__multiply+0x13e>
 8007a64:	46ae      	mov	lr, r5
 8007a66:	f04f 0a00 	mov.w	sl, #0
 8007a6a:	6829      	ldr	r1, [r5, #0]
 8007a6c:	f104 0c14 	add.w	ip, r4, #20
 8007a70:	f8bc b000 	ldrh.w	fp, [ip]
 8007a74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a78:	b289      	uxth	r1, r1
 8007a7a:	fb09 220b 	mla	r2, r9, fp, r2
 8007a7e:	4492      	add	sl, r2
 8007a80:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007a84:	f84e 1b04 	str.w	r1, [lr], #4
 8007a88:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007a8c:	f8be 1000 	ldrh.w	r1, [lr]
 8007a90:	0c12      	lsrs	r2, r2, #16
 8007a92:	fb09 1102 	mla	r1, r9, r2, r1
 8007a96:	4567      	cmp	r7, ip
 8007a98:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007a9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007aa0:	d8e6      	bhi.n	8007a70 <__multiply+0x108>
 8007aa2:	9a01      	ldr	r2, [sp, #4]
 8007aa4:	50a9      	str	r1, [r5, r2]
 8007aa6:	3504      	adds	r5, #4
 8007aa8:	e79b      	b.n	80079e2 <__multiply+0x7a>
 8007aaa:	3e01      	subs	r6, #1
 8007aac:	e79d      	b.n	80079ea <__multiply+0x82>
 8007aae:	bf00      	nop
 8007ab0:	08008f08 	.word	0x08008f08
 8007ab4:	08008ff8 	.word	0x08008ff8

08007ab8 <__pow5mult>:
 8007ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007abc:	4615      	mov	r5, r2
 8007abe:	f012 0203 	ands.w	r2, r2, #3
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	460f      	mov	r7, r1
 8007ac6:	d007      	beq.n	8007ad8 <__pow5mult+0x20>
 8007ac8:	4c25      	ldr	r4, [pc, #148]	; (8007b60 <__pow5mult+0xa8>)
 8007aca:	3a01      	subs	r2, #1
 8007acc:	2300      	movs	r3, #0
 8007ace:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ad2:	f7ff fe55 	bl	8007780 <__multadd>
 8007ad6:	4607      	mov	r7, r0
 8007ad8:	10ad      	asrs	r5, r5, #2
 8007ada:	d03d      	beq.n	8007b58 <__pow5mult+0xa0>
 8007adc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ade:	b97c      	cbnz	r4, 8007b00 <__pow5mult+0x48>
 8007ae0:	2010      	movs	r0, #16
 8007ae2:	f7fc fb83 	bl	80041ec <malloc>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	6270      	str	r0, [r6, #36]	; 0x24
 8007aea:	b928      	cbnz	r0, 8007af8 <__pow5mult+0x40>
 8007aec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007af0:	4b1c      	ldr	r3, [pc, #112]	; (8007b64 <__pow5mult+0xac>)
 8007af2:	481d      	ldr	r0, [pc, #116]	; (8007b68 <__pow5mult+0xb0>)
 8007af4:	f000 fc72 	bl	80083dc <__assert_func>
 8007af8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007afc:	6004      	str	r4, [r0, #0]
 8007afe:	60c4      	str	r4, [r0, #12]
 8007b00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b08:	b94c      	cbnz	r4, 8007b1e <__pow5mult+0x66>
 8007b0a:	f240 2171 	movw	r1, #625	; 0x271
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f7ff ff14 	bl	800793c <__i2b>
 8007b14:	2300      	movs	r3, #0
 8007b16:	4604      	mov	r4, r0
 8007b18:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b1c:	6003      	str	r3, [r0, #0]
 8007b1e:	f04f 0900 	mov.w	r9, #0
 8007b22:	07eb      	lsls	r3, r5, #31
 8007b24:	d50a      	bpl.n	8007b3c <__pow5mult+0x84>
 8007b26:	4639      	mov	r1, r7
 8007b28:	4622      	mov	r2, r4
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f7ff ff1c 	bl	8007968 <__multiply>
 8007b30:	4680      	mov	r8, r0
 8007b32:	4639      	mov	r1, r7
 8007b34:	4630      	mov	r0, r6
 8007b36:	f7ff fe01 	bl	800773c <_Bfree>
 8007b3a:	4647      	mov	r7, r8
 8007b3c:	106d      	asrs	r5, r5, #1
 8007b3e:	d00b      	beq.n	8007b58 <__pow5mult+0xa0>
 8007b40:	6820      	ldr	r0, [r4, #0]
 8007b42:	b938      	cbnz	r0, 8007b54 <__pow5mult+0x9c>
 8007b44:	4622      	mov	r2, r4
 8007b46:	4621      	mov	r1, r4
 8007b48:	4630      	mov	r0, r6
 8007b4a:	f7ff ff0d 	bl	8007968 <__multiply>
 8007b4e:	6020      	str	r0, [r4, #0]
 8007b50:	f8c0 9000 	str.w	r9, [r0]
 8007b54:	4604      	mov	r4, r0
 8007b56:	e7e4      	b.n	8007b22 <__pow5mult+0x6a>
 8007b58:	4638      	mov	r0, r7
 8007b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5e:	bf00      	nop
 8007b60:	08009148 	.word	0x08009148
 8007b64:	08008e96 	.word	0x08008e96
 8007b68:	08008ff8 	.word	0x08008ff8

08007b6c <__lshift>:
 8007b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b70:	460c      	mov	r4, r1
 8007b72:	4607      	mov	r7, r0
 8007b74:	4691      	mov	r9, r2
 8007b76:	6923      	ldr	r3, [r4, #16]
 8007b78:	6849      	ldr	r1, [r1, #4]
 8007b7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b7e:	68a3      	ldr	r3, [r4, #8]
 8007b80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b84:	f108 0601 	add.w	r6, r8, #1
 8007b88:	42b3      	cmp	r3, r6
 8007b8a:	db0b      	blt.n	8007ba4 <__lshift+0x38>
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	f7ff fd95 	bl	80076bc <_Balloc>
 8007b92:	4605      	mov	r5, r0
 8007b94:	b948      	cbnz	r0, 8007baa <__lshift+0x3e>
 8007b96:	4602      	mov	r2, r0
 8007b98:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007b9c:	4b29      	ldr	r3, [pc, #164]	; (8007c44 <__lshift+0xd8>)
 8007b9e:	482a      	ldr	r0, [pc, #168]	; (8007c48 <__lshift+0xdc>)
 8007ba0:	f000 fc1c 	bl	80083dc <__assert_func>
 8007ba4:	3101      	adds	r1, #1
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	e7ee      	b.n	8007b88 <__lshift+0x1c>
 8007baa:	2300      	movs	r3, #0
 8007bac:	f100 0114 	add.w	r1, r0, #20
 8007bb0:	f100 0210 	add.w	r2, r0, #16
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	4553      	cmp	r3, sl
 8007bb8:	db37      	blt.n	8007c2a <__lshift+0xbe>
 8007bba:	6920      	ldr	r0, [r4, #16]
 8007bbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bc0:	f104 0314 	add.w	r3, r4, #20
 8007bc4:	f019 091f 	ands.w	r9, r9, #31
 8007bc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007bd0:	d02f      	beq.n	8007c32 <__lshift+0xc6>
 8007bd2:	468a      	mov	sl, r1
 8007bd4:	f04f 0c00 	mov.w	ip, #0
 8007bd8:	f1c9 0e20 	rsb	lr, r9, #32
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	fa02 f209 	lsl.w	r2, r2, r9
 8007be2:	ea42 020c 	orr.w	r2, r2, ip
 8007be6:	f84a 2b04 	str.w	r2, [sl], #4
 8007bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bee:	4298      	cmp	r0, r3
 8007bf0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007bf4:	d8f2      	bhi.n	8007bdc <__lshift+0x70>
 8007bf6:	1b03      	subs	r3, r0, r4
 8007bf8:	3b15      	subs	r3, #21
 8007bfa:	f023 0303 	bic.w	r3, r3, #3
 8007bfe:	3304      	adds	r3, #4
 8007c00:	f104 0215 	add.w	r2, r4, #21
 8007c04:	4290      	cmp	r0, r2
 8007c06:	bf38      	it	cc
 8007c08:	2304      	movcc	r3, #4
 8007c0a:	f841 c003 	str.w	ip, [r1, r3]
 8007c0e:	f1bc 0f00 	cmp.w	ip, #0
 8007c12:	d001      	beq.n	8007c18 <__lshift+0xac>
 8007c14:	f108 0602 	add.w	r6, r8, #2
 8007c18:	3e01      	subs	r6, #1
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	612e      	str	r6, [r5, #16]
 8007c20:	f7ff fd8c 	bl	800773c <_Bfree>
 8007c24:	4628      	mov	r0, r5
 8007c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c2e:	3301      	adds	r3, #1
 8007c30:	e7c1      	b.n	8007bb6 <__lshift+0x4a>
 8007c32:	3904      	subs	r1, #4
 8007c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c38:	4298      	cmp	r0, r3
 8007c3a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c3e:	d8f9      	bhi.n	8007c34 <__lshift+0xc8>
 8007c40:	e7ea      	b.n	8007c18 <__lshift+0xac>
 8007c42:	bf00      	nop
 8007c44:	08008f08 	.word	0x08008f08
 8007c48:	08008ff8 	.word	0x08008ff8

08007c4c <__mcmp>:
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	690a      	ldr	r2, [r1, #16]
 8007c50:	6900      	ldr	r0, [r0, #16]
 8007c52:	b530      	push	{r4, r5, lr}
 8007c54:	1a80      	subs	r0, r0, r2
 8007c56:	d10d      	bne.n	8007c74 <__mcmp+0x28>
 8007c58:	3314      	adds	r3, #20
 8007c5a:	3114      	adds	r1, #20
 8007c5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c6c:	4295      	cmp	r5, r2
 8007c6e:	d002      	beq.n	8007c76 <__mcmp+0x2a>
 8007c70:	d304      	bcc.n	8007c7c <__mcmp+0x30>
 8007c72:	2001      	movs	r0, #1
 8007c74:	bd30      	pop	{r4, r5, pc}
 8007c76:	42a3      	cmp	r3, r4
 8007c78:	d3f4      	bcc.n	8007c64 <__mcmp+0x18>
 8007c7a:	e7fb      	b.n	8007c74 <__mcmp+0x28>
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c80:	e7f8      	b.n	8007c74 <__mcmp+0x28>
	...

08007c84 <__mdiff>:
 8007c84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c88:	460d      	mov	r5, r1
 8007c8a:	4607      	mov	r7, r0
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	4628      	mov	r0, r5
 8007c90:	4614      	mov	r4, r2
 8007c92:	f7ff ffdb 	bl	8007c4c <__mcmp>
 8007c96:	1e06      	subs	r6, r0, #0
 8007c98:	d111      	bne.n	8007cbe <__mdiff+0x3a>
 8007c9a:	4631      	mov	r1, r6
 8007c9c:	4638      	mov	r0, r7
 8007c9e:	f7ff fd0d 	bl	80076bc <_Balloc>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	b928      	cbnz	r0, 8007cb2 <__mdiff+0x2e>
 8007ca6:	f240 2132 	movw	r1, #562	; 0x232
 8007caa:	4b3a      	ldr	r3, [pc, #232]	; (8007d94 <__mdiff+0x110>)
 8007cac:	483a      	ldr	r0, [pc, #232]	; (8007d98 <__mdiff+0x114>)
 8007cae:	f000 fb95 	bl	80083dc <__assert_func>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007cb8:	4610      	mov	r0, r2
 8007cba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cbe:	bfa4      	itt	ge
 8007cc0:	4623      	movge	r3, r4
 8007cc2:	462c      	movge	r4, r5
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	6861      	ldr	r1, [r4, #4]
 8007cc8:	bfa6      	itte	ge
 8007cca:	461d      	movge	r5, r3
 8007ccc:	2600      	movge	r6, #0
 8007cce:	2601      	movlt	r6, #1
 8007cd0:	f7ff fcf4 	bl	80076bc <_Balloc>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	b918      	cbnz	r0, 8007ce0 <__mdiff+0x5c>
 8007cd8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007cdc:	4b2d      	ldr	r3, [pc, #180]	; (8007d94 <__mdiff+0x110>)
 8007cde:	e7e5      	b.n	8007cac <__mdiff+0x28>
 8007ce0:	f102 0814 	add.w	r8, r2, #20
 8007ce4:	46c2      	mov	sl, r8
 8007ce6:	f04f 0c00 	mov.w	ip, #0
 8007cea:	6927      	ldr	r7, [r4, #16]
 8007cec:	60c6      	str	r6, [r0, #12]
 8007cee:	692e      	ldr	r6, [r5, #16]
 8007cf0:	f104 0014 	add.w	r0, r4, #20
 8007cf4:	f105 0914 	add.w	r9, r5, #20
 8007cf8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007cfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d00:	3410      	adds	r4, #16
 8007d02:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007d06:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d0a:	fa1f f18b 	uxth.w	r1, fp
 8007d0e:	448c      	add	ip, r1
 8007d10:	b299      	uxth	r1, r3
 8007d12:	0c1b      	lsrs	r3, r3, #16
 8007d14:	ebac 0101 	sub.w	r1, ip, r1
 8007d18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d1c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007d20:	b289      	uxth	r1, r1
 8007d22:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007d26:	454e      	cmp	r6, r9
 8007d28:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007d2c:	f84a 3b04 	str.w	r3, [sl], #4
 8007d30:	d8e7      	bhi.n	8007d02 <__mdiff+0x7e>
 8007d32:	1b73      	subs	r3, r6, r5
 8007d34:	3b15      	subs	r3, #21
 8007d36:	f023 0303 	bic.w	r3, r3, #3
 8007d3a:	3515      	adds	r5, #21
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	42ae      	cmp	r6, r5
 8007d40:	bf38      	it	cc
 8007d42:	2304      	movcc	r3, #4
 8007d44:	4418      	add	r0, r3
 8007d46:	4443      	add	r3, r8
 8007d48:	461e      	mov	r6, r3
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	4575      	cmp	r5, lr
 8007d4e:	d30e      	bcc.n	8007d6e <__mdiff+0xea>
 8007d50:	f10e 0103 	add.w	r1, lr, #3
 8007d54:	1a09      	subs	r1, r1, r0
 8007d56:	f021 0103 	bic.w	r1, r1, #3
 8007d5a:	3803      	subs	r0, #3
 8007d5c:	4586      	cmp	lr, r0
 8007d5e:	bf38      	it	cc
 8007d60:	2100      	movcc	r1, #0
 8007d62:	4419      	add	r1, r3
 8007d64:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007d68:	b18b      	cbz	r3, 8007d8e <__mdiff+0x10a>
 8007d6a:	6117      	str	r7, [r2, #16]
 8007d6c:	e7a4      	b.n	8007cb8 <__mdiff+0x34>
 8007d6e:	f855 8b04 	ldr.w	r8, [r5], #4
 8007d72:	fa1f f188 	uxth.w	r1, r8
 8007d76:	4461      	add	r1, ip
 8007d78:	140c      	asrs	r4, r1, #16
 8007d7a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d7e:	b289      	uxth	r1, r1
 8007d80:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007d84:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007d88:	f846 1b04 	str.w	r1, [r6], #4
 8007d8c:	e7de      	b.n	8007d4c <__mdiff+0xc8>
 8007d8e:	3f01      	subs	r7, #1
 8007d90:	e7e8      	b.n	8007d64 <__mdiff+0xe0>
 8007d92:	bf00      	nop
 8007d94:	08008f08 	.word	0x08008f08
 8007d98:	08008ff8 	.word	0x08008ff8

08007d9c <__ulp>:
 8007d9c:	4b11      	ldr	r3, [pc, #68]	; (8007de4 <__ulp+0x48>)
 8007d9e:	400b      	ands	r3, r1
 8007da0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	dd02      	ble.n	8007dae <__ulp+0x12>
 8007da8:	2000      	movs	r0, #0
 8007daa:	4619      	mov	r1, r3
 8007dac:	4770      	bx	lr
 8007dae:	425b      	negs	r3, r3
 8007db0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007db4:	f04f 0000 	mov.w	r0, #0
 8007db8:	f04f 0100 	mov.w	r1, #0
 8007dbc:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007dc0:	da04      	bge.n	8007dcc <__ulp+0x30>
 8007dc2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007dc6:	fa43 f102 	asr.w	r1, r3, r2
 8007dca:	4770      	bx	lr
 8007dcc:	f1a2 0314 	sub.w	r3, r2, #20
 8007dd0:	2b1e      	cmp	r3, #30
 8007dd2:	bfd6      	itet	le
 8007dd4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007dd8:	2301      	movgt	r3, #1
 8007dda:	fa22 f303 	lsrle.w	r3, r2, r3
 8007dde:	4618      	mov	r0, r3
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	7ff00000 	.word	0x7ff00000

08007de8 <__b2d>:
 8007de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dec:	6907      	ldr	r7, [r0, #16]
 8007dee:	f100 0914 	add.w	r9, r0, #20
 8007df2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007df6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007dfa:	f1a7 0804 	sub.w	r8, r7, #4
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f7ff fd4e 	bl	80078a0 <__hi0bits>
 8007e04:	f1c0 0320 	rsb	r3, r0, #32
 8007e08:	280a      	cmp	r0, #10
 8007e0a:	600b      	str	r3, [r1, #0]
 8007e0c:	491f      	ldr	r1, [pc, #124]	; (8007e8c <__b2d+0xa4>)
 8007e0e:	dc17      	bgt.n	8007e40 <__b2d+0x58>
 8007e10:	45c1      	cmp	r9, r8
 8007e12:	bf28      	it	cs
 8007e14:	2200      	movcs	r2, #0
 8007e16:	f1c0 0c0b 	rsb	ip, r0, #11
 8007e1a:	fa26 f30c 	lsr.w	r3, r6, ip
 8007e1e:	bf38      	it	cc
 8007e20:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007e24:	ea43 0501 	orr.w	r5, r3, r1
 8007e28:	f100 0315 	add.w	r3, r0, #21
 8007e2c:	fa06 f303 	lsl.w	r3, r6, r3
 8007e30:	fa22 f20c 	lsr.w	r2, r2, ip
 8007e34:	ea43 0402 	orr.w	r4, r3, r2
 8007e38:	4620      	mov	r0, r4
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e40:	45c1      	cmp	r9, r8
 8007e42:	bf2e      	itee	cs
 8007e44:	2200      	movcs	r2, #0
 8007e46:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007e4a:	f1a7 0808 	subcc.w	r8, r7, #8
 8007e4e:	f1b0 030b 	subs.w	r3, r0, #11
 8007e52:	d016      	beq.n	8007e82 <__b2d+0x9a>
 8007e54:	f1c3 0720 	rsb	r7, r3, #32
 8007e58:	fa22 f107 	lsr.w	r1, r2, r7
 8007e5c:	45c8      	cmp	r8, r9
 8007e5e:	fa06 f603 	lsl.w	r6, r6, r3
 8007e62:	ea46 0601 	orr.w	r6, r6, r1
 8007e66:	bf94      	ite	ls
 8007e68:	2100      	movls	r1, #0
 8007e6a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007e6e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007e72:	fa02 f003 	lsl.w	r0, r2, r3
 8007e76:	40f9      	lsrs	r1, r7
 8007e78:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007e7c:	ea40 0401 	orr.w	r4, r0, r1
 8007e80:	e7da      	b.n	8007e38 <__b2d+0x50>
 8007e82:	4614      	mov	r4, r2
 8007e84:	ea46 0501 	orr.w	r5, r6, r1
 8007e88:	e7d6      	b.n	8007e38 <__b2d+0x50>
 8007e8a:	bf00      	nop
 8007e8c:	3ff00000 	.word	0x3ff00000

08007e90 <__d2b>:
 8007e90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007e94:	2101      	movs	r1, #1
 8007e96:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007e9a:	4690      	mov	r8, r2
 8007e9c:	461d      	mov	r5, r3
 8007e9e:	f7ff fc0d 	bl	80076bc <_Balloc>
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	b930      	cbnz	r0, 8007eb4 <__d2b+0x24>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	f240 310a 	movw	r1, #778	; 0x30a
 8007eac:	4b24      	ldr	r3, [pc, #144]	; (8007f40 <__d2b+0xb0>)
 8007eae:	4825      	ldr	r0, [pc, #148]	; (8007f44 <__d2b+0xb4>)
 8007eb0:	f000 fa94 	bl	80083dc <__assert_func>
 8007eb4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007eb8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007ebc:	bb2d      	cbnz	r5, 8007f0a <__d2b+0x7a>
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	f1b8 0300 	subs.w	r3, r8, #0
 8007ec4:	d026      	beq.n	8007f14 <__d2b+0x84>
 8007ec6:	4668      	mov	r0, sp
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	f7ff fd09 	bl	80078e0 <__lo0bits>
 8007ece:	9900      	ldr	r1, [sp, #0]
 8007ed0:	b1f0      	cbz	r0, 8007f10 <__d2b+0x80>
 8007ed2:	9a01      	ldr	r2, [sp, #4]
 8007ed4:	f1c0 0320 	rsb	r3, r0, #32
 8007ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8007edc:	430b      	orrs	r3, r1
 8007ede:	40c2      	lsrs	r2, r0
 8007ee0:	6163      	str	r3, [r4, #20]
 8007ee2:	9201      	str	r2, [sp, #4]
 8007ee4:	9b01      	ldr	r3, [sp, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bf14      	ite	ne
 8007eea:	2102      	movne	r1, #2
 8007eec:	2101      	moveq	r1, #1
 8007eee:	61a3      	str	r3, [r4, #24]
 8007ef0:	6121      	str	r1, [r4, #16]
 8007ef2:	b1c5      	cbz	r5, 8007f26 <__d2b+0x96>
 8007ef4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ef8:	4405      	add	r5, r0
 8007efa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007efe:	603d      	str	r5, [r7, #0]
 8007f00:	6030      	str	r0, [r6, #0]
 8007f02:	4620      	mov	r0, r4
 8007f04:	b002      	add	sp, #8
 8007f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f0e:	e7d6      	b.n	8007ebe <__d2b+0x2e>
 8007f10:	6161      	str	r1, [r4, #20]
 8007f12:	e7e7      	b.n	8007ee4 <__d2b+0x54>
 8007f14:	a801      	add	r0, sp, #4
 8007f16:	f7ff fce3 	bl	80078e0 <__lo0bits>
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	9b01      	ldr	r3, [sp, #4]
 8007f1e:	6121      	str	r1, [r4, #16]
 8007f20:	6163      	str	r3, [r4, #20]
 8007f22:	3020      	adds	r0, #32
 8007f24:	e7e5      	b.n	8007ef2 <__d2b+0x62>
 8007f26:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007f2a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f2e:	6038      	str	r0, [r7, #0]
 8007f30:	6918      	ldr	r0, [r3, #16]
 8007f32:	f7ff fcb5 	bl	80078a0 <__hi0bits>
 8007f36:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007f3a:	6031      	str	r1, [r6, #0]
 8007f3c:	e7e1      	b.n	8007f02 <__d2b+0x72>
 8007f3e:	bf00      	nop
 8007f40:	08008f08 	.word	0x08008f08
 8007f44:	08008ff8 	.word	0x08008ff8

08007f48 <__ratio>:
 8007f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	4688      	mov	r8, r1
 8007f4e:	4669      	mov	r1, sp
 8007f50:	4681      	mov	r9, r0
 8007f52:	f7ff ff49 	bl	8007de8 <__b2d>
 8007f56:	460f      	mov	r7, r1
 8007f58:	4604      	mov	r4, r0
 8007f5a:	460d      	mov	r5, r1
 8007f5c:	4640      	mov	r0, r8
 8007f5e:	a901      	add	r1, sp, #4
 8007f60:	f7ff ff42 	bl	8007de8 <__b2d>
 8007f64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f68:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007f6c:	468b      	mov	fp, r1
 8007f6e:	eba3 0c02 	sub.w	ip, r3, r2
 8007f72:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007f76:	1a9b      	subs	r3, r3, r2
 8007f78:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	bfd5      	itete	le
 8007f80:	460a      	movle	r2, r1
 8007f82:	462a      	movgt	r2, r5
 8007f84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007f88:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007f8c:	bfd8      	it	le
 8007f8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007f92:	465b      	mov	r3, fp
 8007f94:	4602      	mov	r2, r0
 8007f96:	4639      	mov	r1, r7
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f7f8 fbc7 	bl	800072c <__aeabi_ddiv>
 8007f9e:	b003      	add	sp, #12
 8007fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007fa4 <__copybits>:
 8007fa4:	3901      	subs	r1, #1
 8007fa6:	b570      	push	{r4, r5, r6, lr}
 8007fa8:	1149      	asrs	r1, r1, #5
 8007faa:	6914      	ldr	r4, [r2, #16]
 8007fac:	3101      	adds	r1, #1
 8007fae:	f102 0314 	add.w	r3, r2, #20
 8007fb2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007fb6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007fba:	1f05      	subs	r5, r0, #4
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	d30c      	bcc.n	8007fda <__copybits+0x36>
 8007fc0:	1aa3      	subs	r3, r4, r2
 8007fc2:	3b11      	subs	r3, #17
 8007fc4:	f023 0303 	bic.w	r3, r3, #3
 8007fc8:	3211      	adds	r2, #17
 8007fca:	42a2      	cmp	r2, r4
 8007fcc:	bf88      	it	hi
 8007fce:	2300      	movhi	r3, #0
 8007fd0:	4418      	add	r0, r3
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4288      	cmp	r0, r1
 8007fd6:	d305      	bcc.n	8007fe4 <__copybits+0x40>
 8007fd8:	bd70      	pop	{r4, r5, r6, pc}
 8007fda:	f853 6b04 	ldr.w	r6, [r3], #4
 8007fde:	f845 6f04 	str.w	r6, [r5, #4]!
 8007fe2:	e7eb      	b.n	8007fbc <__copybits+0x18>
 8007fe4:	f840 3b04 	str.w	r3, [r0], #4
 8007fe8:	e7f4      	b.n	8007fd4 <__copybits+0x30>

08007fea <__any_on>:
 8007fea:	f100 0214 	add.w	r2, r0, #20
 8007fee:	6900      	ldr	r0, [r0, #16]
 8007ff0:	114b      	asrs	r3, r1, #5
 8007ff2:	4298      	cmp	r0, r3
 8007ff4:	b510      	push	{r4, lr}
 8007ff6:	db11      	blt.n	800801c <__any_on+0x32>
 8007ff8:	dd0a      	ble.n	8008010 <__any_on+0x26>
 8007ffa:	f011 011f 	ands.w	r1, r1, #31
 8007ffe:	d007      	beq.n	8008010 <__any_on+0x26>
 8008000:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008004:	fa24 f001 	lsr.w	r0, r4, r1
 8008008:	fa00 f101 	lsl.w	r1, r0, r1
 800800c:	428c      	cmp	r4, r1
 800800e:	d10b      	bne.n	8008028 <__any_on+0x3e>
 8008010:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008014:	4293      	cmp	r3, r2
 8008016:	d803      	bhi.n	8008020 <__any_on+0x36>
 8008018:	2000      	movs	r0, #0
 800801a:	bd10      	pop	{r4, pc}
 800801c:	4603      	mov	r3, r0
 800801e:	e7f7      	b.n	8008010 <__any_on+0x26>
 8008020:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008024:	2900      	cmp	r1, #0
 8008026:	d0f5      	beq.n	8008014 <__any_on+0x2a>
 8008028:	2001      	movs	r0, #1
 800802a:	e7f6      	b.n	800801a <__any_on+0x30>

0800802c <__ssputs_r>:
 800802c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008030:	688e      	ldr	r6, [r1, #8]
 8008032:	4682      	mov	sl, r0
 8008034:	429e      	cmp	r6, r3
 8008036:	460c      	mov	r4, r1
 8008038:	4690      	mov	r8, r2
 800803a:	461f      	mov	r7, r3
 800803c:	d838      	bhi.n	80080b0 <__ssputs_r+0x84>
 800803e:	898a      	ldrh	r2, [r1, #12]
 8008040:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008044:	d032      	beq.n	80080ac <__ssputs_r+0x80>
 8008046:	6825      	ldr	r5, [r4, #0]
 8008048:	6909      	ldr	r1, [r1, #16]
 800804a:	3301      	adds	r3, #1
 800804c:	eba5 0901 	sub.w	r9, r5, r1
 8008050:	6965      	ldr	r5, [r4, #20]
 8008052:	444b      	add	r3, r9
 8008054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008058:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800805c:	106d      	asrs	r5, r5, #1
 800805e:	429d      	cmp	r5, r3
 8008060:	bf38      	it	cc
 8008062:	461d      	movcc	r5, r3
 8008064:	0553      	lsls	r3, r2, #21
 8008066:	d531      	bpl.n	80080cc <__ssputs_r+0xa0>
 8008068:	4629      	mov	r1, r5
 800806a:	f7fc f959 	bl	8004320 <_malloc_r>
 800806e:	4606      	mov	r6, r0
 8008070:	b950      	cbnz	r0, 8008088 <__ssputs_r+0x5c>
 8008072:	230c      	movs	r3, #12
 8008074:	f04f 30ff 	mov.w	r0, #4294967295
 8008078:	f8ca 3000 	str.w	r3, [sl]
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008082:	81a3      	strh	r3, [r4, #12]
 8008084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008088:	464a      	mov	r2, r9
 800808a:	6921      	ldr	r1, [r4, #16]
 800808c:	f7fc f8b6 	bl	80041fc <memcpy>
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800809a:	81a3      	strh	r3, [r4, #12]
 800809c:	6126      	str	r6, [r4, #16]
 800809e:	444e      	add	r6, r9
 80080a0:	6026      	str	r6, [r4, #0]
 80080a2:	463e      	mov	r6, r7
 80080a4:	6165      	str	r5, [r4, #20]
 80080a6:	eba5 0509 	sub.w	r5, r5, r9
 80080aa:	60a5      	str	r5, [r4, #8]
 80080ac:	42be      	cmp	r6, r7
 80080ae:	d900      	bls.n	80080b2 <__ssputs_r+0x86>
 80080b0:	463e      	mov	r6, r7
 80080b2:	4632      	mov	r2, r6
 80080b4:	4641      	mov	r1, r8
 80080b6:	6820      	ldr	r0, [r4, #0]
 80080b8:	f000 fa04 	bl	80084c4 <memmove>
 80080bc:	68a3      	ldr	r3, [r4, #8]
 80080be:	2000      	movs	r0, #0
 80080c0:	1b9b      	subs	r3, r3, r6
 80080c2:	60a3      	str	r3, [r4, #8]
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	4433      	add	r3, r6
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	e7db      	b.n	8008084 <__ssputs_r+0x58>
 80080cc:	462a      	mov	r2, r5
 80080ce:	f000 fa13 	bl	80084f8 <_realloc_r>
 80080d2:	4606      	mov	r6, r0
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d1e1      	bne.n	800809c <__ssputs_r+0x70>
 80080d8:	4650      	mov	r0, sl
 80080da:	6921      	ldr	r1, [r4, #16]
 80080dc:	f7fc f8b8 	bl	8004250 <_free_r>
 80080e0:	e7c7      	b.n	8008072 <__ssputs_r+0x46>
	...

080080e4 <_svfiprintf_r>:
 80080e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e8:	4698      	mov	r8, r3
 80080ea:	898b      	ldrh	r3, [r1, #12]
 80080ec:	4607      	mov	r7, r0
 80080ee:	061b      	lsls	r3, r3, #24
 80080f0:	460d      	mov	r5, r1
 80080f2:	4614      	mov	r4, r2
 80080f4:	b09d      	sub	sp, #116	; 0x74
 80080f6:	d50e      	bpl.n	8008116 <_svfiprintf_r+0x32>
 80080f8:	690b      	ldr	r3, [r1, #16]
 80080fa:	b963      	cbnz	r3, 8008116 <_svfiprintf_r+0x32>
 80080fc:	2140      	movs	r1, #64	; 0x40
 80080fe:	f7fc f90f 	bl	8004320 <_malloc_r>
 8008102:	6028      	str	r0, [r5, #0]
 8008104:	6128      	str	r0, [r5, #16]
 8008106:	b920      	cbnz	r0, 8008112 <_svfiprintf_r+0x2e>
 8008108:	230c      	movs	r3, #12
 800810a:	603b      	str	r3, [r7, #0]
 800810c:	f04f 30ff 	mov.w	r0, #4294967295
 8008110:	e0d1      	b.n	80082b6 <_svfiprintf_r+0x1d2>
 8008112:	2340      	movs	r3, #64	; 0x40
 8008114:	616b      	str	r3, [r5, #20]
 8008116:	2300      	movs	r3, #0
 8008118:	9309      	str	r3, [sp, #36]	; 0x24
 800811a:	2320      	movs	r3, #32
 800811c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008120:	2330      	movs	r3, #48	; 0x30
 8008122:	f04f 0901 	mov.w	r9, #1
 8008126:	f8cd 800c 	str.w	r8, [sp, #12]
 800812a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80082d0 <_svfiprintf_r+0x1ec>
 800812e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008132:	4623      	mov	r3, r4
 8008134:	469a      	mov	sl, r3
 8008136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800813a:	b10a      	cbz	r2, 8008140 <_svfiprintf_r+0x5c>
 800813c:	2a25      	cmp	r2, #37	; 0x25
 800813e:	d1f9      	bne.n	8008134 <_svfiprintf_r+0x50>
 8008140:	ebba 0b04 	subs.w	fp, sl, r4
 8008144:	d00b      	beq.n	800815e <_svfiprintf_r+0x7a>
 8008146:	465b      	mov	r3, fp
 8008148:	4622      	mov	r2, r4
 800814a:	4629      	mov	r1, r5
 800814c:	4638      	mov	r0, r7
 800814e:	f7ff ff6d 	bl	800802c <__ssputs_r>
 8008152:	3001      	adds	r0, #1
 8008154:	f000 80aa 	beq.w	80082ac <_svfiprintf_r+0x1c8>
 8008158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800815a:	445a      	add	r2, fp
 800815c:	9209      	str	r2, [sp, #36]	; 0x24
 800815e:	f89a 3000 	ldrb.w	r3, [sl]
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 80a2 	beq.w	80082ac <_svfiprintf_r+0x1c8>
 8008168:	2300      	movs	r3, #0
 800816a:	f04f 32ff 	mov.w	r2, #4294967295
 800816e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008172:	f10a 0a01 	add.w	sl, sl, #1
 8008176:	9304      	str	r3, [sp, #16]
 8008178:	9307      	str	r3, [sp, #28]
 800817a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800817e:	931a      	str	r3, [sp, #104]	; 0x68
 8008180:	4654      	mov	r4, sl
 8008182:	2205      	movs	r2, #5
 8008184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008188:	4851      	ldr	r0, [pc, #324]	; (80082d0 <_svfiprintf_r+0x1ec>)
 800818a:	f7ff fa7d 	bl	8007688 <memchr>
 800818e:	9a04      	ldr	r2, [sp, #16]
 8008190:	b9d8      	cbnz	r0, 80081ca <_svfiprintf_r+0xe6>
 8008192:	06d0      	lsls	r0, r2, #27
 8008194:	bf44      	itt	mi
 8008196:	2320      	movmi	r3, #32
 8008198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800819c:	0711      	lsls	r1, r2, #28
 800819e:	bf44      	itt	mi
 80081a0:	232b      	movmi	r3, #43	; 0x2b
 80081a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081a6:	f89a 3000 	ldrb.w	r3, [sl]
 80081aa:	2b2a      	cmp	r3, #42	; 0x2a
 80081ac:	d015      	beq.n	80081da <_svfiprintf_r+0xf6>
 80081ae:	4654      	mov	r4, sl
 80081b0:	2000      	movs	r0, #0
 80081b2:	f04f 0c0a 	mov.w	ip, #10
 80081b6:	9a07      	ldr	r2, [sp, #28]
 80081b8:	4621      	mov	r1, r4
 80081ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081be:	3b30      	subs	r3, #48	; 0x30
 80081c0:	2b09      	cmp	r3, #9
 80081c2:	d94e      	bls.n	8008262 <_svfiprintf_r+0x17e>
 80081c4:	b1b0      	cbz	r0, 80081f4 <_svfiprintf_r+0x110>
 80081c6:	9207      	str	r2, [sp, #28]
 80081c8:	e014      	b.n	80081f4 <_svfiprintf_r+0x110>
 80081ca:	eba0 0308 	sub.w	r3, r0, r8
 80081ce:	fa09 f303 	lsl.w	r3, r9, r3
 80081d2:	4313      	orrs	r3, r2
 80081d4:	46a2      	mov	sl, r4
 80081d6:	9304      	str	r3, [sp, #16]
 80081d8:	e7d2      	b.n	8008180 <_svfiprintf_r+0x9c>
 80081da:	9b03      	ldr	r3, [sp, #12]
 80081dc:	1d19      	adds	r1, r3, #4
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	9103      	str	r1, [sp, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	bfbb      	ittet	lt
 80081e6:	425b      	neglt	r3, r3
 80081e8:	f042 0202 	orrlt.w	r2, r2, #2
 80081ec:	9307      	strge	r3, [sp, #28]
 80081ee:	9307      	strlt	r3, [sp, #28]
 80081f0:	bfb8      	it	lt
 80081f2:	9204      	strlt	r2, [sp, #16]
 80081f4:	7823      	ldrb	r3, [r4, #0]
 80081f6:	2b2e      	cmp	r3, #46	; 0x2e
 80081f8:	d10c      	bne.n	8008214 <_svfiprintf_r+0x130>
 80081fa:	7863      	ldrb	r3, [r4, #1]
 80081fc:	2b2a      	cmp	r3, #42	; 0x2a
 80081fe:	d135      	bne.n	800826c <_svfiprintf_r+0x188>
 8008200:	9b03      	ldr	r3, [sp, #12]
 8008202:	3402      	adds	r4, #2
 8008204:	1d1a      	adds	r2, r3, #4
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	9203      	str	r2, [sp, #12]
 800820a:	2b00      	cmp	r3, #0
 800820c:	bfb8      	it	lt
 800820e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008212:	9305      	str	r3, [sp, #20]
 8008214:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80082d4 <_svfiprintf_r+0x1f0>
 8008218:	2203      	movs	r2, #3
 800821a:	4650      	mov	r0, sl
 800821c:	7821      	ldrb	r1, [r4, #0]
 800821e:	f7ff fa33 	bl	8007688 <memchr>
 8008222:	b140      	cbz	r0, 8008236 <_svfiprintf_r+0x152>
 8008224:	2340      	movs	r3, #64	; 0x40
 8008226:	eba0 000a 	sub.w	r0, r0, sl
 800822a:	fa03 f000 	lsl.w	r0, r3, r0
 800822e:	9b04      	ldr	r3, [sp, #16]
 8008230:	3401      	adds	r4, #1
 8008232:	4303      	orrs	r3, r0
 8008234:	9304      	str	r3, [sp, #16]
 8008236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800823a:	2206      	movs	r2, #6
 800823c:	4826      	ldr	r0, [pc, #152]	; (80082d8 <_svfiprintf_r+0x1f4>)
 800823e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008242:	f7ff fa21 	bl	8007688 <memchr>
 8008246:	2800      	cmp	r0, #0
 8008248:	d038      	beq.n	80082bc <_svfiprintf_r+0x1d8>
 800824a:	4b24      	ldr	r3, [pc, #144]	; (80082dc <_svfiprintf_r+0x1f8>)
 800824c:	bb1b      	cbnz	r3, 8008296 <_svfiprintf_r+0x1b2>
 800824e:	9b03      	ldr	r3, [sp, #12]
 8008250:	3307      	adds	r3, #7
 8008252:	f023 0307 	bic.w	r3, r3, #7
 8008256:	3308      	adds	r3, #8
 8008258:	9303      	str	r3, [sp, #12]
 800825a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825c:	4433      	add	r3, r6
 800825e:	9309      	str	r3, [sp, #36]	; 0x24
 8008260:	e767      	b.n	8008132 <_svfiprintf_r+0x4e>
 8008262:	460c      	mov	r4, r1
 8008264:	2001      	movs	r0, #1
 8008266:	fb0c 3202 	mla	r2, ip, r2, r3
 800826a:	e7a5      	b.n	80081b8 <_svfiprintf_r+0xd4>
 800826c:	2300      	movs	r3, #0
 800826e:	f04f 0c0a 	mov.w	ip, #10
 8008272:	4619      	mov	r1, r3
 8008274:	3401      	adds	r4, #1
 8008276:	9305      	str	r3, [sp, #20]
 8008278:	4620      	mov	r0, r4
 800827a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800827e:	3a30      	subs	r2, #48	; 0x30
 8008280:	2a09      	cmp	r2, #9
 8008282:	d903      	bls.n	800828c <_svfiprintf_r+0x1a8>
 8008284:	2b00      	cmp	r3, #0
 8008286:	d0c5      	beq.n	8008214 <_svfiprintf_r+0x130>
 8008288:	9105      	str	r1, [sp, #20]
 800828a:	e7c3      	b.n	8008214 <_svfiprintf_r+0x130>
 800828c:	4604      	mov	r4, r0
 800828e:	2301      	movs	r3, #1
 8008290:	fb0c 2101 	mla	r1, ip, r1, r2
 8008294:	e7f0      	b.n	8008278 <_svfiprintf_r+0x194>
 8008296:	ab03      	add	r3, sp, #12
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	462a      	mov	r2, r5
 800829c:	4638      	mov	r0, r7
 800829e:	4b10      	ldr	r3, [pc, #64]	; (80082e0 <_svfiprintf_r+0x1fc>)
 80082a0:	a904      	add	r1, sp, #16
 80082a2:	f7fc f94f 	bl	8004544 <_printf_float>
 80082a6:	1c42      	adds	r2, r0, #1
 80082a8:	4606      	mov	r6, r0
 80082aa:	d1d6      	bne.n	800825a <_svfiprintf_r+0x176>
 80082ac:	89ab      	ldrh	r3, [r5, #12]
 80082ae:	065b      	lsls	r3, r3, #25
 80082b0:	f53f af2c 	bmi.w	800810c <_svfiprintf_r+0x28>
 80082b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082b6:	b01d      	add	sp, #116	; 0x74
 80082b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082bc:	ab03      	add	r3, sp, #12
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	462a      	mov	r2, r5
 80082c2:	4638      	mov	r0, r7
 80082c4:	4b06      	ldr	r3, [pc, #24]	; (80082e0 <_svfiprintf_r+0x1fc>)
 80082c6:	a904      	add	r1, sp, #16
 80082c8:	f7fc fbd8 	bl	8004a7c <_printf_i>
 80082cc:	e7eb      	b.n	80082a6 <_svfiprintf_r+0x1c2>
 80082ce:	bf00      	nop
 80082d0:	08009154 	.word	0x08009154
 80082d4:	0800915a 	.word	0x0800915a
 80082d8:	0800915e 	.word	0x0800915e
 80082dc:	08004545 	.word	0x08004545
 80082e0:	0800802d 	.word	0x0800802d

080082e4 <nan>:
 80082e4:	2000      	movs	r0, #0
 80082e6:	4901      	ldr	r1, [pc, #4]	; (80082ec <nan+0x8>)
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	7ff80000 	.word	0x7ff80000

080082f0 <__sread>:
 80082f0:	b510      	push	{r4, lr}
 80082f2:	460c      	mov	r4, r1
 80082f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f8:	f000 fa84 	bl	8008804 <_read_r>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	bfab      	itete	ge
 8008300:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008302:	89a3      	ldrhlt	r3, [r4, #12]
 8008304:	181b      	addge	r3, r3, r0
 8008306:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800830a:	bfac      	ite	ge
 800830c:	6563      	strge	r3, [r4, #84]	; 0x54
 800830e:	81a3      	strhlt	r3, [r4, #12]
 8008310:	bd10      	pop	{r4, pc}

08008312 <__swrite>:
 8008312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008316:	461f      	mov	r7, r3
 8008318:	898b      	ldrh	r3, [r1, #12]
 800831a:	4605      	mov	r5, r0
 800831c:	05db      	lsls	r3, r3, #23
 800831e:	460c      	mov	r4, r1
 8008320:	4616      	mov	r6, r2
 8008322:	d505      	bpl.n	8008330 <__swrite+0x1e>
 8008324:	2302      	movs	r3, #2
 8008326:	2200      	movs	r2, #0
 8008328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800832c:	f000 f8b8 	bl	80084a0 <_lseek_r>
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	4632      	mov	r2, r6
 8008334:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008338:	81a3      	strh	r3, [r4, #12]
 800833a:	4628      	mov	r0, r5
 800833c:	463b      	mov	r3, r7
 800833e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008346:	f000 b837 	b.w	80083b8 <_write_r>

0800834a <__sseek>:
 800834a:	b510      	push	{r4, lr}
 800834c:	460c      	mov	r4, r1
 800834e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008352:	f000 f8a5 	bl	80084a0 <_lseek_r>
 8008356:	1c43      	adds	r3, r0, #1
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	bf15      	itete	ne
 800835c:	6560      	strne	r0, [r4, #84]	; 0x54
 800835e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008366:	81a3      	strheq	r3, [r4, #12]
 8008368:	bf18      	it	ne
 800836a:	81a3      	strhne	r3, [r4, #12]
 800836c:	bd10      	pop	{r4, pc}

0800836e <__sclose>:
 800836e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008372:	f000 b851 	b.w	8008418 <_close_r>

08008376 <strncmp>:
 8008376:	4603      	mov	r3, r0
 8008378:	b510      	push	{r4, lr}
 800837a:	b172      	cbz	r2, 800839a <strncmp+0x24>
 800837c:	3901      	subs	r1, #1
 800837e:	1884      	adds	r4, r0, r2
 8008380:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008384:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008388:	4290      	cmp	r0, r2
 800838a:	d101      	bne.n	8008390 <strncmp+0x1a>
 800838c:	42a3      	cmp	r3, r4
 800838e:	d101      	bne.n	8008394 <strncmp+0x1e>
 8008390:	1a80      	subs	r0, r0, r2
 8008392:	bd10      	pop	{r4, pc}
 8008394:	2800      	cmp	r0, #0
 8008396:	d1f3      	bne.n	8008380 <strncmp+0xa>
 8008398:	e7fa      	b.n	8008390 <strncmp+0x1a>
 800839a:	4610      	mov	r0, r2
 800839c:	e7f9      	b.n	8008392 <strncmp+0x1c>

0800839e <__ascii_wctomb>:
 800839e:	4603      	mov	r3, r0
 80083a0:	4608      	mov	r0, r1
 80083a2:	b141      	cbz	r1, 80083b6 <__ascii_wctomb+0x18>
 80083a4:	2aff      	cmp	r2, #255	; 0xff
 80083a6:	d904      	bls.n	80083b2 <__ascii_wctomb+0x14>
 80083a8:	228a      	movs	r2, #138	; 0x8a
 80083aa:	f04f 30ff 	mov.w	r0, #4294967295
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	4770      	bx	lr
 80083b2:	2001      	movs	r0, #1
 80083b4:	700a      	strb	r2, [r1, #0]
 80083b6:	4770      	bx	lr

080083b8 <_write_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4604      	mov	r4, r0
 80083bc:	4608      	mov	r0, r1
 80083be:	4611      	mov	r1, r2
 80083c0:	2200      	movs	r2, #0
 80083c2:	4d05      	ldr	r5, [pc, #20]	; (80083d8 <_write_r+0x20>)
 80083c4:	602a      	str	r2, [r5, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	f7f9 fff0 	bl	80023ac <_write>
 80083cc:	1c43      	adds	r3, r0, #1
 80083ce:	d102      	bne.n	80083d6 <_write_r+0x1e>
 80083d0:	682b      	ldr	r3, [r5, #0]
 80083d2:	b103      	cbz	r3, 80083d6 <_write_r+0x1e>
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	bd38      	pop	{r3, r4, r5, pc}
 80083d8:	20000524 	.word	0x20000524

080083dc <__assert_func>:
 80083dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083de:	4614      	mov	r4, r2
 80083e0:	461a      	mov	r2, r3
 80083e2:	4b09      	ldr	r3, [pc, #36]	; (8008408 <__assert_func+0x2c>)
 80083e4:	4605      	mov	r5, r0
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68d8      	ldr	r0, [r3, #12]
 80083ea:	b14c      	cbz	r4, 8008400 <__assert_func+0x24>
 80083ec:	4b07      	ldr	r3, [pc, #28]	; (800840c <__assert_func+0x30>)
 80083ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083f2:	9100      	str	r1, [sp, #0]
 80083f4:	462b      	mov	r3, r5
 80083f6:	4906      	ldr	r1, [pc, #24]	; (8008410 <__assert_func+0x34>)
 80083f8:	f000 f81e 	bl	8008438 <fiprintf>
 80083fc:	f000 fad4 	bl	80089a8 <abort>
 8008400:	4b04      	ldr	r3, [pc, #16]	; (8008414 <__assert_func+0x38>)
 8008402:	461c      	mov	r4, r3
 8008404:	e7f3      	b.n	80083ee <__assert_func+0x12>
 8008406:	bf00      	nop
 8008408:	2000028c 	.word	0x2000028c
 800840c:	08009165 	.word	0x08009165
 8008410:	08009172 	.word	0x08009172
 8008414:	080091a0 	.word	0x080091a0

08008418 <_close_r>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	2300      	movs	r3, #0
 800841c:	4d05      	ldr	r5, [pc, #20]	; (8008434 <_close_r+0x1c>)
 800841e:	4604      	mov	r4, r0
 8008420:	4608      	mov	r0, r1
 8008422:	602b      	str	r3, [r5, #0]
 8008424:	f7f9 ffde 	bl	80023e4 <_close>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	d102      	bne.n	8008432 <_close_r+0x1a>
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	b103      	cbz	r3, 8008432 <_close_r+0x1a>
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	bd38      	pop	{r3, r4, r5, pc}
 8008434:	20000524 	.word	0x20000524

08008438 <fiprintf>:
 8008438:	b40e      	push	{r1, r2, r3}
 800843a:	b503      	push	{r0, r1, lr}
 800843c:	4601      	mov	r1, r0
 800843e:	ab03      	add	r3, sp, #12
 8008440:	4805      	ldr	r0, [pc, #20]	; (8008458 <fiprintf+0x20>)
 8008442:	f853 2b04 	ldr.w	r2, [r3], #4
 8008446:	6800      	ldr	r0, [r0, #0]
 8008448:	9301      	str	r3, [sp, #4]
 800844a:	f000 f8ab 	bl	80085a4 <_vfiprintf_r>
 800844e:	b002      	add	sp, #8
 8008450:	f85d eb04 	ldr.w	lr, [sp], #4
 8008454:	b003      	add	sp, #12
 8008456:	4770      	bx	lr
 8008458:	2000028c 	.word	0x2000028c

0800845c <_fstat_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	2300      	movs	r3, #0
 8008460:	4d06      	ldr	r5, [pc, #24]	; (800847c <_fstat_r+0x20>)
 8008462:	4604      	mov	r4, r0
 8008464:	4608      	mov	r0, r1
 8008466:	4611      	mov	r1, r2
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	f7f9 ffc6 	bl	80023fa <_fstat>
 800846e:	1c43      	adds	r3, r0, #1
 8008470:	d102      	bne.n	8008478 <_fstat_r+0x1c>
 8008472:	682b      	ldr	r3, [r5, #0]
 8008474:	b103      	cbz	r3, 8008478 <_fstat_r+0x1c>
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	bd38      	pop	{r3, r4, r5, pc}
 800847a:	bf00      	nop
 800847c:	20000524 	.word	0x20000524

08008480 <_isatty_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	2300      	movs	r3, #0
 8008484:	4d05      	ldr	r5, [pc, #20]	; (800849c <_isatty_r+0x1c>)
 8008486:	4604      	mov	r4, r0
 8008488:	4608      	mov	r0, r1
 800848a:	602b      	str	r3, [r5, #0]
 800848c:	f7f9 ffc4 	bl	8002418 <_isatty>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d102      	bne.n	800849a <_isatty_r+0x1a>
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	b103      	cbz	r3, 800849a <_isatty_r+0x1a>
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	20000524 	.word	0x20000524

080084a0 <_lseek_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4604      	mov	r4, r0
 80084a4:	4608      	mov	r0, r1
 80084a6:	4611      	mov	r1, r2
 80084a8:	2200      	movs	r2, #0
 80084aa:	4d05      	ldr	r5, [pc, #20]	; (80084c0 <_lseek_r+0x20>)
 80084ac:	602a      	str	r2, [r5, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f7f9 ffbc 	bl	800242c <_lseek>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	d102      	bne.n	80084be <_lseek_r+0x1e>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	b103      	cbz	r3, 80084be <_lseek_r+0x1e>
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	20000524 	.word	0x20000524

080084c4 <memmove>:
 80084c4:	4288      	cmp	r0, r1
 80084c6:	b510      	push	{r4, lr}
 80084c8:	eb01 0402 	add.w	r4, r1, r2
 80084cc:	d902      	bls.n	80084d4 <memmove+0x10>
 80084ce:	4284      	cmp	r4, r0
 80084d0:	4623      	mov	r3, r4
 80084d2:	d807      	bhi.n	80084e4 <memmove+0x20>
 80084d4:	1e43      	subs	r3, r0, #1
 80084d6:	42a1      	cmp	r1, r4
 80084d8:	d008      	beq.n	80084ec <memmove+0x28>
 80084da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084e2:	e7f8      	b.n	80084d6 <memmove+0x12>
 80084e4:	4601      	mov	r1, r0
 80084e6:	4402      	add	r2, r0
 80084e8:	428a      	cmp	r2, r1
 80084ea:	d100      	bne.n	80084ee <memmove+0x2a>
 80084ec:	bd10      	pop	{r4, pc}
 80084ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084f6:	e7f7      	b.n	80084e8 <memmove+0x24>

080084f8 <_realloc_r>:
 80084f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084fc:	4680      	mov	r8, r0
 80084fe:	4614      	mov	r4, r2
 8008500:	460e      	mov	r6, r1
 8008502:	b921      	cbnz	r1, 800850e <_realloc_r+0x16>
 8008504:	4611      	mov	r1, r2
 8008506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800850a:	f7fb bf09 	b.w	8004320 <_malloc_r>
 800850e:	b92a      	cbnz	r2, 800851c <_realloc_r+0x24>
 8008510:	f7fb fe9e 	bl	8004250 <_free_r>
 8008514:	4625      	mov	r5, r4
 8008516:	4628      	mov	r0, r5
 8008518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800851c:	f000 fa4b 	bl	80089b6 <_malloc_usable_size_r>
 8008520:	4284      	cmp	r4, r0
 8008522:	4607      	mov	r7, r0
 8008524:	d802      	bhi.n	800852c <_realloc_r+0x34>
 8008526:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800852a:	d812      	bhi.n	8008552 <_realloc_r+0x5a>
 800852c:	4621      	mov	r1, r4
 800852e:	4640      	mov	r0, r8
 8008530:	f7fb fef6 	bl	8004320 <_malloc_r>
 8008534:	4605      	mov	r5, r0
 8008536:	2800      	cmp	r0, #0
 8008538:	d0ed      	beq.n	8008516 <_realloc_r+0x1e>
 800853a:	42bc      	cmp	r4, r7
 800853c:	4622      	mov	r2, r4
 800853e:	4631      	mov	r1, r6
 8008540:	bf28      	it	cs
 8008542:	463a      	movcs	r2, r7
 8008544:	f7fb fe5a 	bl	80041fc <memcpy>
 8008548:	4631      	mov	r1, r6
 800854a:	4640      	mov	r0, r8
 800854c:	f7fb fe80 	bl	8004250 <_free_r>
 8008550:	e7e1      	b.n	8008516 <_realloc_r+0x1e>
 8008552:	4635      	mov	r5, r6
 8008554:	e7df      	b.n	8008516 <_realloc_r+0x1e>

08008556 <__sfputc_r>:
 8008556:	6893      	ldr	r3, [r2, #8]
 8008558:	b410      	push	{r4}
 800855a:	3b01      	subs	r3, #1
 800855c:	2b00      	cmp	r3, #0
 800855e:	6093      	str	r3, [r2, #8]
 8008560:	da07      	bge.n	8008572 <__sfputc_r+0x1c>
 8008562:	6994      	ldr	r4, [r2, #24]
 8008564:	42a3      	cmp	r3, r4
 8008566:	db01      	blt.n	800856c <__sfputc_r+0x16>
 8008568:	290a      	cmp	r1, #10
 800856a:	d102      	bne.n	8008572 <__sfputc_r+0x1c>
 800856c:	bc10      	pop	{r4}
 800856e:	f000 b95b 	b.w	8008828 <__swbuf_r>
 8008572:	6813      	ldr	r3, [r2, #0]
 8008574:	1c58      	adds	r0, r3, #1
 8008576:	6010      	str	r0, [r2, #0]
 8008578:	7019      	strb	r1, [r3, #0]
 800857a:	4608      	mov	r0, r1
 800857c:	bc10      	pop	{r4}
 800857e:	4770      	bx	lr

08008580 <__sfputs_r>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	4606      	mov	r6, r0
 8008584:	460f      	mov	r7, r1
 8008586:	4614      	mov	r4, r2
 8008588:	18d5      	adds	r5, r2, r3
 800858a:	42ac      	cmp	r4, r5
 800858c:	d101      	bne.n	8008592 <__sfputs_r+0x12>
 800858e:	2000      	movs	r0, #0
 8008590:	e007      	b.n	80085a2 <__sfputs_r+0x22>
 8008592:	463a      	mov	r2, r7
 8008594:	4630      	mov	r0, r6
 8008596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800859a:	f7ff ffdc 	bl	8008556 <__sfputc_r>
 800859e:	1c43      	adds	r3, r0, #1
 80085a0:	d1f3      	bne.n	800858a <__sfputs_r+0xa>
 80085a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085a4 <_vfiprintf_r>:
 80085a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a8:	460d      	mov	r5, r1
 80085aa:	4614      	mov	r4, r2
 80085ac:	4698      	mov	r8, r3
 80085ae:	4606      	mov	r6, r0
 80085b0:	b09d      	sub	sp, #116	; 0x74
 80085b2:	b118      	cbz	r0, 80085bc <_vfiprintf_r+0x18>
 80085b4:	6983      	ldr	r3, [r0, #24]
 80085b6:	b90b      	cbnz	r3, 80085bc <_vfiprintf_r+0x18>
 80085b8:	f7fe fbe6 	bl	8006d88 <__sinit>
 80085bc:	4b89      	ldr	r3, [pc, #548]	; (80087e4 <_vfiprintf_r+0x240>)
 80085be:	429d      	cmp	r5, r3
 80085c0:	d11b      	bne.n	80085fa <_vfiprintf_r+0x56>
 80085c2:	6875      	ldr	r5, [r6, #4]
 80085c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085c6:	07d9      	lsls	r1, r3, #31
 80085c8:	d405      	bmi.n	80085d6 <_vfiprintf_r+0x32>
 80085ca:	89ab      	ldrh	r3, [r5, #12]
 80085cc:	059a      	lsls	r2, r3, #22
 80085ce:	d402      	bmi.n	80085d6 <_vfiprintf_r+0x32>
 80085d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085d2:	f7fb fe08 	bl	80041e6 <__retarget_lock_acquire_recursive>
 80085d6:	89ab      	ldrh	r3, [r5, #12]
 80085d8:	071b      	lsls	r3, r3, #28
 80085da:	d501      	bpl.n	80085e0 <_vfiprintf_r+0x3c>
 80085dc:	692b      	ldr	r3, [r5, #16]
 80085de:	b9eb      	cbnz	r3, 800861c <_vfiprintf_r+0x78>
 80085e0:	4629      	mov	r1, r5
 80085e2:	4630      	mov	r0, r6
 80085e4:	f000 f972 	bl	80088cc <__swsetup_r>
 80085e8:	b1c0      	cbz	r0, 800861c <_vfiprintf_r+0x78>
 80085ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085ec:	07dc      	lsls	r4, r3, #31
 80085ee:	d50e      	bpl.n	800860e <_vfiprintf_r+0x6a>
 80085f0:	f04f 30ff 	mov.w	r0, #4294967295
 80085f4:	b01d      	add	sp, #116	; 0x74
 80085f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fa:	4b7b      	ldr	r3, [pc, #492]	; (80087e8 <_vfiprintf_r+0x244>)
 80085fc:	429d      	cmp	r5, r3
 80085fe:	d101      	bne.n	8008604 <_vfiprintf_r+0x60>
 8008600:	68b5      	ldr	r5, [r6, #8]
 8008602:	e7df      	b.n	80085c4 <_vfiprintf_r+0x20>
 8008604:	4b79      	ldr	r3, [pc, #484]	; (80087ec <_vfiprintf_r+0x248>)
 8008606:	429d      	cmp	r5, r3
 8008608:	bf08      	it	eq
 800860a:	68f5      	ldreq	r5, [r6, #12]
 800860c:	e7da      	b.n	80085c4 <_vfiprintf_r+0x20>
 800860e:	89ab      	ldrh	r3, [r5, #12]
 8008610:	0598      	lsls	r0, r3, #22
 8008612:	d4ed      	bmi.n	80085f0 <_vfiprintf_r+0x4c>
 8008614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008616:	f7fb fde7 	bl	80041e8 <__retarget_lock_release_recursive>
 800861a:	e7e9      	b.n	80085f0 <_vfiprintf_r+0x4c>
 800861c:	2300      	movs	r3, #0
 800861e:	9309      	str	r3, [sp, #36]	; 0x24
 8008620:	2320      	movs	r3, #32
 8008622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008626:	2330      	movs	r3, #48	; 0x30
 8008628:	f04f 0901 	mov.w	r9, #1
 800862c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008630:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80087f0 <_vfiprintf_r+0x24c>
 8008634:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008638:	4623      	mov	r3, r4
 800863a:	469a      	mov	sl, r3
 800863c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008640:	b10a      	cbz	r2, 8008646 <_vfiprintf_r+0xa2>
 8008642:	2a25      	cmp	r2, #37	; 0x25
 8008644:	d1f9      	bne.n	800863a <_vfiprintf_r+0x96>
 8008646:	ebba 0b04 	subs.w	fp, sl, r4
 800864a:	d00b      	beq.n	8008664 <_vfiprintf_r+0xc0>
 800864c:	465b      	mov	r3, fp
 800864e:	4622      	mov	r2, r4
 8008650:	4629      	mov	r1, r5
 8008652:	4630      	mov	r0, r6
 8008654:	f7ff ff94 	bl	8008580 <__sfputs_r>
 8008658:	3001      	adds	r0, #1
 800865a:	f000 80aa 	beq.w	80087b2 <_vfiprintf_r+0x20e>
 800865e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008660:	445a      	add	r2, fp
 8008662:	9209      	str	r2, [sp, #36]	; 0x24
 8008664:	f89a 3000 	ldrb.w	r3, [sl]
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 80a2 	beq.w	80087b2 <_vfiprintf_r+0x20e>
 800866e:	2300      	movs	r3, #0
 8008670:	f04f 32ff 	mov.w	r2, #4294967295
 8008674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008678:	f10a 0a01 	add.w	sl, sl, #1
 800867c:	9304      	str	r3, [sp, #16]
 800867e:	9307      	str	r3, [sp, #28]
 8008680:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008684:	931a      	str	r3, [sp, #104]	; 0x68
 8008686:	4654      	mov	r4, sl
 8008688:	2205      	movs	r2, #5
 800868a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800868e:	4858      	ldr	r0, [pc, #352]	; (80087f0 <_vfiprintf_r+0x24c>)
 8008690:	f7fe fffa 	bl	8007688 <memchr>
 8008694:	9a04      	ldr	r2, [sp, #16]
 8008696:	b9d8      	cbnz	r0, 80086d0 <_vfiprintf_r+0x12c>
 8008698:	06d1      	lsls	r1, r2, #27
 800869a:	bf44      	itt	mi
 800869c:	2320      	movmi	r3, #32
 800869e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086a2:	0713      	lsls	r3, r2, #28
 80086a4:	bf44      	itt	mi
 80086a6:	232b      	movmi	r3, #43	; 0x2b
 80086a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086ac:	f89a 3000 	ldrb.w	r3, [sl]
 80086b0:	2b2a      	cmp	r3, #42	; 0x2a
 80086b2:	d015      	beq.n	80086e0 <_vfiprintf_r+0x13c>
 80086b4:	4654      	mov	r4, sl
 80086b6:	2000      	movs	r0, #0
 80086b8:	f04f 0c0a 	mov.w	ip, #10
 80086bc:	9a07      	ldr	r2, [sp, #28]
 80086be:	4621      	mov	r1, r4
 80086c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086c4:	3b30      	subs	r3, #48	; 0x30
 80086c6:	2b09      	cmp	r3, #9
 80086c8:	d94e      	bls.n	8008768 <_vfiprintf_r+0x1c4>
 80086ca:	b1b0      	cbz	r0, 80086fa <_vfiprintf_r+0x156>
 80086cc:	9207      	str	r2, [sp, #28]
 80086ce:	e014      	b.n	80086fa <_vfiprintf_r+0x156>
 80086d0:	eba0 0308 	sub.w	r3, r0, r8
 80086d4:	fa09 f303 	lsl.w	r3, r9, r3
 80086d8:	4313      	orrs	r3, r2
 80086da:	46a2      	mov	sl, r4
 80086dc:	9304      	str	r3, [sp, #16]
 80086de:	e7d2      	b.n	8008686 <_vfiprintf_r+0xe2>
 80086e0:	9b03      	ldr	r3, [sp, #12]
 80086e2:	1d19      	adds	r1, r3, #4
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	9103      	str	r1, [sp, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	bfbb      	ittet	lt
 80086ec:	425b      	neglt	r3, r3
 80086ee:	f042 0202 	orrlt.w	r2, r2, #2
 80086f2:	9307      	strge	r3, [sp, #28]
 80086f4:	9307      	strlt	r3, [sp, #28]
 80086f6:	bfb8      	it	lt
 80086f8:	9204      	strlt	r2, [sp, #16]
 80086fa:	7823      	ldrb	r3, [r4, #0]
 80086fc:	2b2e      	cmp	r3, #46	; 0x2e
 80086fe:	d10c      	bne.n	800871a <_vfiprintf_r+0x176>
 8008700:	7863      	ldrb	r3, [r4, #1]
 8008702:	2b2a      	cmp	r3, #42	; 0x2a
 8008704:	d135      	bne.n	8008772 <_vfiprintf_r+0x1ce>
 8008706:	9b03      	ldr	r3, [sp, #12]
 8008708:	3402      	adds	r4, #2
 800870a:	1d1a      	adds	r2, r3, #4
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	9203      	str	r2, [sp, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	bfb8      	it	lt
 8008714:	f04f 33ff 	movlt.w	r3, #4294967295
 8008718:	9305      	str	r3, [sp, #20]
 800871a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80087f4 <_vfiprintf_r+0x250>
 800871e:	2203      	movs	r2, #3
 8008720:	4650      	mov	r0, sl
 8008722:	7821      	ldrb	r1, [r4, #0]
 8008724:	f7fe ffb0 	bl	8007688 <memchr>
 8008728:	b140      	cbz	r0, 800873c <_vfiprintf_r+0x198>
 800872a:	2340      	movs	r3, #64	; 0x40
 800872c:	eba0 000a 	sub.w	r0, r0, sl
 8008730:	fa03 f000 	lsl.w	r0, r3, r0
 8008734:	9b04      	ldr	r3, [sp, #16]
 8008736:	3401      	adds	r4, #1
 8008738:	4303      	orrs	r3, r0
 800873a:	9304      	str	r3, [sp, #16]
 800873c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008740:	2206      	movs	r2, #6
 8008742:	482d      	ldr	r0, [pc, #180]	; (80087f8 <_vfiprintf_r+0x254>)
 8008744:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008748:	f7fe ff9e 	bl	8007688 <memchr>
 800874c:	2800      	cmp	r0, #0
 800874e:	d03f      	beq.n	80087d0 <_vfiprintf_r+0x22c>
 8008750:	4b2a      	ldr	r3, [pc, #168]	; (80087fc <_vfiprintf_r+0x258>)
 8008752:	bb1b      	cbnz	r3, 800879c <_vfiprintf_r+0x1f8>
 8008754:	9b03      	ldr	r3, [sp, #12]
 8008756:	3307      	adds	r3, #7
 8008758:	f023 0307 	bic.w	r3, r3, #7
 800875c:	3308      	adds	r3, #8
 800875e:	9303      	str	r3, [sp, #12]
 8008760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008762:	443b      	add	r3, r7
 8008764:	9309      	str	r3, [sp, #36]	; 0x24
 8008766:	e767      	b.n	8008638 <_vfiprintf_r+0x94>
 8008768:	460c      	mov	r4, r1
 800876a:	2001      	movs	r0, #1
 800876c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008770:	e7a5      	b.n	80086be <_vfiprintf_r+0x11a>
 8008772:	2300      	movs	r3, #0
 8008774:	f04f 0c0a 	mov.w	ip, #10
 8008778:	4619      	mov	r1, r3
 800877a:	3401      	adds	r4, #1
 800877c:	9305      	str	r3, [sp, #20]
 800877e:	4620      	mov	r0, r4
 8008780:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008784:	3a30      	subs	r2, #48	; 0x30
 8008786:	2a09      	cmp	r2, #9
 8008788:	d903      	bls.n	8008792 <_vfiprintf_r+0x1ee>
 800878a:	2b00      	cmp	r3, #0
 800878c:	d0c5      	beq.n	800871a <_vfiprintf_r+0x176>
 800878e:	9105      	str	r1, [sp, #20]
 8008790:	e7c3      	b.n	800871a <_vfiprintf_r+0x176>
 8008792:	4604      	mov	r4, r0
 8008794:	2301      	movs	r3, #1
 8008796:	fb0c 2101 	mla	r1, ip, r1, r2
 800879a:	e7f0      	b.n	800877e <_vfiprintf_r+0x1da>
 800879c:	ab03      	add	r3, sp, #12
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	462a      	mov	r2, r5
 80087a2:	4630      	mov	r0, r6
 80087a4:	4b16      	ldr	r3, [pc, #88]	; (8008800 <_vfiprintf_r+0x25c>)
 80087a6:	a904      	add	r1, sp, #16
 80087a8:	f7fb fecc 	bl	8004544 <_printf_float>
 80087ac:	4607      	mov	r7, r0
 80087ae:	1c78      	adds	r0, r7, #1
 80087b0:	d1d6      	bne.n	8008760 <_vfiprintf_r+0x1bc>
 80087b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087b4:	07d9      	lsls	r1, r3, #31
 80087b6:	d405      	bmi.n	80087c4 <_vfiprintf_r+0x220>
 80087b8:	89ab      	ldrh	r3, [r5, #12]
 80087ba:	059a      	lsls	r2, r3, #22
 80087bc:	d402      	bmi.n	80087c4 <_vfiprintf_r+0x220>
 80087be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087c0:	f7fb fd12 	bl	80041e8 <__retarget_lock_release_recursive>
 80087c4:	89ab      	ldrh	r3, [r5, #12]
 80087c6:	065b      	lsls	r3, r3, #25
 80087c8:	f53f af12 	bmi.w	80085f0 <_vfiprintf_r+0x4c>
 80087cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087ce:	e711      	b.n	80085f4 <_vfiprintf_r+0x50>
 80087d0:	ab03      	add	r3, sp, #12
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	462a      	mov	r2, r5
 80087d6:	4630      	mov	r0, r6
 80087d8:	4b09      	ldr	r3, [pc, #36]	; (8008800 <_vfiprintf_r+0x25c>)
 80087da:	a904      	add	r1, sp, #16
 80087dc:	f7fc f94e 	bl	8004a7c <_printf_i>
 80087e0:	e7e4      	b.n	80087ac <_vfiprintf_r+0x208>
 80087e2:	bf00      	nop
 80087e4:	08008f3c 	.word	0x08008f3c
 80087e8:	08008f5c 	.word	0x08008f5c
 80087ec:	08008f1c 	.word	0x08008f1c
 80087f0:	08009154 	.word	0x08009154
 80087f4:	0800915a 	.word	0x0800915a
 80087f8:	0800915e 	.word	0x0800915e
 80087fc:	08004545 	.word	0x08004545
 8008800:	08008581 	.word	0x08008581

08008804 <_read_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	4604      	mov	r4, r0
 8008808:	4608      	mov	r0, r1
 800880a:	4611      	mov	r1, r2
 800880c:	2200      	movs	r2, #0
 800880e:	4d05      	ldr	r5, [pc, #20]	; (8008824 <_read_r+0x20>)
 8008810:	602a      	str	r2, [r5, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	f7f9 fdad 	bl	8002372 <_read>
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d102      	bne.n	8008822 <_read_r+0x1e>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	b103      	cbz	r3, 8008822 <_read_r+0x1e>
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	20000524 	.word	0x20000524

08008828 <__swbuf_r>:
 8008828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882a:	460e      	mov	r6, r1
 800882c:	4614      	mov	r4, r2
 800882e:	4605      	mov	r5, r0
 8008830:	b118      	cbz	r0, 800883a <__swbuf_r+0x12>
 8008832:	6983      	ldr	r3, [r0, #24]
 8008834:	b90b      	cbnz	r3, 800883a <__swbuf_r+0x12>
 8008836:	f7fe faa7 	bl	8006d88 <__sinit>
 800883a:	4b21      	ldr	r3, [pc, #132]	; (80088c0 <__swbuf_r+0x98>)
 800883c:	429c      	cmp	r4, r3
 800883e:	d12b      	bne.n	8008898 <__swbuf_r+0x70>
 8008840:	686c      	ldr	r4, [r5, #4]
 8008842:	69a3      	ldr	r3, [r4, #24]
 8008844:	60a3      	str	r3, [r4, #8]
 8008846:	89a3      	ldrh	r3, [r4, #12]
 8008848:	071a      	lsls	r2, r3, #28
 800884a:	d52f      	bpl.n	80088ac <__swbuf_r+0x84>
 800884c:	6923      	ldr	r3, [r4, #16]
 800884e:	b36b      	cbz	r3, 80088ac <__swbuf_r+0x84>
 8008850:	6923      	ldr	r3, [r4, #16]
 8008852:	6820      	ldr	r0, [r4, #0]
 8008854:	b2f6      	uxtb	r6, r6
 8008856:	1ac0      	subs	r0, r0, r3
 8008858:	6963      	ldr	r3, [r4, #20]
 800885a:	4637      	mov	r7, r6
 800885c:	4283      	cmp	r3, r0
 800885e:	dc04      	bgt.n	800886a <__swbuf_r+0x42>
 8008860:	4621      	mov	r1, r4
 8008862:	4628      	mov	r0, r5
 8008864:	f7fe f9fc 	bl	8006c60 <_fflush_r>
 8008868:	bb30      	cbnz	r0, 80088b8 <__swbuf_r+0x90>
 800886a:	68a3      	ldr	r3, [r4, #8]
 800886c:	3001      	adds	r0, #1
 800886e:	3b01      	subs	r3, #1
 8008870:	60a3      	str	r3, [r4, #8]
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	1c5a      	adds	r2, r3, #1
 8008876:	6022      	str	r2, [r4, #0]
 8008878:	701e      	strb	r6, [r3, #0]
 800887a:	6963      	ldr	r3, [r4, #20]
 800887c:	4283      	cmp	r3, r0
 800887e:	d004      	beq.n	800888a <__swbuf_r+0x62>
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	07db      	lsls	r3, r3, #31
 8008884:	d506      	bpl.n	8008894 <__swbuf_r+0x6c>
 8008886:	2e0a      	cmp	r6, #10
 8008888:	d104      	bne.n	8008894 <__swbuf_r+0x6c>
 800888a:	4621      	mov	r1, r4
 800888c:	4628      	mov	r0, r5
 800888e:	f7fe f9e7 	bl	8006c60 <_fflush_r>
 8008892:	b988      	cbnz	r0, 80088b8 <__swbuf_r+0x90>
 8008894:	4638      	mov	r0, r7
 8008896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008898:	4b0a      	ldr	r3, [pc, #40]	; (80088c4 <__swbuf_r+0x9c>)
 800889a:	429c      	cmp	r4, r3
 800889c:	d101      	bne.n	80088a2 <__swbuf_r+0x7a>
 800889e:	68ac      	ldr	r4, [r5, #8]
 80088a0:	e7cf      	b.n	8008842 <__swbuf_r+0x1a>
 80088a2:	4b09      	ldr	r3, [pc, #36]	; (80088c8 <__swbuf_r+0xa0>)
 80088a4:	429c      	cmp	r4, r3
 80088a6:	bf08      	it	eq
 80088a8:	68ec      	ldreq	r4, [r5, #12]
 80088aa:	e7ca      	b.n	8008842 <__swbuf_r+0x1a>
 80088ac:	4621      	mov	r1, r4
 80088ae:	4628      	mov	r0, r5
 80088b0:	f000 f80c 	bl	80088cc <__swsetup_r>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d0cb      	beq.n	8008850 <__swbuf_r+0x28>
 80088b8:	f04f 37ff 	mov.w	r7, #4294967295
 80088bc:	e7ea      	b.n	8008894 <__swbuf_r+0x6c>
 80088be:	bf00      	nop
 80088c0:	08008f3c 	.word	0x08008f3c
 80088c4:	08008f5c 	.word	0x08008f5c
 80088c8:	08008f1c 	.word	0x08008f1c

080088cc <__swsetup_r>:
 80088cc:	4b32      	ldr	r3, [pc, #200]	; (8008998 <__swsetup_r+0xcc>)
 80088ce:	b570      	push	{r4, r5, r6, lr}
 80088d0:	681d      	ldr	r5, [r3, #0]
 80088d2:	4606      	mov	r6, r0
 80088d4:	460c      	mov	r4, r1
 80088d6:	b125      	cbz	r5, 80088e2 <__swsetup_r+0x16>
 80088d8:	69ab      	ldr	r3, [r5, #24]
 80088da:	b913      	cbnz	r3, 80088e2 <__swsetup_r+0x16>
 80088dc:	4628      	mov	r0, r5
 80088de:	f7fe fa53 	bl	8006d88 <__sinit>
 80088e2:	4b2e      	ldr	r3, [pc, #184]	; (800899c <__swsetup_r+0xd0>)
 80088e4:	429c      	cmp	r4, r3
 80088e6:	d10f      	bne.n	8008908 <__swsetup_r+0x3c>
 80088e8:	686c      	ldr	r4, [r5, #4]
 80088ea:	89a3      	ldrh	r3, [r4, #12]
 80088ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088f0:	0719      	lsls	r1, r3, #28
 80088f2:	d42c      	bmi.n	800894e <__swsetup_r+0x82>
 80088f4:	06dd      	lsls	r5, r3, #27
 80088f6:	d411      	bmi.n	800891c <__swsetup_r+0x50>
 80088f8:	2309      	movs	r3, #9
 80088fa:	6033      	str	r3, [r6, #0]
 80088fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008900:	f04f 30ff 	mov.w	r0, #4294967295
 8008904:	81a3      	strh	r3, [r4, #12]
 8008906:	e03e      	b.n	8008986 <__swsetup_r+0xba>
 8008908:	4b25      	ldr	r3, [pc, #148]	; (80089a0 <__swsetup_r+0xd4>)
 800890a:	429c      	cmp	r4, r3
 800890c:	d101      	bne.n	8008912 <__swsetup_r+0x46>
 800890e:	68ac      	ldr	r4, [r5, #8]
 8008910:	e7eb      	b.n	80088ea <__swsetup_r+0x1e>
 8008912:	4b24      	ldr	r3, [pc, #144]	; (80089a4 <__swsetup_r+0xd8>)
 8008914:	429c      	cmp	r4, r3
 8008916:	bf08      	it	eq
 8008918:	68ec      	ldreq	r4, [r5, #12]
 800891a:	e7e6      	b.n	80088ea <__swsetup_r+0x1e>
 800891c:	0758      	lsls	r0, r3, #29
 800891e:	d512      	bpl.n	8008946 <__swsetup_r+0x7a>
 8008920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008922:	b141      	cbz	r1, 8008936 <__swsetup_r+0x6a>
 8008924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008928:	4299      	cmp	r1, r3
 800892a:	d002      	beq.n	8008932 <__swsetup_r+0x66>
 800892c:	4630      	mov	r0, r6
 800892e:	f7fb fc8f 	bl	8004250 <_free_r>
 8008932:	2300      	movs	r3, #0
 8008934:	6363      	str	r3, [r4, #52]	; 0x34
 8008936:	89a3      	ldrh	r3, [r4, #12]
 8008938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800893c:	81a3      	strh	r3, [r4, #12]
 800893e:	2300      	movs	r3, #0
 8008940:	6063      	str	r3, [r4, #4]
 8008942:	6923      	ldr	r3, [r4, #16]
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	f043 0308 	orr.w	r3, r3, #8
 800894c:	81a3      	strh	r3, [r4, #12]
 800894e:	6923      	ldr	r3, [r4, #16]
 8008950:	b94b      	cbnz	r3, 8008966 <__swsetup_r+0x9a>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800895c:	d003      	beq.n	8008966 <__swsetup_r+0x9a>
 800895e:	4621      	mov	r1, r4
 8008960:	4630      	mov	r0, r6
 8008962:	f7fe fe3f 	bl	80075e4 <__smakebuf_r>
 8008966:	89a0      	ldrh	r0, [r4, #12]
 8008968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800896c:	f010 0301 	ands.w	r3, r0, #1
 8008970:	d00a      	beq.n	8008988 <__swsetup_r+0xbc>
 8008972:	2300      	movs	r3, #0
 8008974:	60a3      	str	r3, [r4, #8]
 8008976:	6963      	ldr	r3, [r4, #20]
 8008978:	425b      	negs	r3, r3
 800897a:	61a3      	str	r3, [r4, #24]
 800897c:	6923      	ldr	r3, [r4, #16]
 800897e:	b943      	cbnz	r3, 8008992 <__swsetup_r+0xc6>
 8008980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008984:	d1ba      	bne.n	80088fc <__swsetup_r+0x30>
 8008986:	bd70      	pop	{r4, r5, r6, pc}
 8008988:	0781      	lsls	r1, r0, #30
 800898a:	bf58      	it	pl
 800898c:	6963      	ldrpl	r3, [r4, #20]
 800898e:	60a3      	str	r3, [r4, #8]
 8008990:	e7f4      	b.n	800897c <__swsetup_r+0xb0>
 8008992:	2000      	movs	r0, #0
 8008994:	e7f7      	b.n	8008986 <__swsetup_r+0xba>
 8008996:	bf00      	nop
 8008998:	2000028c 	.word	0x2000028c
 800899c:	08008f3c 	.word	0x08008f3c
 80089a0:	08008f5c 	.word	0x08008f5c
 80089a4:	08008f1c 	.word	0x08008f1c

080089a8 <abort>:
 80089a8:	2006      	movs	r0, #6
 80089aa:	b508      	push	{r3, lr}
 80089ac:	f000 f834 	bl	8008a18 <raise>
 80089b0:	2001      	movs	r0, #1
 80089b2:	f7f9 fcd4 	bl	800235e <_exit>

080089b6 <_malloc_usable_size_r>:
 80089b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ba:	1f18      	subs	r0, r3, #4
 80089bc:	2b00      	cmp	r3, #0
 80089be:	bfbc      	itt	lt
 80089c0:	580b      	ldrlt	r3, [r1, r0]
 80089c2:	18c0      	addlt	r0, r0, r3
 80089c4:	4770      	bx	lr

080089c6 <_raise_r>:
 80089c6:	291f      	cmp	r1, #31
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	4604      	mov	r4, r0
 80089cc:	460d      	mov	r5, r1
 80089ce:	d904      	bls.n	80089da <_raise_r+0x14>
 80089d0:	2316      	movs	r3, #22
 80089d2:	6003      	str	r3, [r0, #0]
 80089d4:	f04f 30ff 	mov.w	r0, #4294967295
 80089d8:	bd38      	pop	{r3, r4, r5, pc}
 80089da:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80089dc:	b112      	cbz	r2, 80089e4 <_raise_r+0x1e>
 80089de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089e2:	b94b      	cbnz	r3, 80089f8 <_raise_r+0x32>
 80089e4:	4620      	mov	r0, r4
 80089e6:	f000 f831 	bl	8008a4c <_getpid_r>
 80089ea:	462a      	mov	r2, r5
 80089ec:	4601      	mov	r1, r0
 80089ee:	4620      	mov	r0, r4
 80089f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089f4:	f000 b818 	b.w	8008a28 <_kill_r>
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d00a      	beq.n	8008a12 <_raise_r+0x4c>
 80089fc:	1c59      	adds	r1, r3, #1
 80089fe:	d103      	bne.n	8008a08 <_raise_r+0x42>
 8008a00:	2316      	movs	r3, #22
 8008a02:	6003      	str	r3, [r0, #0]
 8008a04:	2001      	movs	r0, #1
 8008a06:	e7e7      	b.n	80089d8 <_raise_r+0x12>
 8008a08:	2400      	movs	r4, #0
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a10:	4798      	blx	r3
 8008a12:	2000      	movs	r0, #0
 8008a14:	e7e0      	b.n	80089d8 <_raise_r+0x12>
	...

08008a18 <raise>:
 8008a18:	4b02      	ldr	r3, [pc, #8]	; (8008a24 <raise+0xc>)
 8008a1a:	4601      	mov	r1, r0
 8008a1c:	6818      	ldr	r0, [r3, #0]
 8008a1e:	f7ff bfd2 	b.w	80089c6 <_raise_r>
 8008a22:	bf00      	nop
 8008a24:	2000028c 	.word	0x2000028c

08008a28 <_kill_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	4d06      	ldr	r5, [pc, #24]	; (8008a48 <_kill_r+0x20>)
 8008a2e:	4604      	mov	r4, r0
 8008a30:	4608      	mov	r0, r1
 8008a32:	4611      	mov	r1, r2
 8008a34:	602b      	str	r3, [r5, #0]
 8008a36:	f7f9 fc82 	bl	800233e <_kill>
 8008a3a:	1c43      	adds	r3, r0, #1
 8008a3c:	d102      	bne.n	8008a44 <_kill_r+0x1c>
 8008a3e:	682b      	ldr	r3, [r5, #0]
 8008a40:	b103      	cbz	r3, 8008a44 <_kill_r+0x1c>
 8008a42:	6023      	str	r3, [r4, #0]
 8008a44:	bd38      	pop	{r3, r4, r5, pc}
 8008a46:	bf00      	nop
 8008a48:	20000524 	.word	0x20000524

08008a4c <_getpid_r>:
 8008a4c:	f7f9 bc70 	b.w	8002330 <_getpid>

08008a50 <_init>:
 8008a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a52:	bf00      	nop
 8008a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a56:	bc08      	pop	{r3}
 8008a58:	469e      	mov	lr, r3
 8008a5a:	4770      	bx	lr

08008a5c <_fini>:
 8008a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5e:	bf00      	nop
 8008a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a62:	bc08      	pop	{r3}
 8008a64:	469e      	mov	lr, r3
 8008a66:	4770      	bx	lr
