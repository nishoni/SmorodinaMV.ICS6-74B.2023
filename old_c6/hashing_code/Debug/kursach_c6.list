
kursach_c6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003404  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003728  08003728  000202b0  2**0
                  CONTENTS
  4 .ARM          00000000  08003728  08003728  000202b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003728  08003728  000202b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003728  08003728  00013728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800372c  0800372c  0001372c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  08003730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  200002b0  080039e0  000202b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  080039e0  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e4c  00000000  00000000  000202d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd7  00000000  00000000  00029125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0002ad00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  0002b468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a9d  00000000  00000000  0002bb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a2d1  00000000  00000000  000435a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008097b  00000000  00000000  0004d876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce1f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000210c  00000000  00000000  000ce244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002b0 	.word	0x200002b0
 8000128:	00000000 	.word	0x00000000
 800012c:	080034f8 	.word	0x080034f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002b4 	.word	0x200002b4
 8000148:	080034f8 	.word	0x080034f8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <do_algorithm>:
 *
 *  Created on: Nov 28, 2023
 *      Author: Pizza Delivery
 */
#include "algorithm_interface.h"
void do_algorithm(int algorithm_id) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b090      	sub	sp, #64	; 0x40
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	// hashing data with chosen algorithm
//	lcd_init();
//	int8_t *chosen_algorithm = "";

	lcd_clear();
 8000164:	f000 fb0e 	bl	8000784 <lcd_clear>
	lcd_init();
 8000168:	f000 f9ac 	bl	80004c4 <lcd_init>
	switch (algorithm_id) {
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2b02      	cmp	r3, #2
 8000170:	d019      	beq.n	80001a6 <do_algorithm+0x4a>
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2b02      	cmp	r3, #2
 8000176:	dc1e      	bgt.n	80001b6 <do_algorithm+0x5a>
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b00      	cmp	r3, #0
 800017c:	d003      	beq.n	8000186 <do_algorithm+0x2a>
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2b01      	cmp	r3, #1
 8000182:	d008      	beq.n	8000196 <do_algorithm+0x3a>
 8000184:	e017      	b.n	80001b6 <do_algorithm+0x5a>
		case 0:
//			chosen_algorithm = "You chose sha256";
			lcd_init();
 8000186:	f000 f99d 	bl	80004c4 <lcd_init>
			lcd_puts(0, 0, (int8_t*)"You chose sha256");
 800018a:	4a9d      	ldr	r2, [pc, #628]	; (8000400 <do_algorithm+0x2a4>)
 800018c:	2100      	movs	r1, #0
 800018e:	2000      	movs	r0, #0
 8000190:	f000 faa6 	bl	80006e0 <lcd_puts>
			break;
 8000194:	e01d      	b.n	80001d2 <do_algorithm+0x76>
		case 1:
//			chosen_algorithm = "You chose md5";
			lcd_init();
 8000196:	f000 f995 	bl	80004c4 <lcd_init>
			lcd_puts(0, 0, (int8_t*)"You chose md5");
 800019a:	4a9a      	ldr	r2, [pc, #616]	; (8000404 <do_algorithm+0x2a8>)
 800019c:	2100      	movs	r1, #0
 800019e:	2000      	movs	r0, #0
 80001a0:	f000 fa9e 	bl	80006e0 <lcd_puts>
			break;
 80001a4:	e015      	b.n	80001d2 <do_algorithm+0x76>
		case 2:
//			chosen_algorithm = "You chose crc16";
			lcd_init();
 80001a6:	f000 f98d 	bl	80004c4 <lcd_init>
			lcd_puts(0, 0, (int8_t*)"You chose crc16");
 80001aa:	4a97      	ldr	r2, [pc, #604]	; (8000408 <do_algorithm+0x2ac>)
 80001ac:	2100      	movs	r1, #0
 80001ae:	2000      	movs	r0, #0
 80001b0:	f000 fa96 	bl	80006e0 <lcd_puts>
			break;
 80001b4:	e00d      	b.n	80001d2 <do_algorithm+0x76>
		default:
			lcd_init();
 80001b6:	f000 f985 	bl	80004c4 <lcd_init>
			int8_t *error_msg = "Unexpected algorithm chosen";
 80001ba:	4b94      	ldr	r3, [pc, #592]	; (800040c <do_algorithm+0x2b0>)
 80001bc:	633b      	str	r3, [r7, #48]	; 0x30
			lcd_puts(0, 0, (int8_t*) error_msg);
 80001be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80001c0:	2100      	movs	r1, #0
 80001c2:	2000      	movs	r0, #0
 80001c4:	f000 fa8c 	bl	80006e0 <lcd_puts>
			HAL_Delay(1000);
 80001c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001cc:	f000 ffb8 	bl	8001140 <HAL_Delay>
			break;
 80001d0:	bf00      	nop
	}

	HAL_Delay(1000);
 80001d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001d6:	f000 ffb3 	bl	8001140 <HAL_Delay>

	lcd_clear();
 80001da:	f000 fad3 	bl	8000784 <lcd_clear>
//	lcd_init();
	lcd_puts(0, 0, (int8_t*)"Input data");
 80001de:	4a8c      	ldr	r2, [pc, #560]	; (8000410 <do_algorithm+0x2b4>)
 80001e0:	2100      	movs	r1, #0
 80001e2:	2000      	movs	r0, #0
 80001e4:	f000 fa7c 	bl	80006e0 <lcd_puts>
	HAL_Delay(1000);
 80001e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ec:	f000 ffa8 	bl	8001140 <HAL_Delay>
//	HAL_UART_Receive_IT(&huart1,(uint8_t*) str,8);
//	HAL_UART_Transmit(&huart1, (uint8_t*)"hiiiiiiiii2i", strlen("hiiiiiii2ii"), 1000);

//	lcd_clear();
//	lcd_init();
	int is_reading_data = 1;
 80001f0:	2301      	movs	r3, #1
 80001f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (is_reading_data == 1) {
 80001f4:	e023      	b.n	800023e <do_algorithm+0xe2>
		HAL_Delay(100);
 80001f6:	2064      	movs	r0, #100	; 0x64
 80001f8:	f000 ffa2 	bl	8001140 <HAL_Delay>

		if(huart1.RxXferCount == 0)
 80001fc:	4b85      	ldr	r3, [pc, #532]	; (8000414 <do_algorithm+0x2b8>)
 80001fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000200:	b29b      	uxth	r3, r3
 8000202:	2b00      	cmp	r3, #0
 8000204:	d11b      	bne.n	800023e <do_algorithm+0xe2>
		{
			lcd_init();
 8000206:	f000 f95d 	bl	80004c4 <lcd_init>
			HAL_Delay(1000);
 800020a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020e:	f000 ff97 	bl	8001140 <HAL_Delay>
			lcd_clear();
 8000212:	f000 fab7 	bl	8000784 <lcd_clear>
			data[8] = 0;
 8000216:	2300      	movs	r3, #0
 8000218:	f887 3020 	strb.w	r3, [r7, #32]
			HAL_UART_Receive_IT(&huart1, (int8_t*)data, 8);
 800021c:	f107 0318 	add.w	r3, r7, #24
 8000220:	2208      	movs	r2, #8
 8000222:	4619      	mov	r1, r3
 8000224:	487b      	ldr	r0, [pc, #492]	; (8000414 <do_algorithm+0x2b8>)
 8000226:	f001 ff7b 	bl	8002120 <HAL_UART_Receive_IT>
			lcd_init();
 800022a:	f000 f94b 	bl	80004c4 <lcd_init>
			lcd_puts(0, 0, (int8_t*) data);
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	461a      	mov	r2, r3
 8000234:	2100      	movs	r1, #0
 8000236:	2000      	movs	r0, #0
 8000238:	f000 fa52 	bl	80006e0 <lcd_puts>
//			lcd_clear();
//			lcd_puts(0, 0, (uint8_t*)"hiii");
//				HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), 1000);
//				HAL_UART_AbortReceive(&huart1);
//			if (data != "") break;
			break;
 800023c:	e002      	b.n	8000244 <do_algorithm+0xe8>
	while (is_reading_data == 1) {
 800023e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000240:	2b01      	cmp	r3, #1
 8000242:	d0d8      	beq.n	80001f6 <do_algorithm+0x9a>

//		if (data != "") is_reading_data = 0;
//			HAL_UART_AbortReceive(&huart1);
	}

	lcd_clear();
 8000244:	f000 fa9e 	bl	8000784 <lcd_clear>
//	lcd_init();
	lcd_puts(0, 0, (int8_t*)"Your input is:");
 8000248:	4a73      	ldr	r2, [pc, #460]	; (8000418 <do_algorithm+0x2bc>)
 800024a:	2100      	movs	r1, #0
 800024c:	2000      	movs	r0, #0
 800024e:	f000 fa47 	bl	80006e0 <lcd_puts>

	HAL_Delay(500);
 8000252:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000256:	f000 ff73 	bl	8001140 <HAL_Delay>

	lcd_clear();
 800025a:	f000 fa93 	bl	8000784 <lcd_clear>
	lcd_init();
 800025e:	f000 f931 	bl	80004c4 <lcd_init>
	lcd_puts(0, 0, (int8_t*) data);
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	461a      	mov	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	2000      	movs	r0, #0
 800026c:	f000 fa38 	bl	80006e0 <lcd_puts>

	HAL_Delay(1000);
 8000270:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000274:	f000 ff64 	bl	8001140 <HAL_Delay>
//	uint8_t result;
	int8_t *result;
	int8_t *output;
//	lcd_clear();
	switch (algorithm_id) {
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b02      	cmp	r3, #2
 800027c:	d078      	beq.n	8000370 <do_algorithm+0x214>
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b02      	cmp	r3, #2
 8000282:	f300 80ab 	bgt.w	80003dc <do_algorithm+0x280>
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d003      	beq.n	8000294 <do_algorithm+0x138>
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d019      	beq.n	80002c6 <do_algorithm+0x16a>
 8000292:	e0a3      	b.n	80003dc <do_algorithm+0x280>
			case 0:
				// sha256
				lcd_clear();
 8000294:	f000 fa76 	bl	8000784 <lcd_clear>
				lcd_init();
 8000298:	f000 f914 	bl	80004c4 <lcd_init>
				lcd_puts(0, 0, (uint8_t*)"Starting sha256");
 800029c:	4a5f      	ldr	r2, [pc, #380]	; (800041c <do_algorithm+0x2c0>)
 800029e:	2100      	movs	r1, #0
 80002a0:	2000      	movs	r0, #0
 80002a2:	f000 fa1d 	bl	80006e0 <lcd_puts>
//				result = md5_start(data);
				HAL_Delay(1000);
 80002a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002aa:	f000 ff49 	bl	8001140 <HAL_Delay>
				lcd_clear();
 80002ae:	f000 fa69 	bl	8000784 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Finished sha256");
 80002b2:	4a5b      	ldr	r2, [pc, #364]	; (8000420 <do_algorithm+0x2c4>)
 80002b4:	2100      	movs	r1, #0
 80002b6:	2000      	movs	r0, #0
 80002b8:	f000 fa12 	bl	80006e0 <lcd_puts>
				HAL_Delay(1000);
 80002bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c0:	f000 ff3e 	bl	8001140 <HAL_Delay>
				break;
 80002c4:	e098      	b.n	80003f8 <do_algorithm+0x29c>
			case 1:
				// md5
				lcd_clear();
 80002c6:	f000 fa5d 	bl	8000784 <lcd_clear>
				lcd_init();
 80002ca:	f000 f8fb 	bl	80004c4 <lcd_init>
				lcd_puts(0, 0, (uint8_t*)"Starting md5");
 80002ce:	4a55      	ldr	r2, [pc, #340]	; (8000424 <do_algorithm+0x2c8>)
 80002d0:	2100      	movs	r1, #0
 80002d2:	2000      	movs	r0, #0
 80002d4:	f000 fa04 	bl	80006e0 <lcd_puts>
				uint8_t md5_result[16];
				md5String("Hello World", md5_result);
 80002d8:	f107 0308 	add.w	r3, r7, #8
 80002dc:	4619      	mov	r1, r3
 80002de:	4852      	ldr	r0, [pc, #328]	; (8000428 <do_algorithm+0x2cc>)
 80002e0:	f000 fd9c 	bl	8000e1c <md5String>

//				int8_t *output;
				// sprintf(output, "%hX", md5_result);
				HAL_Delay(1000);
 80002e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e8:	f000 ff2a 	bl	8001140 <HAL_Delay>
				lcd_clear();
 80002ec:	f000 fa4a 	bl	8000784 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Result of md5:");
 80002f0:	4a4e      	ldr	r2, [pc, #312]	; (800042c <do_algorithm+0x2d0>)
 80002f2:	2100      	movs	r1, #0
 80002f4:	2000      	movs	r0, #0
 80002f6:	f000 f9f3 	bl	80006e0 <lcd_puts>
				HAL_Delay(1000);
 80002fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fe:	f000 ff1f 	bl	8001140 <HAL_Delay>
//
				lcd_clear();
 8000302:	f000 fa3f 	bl	8000784 <lcd_clear>
				int j = 0, i = 0, k = 0;
 8000306:	2300      	movs	r3, #0
 8000308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800030a:	2300      	movs	r3, #0
 800030c:	63bb      	str	r3, [r7, #56]	; 0x38
 800030e:	2300      	movs	r3, #0
 8000310:	637b      	str	r3, [r7, #52]	; 0x34
				while (k < 16) {
 8000312:	e01e      	b.n	8000352 <do_algorithm+0x1f6>
					sprintf(output, "%02x", md5_result[k]);
 8000314:	f107 0208 	add.w	r2, r7, #8
 8000318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800031a:	4413      	add	r3, r2
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	461a      	mov	r2, r3
 8000320:	4943      	ldr	r1, [pc, #268]	; (8000430 <do_algorithm+0x2d4>)
 8000322:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000324:	f002 fd6a 	bl	8002dfc <siprintf>
					if (i == 16) {
 8000328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800032a:	2b10      	cmp	r3, #16
 800032c:	d103      	bne.n	8000336 <do_algorithm+0x1da>
						i = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	63bb      	str	r3, [r7, #56]	; 0x38
						j = 1;
 8000332:	2301      	movs	r3, #1
 8000334:	63fb      	str	r3, [r7, #60]	; 0x3c
					}
					lcd_puts(j, i, (uint8_t*)output);
 8000336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000338:	b25b      	sxtb	r3, r3
 800033a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800033c:	b251      	sxtb	r1, r2
 800033e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000340:	4618      	mov	r0, r3
 8000342:	f000 f9cd 	bl	80006e0 <lcd_puts>
					++k;
 8000346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000348:	3301      	adds	r3, #1
 800034a:	637b      	str	r3, [r7, #52]	; 0x34
					i += 2;
 800034c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800034e:	3302      	adds	r3, #2
 8000350:	63bb      	str	r3, [r7, #56]	; 0x38
				while (k < 16) {
 8000352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000354:	2b0f      	cmp	r3, #15
 8000356:	dddd      	ble.n	8000314 <do_algorithm+0x1b8>
				}

				HAL_Delay(1000);
 8000358:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035c:	f000 fef0 	bl	8001140 <HAL_Delay>
				lcd_clear();
 8000360:	f000 fa10 	bl	8000784 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Finished md5");
 8000364:	4a33      	ldr	r2, [pc, #204]	; (8000434 <do_algorithm+0x2d8>)
 8000366:	2100      	movs	r1, #0
 8000368:	2000      	movs	r0, #0
 800036a:	f000 f9b9 	bl	80006e0 <lcd_puts>
//				HAL_UART_Transmit(&huart1, (uint8_t*)result, strlen(result), 1000);
				break;
 800036e:	e043      	b.n	80003f8 <do_algorithm+0x29c>
			case 2:
				// crc16

				lcd_clear();
 8000370:	f000 fa08 	bl	8000784 <lcd_clear>
				lcd_init();
 8000374:	f000 f8a6 	bl	80004c4 <lcd_init>
				lcd_puts(0, 0, (uint8_t*)"Starting crc16");
 8000378:	4a2f      	ldr	r2, [pc, #188]	; (8000438 <do_algorithm+0x2dc>)
 800037a:	2100      	movs	r1, #0
 800037c:	2000      	movs	r0, #0
 800037e:	f000 f9af 	bl	80006e0 <lcd_puts>
				result = crc16("Hello World", strlen("Hello World"));
 8000382:	210b      	movs	r1, #11
 8000384:	4828      	ldr	r0, [pc, #160]	; (8000428 <do_algorithm+0x2cc>)
 8000386:	f000 f861 	bl	800044c <crc16>
 800038a:	4603      	mov	r3, r0
 800038c:	62bb      	str	r3, [r7, #40]	; 0x28

				lcd_clear();
 800038e:	f000 f9f9 	bl	8000784 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Result of crc16:");
 8000392:	4a2a      	ldr	r2, [pc, #168]	; (800043c <do_algorithm+0x2e0>)
 8000394:	2100      	movs	r1, #0
 8000396:	2000      	movs	r0, #0
 8000398:	f000 f9a2 	bl	80006e0 <lcd_puts>
				HAL_Delay(1000);
 800039c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a0:	f000 fece 	bl	8001140 <HAL_Delay>

//				int8_t *output;
				sprintf(output, "%hX", result);
 80003a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003a6:	4926      	ldr	r1, [pc, #152]	; (8000440 <do_algorithm+0x2e4>)
 80003a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80003aa:	f002 fd27 	bl	8002dfc <siprintf>
				HAL_Delay(1000);
 80003ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b2:	f000 fec5 	bl	8001140 <HAL_Delay>
				lcd_clear();
 80003b6:	f000 f9e5 	bl	8000784 <lcd_clear>
				lcd_puts(0, 0, output);
 80003ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003bc:	2100      	movs	r1, #0
 80003be:	2000      	movs	r0, #0
 80003c0:	f000 f98e 	bl	80006e0 <lcd_puts>

				HAL_Delay(1000);
 80003c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c8:	f000 feba 	bl	8001140 <HAL_Delay>
				lcd_clear();
 80003cc:	f000 f9da 	bl	8000784 <lcd_clear>
				lcd_puts(0, 0, (uint8_t*)"Finished crc16");
 80003d0:	4a1c      	ldr	r2, [pc, #112]	; (8000444 <do_algorithm+0x2e8>)
 80003d2:	2100      	movs	r1, #0
 80003d4:	2000      	movs	r0, #0
 80003d6:	f000 f983 	bl	80006e0 <lcd_puts>
				break;
 80003da:	e00d      	b.n	80003f8 <do_algorithm+0x29c>
			default:
				lcd_init();
 80003dc:	f000 f872 	bl	80004c4 <lcd_init>
				int8_t *error_msg = "Unexpected error in algorithms\r\n";
 80003e0:	4b19      	ldr	r3, [pc, #100]	; (8000448 <do_algorithm+0x2ec>)
 80003e2:	623b      	str	r3, [r7, #32]
				lcd_puts(0, 0, (int8_t*) error_msg);
 80003e4:	6a3a      	ldr	r2, [r7, #32]
 80003e6:	2100      	movs	r1, #0
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f979 	bl	80006e0 <lcd_puts>
				HAL_Delay(1000);
 80003ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003f2:	f000 fea5 	bl	8001140 <HAL_Delay>
				break;
 80003f6:	bf00      	nop
		}
//	HAL_UART_Transmit(&huart1, (uint8_t*)result, strlen(result), 1000);
}
 80003f8:	bf00      	nop
 80003fa:	3740      	adds	r7, #64	; 0x40
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	08003510 	.word	0x08003510
 8000404:	08003524 	.word	0x08003524
 8000408:	08003534 	.word	0x08003534
 800040c:	08003544 	.word	0x08003544
 8000410:	08003560 	.word	0x08003560
 8000414:	200002cc 	.word	0x200002cc
 8000418:	0800356c 	.word	0x0800356c
 800041c:	0800357c 	.word	0x0800357c
 8000420:	0800358c 	.word	0x0800358c
 8000424:	0800359c 	.word	0x0800359c
 8000428:	080035ac 	.word	0x080035ac
 800042c:	080035b8 	.word	0x080035b8
 8000430:	080035c8 	.word	0x080035c8
 8000434:	080035d0 	.word	0x080035d0
 8000438:	080035e0 	.word	0x080035e0
 800043c:	080035f0 	.word	0x080035f0
 8000440:	08003604 	.word	0x08003604
 8000444:	08003608 	.word	0x08003608
 8000448:	08003618 	.word	0x08003618

0800044c <crc16>:
  Check : 0x29B1 ("123456789")
  MaxLen: 4095 байт (32767 бит) - обнаружение
    одинарных, двойных, тройных и всех нечетных ошибок
*/
unsigned short crc16(unsigned char *data, unsigned short len)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	460b      	mov	r3, r1
 8000456:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8000458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800045c:	81fb      	strh	r3, [r7, #14]
    unsigned char i;

    while (len--)
 800045e:	e025      	b.n	80004ac <crc16+0x60>
    {
        crc ^= *data++ << 8;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	1c5a      	adds	r2, r3, #1
 8000464:	607a      	str	r2, [r7, #4]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	021b      	lsls	r3, r3, #8
 800046a:	b21a      	sxth	r2, r3
 800046c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000470:	4053      	eors	r3, r2
 8000472:	b21b      	sxth	r3, r3
 8000474:	81fb      	strh	r3, [r7, #14]

        for (i = 0; i < 8; i++)
 8000476:	2300      	movs	r3, #0
 8000478:	737b      	strb	r3, [r7, #13]
 800047a:	e014      	b.n	80004a6 <crc16+0x5a>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 800047c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000480:	2b00      	cmp	r3, #0
 8000482:	da09      	bge.n	8000498 <crc16+0x4c>
 8000484:	89fb      	ldrh	r3, [r7, #14]
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	b21b      	sxth	r3, r3
 800048a:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800048e:	f083 0301 	eor.w	r3, r3, #1
 8000492:	b21b      	sxth	r3, r3
 8000494:	b29b      	uxth	r3, r3
 8000496:	e002      	b.n	800049e <crc16+0x52>
 8000498:	89fb      	ldrh	r3, [r7, #14]
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	b29b      	uxth	r3, r3
 800049e:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++)
 80004a0:	7b7b      	ldrb	r3, [r7, #13]
 80004a2:	3301      	adds	r3, #1
 80004a4:	737b      	strb	r3, [r7, #13]
 80004a6:	7b7b      	ldrb	r3, [r7, #13]
 80004a8:	2b07      	cmp	r3, #7
 80004aa:	d9e7      	bls.n	800047c <crc16+0x30>
    while (len--)
 80004ac:	887b      	ldrh	r3, [r7, #2]
 80004ae:	1e5a      	subs	r2, r3, #1
 80004b0:	807a      	strh	r2, [r7, #2]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d1d4      	bne.n	8000460 <crc16+0x14>
    }
    return crc;
 80004b6:	89fb      	ldrh	r3, [r7, #14]
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	3714      	adds	r7, #20
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr
	...

080004c4 <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 80004c8:	201e      	movs	r0, #30
 80004ca:	f000 fe39 	bl	8001140 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 80004ce:	2200      	movs	r2, #0
 80004d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d4:	481c      	ldr	r0, [pc, #112]	; (8000548 <lcd_init+0x84>)
 80004d6:	f001 f9aa 	bl	800182e <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 80004da:	2201      	movs	r2, #1
 80004dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e0:	4819      	ldr	r0, [pc, #100]	; (8000548 <lcd_init+0x84>)
 80004e2:	f001 f9a4 	bl	800182e <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 80004e6:	2200      	movs	r2, #0
 80004e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ec:	4816      	ldr	r0, [pc, #88]	; (8000548 <lcd_init+0x84>)
 80004ee:	f001 f99e 	bl	800182e <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f8:	4813      	ldr	r0, [pc, #76]	; (8000548 <lcd_init+0x84>)
 80004fa:	f001 f998 	bl	800182e <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000504:	4810      	ldr	r0, [pc, #64]	; (8000548 <lcd_init+0x84>)
 8000506:	f001 f992 	bl	800182e <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 800050a:	2201      	movs	r2, #1
 800050c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <lcd_init+0x84>)
 8000512:	f001 f98c 	bl	800182e <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800051c:	480a      	ldr	r0, [pc, #40]	; (8000548 <lcd_init+0x84>)
 800051e:	f001 f986 	bl	800182e <HAL_GPIO_WritePin>
	
	lcd_write(0,0x28);
 8000522:	2128      	movs	r1, #40	; 0x28
 8000524:	2000      	movs	r0, #0
 8000526:	f000 f811 	bl	800054c <lcd_write>
	lcd_write(0,0x0c);
 800052a:	210c      	movs	r1, #12
 800052c:	2000      	movs	r0, #0
 800052e:	f000 f80d 	bl	800054c <lcd_write>
	lcd_write(0,0x06);
 8000532:	2106      	movs	r1, #6
 8000534:	2000      	movs	r0, #0
 8000536:	f000 f809 	bl	800054c <lcd_write>
	lcd_write(0,0x01);
 800053a:	2101      	movs	r1, #1
 800053c:	2000      	movs	r0, #0
 800053e:	f000 f805 	bl	800054c <lcd_write>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40010c00 	.word	0x40010c00

0800054c <lcd_write>:

/*--------------- Write To LCD ---------------*/
void lcd_write(int8_t type, int8_t data)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	460a      	mov	r2, r1
 8000556:	71fb      	strb	r3, [r7, #7]
 8000558:	4613      	mov	r3, r2
 800055a:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(2);
 800055c:	2002      	movs	r0, #2
 800055e:	f000 fdef 	bl	8001140 <HAL_Delay>
	if(type)
 8000562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d006      	beq.n	8000578 <lcd_write+0x2c>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000570:	485a      	ldr	r0, [pc, #360]	; (80006dc <lcd_write+0x190>)
 8000572:	f001 f95c 	bl	800182e <HAL_GPIO_WritePin>
 8000576:	e005      	b.n	8000584 <lcd_write+0x38>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800057e:	4857      	ldr	r0, [pc, #348]	; (80006dc <lcd_write+0x190>)
 8000580:	f001 f955 	bl	800182e <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 8000584:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000588:	2b00      	cmp	r3, #0
 800058a:	da06      	bge.n	800059a <lcd_write+0x4e>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000592:	4852      	ldr	r0, [pc, #328]	; (80006dc <lcd_write+0x190>)
 8000594:	f001 f94b 	bl	800182e <HAL_GPIO_WritePin>
 8000598:	e005      	b.n	80005a6 <lcd_write+0x5a>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a0:	484e      	ldr	r0, [pc, #312]	; (80006dc <lcd_write+0x190>)
 80005a2:	f001 f944 	bl	800182e <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d006      	beq.n	80005be <lcd_write+0x72>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b6:	4849      	ldr	r0, [pc, #292]	; (80006dc <lcd_write+0x190>)
 80005b8:	f001 f939 	bl	800182e <HAL_GPIO_WritePin>
 80005bc:	e005      	b.n	80005ca <lcd_write+0x7e>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c4:	4845      	ldr	r0, [pc, #276]	; (80006dc <lcd_write+0x190>)
 80005c6:	f001 f932 	bl	800182e <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	f003 0320 	and.w	r3, r3, #32
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d006      	beq.n	80005e2 <lcd_write+0x96>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005da:	4840      	ldr	r0, [pc, #256]	; (80006dc <lcd_write+0x190>)
 80005dc:	f001 f927 	bl	800182e <HAL_GPIO_WritePin>
 80005e0:	e005      	b.n	80005ee <lcd_write+0xa2>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e8:	483c      	ldr	r0, [pc, #240]	; (80006dc <lcd_write+0x190>)
 80005ea:	f001 f920 	bl	800182e <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	f003 0310 	and.w	r3, r3, #16
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d006      	beq.n	8000606 <lcd_write+0xba>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fe:	4837      	ldr	r0, [pc, #220]	; (80006dc <lcd_write+0x190>)
 8000600:	f001 f915 	bl	800182e <HAL_GPIO_WritePin>
 8000604:	e005      	b.n	8000612 <lcd_write+0xc6>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060c:	4833      	ldr	r0, [pc, #204]	; (80006dc <lcd_write+0x190>)
 800060e:	f001 f90e 	bl	800182e <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000618:	4830      	ldr	r0, [pc, #192]	; (80006dc <lcd_write+0x190>)
 800061a:	f001 f908 	bl	800182e <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000624:	482d      	ldr	r0, [pc, #180]	; (80006dc <lcd_write+0x190>)
 8000626:	f001 f902 	bl	800182e <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	f003 0308 	and.w	r3, r3, #8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d006      	beq.n	8000642 <lcd_write+0xf6>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800063a:	4828      	ldr	r0, [pc, #160]	; (80006dc <lcd_write+0x190>)
 800063c:	f001 f8f7 	bl	800182e <HAL_GPIO_WritePin>
 8000640:	e005      	b.n	800064e <lcd_write+0x102>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000648:	4824      	ldr	r0, [pc, #144]	; (80006dc <lcd_write+0x190>)
 800064a:	f001 f8f0 	bl	800182e <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 800064e:	79bb      	ldrb	r3, [r7, #6]
 8000650:	f003 0304 	and.w	r3, r3, #4
 8000654:	2b00      	cmp	r3, #0
 8000656:	d006      	beq.n	8000666 <lcd_write+0x11a>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800065e:	481f      	ldr	r0, [pc, #124]	; (80006dc <lcd_write+0x190>)
 8000660:	f001 f8e5 	bl	800182e <HAL_GPIO_WritePin>
 8000664:	e005      	b.n	8000672 <lcd_write+0x126>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800066c:	481b      	ldr	r0, [pc, #108]	; (80006dc <lcd_write+0x190>)
 800066e:	f001 f8de 	bl	800182e <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	f003 0302 	and.w	r3, r3, #2
 8000678:	2b00      	cmp	r3, #0
 800067a:	d006      	beq.n	800068a <lcd_write+0x13e>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000682:	4816      	ldr	r0, [pc, #88]	; (80006dc <lcd_write+0x190>)
 8000684:	f001 f8d3 	bl	800182e <HAL_GPIO_WritePin>
 8000688:	e005      	b.n	8000696 <lcd_write+0x14a>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000690:	4812      	ldr	r0, [pc, #72]	; (80006dc <lcd_write+0x190>)
 8000692:	f001 f8cc 	bl	800182e <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 8000696:	79bb      	ldrb	r3, [r7, #6]
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	2b00      	cmp	r3, #0
 800069e:	d006      	beq.n	80006ae <lcd_write+0x162>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <lcd_write+0x190>)
 80006a8:	f001 f8c1 	bl	800182e <HAL_GPIO_WritePin>
 80006ac:	e005      	b.n	80006ba <lcd_write+0x16e>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b4:	4809      	ldr	r0, [pc, #36]	; (80006dc <lcd_write+0x190>)
 80006b6:	f001 f8ba 	bl	800182e <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c0:	4806      	ldr	r0, [pc, #24]	; (80006dc <lcd_write+0x190>)
 80006c2:	f001 f8b4 	bl	800182e <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <lcd_write+0x190>)
 80006ce:	f001 f8ae 	bl	800182e <HAL_GPIO_WritePin>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40010c00 	.word	0x40010c00

080006e0 <lcd_puts>:

void lcd_puts(int8_t x, int8_t y, int8_t *string)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	603a      	str	r2, [r7, #0]
 80006ea:	71fb      	strb	r3, [r7, #7]
 80006ec:	460b      	mov	r3, r1
 80006ee:	71bb      	strb	r3, [r7, #6]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 80006f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	d83a      	bhi.n	800076e <lcd_puts+0x8e>
 80006f8:	a201      	add	r2, pc, #4	; (adr r2, 8000700 <lcd_puts+0x20>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	08000711 	.word	0x08000711
 8000704:	08000723 	.word	0x08000723
 8000708:	08000735 	.word	0x08000735
 800070c:	08000747 	.word	0x08000747
	{
		case 0: //Row 0
			lcd_write(0,0x80+0x00+y);
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	3b80      	subs	r3, #128	; 0x80
 8000714:	b2db      	uxtb	r3, r3
 8000716:	b25b      	sxtb	r3, r3
 8000718:	4619      	mov	r1, r3
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff ff16 	bl	800054c <lcd_write>
			break;
 8000720:	e01a      	b.n	8000758 <lcd_puts+0x78>
		case 1: //Row 1
			lcd_write(0,0x80+0x40+y);
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	3b40      	subs	r3, #64	; 0x40
 8000726:	b2db      	uxtb	r3, r3
 8000728:	b25b      	sxtb	r3, r3
 800072a:	4619      	mov	r1, r3
 800072c:	2000      	movs	r0, #0
 800072e:	f7ff ff0d 	bl	800054c <lcd_write>
			break;
 8000732:	e011      	b.n	8000758 <lcd_puts+0x78>
		case 2: //Row 2
			lcd_write(0,0x80+0x10+y);
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	3b70      	subs	r3, #112	; 0x70
 8000738:	b2db      	uxtb	r3, r3
 800073a:	b25b      	sxtb	r3, r3
 800073c:	4619      	mov	r1, r3
 800073e:	2000      	movs	r0, #0
 8000740:	f7ff ff04 	bl	800054c <lcd_write>
			break;
 8000744:	e008      	b.n	8000758 <lcd_puts+0x78>
		case 3: //Row 3
			lcd_write(0,0x80+0x50+y);
 8000746:	79bb      	ldrb	r3, [r7, #6]
 8000748:	3b30      	subs	r3, #48	; 0x30
 800074a:	b2db      	uxtb	r3, r3
 800074c:	b25b      	sxtb	r3, r3
 800074e:	4619      	mov	r1, r3
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff fefb 	bl	800054c <lcd_write>
			break;
 8000756:	bf00      	nop
			lcd_write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 8000758:	e009      	b.n	800076e <lcd_puts+0x8e>
	{
		lcd_write(1,*string);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	f993 3000 	ldrsb.w	r3, [r3]
 8000760:	4619      	mov	r1, r3
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff fef2 	bl	800054c <lcd_write>
		string++;
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	603b      	str	r3, [r7, #0]
	while(*string)
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	f993 3000 	ldrsb.w	r3, [r3]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d1f0      	bne.n	800075a <lcd_puts+0x7a>
	}
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop

08000784 <lcd_clear>:
void lcd_clear(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	lcd_write(0,0x01);
 8000788:	2101      	movs	r1, #1
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff fede 	bl	800054c <lcd_write>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}

08000794 <chosen_algorithm>:
//{
//    HAL_UART_Transmit(&huart1, UART1_rxBuffer, 26, 100);
//    HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 26);
//}

int8_t* chosen_algorithm(int id) {
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	switch (id) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d00d      	beq.n	80007be <chosen_algorithm+0x2a>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	dc0c      	bgt.n	80007c2 <chosen_algorithm+0x2e>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d003      	beq.n	80007b6 <chosen_algorithm+0x22>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d002      	beq.n	80007ba <chosen_algorithm+0x26>
 80007b4:	e005      	b.n	80007c2 <chosen_algorithm+0x2e>
		case 0:
			return "sha256";
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <chosen_algorithm+0x3c>)
 80007b8:	e004      	b.n	80007c4 <chosen_algorithm+0x30>
		case 1:
			return "md5";
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <chosen_algorithm+0x40>)
 80007bc:	e002      	b.n	80007c4 <chosen_algorithm+0x30>
		case 2:
			return "crc16";
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <chosen_algorithm+0x44>)
 80007c0:	e000      	b.n	80007c4 <chosen_algorithm+0x30>
		default:
			return "Invalid algorithm";
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <chosen_algorithm+0x48>)
			break;
	}
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	08003640 	.word	0x08003640
 80007d4:	08003648 	.word	0x08003648
 80007d8:	0800364c 	.word	0x0800364c
 80007dc:	08003654 	.word	0x08003654

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e6:	f000 fc49 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ea:	f000 f859 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ee:	f000 f8bd 	bl	800096c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007f2:	f000 f891 	bl	8000918 <MX_USART1_UART_Init>
//  HAL_UART_Receive_IT(&huart1, (uint8_t*)buff, 1);
//  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);

//  HAL_UART_Transmit_IT(&huart1, (uint8_t*)buff, 1);
  int8_t *output, data;
  int alg_id = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
  lcd_init();
 80007fa:	f7ff fe63 	bl	80004c4 <lcd_init>

    /* USER CODE BEGIN 3 */
	  /* scrolling through algorithms
			ids: 0 - sha, 1 - md, 2 - crc
	  */
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 80007fe:	2108      	movs	r1, #8
 8000800:	4826      	ldr	r0, [pc, #152]	; (800089c <main+0xbc>)
 8000802:	f000 fffd 	bl	8001800 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b01      	cmp	r3, #1
 800080a:	d10b      	bne.n	8000824 <main+0x44>
		  if (alg_id < 2) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b01      	cmp	r3, #1
 8000810:	dc03      	bgt.n	800081a <main+0x3a>
			  alg_id++;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3301      	adds	r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	e001      	b.n	800081e <main+0x3e>
		  } else {
			  alg_id = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
		  }
		  lcd_clear();
 800081e:	f7ff ffb1 	bl	8000784 <lcd_clear>
 8000822:	e02d      	b.n	8000880 <main+0xa0>
//		  output[0] = alg_id + '0';
//		  lcd_clear();
//		  lcd_puts(0, 0, (int8_t*) output);
	  } else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == 1) {
 8000824:	2104      	movs	r1, #4
 8000826:	481d      	ldr	r0, [pc, #116]	; (800089c <main+0xbc>)
 8000828:	f000 ffea 	bl	8001800 <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d10b      	bne.n	800084a <main+0x6a>
		  if (alg_id > 0) {
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	dd03      	ble.n	8000840 <main+0x60>
			  alg_id--;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	e001      	b.n	8000844 <main+0x64>
		  } else {
			  alg_id = 2;
 8000840:	2302      	movs	r3, #2
 8000842:	607b      	str	r3, [r7, #4]
		  }
		  lcd_clear();
 8000844:	f7ff ff9e 	bl	8000784 <lcd_clear>
 8000848:	e01a      	b.n	8000880 <main+0xa0>
//		  output[0] = alg_id + '0';
//		  lcd_clear();
//		  lcd_puts(0, 0, (int8_t*) output);
	  } else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) {
 800084a:	2102      	movs	r1, #2
 800084c:	4813      	ldr	r0, [pc, #76]	; (800089c <main+0xbc>)
 800084e:	f000 ffd7 	bl	8001800 <HAL_GPIO_ReadPin>
 8000852:	4603      	mov	r3, r0
 8000854:	2b01      	cmp	r3, #1
 8000856:	d113      	bne.n	8000880 <main+0xa0>
//		  output[0] = alg_id + '0';
//		  lcd_clear();
//		  lcd_puts(0, 0, (int8_t*) output);
		  lcd_clear();
 8000858:	f7ff ff94 	bl	8000784 <lcd_clear>
		  output = chosen_algorithm(alg_id);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff99 	bl	8000794 <chosen_algorithm>
 8000862:	6038      	str	r0, [r7, #0]
		  lcd_puts(0, 0, (int8_t*) output);
 8000864:	683a      	ldr	r2, [r7, #0]
 8000866:	2100      	movs	r1, #0
 8000868:	2000      	movs	r0, #0
 800086a:	f7ff ff39 	bl	80006e0 <lcd_puts>
		  lcd_clear();
 800086e:	f7ff ff89 	bl	8000784 <lcd_clear>
		  do_algorithm(alg_id);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff fc72 	bl	800015c <do_algorithm>
		  HAL_Delay(50000);
 8000878:	f24c 3050 	movw	r0, #50000	; 0xc350
 800087c:	f000 fc60 	bl	8001140 <HAL_Delay>
	  }


	  output = chosen_algorithm(alg_id);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ff87 	bl	8000794 <chosen_algorithm>
 8000886:	6038      	str	r0, [r7, #0]
	  lcd_puts(0, 0, (int8_t*) output);
 8000888:	683a      	ldr	r2, [r7, #0]
 800088a:	2100      	movs	r1, #0
 800088c:	2000      	movs	r0, #0
 800088e:	f7ff ff27 	bl	80006e0 <lcd_puts>
	  HAL_Delay(500);
 8000892:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000896:	f000 fc53 	bl	8001140 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1) {
 800089a:	e7b0      	b.n	80007fe <main+0x1e>
 800089c:	40010800 	.word	0x40010800

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b090      	sub	sp, #64	; 0x40
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	2228      	movs	r2, #40	; 0x28
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 f9b0 	bl	8002c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c6:	2301      	movs	r3, #1
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ca:	2310      	movs	r3, #16
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 0318 	add.w	r3, r7, #24
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 ffc2 	bl	8001860 <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008e2:	f000 f883 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	230f      	movs	r3, #15
 80008e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 fa30 	bl	8001d64 <HAL_RCC_ClockConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800090a:	f000 f86f 	bl	80009ec <Error_Handler>
  }
}
 800090e:	bf00      	nop
 8000910:	3740      	adds	r7, #64	; 0x40
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MX_USART1_UART_Init+0x50>)
 8000920:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USART1_UART_Init+0x4c>)
 8000950:	f001 fb96 	bl	8002080 <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800095a:	f000 f847 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200002cc 	.word	0x200002cc
 8000968:	40013800 	.word	0x40013800

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_GPIO_Init+0x78>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <MX_GPIO_Init+0x78>)
 8000986:	f043 0308 	orr.w	r3, r3, #8
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_GPIO_Init+0x78>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f003 0308 	and.w	r3, r3, #8
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_GPIO_Init+0x78>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <MX_GPIO_Init+0x78>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_GPIO_Init+0x78>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80009b6:	480c      	ldr	r0, [pc, #48]	; (80009e8 <MX_GPIO_Init+0x7c>)
 80009b8:	f000 ff39 	bl	800182e <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80009bc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80009c0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2302      	movs	r3, #2
 80009cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	4619      	mov	r1, r3
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_GPIO_Init+0x7c>)
 80009d6:	f000 fd97 	bl	8001508 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40010c00 	.word	0x40010c00

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x8>

080009f6 <rotateLeft>:
#define I(X, Y, Z) (Y ^ (X | ~Z))

/*
 * Rotates a 32-bit word left by n bits
 */
uint32_t rotateLeft(uint32_t x, uint32_t n){
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
    return (x << n) | (x >> (32 - n));
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	f1c3 0320 	rsb	r3, r3, #32
 8000a08:	fa62 f303 	ror.w	r3, r2, r3
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
	...

08000a18 <md5Init>:


/*
 * Initialize a context
 */
void md5Init(MD5Context *ctx){
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
    ctx->size = (uint64_t)0;
 8000a20:	6879      	ldr	r1, [r7, #4]
 8000a22:	f04f 0200 	mov.w	r2, #0
 8000a26:	f04f 0300 	mov.w	r3, #0
 8000a2a:	e9c1 2300 	strd	r2, r3, [r1]

    ctx->buffer[0] = (uint32_t)A;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <md5Init+0x38>)
 8000a32:	609a      	str	r2, [r3, #8]
    ctx->buffer[1] = (uint32_t)B;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <md5Init+0x3c>)
 8000a38:	60da      	str	r2, [r3, #12]
    ctx->buffer[2] = (uint32_t)C;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <md5Init+0x40>)
 8000a3e:	611a      	str	r2, [r3, #16]
    ctx->buffer[3] = (uint32_t)D;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <md5Init+0x44>)
 8000a44:	615a      	str	r2, [r3, #20]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	67452301 	.word	0x67452301
 8000a54:	efcdab89 	.word	0xefcdab89
 8000a58:	98badcfe 	.word	0x98badcfe
 8000a5c:	10325476 	.word	0x10325476

08000a60 <md5Update>:
 * Add some amount of input to the context
 *
 * If the input fills out a block of 512 bits, apply the algorithm (md5Step)
 * and save the result in the buffer. Also updates the overall size.
 */
void md5Update(MD5Context *ctx, uint8_t *input_buffer, size_t input_len){
 8000a60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a64:	b098      	sub	sp, #96	; 0x60
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
    uint32_t input[16];
    unsigned int offset = ctx->size % 64;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a74:	4613      	mov	r3, r2
 8000a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    ctx->size += (uint64_t)input_len;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	2000      	movs	r0, #0
 8000a86:	460c      	mov	r4, r1
 8000a88:	4605      	mov	r5, r0
 8000a8a:	eb12 0804 	adds.w	r8, r2, r4
 8000a8e:	eb43 0905 	adc.w	r9, r3, r5
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	e9c3 8900 	strd	r8, r9, [r3]

    // Copy each byte in input_buffer into the next space in our context input
    for(unsigned int i = 0; i < input_len; ++i){
 8000a98:	2300      	movs	r3, #0
 8000a9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8000a9c:	e048      	b.n	8000b30 <md5Update+0xd0>
        ctx->input[offset++] = (uint8_t)*(input_buffer + i);
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aa2:	441a      	add	r2, r3
 8000aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000aa6:	1c59      	adds	r1, r3, #1
 8000aa8:	65f9      	str	r1, [r7, #92]	; 0x5c
 8000aaa:	7811      	ldrb	r1, [r2, #0]
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	460a      	mov	r2, r1
 8000ab2:	761a      	strb	r2, [r3, #24]

        // If we've filled our context input, copy it into our local array input
        // then reset the offset to 0 and fill in a new buffer.
        // Every time we fill out a chunk, we run it through the algorithm
        // to enable some back and forth between cpu and i/o
        if(offset % 64 == 0){
 8000ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d135      	bne.n	8000b2a <md5Update+0xca>
            for(unsigned int j = 0; j < 16; ++j){
 8000abe:	2300      	movs	r3, #0
 8000ac0:	657b      	str	r3, [r7, #84]	; 0x54
 8000ac2:	e025      	b.n	8000b10 <md5Update+0xb0>
                // Convert to little-endian
                // The local variable `input` our 512-bit chunk separated into 32-bit words
                // we can use in calculations
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8000ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	3303      	adds	r3, #3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4413      	add	r3, r2
 8000ace:	7e1b      	ldrb	r3, [r3, #24]
 8000ad0:	061a      	lsls	r2, r3, #24
                           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8000ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	68f9      	ldr	r1, [r7, #12]
 8000ada:	440b      	add	r3, r1
 8000adc:	7e1b      	ldrb	r3, [r3, #24]
 8000ade:	041b      	lsls	r3, r3, #16
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8000ae0:	431a      	orrs	r2, r3
                           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8000ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	68f9      	ldr	r1, [r7, #12]
 8000aea:	440b      	add	r3, r1
 8000aec:	7e1b      	ldrb	r3, [r3, #24]
 8000aee:	021b      	lsls	r3, r3, #8
                           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8000af0:	4313      	orrs	r3, r2
                           (uint32_t)(ctx->input[(j * 4)]);
 8000af2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	68f9      	ldr	r1, [r7, #12]
 8000af8:	440a      	add	r2, r1
 8000afa:	7e12      	ldrb	r2, [r2, #24]
                           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8000afc:	431a      	orrs	r2, r3
                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8000afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	3360      	adds	r3, #96	; 0x60
 8000b04:	443b      	add	r3, r7
 8000b06:	f843 2c4c 	str.w	r2, [r3, #-76]
            for(unsigned int j = 0; j < 16; ++j){
 8000b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8000b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b12:	2b0f      	cmp	r3, #15
 8000b14:	d9d6      	bls.n	8000ac4 <md5Update+0x64>
            }
            md5Step(ctx->buffer, input);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3308      	adds	r3, #8
 8000b1a:	f107 0214 	add.w	r2, r7, #20
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 f8d1 	bl	8000cc8 <md5Step>
            offset = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(unsigned int i = 0; i < input_len; ++i){
 8000b2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d3b2      	bcc.n	8000a9e <md5Update+0x3e>
        }
    }
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3760      	adds	r7, #96	; 0x60
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000b44 <md5Finalize>:

/*
 * Pad the current input to get to 448 bytes, append the size in bits to the very end,
 * and save the result of the final iteration into digest.
 */
void md5Finalize(MD5Context *ctx){
 8000b44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b48:	b096      	sub	sp, #88	; 0x58
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
    uint32_t input[16];
    unsigned int offset = ctx->size % 64;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b54:	4613      	mov	r3, r2
 8000b56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    unsigned int padding_length = offset < 56 ? 56 - offset : (56 + 64) - offset;
 8000b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b5e:	2b37      	cmp	r3, #55	; 0x37
 8000b60:	d803      	bhi.n	8000b6a <md5Finalize+0x26>
 8000b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b64:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8000b68:	e002      	b.n	8000b70 <md5Finalize+0x2c>
 8000b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b6c:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8000b70:	64bb      	str	r3, [r7, #72]	; 0x48

    // Fill in the padding and undo the changes to size that resulted from the update
    md5Update(ctx, PADDING, padding_length);
 8000b72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b74:	4953      	ldr	r1, [pc, #332]	; (8000cc4 <md5Finalize+0x180>)
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ff72 	bl	8000a60 <md5Update>
    ctx->size -= (uint64_t)padding_length;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b82:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000b84:	2000      	movs	r0, #0
 8000b86:	460c      	mov	r4, r1
 8000b88:	4605      	mov	r5, r0
 8000b8a:	ebb2 0804 	subs.w	r8, r2, r4
 8000b8e:	eb63 0905 	sbc.w	r9, r3, r5
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	e9c3 8900 	strd	r8, r9, [r3]

    // Do a final update (internal to this function)
    // Last two 32-bit words are the two halves of the size (converted from bytes to bits)
    for(unsigned int j = 0; j < 14; ++j){
 8000b98:	2300      	movs	r3, #0
 8000b9a:	657b      	str	r3, [r7, #84]	; 0x54
 8000b9c:	e025      	b.n	8000bea <md5Finalize+0xa6>
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8000b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	3303      	adds	r3, #3
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	7e1b      	ldrb	r3, [r3, #24]
 8000baa:	061a      	lsls	r2, r3, #24
                   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8000bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	3302      	adds	r3, #2
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	440b      	add	r3, r1
 8000bb6:	7e1b      	ldrb	r3, [r3, #24]
 8000bb8:	041b      	lsls	r3, r3, #16
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8000bba:	431a      	orrs	r2, r3
                   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8000bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	440b      	add	r3, r1
 8000bc6:	7e1b      	ldrb	r3, [r3, #24]
 8000bc8:	021b      	lsls	r3, r3, #8
                   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
 8000bca:	4313      	orrs	r3, r2
                   (uint32_t)(ctx->input[(j * 4)]);
 8000bcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	6879      	ldr	r1, [r7, #4]
 8000bd2:	440a      	add	r2, r1
 8000bd4:	7e12      	ldrb	r2, [r2, #24]
                   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
 8000bd6:	431a      	orrs	r2, r3
        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
 8000bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	3358      	adds	r3, #88	; 0x58
 8000bde:	443b      	add	r3, r7
 8000be0:	f843 2c50 	str.w	r2, [r3, #-80]
    for(unsigned int j = 0; j < 14; ++j){
 8000be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000be6:	3301      	adds	r3, #1
 8000be8:	657b      	str	r3, [r7, #84]	; 0x54
 8000bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bec:	2b0d      	cmp	r3, #13
 8000bee:	d9d6      	bls.n	8000b9e <md5Finalize+0x5a>
    }
    input[14] = (uint32_t)(ctx->size * 8);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	643b      	str	r3, [r7, #64]	; 0x40
    input[15] = (uint32_t)((ctx->size * 8) >> 32);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c02:	f04f 0200 	mov.w	r2, #0
 8000c06:	f04f 0300 	mov.w	r3, #0
 8000c0a:	00cb      	lsls	r3, r1, #3
 8000c0c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c10:	00c2      	lsls	r2, r0, #3
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	f04f 0100 	mov.w	r1, #0
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	647b      	str	r3, [r7, #68]	; 0x44

    md5Step(ctx->buffer, input);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3308      	adds	r3, #8
 8000c26:	f107 0208 	add.w	r2, r7, #8
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 f84b 	bl	8000cc8 <md5Step>

    // Move the result into digest (convert from little-endian)
    for(unsigned int i = 0; i < 4; ++i){
 8000c32:	2300      	movs	r3, #0
 8000c34:	653b      	str	r3, [r7, #80]	; 0x50
 8000c36:	e03c      	b.n	8000cb2 <md5Finalize+0x16e>
        ctx->digest[(i * 4) + 0] = (uint8_t)((ctx->buffer[i] & 0x000000FF));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c3c:	3202      	adds	r2, #2
 8000c3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	b2d1      	uxtb	r1, r2
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	460a      	mov	r2, r1
 8000c4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        ctx->digest[(i * 4) + 1] = (uint8_t)((ctx->buffer[i] & 0x0000FF00) >>  8);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c56:	3202      	adds	r2, #2
 8000c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c5c:	0a1a      	lsrs	r2, r3, #8
 8000c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	3301      	adds	r3, #1
 8000c64:	b2d1      	uxtb	r1, r2
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	460a      	mov	r2, r1
 8000c6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        ctx->digest[(i * 4) + 2] = (uint8_t)((ctx->buffer[i] & 0x00FF0000) >> 16);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c74:	3202      	adds	r2, #2
 8000c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7a:	0c1a      	lsrs	r2, r3, #16
 8000c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	3302      	adds	r3, #2
 8000c82:	b2d1      	uxtb	r1, r2
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	4413      	add	r3, r2
 8000c88:	460a      	mov	r2, r1
 8000c8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        ctx->digest[(i * 4) + 3] = (uint8_t)((ctx->buffer[i] & 0xFF000000) >> 24);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c92:	3202      	adds	r2, #2
 8000c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c98:	0e1a      	lsrs	r2, r3, #24
 8000c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	3303      	adds	r3, #3
 8000ca0:	b2d1      	uxtb	r1, r2
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	460a      	mov	r2, r1
 8000ca8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    for(unsigned int i = 0; i < 4; ++i){
 8000cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cae:	3301      	adds	r3, #1
 8000cb0:	653b      	str	r3, [r7, #80]	; 0x50
 8000cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cb4:	2b03      	cmp	r3, #3
 8000cb6:	d9bf      	bls.n	8000c38 <md5Finalize+0xf4>
    }
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	3758      	adds	r7, #88	; 0x58
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000cc4:	20000200 	.word	0x20000200

08000cc8 <md5Step>:

/*
 * Step on 512 bits of input with the main MD5 algorithm.
 */
void md5Step(uint32_t *buffer, uint32_t *input){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
    uint32_t AA = buffer[0];
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t BB = buffer[1];
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	623b      	str	r3, [r7, #32]
    uint32_t CC = buffer[2];
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	61fb      	str	r3, [r7, #28]
    uint32_t DD = buffer[3];
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	61bb      	str	r3, [r7, #24]

    uint32_t E;

    unsigned int j;

    for(unsigned int i = 0; i < 64; ++i){
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	e06b      	b.n	8000dc8 <md5Step+0x100>
        switch(i / 16){
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d024      	beq.n	8000d42 <md5Step+0x7a>
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d831      	bhi.n	8000d60 <md5Step+0x98>
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d002      	beq.n	8000d06 <md5Step+0x3e>
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d00c      	beq.n	8000d1e <md5Step+0x56>
 8000d04:	e02c      	b.n	8000d60 <md5Step+0x98>
            case 0:
                E = F(BB, CC, DD);
 8000d06:	6a3a      	ldr	r2, [r7, #32]
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	400b      	ands	r3, r1
 8000d14:	4313      	orrs	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]
                j = i;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	613b      	str	r3, [r7, #16]
                break;
 8000d1c:	e02f      	b.n	8000d7e <md5Step+0xb6>
            case 1:
                E = G(BB, CC, DD);
 8000d1e:	6a3a      	ldr	r2, [r7, #32]
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	401a      	ands	r2, r3
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	43d9      	mvns	r1, r3
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	400b      	ands	r3, r1
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	617b      	str	r3, [r7, #20]
                j = ((i * 5) + 1) % 16;
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	3301      	adds	r3, #1
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	613b      	str	r3, [r7, #16]
                break;
 8000d40:	e01d      	b.n	8000d7e <md5Step+0xb6>
            case 2:
                E = H(BB, CC, DD);
 8000d42:	6a3a      	ldr	r2, [r7, #32]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	4053      	eors	r3, r2
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4053      	eors	r3, r2
 8000d4c:	617b      	str	r3, [r7, #20]
                j = ((i * 3) + 5) % 16;
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	4613      	mov	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	3305      	adds	r3, #5
 8000d58:	f003 030f 	and.w	r3, r3, #15
 8000d5c:	613b      	str	r3, [r7, #16]
                break;
 8000d5e:	e00e      	b.n	8000d7e <md5Step+0xb6>
            default:
                E = I(BB, CC, DD);
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	43da      	mvns	r2, r3
 8000d64:	6a3b      	ldr	r3, [r7, #32]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	69fa      	ldr	r2, [r7, #28]
 8000d6a:	4053      	eors	r3, r2
 8000d6c:	617b      	str	r3, [r7, #20]
                j = (i * 7) % 16;
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	4613      	mov	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	1a9b      	subs	r3, r3, r2
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	613b      	str	r3, [r7, #16]
                break;
 8000d7c:	bf00      	nop
        }

        uint32_t temp = DD;
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	60bb      	str	r3, [r7, #8]
        DD = CC;
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	61bb      	str	r3, [r7, #24]
        CC = BB;
 8000d86:	6a3b      	ldr	r3, [r7, #32]
 8000d88:	61fb      	str	r3, [r7, #28]
        BB = BB + rotateLeft(AA + E + K[i] + input[j], S[i]);
 8000d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	441a      	add	r2, r3
 8000d90:	4920      	ldr	r1, [pc, #128]	; (8000e14 <md5Step+0x14c>)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d98:	441a      	add	r2, r3
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	6839      	ldr	r1, [r7, #0]
 8000da0:	440b      	add	r3, r1
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	441a      	add	r2, r3
 8000da6:	491c      	ldr	r1, [pc, #112]	; (8000e18 <md5Step+0x150>)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dae:	4619      	mov	r1, r3
 8000db0:	4610      	mov	r0, r2
 8000db2:	f7ff fe20 	bl	80009f6 <rotateLeft>
 8000db6:	4602      	mov	r2, r0
 8000db8:	6a3b      	ldr	r3, [r7, #32]
 8000dba:	4413      	add	r3, r2
 8000dbc:	623b      	str	r3, [r7, #32]
        AA = temp;
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    for(unsigned int i = 0; i < 64; ++i){
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b3f      	cmp	r3, #63	; 0x3f
 8000dcc:	d990      	bls.n	8000cf0 <md5Step+0x28>
    }

    buffer[0] += AA;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	441a      	add	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	601a      	str	r2, [r3, #0]
    buffer[1] += BB;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	6819      	ldr	r1, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3304      	adds	r3, #4
 8000de4:	6a3a      	ldr	r2, [r7, #32]
 8000de6:	440a      	add	r2, r1
 8000de8:	601a      	str	r2, [r3, #0]
    buffer[2] += CC;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3308      	adds	r3, #8
 8000dee:	6819      	ldr	r1, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3308      	adds	r3, #8
 8000df4:	69fa      	ldr	r2, [r7, #28]
 8000df6:	440a      	add	r2, r1
 8000df8:	601a      	str	r2, [r3, #0]
    buffer[3] += DD;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	330c      	adds	r3, #12
 8000dfe:	6819      	ldr	r1, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	330c      	adds	r3, #12
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	440a      	add	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000100 	.word	0x20000100
 8000e18:	20000000 	.word	0x20000000

08000e1c <md5String>:

/*
 * Functions that run the algorithm on the provided input and put the digest into result.
 * result should be able to store 16 bytes.
 */
void md5String(char *input, uint8_t *result){
 8000e1c:	b5b0      	push	{r4, r5, r7, lr}
 8000e1e:	b09c      	sub	sp, #112	; 0x70
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
    MD5Context ctx;
    md5Init(&ctx);
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fdf4 	bl	8000a18 <md5Init>
    md5Update(&ctx, (uint8_t *)input, strlen(input));
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff f98b 	bl	800014c <strlen>
 8000e36:	4602      	mov	r2, r0
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	6879      	ldr	r1, [r7, #4]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fe0e 	bl	8000a60 <md5Update>
    md5Finalize(&ctx);
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fe7b 	bl	8000b44 <md5Finalize>

    memcpy(result, ctx.digest, 16);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	461d      	mov	r5, r3
 8000e52:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e58:	6028      	str	r0, [r5, #0]
 8000e5a:	6069      	str	r1, [r5, #4]
 8000e5c:	60aa      	str	r2, [r5, #8]
 8000e5e:	60eb      	str	r3, [r5, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3770      	adds	r7, #112	; 0x70
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bdb0      	pop	{r4, r5, r7, pc}

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_MspInit+0x40>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <HAL_MspInit+0x40>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6193      	str	r3, [r2, #24]
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_MspInit+0x40>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_MspInit+0x40>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_MspInit+0x40>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_MspInit+0x40>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a20      	ldr	r2, [pc, #128]	; (8000f48 <HAL_UART_MspInit+0x9c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d139      	bne.n	8000f40 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <HAL_UART_MspInit+0xa0>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a1e      	ldr	r2, [pc, #120]	; (8000f4c <HAL_UART_MspInit+0xa0>)
 8000ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <HAL_UART_MspInit+0xa0>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <HAL_UART_MspInit+0xa0>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a18      	ldr	r2, [pc, #96]	; (8000f4c <HAL_UART_MspInit+0xa0>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <HAL_UART_MspInit+0xa0>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480f      	ldr	r0, [pc, #60]	; (8000f50 <HAL_UART_MspInit+0xa4>)
 8000f12:	f000 faf9 	bl	8001508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4809      	ldr	r0, [pc, #36]	; (8000f50 <HAL_UART_MspInit+0xa4>)
 8000f2c:	f000 faec 	bl	8001508 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2100      	movs	r1, #0
 8000f34:	2025      	movs	r0, #37	; 0x25
 8000f36:	f000 f9fe 	bl	8001336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f3a:	2025      	movs	r0, #37	; 0x25
 8000f3c:	f000 fa17 	bl	800136e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40013800 	.word	0x40013800
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010800 	.word	0x40010800

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <NMI_Handler+0x4>

08000f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <MemManage_Handler+0x4>

08000f66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9a:	f000 f8b5 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <USART1_IRQHandler+0x10>)
 8000faa:	f001 f8df 	bl	800216c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200002cc 	.word	0x200002cc

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe8:	f001 fdda 	bl	8002ba0 <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	220c      	movs	r2, #12
 8000ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e009      	b.n	800100c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <_sbrk+0x64>)
 8001008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20002800 	.word	0x20002800
 8001018:	00000400 	.word	0x00000400
 800101c:	20000314 	.word	0x20000314
 8001020:	20000330 	.word	0x20000330

08001024 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001030:	f7ff fff8 	bl	8001024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001036:	490c      	ldr	r1, [pc, #48]	; (8001068 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001038:	4a0c      	ldr	r2, [pc, #48]	; (800106c <LoopFillZerobss+0x16>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800104c:	4c09      	ldr	r4, [pc, #36]	; (8001074 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105a:	f001 fda7 	bl	8002bac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800105e:	f7ff fbbf 	bl	80007e0 <main>
  bx lr
 8001062:	4770      	bx	lr
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 800106c:	08003730 	.word	0x08003730
  ldr r2, =_sbss
 8001070:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8001074:	2000032c 	.word	0x2000032c

08001078 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC1_2_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_Init+0x28>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_Init+0x28>)
 8001086:	f043 0310 	orr.w	r3, r3, #16
 800108a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f947 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	200f      	movs	r0, #15
 8001094:	f000 f808 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fee6 	bl	8000e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40022000 	.word	0x40022000

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f95f 	bl	800138a <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 f927 	bl	8001336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000240 	.word	0x20000240
 8001100:	20000248 	.word	0x20000248
 8001104:	20000244 	.word	0x20000244

08001108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HAL_IncTick+0x1c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_IncTick+0x20>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a03      	ldr	r2, [pc, #12]	; (8001128 <HAL_IncTick+0x20>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	20000248 	.word	0x20000248
 8001128:	20000318 	.word	0x20000318

0800112c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b02      	ldr	r3, [pc, #8]	; (800113c <HAL_GetTick+0x10>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	20000318 	.word	0x20000318

08001140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff fff0 	bl	800112c <HAL_GetTick>
 800114c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001158:	d005      	beq.n	8001166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_Delay+0x44>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4413      	add	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001166:	bf00      	nop
 8001168:	f7ff ffe0 	bl	800112c <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d8f7      	bhi.n	8001168 <HAL_Delay+0x28>
  {
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000248 	.word	0x20000248

08001188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ba:	4a04      	ldr	r2, [pc, #16]	; (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	60d3      	str	r3, [r2, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <__NVIC_GetPriorityGrouping+0x18>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 0307 	and.w	r3, r3, #7
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	db0b      	blt.n	8001216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f003 021f 	and.w	r2, r3, #31
 8001204:	4906      	ldr	r1, [pc, #24]	; (8001220 <__NVIC_EnableIRQ+0x34>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	2001      	movs	r0, #1
 800120e:	fa00 f202 	lsl.w	r2, r0, r2
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ec:	d301      	bcc.n	80012f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00f      	b.n	8001312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <SysTick_Config+0x40>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fa:	210f      	movs	r1, #15
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f7ff ff90 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <SysTick_Config+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <SysTick_Config+0x40>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff2d 	bl	8001188 <__NVIC_SetPriorityGrouping>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001348:	f7ff ff42 	bl	80011d0 <__NVIC_GetPriorityGrouping>
 800134c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ff90 	bl	8001278 <NVIC_EncodePriority>
 8001358:	4602      	mov	r2, r0
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff5f 	bl	8001224 <__NVIC_SetPriority>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff35 	bl	80011ec <__NVIC_EnableIRQ>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ffa2 	bl	80012dc <SysTick_Config>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d008      	beq.n	80013cc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2204      	movs	r2, #4
 80013be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e020      	b.n	800140e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 020e 	bic.w	r2, r2, #14
 80013da:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0201 	bic.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f4:	2101      	movs	r1, #1
 80013f6:	fa01 f202 	lsl.w	r2, r1, r2
 80013fa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800140c:	7bfb      	ldrb	r3, [r7, #15]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d005      	beq.n	800143c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2204      	movs	r2, #4
 8001434:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	e051      	b.n	80014e0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 020e 	bic.w	r2, r2, #14
 800144a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a22      	ldr	r2, [pc, #136]	; (80014ec <HAL_DMA_Abort_IT+0xd4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d029      	beq.n	80014ba <HAL_DMA_Abort_IT+0xa2>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a21      	ldr	r2, [pc, #132]	; (80014f0 <HAL_DMA_Abort_IT+0xd8>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d022      	beq.n	80014b6 <HAL_DMA_Abort_IT+0x9e>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a1f      	ldr	r2, [pc, #124]	; (80014f4 <HAL_DMA_Abort_IT+0xdc>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d01a      	beq.n	80014b0 <HAL_DMA_Abort_IT+0x98>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a1e      	ldr	r2, [pc, #120]	; (80014f8 <HAL_DMA_Abort_IT+0xe0>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d012      	beq.n	80014aa <HAL_DMA_Abort_IT+0x92>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a1c      	ldr	r2, [pc, #112]	; (80014fc <HAL_DMA_Abort_IT+0xe4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d00a      	beq.n	80014a4 <HAL_DMA_Abort_IT+0x8c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <HAL_DMA_Abort_IT+0xe8>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d102      	bne.n	800149e <HAL_DMA_Abort_IT+0x86>
 8001498:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800149c:	e00e      	b.n	80014bc <HAL_DMA_Abort_IT+0xa4>
 800149e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014a2:	e00b      	b.n	80014bc <HAL_DMA_Abort_IT+0xa4>
 80014a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a8:	e008      	b.n	80014bc <HAL_DMA_Abort_IT+0xa4>
 80014aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ae:	e005      	b.n	80014bc <HAL_DMA_Abort_IT+0xa4>
 80014b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b4:	e002      	b.n	80014bc <HAL_DMA_Abort_IT+0xa4>
 80014b6:	2310      	movs	r3, #16
 80014b8:	e000      	b.n	80014bc <HAL_DMA_Abort_IT+0xa4>
 80014ba:	2301      	movs	r3, #1
 80014bc:	4a11      	ldr	r2, [pc, #68]	; (8001504 <HAL_DMA_Abort_IT+0xec>)
 80014be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	4798      	blx	r3
    } 
  }
  return status;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40020008 	.word	0x40020008
 80014f0:	4002001c 	.word	0x4002001c
 80014f4:	40020030 	.word	0x40020030
 80014f8:	40020044 	.word	0x40020044
 80014fc:	40020058 	.word	0x40020058
 8001500:	4002006c 	.word	0x4002006c
 8001504:	40020000 	.word	0x40020000

08001508 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b08b      	sub	sp, #44	; 0x2c
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151a:	e161      	b.n	80017e0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800151c:	2201      	movs	r2, #1
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	429a      	cmp	r2, r3
 8001536:	f040 8150 	bne.w	80017da <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4a97      	ldr	r2, [pc, #604]	; (800179c <HAL_GPIO_Init+0x294>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d05e      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001544:	4a95      	ldr	r2, [pc, #596]	; (800179c <HAL_GPIO_Init+0x294>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d875      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 800154a:	4a95      	ldr	r2, [pc, #596]	; (80017a0 <HAL_GPIO_Init+0x298>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d058      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001550:	4a93      	ldr	r2, [pc, #588]	; (80017a0 <HAL_GPIO_Init+0x298>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d86f      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 8001556:	4a93      	ldr	r2, [pc, #588]	; (80017a4 <HAL_GPIO_Init+0x29c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d052      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 800155c:	4a91      	ldr	r2, [pc, #580]	; (80017a4 <HAL_GPIO_Init+0x29c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d869      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 8001562:	4a91      	ldr	r2, [pc, #580]	; (80017a8 <HAL_GPIO_Init+0x2a0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d04c      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001568:	4a8f      	ldr	r2, [pc, #572]	; (80017a8 <HAL_GPIO_Init+0x2a0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d863      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 800156e:	4a8f      	ldr	r2, [pc, #572]	; (80017ac <HAL_GPIO_Init+0x2a4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d046      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
 8001574:	4a8d      	ldr	r2, [pc, #564]	; (80017ac <HAL_GPIO_Init+0x2a4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d85d      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 800157a:	2b12      	cmp	r3, #18
 800157c:	d82a      	bhi.n	80015d4 <HAL_GPIO_Init+0xcc>
 800157e:	2b12      	cmp	r3, #18
 8001580:	d859      	bhi.n	8001636 <HAL_GPIO_Init+0x12e>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <HAL_GPIO_Init+0x80>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001603 	.word	0x08001603
 800158c:	080015dd 	.word	0x080015dd
 8001590:	080015ef 	.word	0x080015ef
 8001594:	08001631 	.word	0x08001631
 8001598:	08001637 	.word	0x08001637
 800159c:	08001637 	.word	0x08001637
 80015a0:	08001637 	.word	0x08001637
 80015a4:	08001637 	.word	0x08001637
 80015a8:	08001637 	.word	0x08001637
 80015ac:	08001637 	.word	0x08001637
 80015b0:	08001637 	.word	0x08001637
 80015b4:	08001637 	.word	0x08001637
 80015b8:	08001637 	.word	0x08001637
 80015bc:	08001637 	.word	0x08001637
 80015c0:	08001637 	.word	0x08001637
 80015c4:	08001637 	.word	0x08001637
 80015c8:	08001637 	.word	0x08001637
 80015cc:	080015e5 	.word	0x080015e5
 80015d0:	080015f9 	.word	0x080015f9
 80015d4:	4a76      	ldr	r2, [pc, #472]	; (80017b0 <HAL_GPIO_Init+0x2a8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015da:	e02c      	b.n	8001636 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e029      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	3304      	adds	r3, #4
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e024      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	3308      	adds	r3, #8
 80015f4:	623b      	str	r3, [r7, #32]
          break;
 80015f6:	e01f      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	330c      	adds	r3, #12
 80015fe:	623b      	str	r3, [r7, #32]
          break;
 8001600:	e01a      	b.n	8001638 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800160a:	2304      	movs	r3, #4
 800160c:	623b      	str	r3, [r7, #32]
          break;
 800160e:	e013      	b.n	8001638 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d105      	bne.n	8001624 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001618:	2308      	movs	r3, #8
 800161a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	611a      	str	r2, [r3, #16]
          break;
 8001622:	e009      	b.n	8001638 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001624:	2308      	movs	r3, #8
 8001626:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	615a      	str	r2, [r3, #20]
          break;
 800162e:	e003      	b.n	8001638 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e000      	b.n	8001638 <HAL_GPIO_Init+0x130>
          break;
 8001636:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2bff      	cmp	r3, #255	; 0xff
 800163c:	d801      	bhi.n	8001642 <HAL_GPIO_Init+0x13a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	e001      	b.n	8001646 <HAL_GPIO_Init+0x13e>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3304      	adds	r3, #4
 8001646:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2bff      	cmp	r3, #255	; 0xff
 800164c:	d802      	bhi.n	8001654 <HAL_GPIO_Init+0x14c>
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	e002      	b.n	800165a <HAL_GPIO_Init+0x152>
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	3b08      	subs	r3, #8
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	210f      	movs	r1, #15
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	401a      	ands	r2, r3
 800166c:	6a39      	ldr	r1, [r7, #32]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	431a      	orrs	r2, r3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80a9 	beq.w	80017da <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001688:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <HAL_GPIO_Init+0x2ac>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a49      	ldr	r2, [pc, #292]	; (80017b4 <HAL_GPIO_Init+0x2ac>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b47      	ldr	r3, [pc, #284]	; (80017b4 <HAL_GPIO_Init+0x2ac>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016a0:	4a45      	ldr	r2, [pc, #276]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	089b      	lsrs	r3, r3, #2
 80016a6:	3302      	adds	r3, #2
 80016a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	220f      	movs	r2, #15
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4013      	ands	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a3d      	ldr	r2, [pc, #244]	; (80017bc <HAL_GPIO_Init+0x2b4>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d00d      	beq.n	80016e8 <HAL_GPIO_Init+0x1e0>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a3c      	ldr	r2, [pc, #240]	; (80017c0 <HAL_GPIO_Init+0x2b8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d007      	beq.n	80016e4 <HAL_GPIO_Init+0x1dc>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a3b      	ldr	r2, [pc, #236]	; (80017c4 <HAL_GPIO_Init+0x2bc>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d101      	bne.n	80016e0 <HAL_GPIO_Init+0x1d8>
 80016dc:	2302      	movs	r3, #2
 80016de:	e004      	b.n	80016ea <HAL_GPIO_Init+0x1e2>
 80016e0:	2303      	movs	r3, #3
 80016e2:	e002      	b.n	80016ea <HAL_GPIO_Init+0x1e2>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <HAL_GPIO_Init+0x1e2>
 80016e8:	2300      	movs	r3, #0
 80016ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ec:	f002 0203 	and.w	r2, r2, #3
 80016f0:	0092      	lsls	r2, r2, #2
 80016f2:	4093      	lsls	r3, r2
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016fa:	492f      	ldr	r1, [pc, #188]	; (80017b8 <HAL_GPIO_Init+0x2b0>)
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3302      	adds	r3, #2
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001714:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	492b      	ldr	r1, [pc, #172]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	608b      	str	r3, [r1, #8]
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001722:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	43db      	mvns	r3, r3
 800172a:	4927      	ldr	r1, [pc, #156]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 800172c:	4013      	ands	r3, r2
 800172e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	4921      	ldr	r1, [pc, #132]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	60cb      	str	r3, [r1, #12]
 8001748:	e006      	b.n	8001758 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	43db      	mvns	r3, r3
 8001752:	491d      	ldr	r1, [pc, #116]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 8001754:	4013      	ands	r3, r2
 8001756:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	4917      	ldr	r1, [pc, #92]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	43db      	mvns	r3, r3
 800177a:	4913      	ldr	r1, [pc, #76]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 800177c:	4013      	ands	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d01f      	beq.n	80017cc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	490d      	ldr	r1, [pc, #52]	; (80017c8 <HAL_GPIO_Init+0x2c0>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
 8001798:	e01f      	b.n	80017da <HAL_GPIO_Init+0x2d2>
 800179a:	bf00      	nop
 800179c:	10320000 	.word	0x10320000
 80017a0:	10310000 	.word	0x10310000
 80017a4:	10220000 	.word	0x10220000
 80017a8:	10210000 	.word	0x10210000
 80017ac:	10120000 	.word	0x10120000
 80017b0:	10110000 	.word	0x10110000
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000
 80017bc:	40010800 	.word	0x40010800
 80017c0:	40010c00 	.word	0x40010c00
 80017c4:	40011000 	.word	0x40011000
 80017c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_GPIO_Init+0x2f4>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	4909      	ldr	r1, [pc, #36]	; (80017fc <HAL_GPIO_Init+0x2f4>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	3301      	adds	r3, #1
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f47f ae96 	bne.w	800151c <HAL_GPIO_Init+0x14>
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	372c      	adds	r7, #44	; 0x2c
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	40010400 	.word	0x40010400

08001800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e001      	b.n	8001822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	460b      	mov	r3, r1
 8001838:	807b      	strh	r3, [r7, #2]
 800183a:	4613      	mov	r3, r2
 800183c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800183e:	787b      	ldrb	r3, [r7, #1]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001844:	887a      	ldrh	r2, [r7, #2]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800184a:	e003      	b.n	8001854 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800184c:	887b      	ldrh	r3, [r7, #2]
 800184e:	041a      	lsls	r2, r3, #16
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	611a      	str	r2, [r3, #16]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
	...

08001860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e272      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 8087 	beq.w	800198e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001880:	4b92      	ldr	r3, [pc, #584]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b04      	cmp	r3, #4
 800188a:	d00c      	beq.n	80018a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800188c:	4b8f      	ldr	r3, [pc, #572]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	d112      	bne.n	80018be <HAL_RCC_OscConfig+0x5e>
 8001898:	4b8c      	ldr	r3, [pc, #560]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a4:	d10b      	bne.n	80018be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a6:	4b89      	ldr	r3, [pc, #548]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d06c      	beq.n	800198c <HAL_RCC_OscConfig+0x12c>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d168      	bne.n	800198c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e24c      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x76>
 80018c8:	4b80      	ldr	r3, [pc, #512]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a7f      	ldr	r2, [pc, #508]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e02e      	b.n	8001934 <HAL_RCC_OscConfig+0xd4>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x98>
 80018de:	4b7b      	ldr	r3, [pc, #492]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a7a      	ldr	r2, [pc, #488]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b78      	ldr	r3, [pc, #480]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a77      	ldr	r2, [pc, #476]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e01d      	b.n	8001934 <HAL_RCC_OscConfig+0xd4>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0xbc>
 8001902:	4b72      	ldr	r3, [pc, #456]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a71      	ldr	r2, [pc, #452]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b6f      	ldr	r3, [pc, #444]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a6e      	ldr	r2, [pc, #440]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e00b      	b.n	8001934 <HAL_RCC_OscConfig+0xd4>
 800191c:	4b6b      	ldr	r3, [pc, #428]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a6a      	ldr	r2, [pc, #424]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b68      	ldr	r3, [pc, #416]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a67      	ldr	r2, [pc, #412]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800192e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001932:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d013      	beq.n	8001964 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fbf6 	bl	800112c <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001944:	f7ff fbf2 	bl	800112c <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b64      	cmp	r3, #100	; 0x64
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e200      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	4b5d      	ldr	r3, [pc, #372]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0xe4>
 8001962:	e014      	b.n	800198e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fbe2 	bl	800112c <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff fbde 	bl	800112c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e1ec      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197e:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x10c>
 800198a:	e000      	b.n	800198e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d063      	beq.n	8001a62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800199a:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019a6:	4b49      	ldr	r3, [pc, #292]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d11c      	bne.n	80019ec <HAL_RCC_OscConfig+0x18c>
 80019b2:	4b46      	ldr	r3, [pc, #280]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d116      	bne.n	80019ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	4b43      	ldr	r3, [pc, #268]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d005      	beq.n	80019d6 <HAL_RCC_OscConfig+0x176>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d001      	beq.n	80019d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e1c0      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d6:	4b3d      	ldr	r3, [pc, #244]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4939      	ldr	r1, [pc, #228]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ea:	e03a      	b.n	8001a62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d020      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f4:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff fb97 	bl	800112c <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a02:	f7ff fb93 	bl	800112c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1a1      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a20:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4927      	ldr	r1, [pc, #156]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
 8001a34:	e015      	b.n	8001a62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a36:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fb76 	bl	800112c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a44:	f7ff fb72 	bl	800112c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e180      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d03a      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d019      	beq.n	8001aaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_RCC_OscConfig+0x274>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7c:	f7ff fb56 	bl	800112c <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a84:	f7ff fb52 	bl	800112c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e160      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f000 face 	bl	8002044 <RCC_Delay>
 8001aa8:	e01c      	b.n	8001ae4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_RCC_OscConfig+0x274>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab0:	f7ff fb3c 	bl	800112c <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab6:	e00f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fb38 	bl	800112c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d908      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e146      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	42420000 	.word	0x42420000
 8001ad4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad8:	4b92      	ldr	r3, [pc, #584]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1e9      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80a6 	beq.w	8001c3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af6:	4b8b      	ldr	r3, [pc, #556]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10d      	bne.n	8001b1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4a87      	ldr	r2, [pc, #540]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	61d3      	str	r3, [r2, #28]
 8001b0e:	4b85      	ldr	r3, [pc, #532]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <HAL_RCC_OscConfig+0x4c8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d118      	bne.n	8001b5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2a:	4b7f      	ldr	r3, [pc, #508]	; (8001d28 <HAL_RCC_OscConfig+0x4c8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a7e      	ldr	r2, [pc, #504]	; (8001d28 <HAL_RCC_OscConfig+0x4c8>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b36:	f7ff faf9 	bl	800112c <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3e:	f7ff faf5 	bl	800112c <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e103      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	4b75      	ldr	r3, [pc, #468]	; (8001d28 <HAL_RCC_OscConfig+0x4c8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x312>
 8001b64:	4b6f      	ldr	r3, [pc, #444]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a6e      	ldr	r2, [pc, #440]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6213      	str	r3, [r2, #32]
 8001b70:	e02d      	b.n	8001bce <HAL_RCC_OscConfig+0x36e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x334>
 8001b7a:	4b6a      	ldr	r3, [pc, #424]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a69      	ldr	r2, [pc, #420]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6213      	str	r3, [r2, #32]
 8001b86:	4b67      	ldr	r3, [pc, #412]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4a66      	ldr	r2, [pc, #408]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	6213      	str	r3, [r2, #32]
 8001b92:	e01c      	b.n	8001bce <HAL_RCC_OscConfig+0x36e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d10c      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x356>
 8001b9c:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4a60      	ldr	r2, [pc, #384]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	6213      	str	r3, [r2, #32]
 8001ba8:	4b5e      	ldr	r3, [pc, #376]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	4a5d      	ldr	r2, [pc, #372]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6213      	str	r3, [r2, #32]
 8001bb4:	e00b      	b.n	8001bce <HAL_RCC_OscConfig+0x36e>
 8001bb6:	4b5b      	ldr	r3, [pc, #364]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a5a      	ldr	r2, [pc, #360]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	6213      	str	r3, [r2, #32]
 8001bc2:	4b58      	ldr	r3, [pc, #352]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4a57      	ldr	r2, [pc, #348]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	f023 0304 	bic.w	r3, r3, #4
 8001bcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d015      	beq.n	8001c02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff faa9 	bl	800112c <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7ff faa5 	bl	800112c <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0b1      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf4:	4b4b      	ldr	r3, [pc, #300]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0ee      	beq.n	8001bde <HAL_RCC_OscConfig+0x37e>
 8001c00:	e014      	b.n	8001c2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7ff fa93 	bl	800112c <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7ff fa8f 	bl	800112c <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e09b      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c20:	4b40      	ldr	r3, [pc, #256]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1ee      	bne.n	8001c0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d105      	bne.n	8001c3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c32:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a3b      	ldr	r2, [pc, #236]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8087 	beq.w	8001d56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c48:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d061      	beq.n	8001d18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d146      	bne.n	8001cea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5c:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff fa63 	bl	800112c <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7ff fa5f 	bl	800112c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e06d      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7c:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c90:	d108      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4921      	ldr	r1, [pc, #132]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a19      	ldr	r1, [r3, #32]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	491b      	ldr	r1, [pc, #108]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7ff fa33 	bl	800112c <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cca:	f7ff fa2f 	bl	800112c <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e03d      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x46a>
 8001ce8:	e035      	b.n	8001d56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fa1c 	bl	800112c <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7ff fa18 	bl	800112c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e026      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x498>
 8001d16:	e01e      	b.n	8001d56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d107      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e019      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40007000 	.word	0x40007000
 8001d2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_OscConfig+0x500>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000

08001d64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0d0      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d78:	4b6a      	ldr	r3, [pc, #424]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d910      	bls.n	8001da8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b67      	ldr	r3, [pc, #412]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 0207 	bic.w	r2, r3, #7
 8001d8e:	4965      	ldr	r1, [pc, #404]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b63      	ldr	r3, [pc, #396]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0b8      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc0:	4b59      	ldr	r3, [pc, #356]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4a58      	ldr	r2, [pc, #352]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd8:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a52      	ldr	r2, [pc, #328]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001de2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de4:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	494d      	ldr	r1, [pc, #308]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d040      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d115      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e07f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e22:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d109      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e073      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e32:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e06b      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e42:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f023 0203 	bic.w	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4936      	ldr	r1, [pc, #216]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e54:	f7ff f96a 	bl	800112c <HAL_GetTick>
 8001e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5c:	f7ff f966 	bl	800112c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e053      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 020c 	and.w	r2, r3, #12
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d1eb      	bne.n	8001e5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e84:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d210      	bcs.n	8001eb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 0207 	bic.w	r2, r3, #7
 8001e9a:	4922      	ldr	r1, [pc, #136]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e032      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4916      	ldr	r1, [pc, #88]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	490e      	ldr	r1, [pc, #56]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ef2:	f000 f821 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	490a      	ldr	r1, [pc, #40]	; (8001f2c <HAL_RCC_ClockConfig+0x1c8>)
 8001f04:	5ccb      	ldrb	r3, [r1, r3]
 8001f06:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0a:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <HAL_RCC_ClockConfig+0x1cc>)
 8001f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_RCC_ClockConfig+0x1d0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff f8c8 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40022000 	.word	0x40022000
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	08003668 	.word	0x08003668
 8001f30:	20000240 	.word	0x20000240
 8001f34:	20000244 	.word	0x20000244

08001f38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d002      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x30>
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d003      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0x36>
 8001f66:	e027      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f6a:	613b      	str	r3, [r7, #16]
      break;
 8001f6c:	e027      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	0c9b      	lsrs	r3, r3, #18
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	4a17      	ldr	r2, [pc, #92]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f78:	5cd3      	ldrb	r3, [r2, r3]
 8001f7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d010      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	0c5b      	lsrs	r3, r3, #17
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f92:	5cd3      	ldrb	r3, [r2, r3]
 8001f94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f9a:	fb03 f202 	mul.w	r2, r3, r2
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e004      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	613b      	str	r3, [r7, #16]
      break;
 8001fb6:	e002      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fba:	613b      	str	r3, [r7, #16]
      break;
 8001fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fbe:	693b      	ldr	r3, [r7, #16]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	007a1200 	.word	0x007a1200
 8001fd4:	08003680 	.word	0x08003680
 8001fd8:	08003690 	.word	0x08003690
 8001fdc:	003d0900 	.word	0x003d0900

08001fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe4:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	20000240 	.word	0x20000240

08001ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ff8:	f7ff fff2 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	4903      	ldr	r1, [pc, #12]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	08003678 	.word	0x08003678

0800201c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002020:	f7ff ffde 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8002024:	4602      	mov	r2, r0
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	0adb      	lsrs	r3, r3, #11
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	4903      	ldr	r1, [pc, #12]	; (8002040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002032:	5ccb      	ldrb	r3, [r1, r3]
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002038:	4618      	mov	r0, r3
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000
 8002040:	08003678 	.word	0x08003678

08002044 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800204c:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <RCC_Delay+0x34>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0a      	ldr	r2, [pc, #40]	; (800207c <RCC_Delay+0x38>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	0a5b      	lsrs	r3, r3, #9
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	fb02 f303 	mul.w	r3, r2, r3
 800205e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002060:	bf00      	nop
  }
  while (Delay --);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1e5a      	subs	r2, r3, #1
 8002066:	60fa      	str	r2, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f9      	bne.n	8002060 <RCC_Delay+0x1c>
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	20000240 	.word	0x20000240
 800207c:	10624dd3 	.word	0x10624dd3

08002080 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e042      	b.n	8002118 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe ff00 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2224      	movs	r2, #36	; 0x24
 80020b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fcdd 	bl	8002a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	4613      	mov	r3, r2
 800212c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b20      	cmp	r3, #32
 8002138:	d112      	bne.n	8002160 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <HAL_UART_Receive_IT+0x26>
 8002140:	88fb      	ldrh	r3, [r7, #6]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e00b      	b.n	8002162 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	461a      	mov	r2, r3
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 fac0 	bl	80026dc <UART_Start_Receive_IT>
 800215c:	4603      	mov	r3, r0
 800215e:	e000      	b.n	8002162 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002160:	2302      	movs	r3, #2
  }
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b0ba      	sub	sp, #232	; 0xe8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800219e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80021aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10f      	bne.n	80021d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d009      	beq.n	80021d2 <HAL_UART_IRQHandler+0x66>
 80021be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fb9c 	bl	8002908 <UART_Receive_IT>
      return;
 80021d0:	e25b      	b.n	800268a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80021d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80de 	beq.w	8002398 <HAL_UART_IRQHandler+0x22c>
 80021dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d106      	bne.n	80021f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80d1 	beq.w	8002398 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_UART_IRQHandler+0xae>
 8002202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800221a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_UART_IRQHandler+0xd2>
 8002226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f043 0202 	orr.w	r2, r3, #2
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800223e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_UART_IRQHandler+0xf6>
 800224a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f043 0204 	orr.w	r2, r3, #4
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d011      	beq.n	8002292 <HAL_UART_IRQHandler+0x126>
 800226e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b00      	cmp	r3, #0
 8002278:	d105      	bne.n	8002286 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800227a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f043 0208 	orr.w	r2, r3, #8
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 81f2 	beq.w	8002680 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800229c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_UART_IRQHandler+0x14e>
 80022a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 fb27 	bl	8002908 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf14      	ite	ne
 80022c8:	2301      	movne	r3, #1
 80022ca:	2300      	moveq	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d103      	bne.n	80022e6 <HAL_UART_IRQHandler+0x17a>
 80022de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d04f      	beq.n	8002386 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fa31 	bl	800274e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d041      	beq.n	800237e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3314      	adds	r3, #20
 8002300:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002304:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002308:	e853 3f00 	ldrex	r3, [r3]
 800230c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3314      	adds	r3, #20
 8002322:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002326:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800232a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002332:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002336:	e841 2300 	strex	r3, r2, [r1]
 800233a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800233e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1d9      	bne.n	80022fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d013      	beq.n	8002376 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002352:	4a7e      	ldr	r2, [pc, #504]	; (800254c <HAL_UART_IRQHandler+0x3e0>)
 8002354:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff f85c 	bl	8001418 <HAL_DMA_Abort_IT>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d016      	beq.n	8002394 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002370:	4610      	mov	r0, r2
 8002372:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002374:	e00e      	b.n	8002394 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f99c 	bl	80026b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800237c:	e00a      	b.n	8002394 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f998 	bl	80026b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002384:	e006      	b.n	8002394 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f994 	bl	80026b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002392:	e175      	b.n	8002680 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002394:	bf00      	nop
    return;
 8002396:	e173      	b.n	8002680 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	2b01      	cmp	r3, #1
 800239e:	f040 814f 	bne.w	8002640 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8148 	beq.w	8002640 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 8141 	beq.w	8002640 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80b6 	beq.w	8002550 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80023f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8145 	beq.w	8002684 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002402:	429a      	cmp	r2, r3
 8002404:	f080 813e 	bcs.w	8002684 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800240e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b20      	cmp	r3, #32
 8002418:	f000 8088 	beq.w	800252c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	330c      	adds	r3, #12
 8002422:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002426:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800242a:	e853 3f00 	ldrex	r3, [r3]
 800242e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002432:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002436:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800243a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	330c      	adds	r3, #12
 8002444:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002448:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800244c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002450:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002454:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002458:	e841 2300 	strex	r3, r2, [r1]
 800245c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002460:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1d9      	bne.n	800241c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3314      	adds	r3, #20
 800246e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002472:	e853 3f00 	ldrex	r3, [r3]
 8002476:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002478:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800247a:	f023 0301 	bic.w	r3, r3, #1
 800247e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3314      	adds	r3, #20
 8002488:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800248c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002490:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002492:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002494:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002498:	e841 2300 	strex	r3, r2, [r1]
 800249c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800249e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1e1      	bne.n	8002468 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3314      	adds	r3, #20
 80024aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ae:	e853 3f00 	ldrex	r3, [r3]
 80024b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80024b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3314      	adds	r3, #20
 80024c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80024c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80024ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80024ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024d0:	e841 2300 	strex	r3, r2, [r1]
 80024d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80024d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e3      	bne.n	80024a4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	330c      	adds	r3, #12
 80024f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f4:	e853 3f00 	ldrex	r3, [r3]
 80024f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80024fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fc:	f023 0310 	bic.w	r3, r3, #16
 8002500:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	330c      	adds	r3, #12
 800250a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800250e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002510:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002512:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002514:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002516:	e841 2300 	strex	r3, r2, [r1]
 800251a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800251c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1e3      	bne.n	80024ea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe ff3b 	bl	80013a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800253a:	b29b      	uxth	r3, r3
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	b29b      	uxth	r3, r3
 8002540:	4619      	mov	r1, r3
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f8bf 	bl	80026c6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002548:	e09c      	b.n	8002684 <HAL_UART_IRQHandler+0x518>
 800254a:	bf00      	nop
 800254c:	08002813 	.word	0x08002813
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002558:	b29b      	uxth	r3, r3
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 808e 	beq.w	8002688 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800256c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 8089 	beq.w	8002688 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	330c      	adds	r3, #12
 800257c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002580:	e853 3f00 	ldrex	r3, [r3]
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002588:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800258c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	330c      	adds	r3, #12
 8002596:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800259a:	647a      	str	r2, [r7, #68]	; 0x44
 800259c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025a2:	e841 2300 	strex	r3, r2, [r1]
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1e3      	bne.n	8002576 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3314      	adds	r3, #20
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	e853 3f00 	ldrex	r3, [r3]
 80025bc:	623b      	str	r3, [r7, #32]
   return(result);
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3314      	adds	r3, #20
 80025ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80025d2:	633a      	str	r2, [r7, #48]	; 0x30
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025da:	e841 2300 	strex	r3, r2, [r1]
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1e3      	bne.n	80025ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	330c      	adds	r3, #12
 80025fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	e853 3f00 	ldrex	r3, [r3]
 8002602:	60fb      	str	r3, [r7, #12]
   return(result);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 0310 	bic.w	r3, r3, #16
 800260a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	330c      	adds	r3, #12
 8002614:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002618:	61fa      	str	r2, [r7, #28]
 800261a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261c:	69b9      	ldr	r1, [r7, #24]
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	e841 2300 	strex	r3, r2, [r1]
 8002624:	617b      	str	r3, [r7, #20]
   return(result);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1e3      	bne.n	80025f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002632:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002636:	4619      	mov	r1, r3
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f844 	bl	80026c6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800263e:	e023      	b.n	8002688 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002648:	2b00      	cmp	r3, #0
 800264a:	d009      	beq.n	8002660 <HAL_UART_IRQHandler+0x4f4>
 800264c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f8ee 	bl	800283a <UART_Transmit_IT>
    return;
 800265e:	e014      	b.n	800268a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00e      	beq.n	800268a <HAL_UART_IRQHandler+0x51e>
 800266c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f92d 	bl	80028d8 <UART_EndTransmit_IT>
    return;
 800267e:	e004      	b.n	800268a <HAL_UART_IRQHandler+0x51e>
    return;
 8002680:	bf00      	nop
 8002682:	e002      	b.n	800268a <HAL_UART_IRQHandler+0x51e>
      return;
 8002684:	bf00      	nop
 8002686:	e000      	b.n	800268a <HAL_UART_IRQHandler+0x51e>
      return;
 8002688:	bf00      	nop
  }
}
 800268a:	37e8      	adds	r7, #232	; 0xe8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	460b      	mov	r3, r1
 80026d0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	4613      	mov	r3, r2
 80026e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	88fa      	ldrh	r2, [r7, #6]
 80026f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	88fa      	ldrh	r2, [r7, #6]
 80026fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2222      	movs	r2, #34	; 0x22
 8002706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d007      	beq.n	8002722 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002720:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0201 	orr.w	r2, r2, #1
 8002730:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0220 	orr.w	r2, r2, #32
 8002740:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800274e:	b480      	push	{r7}
 8002750:	b095      	sub	sp, #84	; 0x54
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	330c      	adds	r3, #12
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002760:	e853 3f00 	ldrex	r3, [r3]
 8002764:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800276c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	330c      	adds	r3, #12
 8002774:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002776:	643a      	str	r2, [r7, #64]	; 0x40
 8002778:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800277c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800277e:	e841 2300 	strex	r3, r2, [r1]
 8002782:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1e5      	bne.n	8002756 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3314      	adds	r3, #20
 8002790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	e853 3f00 	ldrex	r3, [r3]
 8002798:	61fb      	str	r3, [r7, #28]
   return(result);
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3314      	adds	r3, #20
 80027a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b2:	e841 2300 	strex	r3, r2, [r1]
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1e5      	bne.n	800278a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d119      	bne.n	80027fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	330c      	adds	r3, #12
 80027cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	e853 3f00 	ldrex	r3, [r3]
 80027d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f023 0310 	bic.w	r3, r3, #16
 80027dc:	647b      	str	r3, [r7, #68]	; 0x44
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	330c      	adds	r3, #12
 80027e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027e6:	61ba      	str	r2, [r7, #24]
 80027e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ea:	6979      	ldr	r1, [r7, #20]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	e841 2300 	strex	r3, r2, [r1]
 80027f2:	613b      	str	r3, [r7, #16]
   return(result);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1e5      	bne.n	80027c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002808:	bf00      	nop
 800280a:	3754      	adds	r7, #84	; 0x54
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff ff41 	bl	80026b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b21      	cmp	r3, #33	; 0x21
 800284c:	d13e      	bne.n	80028cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002856:	d114      	bne.n	8002882 <UART_Transmit_IT+0x48>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d110      	bne.n	8002882 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002874:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	1c9a      	adds	r2, r3, #2
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	621a      	str	r2, [r3, #32]
 8002880:	e008      	b.n	8002894 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	1c59      	adds	r1, r3, #1
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6211      	str	r1, [r2, #32]
 800288c:	781a      	ldrb	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29b      	uxth	r3, r3
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4619      	mov	r1, r3
 80028a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10f      	bne.n	80028c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028cc:	2302      	movs	r3, #2
  }
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff fec9 	bl	8002690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	; 0x30
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b22      	cmp	r3, #34	; 0x22
 800291a:	f040 80ae 	bne.w	8002a7a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002926:	d117      	bne.n	8002958 <UART_Receive_IT+0x50>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d113      	bne.n	8002958 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002930:	2300      	movs	r3, #0
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	b29b      	uxth	r3, r3
 8002942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002946:	b29a      	uxth	r2, r3
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002950:	1c9a      	adds	r2, r3, #2
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	629a      	str	r2, [r3, #40]	; 0x28
 8002956:	e026      	b.n	80029a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800295e:	2300      	movs	r3, #0
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296a:	d007      	beq.n	800297c <UART_Receive_IT+0x74>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10a      	bne.n	800298a <UART_Receive_IT+0x82>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d106      	bne.n	800298a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	e008      	b.n	800299c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002996:	b2da      	uxtb	r2, r3
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	4619      	mov	r1, r3
 80029b4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d15d      	bne.n	8002a76 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0220 	bic.w	r2, r2, #32
 80029c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d135      	bne.n	8002a6c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	330c      	adds	r3, #12
 8002a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	e853 3f00 	ldrex	r3, [r3]
 8002a14:	613b      	str	r3, [r7, #16]
   return(result);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f023 0310 	bic.w	r3, r3, #16
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	330c      	adds	r3, #12
 8002a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a26:	623a      	str	r2, [r7, #32]
 8002a28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2a:	69f9      	ldr	r1, [r7, #28]
 8002a2c:	6a3a      	ldr	r2, [r7, #32]
 8002a2e:	e841 2300 	strex	r3, r2, [r1]
 8002a32:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1e5      	bne.n	8002a06 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d10a      	bne.n	8002a5e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a62:	4619      	mov	r1, r3
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff fe2e 	bl	80026c6 <HAL_UARTEx_RxEventCallback>
 8002a6a:	e002      	b.n	8002a72 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fe18 	bl	80026a2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	e002      	b.n	8002a7c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	e000      	b.n	8002a7c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002a7a:	2302      	movs	r3, #2
  }
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3730      	adds	r7, #48	; 0x30
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002abe:	f023 030c 	bic.w	r3, r3, #12
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2c      	ldr	r2, [pc, #176]	; (8002b98 <UART_SetConfig+0x114>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d103      	bne.n	8002af4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002aec:	f7ff fa96 	bl	800201c <HAL_RCC_GetPCLK2Freq>
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	e002      	b.n	8002afa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002af4:	f7ff fa7e 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8002af8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009a      	lsls	r2, r3, #2
 8002b04:	441a      	add	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b10:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <UART_SetConfig+0x118>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	0119      	lsls	r1, r3, #4
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	009a      	lsls	r2, r3, #2
 8002b24:	441a      	add	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b30:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <UART_SetConfig+0x118>)
 8002b32:	fba3 0302 	umull	r0, r3, r3, r2
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2064      	movs	r0, #100	; 0x64
 8002b3a:	fb00 f303 	mul.w	r3, r0, r3
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	3332      	adds	r3, #50	; 0x32
 8002b44:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <UART_SetConfig+0x118>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b50:	4419      	add	r1, r3
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	009a      	lsls	r2, r3, #2
 8002b5c:	441a      	add	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <UART_SetConfig+0x118>)
 8002b6a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	2064      	movs	r0, #100	; 0x64
 8002b72:	fb00 f303 	mul.w	r3, r0, r3
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	3332      	adds	r3, #50	; 0x32
 8002b7c:	4a07      	ldr	r2, [pc, #28]	; (8002b9c <UART_SetConfig+0x118>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	f003 020f 	and.w	r2, r3, #15
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	440a      	add	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40013800 	.word	0x40013800
 8002b9c:	51eb851f 	.word	0x51eb851f

08002ba0 <__errno>:
 8002ba0:	4b01      	ldr	r3, [pc, #4]	; (8002ba8 <__errno+0x8>)
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	2000024c 	.word	0x2000024c

08002bac <__libc_init_array>:
 8002bac:	b570      	push	{r4, r5, r6, lr}
 8002bae:	2600      	movs	r6, #0
 8002bb0:	4d0c      	ldr	r5, [pc, #48]	; (8002be4 <__libc_init_array+0x38>)
 8002bb2:	4c0d      	ldr	r4, [pc, #52]	; (8002be8 <__libc_init_array+0x3c>)
 8002bb4:	1b64      	subs	r4, r4, r5
 8002bb6:	10a4      	asrs	r4, r4, #2
 8002bb8:	42a6      	cmp	r6, r4
 8002bba:	d109      	bne.n	8002bd0 <__libc_init_array+0x24>
 8002bbc:	f000 fc9c 	bl	80034f8 <_init>
 8002bc0:	2600      	movs	r6, #0
 8002bc2:	4d0a      	ldr	r5, [pc, #40]	; (8002bec <__libc_init_array+0x40>)
 8002bc4:	4c0a      	ldr	r4, [pc, #40]	; (8002bf0 <__libc_init_array+0x44>)
 8002bc6:	1b64      	subs	r4, r4, r5
 8002bc8:	10a4      	asrs	r4, r4, #2
 8002bca:	42a6      	cmp	r6, r4
 8002bcc:	d105      	bne.n	8002bda <__libc_init_array+0x2e>
 8002bce:	bd70      	pop	{r4, r5, r6, pc}
 8002bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd4:	4798      	blx	r3
 8002bd6:	3601      	adds	r6, #1
 8002bd8:	e7ee      	b.n	8002bb8 <__libc_init_array+0xc>
 8002bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bde:	4798      	blx	r3
 8002be0:	3601      	adds	r6, #1
 8002be2:	e7f2      	b.n	8002bca <__libc_init_array+0x1e>
 8002be4:	08003728 	.word	0x08003728
 8002be8:	08003728 	.word	0x08003728
 8002bec:	08003728 	.word	0x08003728
 8002bf0:	0800372c 	.word	0x0800372c

08002bf4 <__retarget_lock_acquire_recursive>:
 8002bf4:	4770      	bx	lr

08002bf6 <__retarget_lock_release_recursive>:
 8002bf6:	4770      	bx	lr

08002bf8 <memcpy>:
 8002bf8:	440a      	add	r2, r1
 8002bfa:	4291      	cmp	r1, r2
 8002bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c00:	d100      	bne.n	8002c04 <memcpy+0xc>
 8002c02:	4770      	bx	lr
 8002c04:	b510      	push	{r4, lr}
 8002c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c0a:	4291      	cmp	r1, r2
 8002c0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c10:	d1f9      	bne.n	8002c06 <memcpy+0xe>
 8002c12:	bd10      	pop	{r4, pc}

08002c14 <memset>:
 8002c14:	4603      	mov	r3, r0
 8002c16:	4402      	add	r2, r0
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d100      	bne.n	8002c1e <memset+0xa>
 8002c1c:	4770      	bx	lr
 8002c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c22:	e7f9      	b.n	8002c18 <memset+0x4>

08002c24 <_free_r>:
 8002c24:	b538      	push	{r3, r4, r5, lr}
 8002c26:	4605      	mov	r5, r0
 8002c28:	2900      	cmp	r1, #0
 8002c2a:	d040      	beq.n	8002cae <_free_r+0x8a>
 8002c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c30:	1f0c      	subs	r4, r1, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bfb8      	it	lt
 8002c36:	18e4      	addlt	r4, r4, r3
 8002c38:	f000 f900 	bl	8002e3c <__malloc_lock>
 8002c3c:	4a1c      	ldr	r2, [pc, #112]	; (8002cb0 <_free_r+0x8c>)
 8002c3e:	6813      	ldr	r3, [r2, #0]
 8002c40:	b933      	cbnz	r3, 8002c50 <_free_r+0x2c>
 8002c42:	6063      	str	r3, [r4, #4]
 8002c44:	6014      	str	r4, [r2, #0]
 8002c46:	4628      	mov	r0, r5
 8002c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c4c:	f000 b8fc 	b.w	8002e48 <__malloc_unlock>
 8002c50:	42a3      	cmp	r3, r4
 8002c52:	d908      	bls.n	8002c66 <_free_r+0x42>
 8002c54:	6820      	ldr	r0, [r4, #0]
 8002c56:	1821      	adds	r1, r4, r0
 8002c58:	428b      	cmp	r3, r1
 8002c5a:	bf01      	itttt	eq
 8002c5c:	6819      	ldreq	r1, [r3, #0]
 8002c5e:	685b      	ldreq	r3, [r3, #4]
 8002c60:	1809      	addeq	r1, r1, r0
 8002c62:	6021      	streq	r1, [r4, #0]
 8002c64:	e7ed      	b.n	8002c42 <_free_r+0x1e>
 8002c66:	461a      	mov	r2, r3
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	b10b      	cbz	r3, 8002c70 <_free_r+0x4c>
 8002c6c:	42a3      	cmp	r3, r4
 8002c6e:	d9fa      	bls.n	8002c66 <_free_r+0x42>
 8002c70:	6811      	ldr	r1, [r2, #0]
 8002c72:	1850      	adds	r0, r2, r1
 8002c74:	42a0      	cmp	r0, r4
 8002c76:	d10b      	bne.n	8002c90 <_free_r+0x6c>
 8002c78:	6820      	ldr	r0, [r4, #0]
 8002c7a:	4401      	add	r1, r0
 8002c7c:	1850      	adds	r0, r2, r1
 8002c7e:	4283      	cmp	r3, r0
 8002c80:	6011      	str	r1, [r2, #0]
 8002c82:	d1e0      	bne.n	8002c46 <_free_r+0x22>
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4401      	add	r1, r0
 8002c8a:	6011      	str	r1, [r2, #0]
 8002c8c:	6053      	str	r3, [r2, #4]
 8002c8e:	e7da      	b.n	8002c46 <_free_r+0x22>
 8002c90:	d902      	bls.n	8002c98 <_free_r+0x74>
 8002c92:	230c      	movs	r3, #12
 8002c94:	602b      	str	r3, [r5, #0]
 8002c96:	e7d6      	b.n	8002c46 <_free_r+0x22>
 8002c98:	6820      	ldr	r0, [r4, #0]
 8002c9a:	1821      	adds	r1, r4, r0
 8002c9c:	428b      	cmp	r3, r1
 8002c9e:	bf01      	itttt	eq
 8002ca0:	6819      	ldreq	r1, [r3, #0]
 8002ca2:	685b      	ldreq	r3, [r3, #4]
 8002ca4:	1809      	addeq	r1, r1, r0
 8002ca6:	6021      	streq	r1, [r4, #0]
 8002ca8:	6063      	str	r3, [r4, #4]
 8002caa:	6054      	str	r4, [r2, #4]
 8002cac:	e7cb      	b.n	8002c46 <_free_r+0x22>
 8002cae:	bd38      	pop	{r3, r4, r5, pc}
 8002cb0:	20000320 	.word	0x20000320

08002cb4 <sbrk_aligned>:
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	4e0e      	ldr	r6, [pc, #56]	; (8002cf0 <sbrk_aligned+0x3c>)
 8002cb8:	460c      	mov	r4, r1
 8002cba:	6831      	ldr	r1, [r6, #0]
 8002cbc:	4605      	mov	r5, r0
 8002cbe:	b911      	cbnz	r1, 8002cc6 <sbrk_aligned+0x12>
 8002cc0:	f000 f88c 	bl	8002ddc <_sbrk_r>
 8002cc4:	6030      	str	r0, [r6, #0]
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	4628      	mov	r0, r5
 8002cca:	f000 f887 	bl	8002ddc <_sbrk_r>
 8002cce:	1c43      	adds	r3, r0, #1
 8002cd0:	d00a      	beq.n	8002ce8 <sbrk_aligned+0x34>
 8002cd2:	1cc4      	adds	r4, r0, #3
 8002cd4:	f024 0403 	bic.w	r4, r4, #3
 8002cd8:	42a0      	cmp	r0, r4
 8002cda:	d007      	beq.n	8002cec <sbrk_aligned+0x38>
 8002cdc:	1a21      	subs	r1, r4, r0
 8002cde:	4628      	mov	r0, r5
 8002ce0:	f000 f87c 	bl	8002ddc <_sbrk_r>
 8002ce4:	3001      	adds	r0, #1
 8002ce6:	d101      	bne.n	8002cec <sbrk_aligned+0x38>
 8002ce8:	f04f 34ff 	mov.w	r4, #4294967295
 8002cec:	4620      	mov	r0, r4
 8002cee:	bd70      	pop	{r4, r5, r6, pc}
 8002cf0:	20000324 	.word	0x20000324

08002cf4 <_malloc_r>:
 8002cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cf8:	1ccd      	adds	r5, r1, #3
 8002cfa:	f025 0503 	bic.w	r5, r5, #3
 8002cfe:	3508      	adds	r5, #8
 8002d00:	2d0c      	cmp	r5, #12
 8002d02:	bf38      	it	cc
 8002d04:	250c      	movcc	r5, #12
 8002d06:	2d00      	cmp	r5, #0
 8002d08:	4607      	mov	r7, r0
 8002d0a:	db01      	blt.n	8002d10 <_malloc_r+0x1c>
 8002d0c:	42a9      	cmp	r1, r5
 8002d0e:	d905      	bls.n	8002d1c <_malloc_r+0x28>
 8002d10:	230c      	movs	r3, #12
 8002d12:	2600      	movs	r6, #0
 8002d14:	603b      	str	r3, [r7, #0]
 8002d16:	4630      	mov	r0, r6
 8002d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d1c:	4e2e      	ldr	r6, [pc, #184]	; (8002dd8 <_malloc_r+0xe4>)
 8002d1e:	f000 f88d 	bl	8002e3c <__malloc_lock>
 8002d22:	6833      	ldr	r3, [r6, #0]
 8002d24:	461c      	mov	r4, r3
 8002d26:	bb34      	cbnz	r4, 8002d76 <_malloc_r+0x82>
 8002d28:	4629      	mov	r1, r5
 8002d2a:	4638      	mov	r0, r7
 8002d2c:	f7ff ffc2 	bl	8002cb4 <sbrk_aligned>
 8002d30:	1c43      	adds	r3, r0, #1
 8002d32:	4604      	mov	r4, r0
 8002d34:	d14d      	bne.n	8002dd2 <_malloc_r+0xde>
 8002d36:	6834      	ldr	r4, [r6, #0]
 8002d38:	4626      	mov	r6, r4
 8002d3a:	2e00      	cmp	r6, #0
 8002d3c:	d140      	bne.n	8002dc0 <_malloc_r+0xcc>
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	4631      	mov	r1, r6
 8002d42:	4638      	mov	r0, r7
 8002d44:	eb04 0803 	add.w	r8, r4, r3
 8002d48:	f000 f848 	bl	8002ddc <_sbrk_r>
 8002d4c:	4580      	cmp	r8, r0
 8002d4e:	d13a      	bne.n	8002dc6 <_malloc_r+0xd2>
 8002d50:	6821      	ldr	r1, [r4, #0]
 8002d52:	3503      	adds	r5, #3
 8002d54:	1a6d      	subs	r5, r5, r1
 8002d56:	f025 0503 	bic.w	r5, r5, #3
 8002d5a:	3508      	adds	r5, #8
 8002d5c:	2d0c      	cmp	r5, #12
 8002d5e:	bf38      	it	cc
 8002d60:	250c      	movcc	r5, #12
 8002d62:	4638      	mov	r0, r7
 8002d64:	4629      	mov	r1, r5
 8002d66:	f7ff ffa5 	bl	8002cb4 <sbrk_aligned>
 8002d6a:	3001      	adds	r0, #1
 8002d6c:	d02b      	beq.n	8002dc6 <_malloc_r+0xd2>
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	442b      	add	r3, r5
 8002d72:	6023      	str	r3, [r4, #0]
 8002d74:	e00e      	b.n	8002d94 <_malloc_r+0xa0>
 8002d76:	6822      	ldr	r2, [r4, #0]
 8002d78:	1b52      	subs	r2, r2, r5
 8002d7a:	d41e      	bmi.n	8002dba <_malloc_r+0xc6>
 8002d7c:	2a0b      	cmp	r2, #11
 8002d7e:	d916      	bls.n	8002dae <_malloc_r+0xba>
 8002d80:	1961      	adds	r1, r4, r5
 8002d82:	42a3      	cmp	r3, r4
 8002d84:	6025      	str	r5, [r4, #0]
 8002d86:	bf18      	it	ne
 8002d88:	6059      	strne	r1, [r3, #4]
 8002d8a:	6863      	ldr	r3, [r4, #4]
 8002d8c:	bf08      	it	eq
 8002d8e:	6031      	streq	r1, [r6, #0]
 8002d90:	5162      	str	r2, [r4, r5]
 8002d92:	604b      	str	r3, [r1, #4]
 8002d94:	4638      	mov	r0, r7
 8002d96:	f104 060b 	add.w	r6, r4, #11
 8002d9a:	f000 f855 	bl	8002e48 <__malloc_unlock>
 8002d9e:	f026 0607 	bic.w	r6, r6, #7
 8002da2:	1d23      	adds	r3, r4, #4
 8002da4:	1af2      	subs	r2, r6, r3
 8002da6:	d0b6      	beq.n	8002d16 <_malloc_r+0x22>
 8002da8:	1b9b      	subs	r3, r3, r6
 8002daa:	50a3      	str	r3, [r4, r2]
 8002dac:	e7b3      	b.n	8002d16 <_malloc_r+0x22>
 8002dae:	6862      	ldr	r2, [r4, #4]
 8002db0:	42a3      	cmp	r3, r4
 8002db2:	bf0c      	ite	eq
 8002db4:	6032      	streq	r2, [r6, #0]
 8002db6:	605a      	strne	r2, [r3, #4]
 8002db8:	e7ec      	b.n	8002d94 <_malloc_r+0xa0>
 8002dba:	4623      	mov	r3, r4
 8002dbc:	6864      	ldr	r4, [r4, #4]
 8002dbe:	e7b2      	b.n	8002d26 <_malloc_r+0x32>
 8002dc0:	4634      	mov	r4, r6
 8002dc2:	6876      	ldr	r6, [r6, #4]
 8002dc4:	e7b9      	b.n	8002d3a <_malloc_r+0x46>
 8002dc6:	230c      	movs	r3, #12
 8002dc8:	4638      	mov	r0, r7
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	f000 f83c 	bl	8002e48 <__malloc_unlock>
 8002dd0:	e7a1      	b.n	8002d16 <_malloc_r+0x22>
 8002dd2:	6025      	str	r5, [r4, #0]
 8002dd4:	e7de      	b.n	8002d94 <_malloc_r+0xa0>
 8002dd6:	bf00      	nop
 8002dd8:	20000320 	.word	0x20000320

08002ddc <_sbrk_r>:
 8002ddc:	b538      	push	{r3, r4, r5, lr}
 8002dde:	2300      	movs	r3, #0
 8002de0:	4d05      	ldr	r5, [pc, #20]	; (8002df8 <_sbrk_r+0x1c>)
 8002de2:	4604      	mov	r4, r0
 8002de4:	4608      	mov	r0, r1
 8002de6:	602b      	str	r3, [r5, #0]
 8002de8:	f7fe f8e6 	bl	8000fb8 <_sbrk>
 8002dec:	1c43      	adds	r3, r0, #1
 8002dee:	d102      	bne.n	8002df6 <_sbrk_r+0x1a>
 8002df0:	682b      	ldr	r3, [r5, #0]
 8002df2:	b103      	cbz	r3, 8002df6 <_sbrk_r+0x1a>
 8002df4:	6023      	str	r3, [r4, #0]
 8002df6:	bd38      	pop	{r3, r4, r5, pc}
 8002df8:	20000328 	.word	0x20000328

08002dfc <siprintf>:
 8002dfc:	b40e      	push	{r1, r2, r3}
 8002dfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e02:	b500      	push	{lr}
 8002e04:	b09c      	sub	sp, #112	; 0x70
 8002e06:	ab1d      	add	r3, sp, #116	; 0x74
 8002e08:	9002      	str	r0, [sp, #8]
 8002e0a:	9006      	str	r0, [sp, #24]
 8002e0c:	9107      	str	r1, [sp, #28]
 8002e0e:	9104      	str	r1, [sp, #16]
 8002e10:	4808      	ldr	r0, [pc, #32]	; (8002e34 <siprintf+0x38>)
 8002e12:	4909      	ldr	r1, [pc, #36]	; (8002e38 <siprintf+0x3c>)
 8002e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e18:	9105      	str	r1, [sp, #20]
 8002e1a:	6800      	ldr	r0, [r0, #0]
 8002e1c:	a902      	add	r1, sp, #8
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	f000 f874 	bl	8002f0c <_svfiprintf_r>
 8002e24:	2200      	movs	r2, #0
 8002e26:	9b02      	ldr	r3, [sp, #8]
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	b01c      	add	sp, #112	; 0x70
 8002e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e30:	b003      	add	sp, #12
 8002e32:	4770      	bx	lr
 8002e34:	2000024c 	.word	0x2000024c
 8002e38:	ffff0208 	.word	0xffff0208

08002e3c <__malloc_lock>:
 8002e3c:	4801      	ldr	r0, [pc, #4]	; (8002e44 <__malloc_lock+0x8>)
 8002e3e:	f7ff bed9 	b.w	8002bf4 <__retarget_lock_acquire_recursive>
 8002e42:	bf00      	nop
 8002e44:	2000031c 	.word	0x2000031c

08002e48 <__malloc_unlock>:
 8002e48:	4801      	ldr	r0, [pc, #4]	; (8002e50 <__malloc_unlock+0x8>)
 8002e4a:	f7ff bed4 	b.w	8002bf6 <__retarget_lock_release_recursive>
 8002e4e:	bf00      	nop
 8002e50:	2000031c 	.word	0x2000031c

08002e54 <__ssputs_r>:
 8002e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e58:	688e      	ldr	r6, [r1, #8]
 8002e5a:	4682      	mov	sl, r0
 8002e5c:	429e      	cmp	r6, r3
 8002e5e:	460c      	mov	r4, r1
 8002e60:	4690      	mov	r8, r2
 8002e62:	461f      	mov	r7, r3
 8002e64:	d838      	bhi.n	8002ed8 <__ssputs_r+0x84>
 8002e66:	898a      	ldrh	r2, [r1, #12]
 8002e68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e6c:	d032      	beq.n	8002ed4 <__ssputs_r+0x80>
 8002e6e:	6825      	ldr	r5, [r4, #0]
 8002e70:	6909      	ldr	r1, [r1, #16]
 8002e72:	3301      	adds	r3, #1
 8002e74:	eba5 0901 	sub.w	r9, r5, r1
 8002e78:	6965      	ldr	r5, [r4, #20]
 8002e7a:	444b      	add	r3, r9
 8002e7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e84:	106d      	asrs	r5, r5, #1
 8002e86:	429d      	cmp	r5, r3
 8002e88:	bf38      	it	cc
 8002e8a:	461d      	movcc	r5, r3
 8002e8c:	0553      	lsls	r3, r2, #21
 8002e8e:	d531      	bpl.n	8002ef4 <__ssputs_r+0xa0>
 8002e90:	4629      	mov	r1, r5
 8002e92:	f7ff ff2f 	bl	8002cf4 <_malloc_r>
 8002e96:	4606      	mov	r6, r0
 8002e98:	b950      	cbnz	r0, 8002eb0 <__ssputs_r+0x5c>
 8002e9a:	230c      	movs	r3, #12
 8002e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea0:	f8ca 3000 	str.w	r3, [sl]
 8002ea4:	89a3      	ldrh	r3, [r4, #12]
 8002ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eaa:	81a3      	strh	r3, [r4, #12]
 8002eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eb0:	464a      	mov	r2, r9
 8002eb2:	6921      	ldr	r1, [r4, #16]
 8002eb4:	f7ff fea0 	bl	8002bf8 <memcpy>
 8002eb8:	89a3      	ldrh	r3, [r4, #12]
 8002eba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec2:	81a3      	strh	r3, [r4, #12]
 8002ec4:	6126      	str	r6, [r4, #16]
 8002ec6:	444e      	add	r6, r9
 8002ec8:	6026      	str	r6, [r4, #0]
 8002eca:	463e      	mov	r6, r7
 8002ecc:	6165      	str	r5, [r4, #20]
 8002ece:	eba5 0509 	sub.w	r5, r5, r9
 8002ed2:	60a5      	str	r5, [r4, #8]
 8002ed4:	42be      	cmp	r6, r7
 8002ed6:	d900      	bls.n	8002eda <__ssputs_r+0x86>
 8002ed8:	463e      	mov	r6, r7
 8002eda:	4632      	mov	r2, r6
 8002edc:	4641      	mov	r1, r8
 8002ede:	6820      	ldr	r0, [r4, #0]
 8002ee0:	f000 fab8 	bl	8003454 <memmove>
 8002ee4:	68a3      	ldr	r3, [r4, #8]
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	1b9b      	subs	r3, r3, r6
 8002eea:	60a3      	str	r3, [r4, #8]
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	4433      	add	r3, r6
 8002ef0:	6023      	str	r3, [r4, #0]
 8002ef2:	e7db      	b.n	8002eac <__ssputs_r+0x58>
 8002ef4:	462a      	mov	r2, r5
 8002ef6:	f000 fac7 	bl	8003488 <_realloc_r>
 8002efa:	4606      	mov	r6, r0
 8002efc:	2800      	cmp	r0, #0
 8002efe:	d1e1      	bne.n	8002ec4 <__ssputs_r+0x70>
 8002f00:	4650      	mov	r0, sl
 8002f02:	6921      	ldr	r1, [r4, #16]
 8002f04:	f7ff fe8e 	bl	8002c24 <_free_r>
 8002f08:	e7c7      	b.n	8002e9a <__ssputs_r+0x46>
	...

08002f0c <_svfiprintf_r>:
 8002f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f10:	4698      	mov	r8, r3
 8002f12:	898b      	ldrh	r3, [r1, #12]
 8002f14:	4607      	mov	r7, r0
 8002f16:	061b      	lsls	r3, r3, #24
 8002f18:	460d      	mov	r5, r1
 8002f1a:	4614      	mov	r4, r2
 8002f1c:	b09d      	sub	sp, #116	; 0x74
 8002f1e:	d50e      	bpl.n	8002f3e <_svfiprintf_r+0x32>
 8002f20:	690b      	ldr	r3, [r1, #16]
 8002f22:	b963      	cbnz	r3, 8002f3e <_svfiprintf_r+0x32>
 8002f24:	2140      	movs	r1, #64	; 0x40
 8002f26:	f7ff fee5 	bl	8002cf4 <_malloc_r>
 8002f2a:	6028      	str	r0, [r5, #0]
 8002f2c:	6128      	str	r0, [r5, #16]
 8002f2e:	b920      	cbnz	r0, 8002f3a <_svfiprintf_r+0x2e>
 8002f30:	230c      	movs	r3, #12
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	f04f 30ff 	mov.w	r0, #4294967295
 8002f38:	e0d1      	b.n	80030de <_svfiprintf_r+0x1d2>
 8002f3a:	2340      	movs	r3, #64	; 0x40
 8002f3c:	616b      	str	r3, [r5, #20]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	9309      	str	r3, [sp, #36]	; 0x24
 8002f42:	2320      	movs	r3, #32
 8002f44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f48:	2330      	movs	r3, #48	; 0x30
 8002f4a:	f04f 0901 	mov.w	r9, #1
 8002f4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80030f8 <_svfiprintf_r+0x1ec>
 8002f56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f5a:	4623      	mov	r3, r4
 8002f5c:	469a      	mov	sl, r3
 8002f5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f62:	b10a      	cbz	r2, 8002f68 <_svfiprintf_r+0x5c>
 8002f64:	2a25      	cmp	r2, #37	; 0x25
 8002f66:	d1f9      	bne.n	8002f5c <_svfiprintf_r+0x50>
 8002f68:	ebba 0b04 	subs.w	fp, sl, r4
 8002f6c:	d00b      	beq.n	8002f86 <_svfiprintf_r+0x7a>
 8002f6e:	465b      	mov	r3, fp
 8002f70:	4622      	mov	r2, r4
 8002f72:	4629      	mov	r1, r5
 8002f74:	4638      	mov	r0, r7
 8002f76:	f7ff ff6d 	bl	8002e54 <__ssputs_r>
 8002f7a:	3001      	adds	r0, #1
 8002f7c:	f000 80aa 	beq.w	80030d4 <_svfiprintf_r+0x1c8>
 8002f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f82:	445a      	add	r2, fp
 8002f84:	9209      	str	r2, [sp, #36]	; 0x24
 8002f86:	f89a 3000 	ldrb.w	r3, [sl]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 80a2 	beq.w	80030d4 <_svfiprintf_r+0x1c8>
 8002f90:	2300      	movs	r3, #0
 8002f92:	f04f 32ff 	mov.w	r2, #4294967295
 8002f96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f9a:	f10a 0a01 	add.w	sl, sl, #1
 8002f9e:	9304      	str	r3, [sp, #16]
 8002fa0:	9307      	str	r3, [sp, #28]
 8002fa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fa6:	931a      	str	r3, [sp, #104]	; 0x68
 8002fa8:	4654      	mov	r4, sl
 8002faa:	2205      	movs	r2, #5
 8002fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fb0:	4851      	ldr	r0, [pc, #324]	; (80030f8 <_svfiprintf_r+0x1ec>)
 8002fb2:	f000 fa41 	bl	8003438 <memchr>
 8002fb6:	9a04      	ldr	r2, [sp, #16]
 8002fb8:	b9d8      	cbnz	r0, 8002ff2 <_svfiprintf_r+0xe6>
 8002fba:	06d0      	lsls	r0, r2, #27
 8002fbc:	bf44      	itt	mi
 8002fbe:	2320      	movmi	r3, #32
 8002fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fc4:	0711      	lsls	r1, r2, #28
 8002fc6:	bf44      	itt	mi
 8002fc8:	232b      	movmi	r3, #43	; 0x2b
 8002fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fce:	f89a 3000 	ldrb.w	r3, [sl]
 8002fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8002fd4:	d015      	beq.n	8003002 <_svfiprintf_r+0xf6>
 8002fd6:	4654      	mov	r4, sl
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f04f 0c0a 	mov.w	ip, #10
 8002fde:	9a07      	ldr	r2, [sp, #28]
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fe6:	3b30      	subs	r3, #48	; 0x30
 8002fe8:	2b09      	cmp	r3, #9
 8002fea:	d94e      	bls.n	800308a <_svfiprintf_r+0x17e>
 8002fec:	b1b0      	cbz	r0, 800301c <_svfiprintf_r+0x110>
 8002fee:	9207      	str	r2, [sp, #28]
 8002ff0:	e014      	b.n	800301c <_svfiprintf_r+0x110>
 8002ff2:	eba0 0308 	sub.w	r3, r0, r8
 8002ff6:	fa09 f303 	lsl.w	r3, r9, r3
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	46a2      	mov	sl, r4
 8002ffe:	9304      	str	r3, [sp, #16]
 8003000:	e7d2      	b.n	8002fa8 <_svfiprintf_r+0x9c>
 8003002:	9b03      	ldr	r3, [sp, #12]
 8003004:	1d19      	adds	r1, r3, #4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	9103      	str	r1, [sp, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	bfbb      	ittet	lt
 800300e:	425b      	neglt	r3, r3
 8003010:	f042 0202 	orrlt.w	r2, r2, #2
 8003014:	9307      	strge	r3, [sp, #28]
 8003016:	9307      	strlt	r3, [sp, #28]
 8003018:	bfb8      	it	lt
 800301a:	9204      	strlt	r2, [sp, #16]
 800301c:	7823      	ldrb	r3, [r4, #0]
 800301e:	2b2e      	cmp	r3, #46	; 0x2e
 8003020:	d10c      	bne.n	800303c <_svfiprintf_r+0x130>
 8003022:	7863      	ldrb	r3, [r4, #1]
 8003024:	2b2a      	cmp	r3, #42	; 0x2a
 8003026:	d135      	bne.n	8003094 <_svfiprintf_r+0x188>
 8003028:	9b03      	ldr	r3, [sp, #12]
 800302a:	3402      	adds	r4, #2
 800302c:	1d1a      	adds	r2, r3, #4
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	9203      	str	r2, [sp, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	bfb8      	it	lt
 8003036:	f04f 33ff 	movlt.w	r3, #4294967295
 800303a:	9305      	str	r3, [sp, #20]
 800303c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80030fc <_svfiprintf_r+0x1f0>
 8003040:	2203      	movs	r2, #3
 8003042:	4650      	mov	r0, sl
 8003044:	7821      	ldrb	r1, [r4, #0]
 8003046:	f000 f9f7 	bl	8003438 <memchr>
 800304a:	b140      	cbz	r0, 800305e <_svfiprintf_r+0x152>
 800304c:	2340      	movs	r3, #64	; 0x40
 800304e:	eba0 000a 	sub.w	r0, r0, sl
 8003052:	fa03 f000 	lsl.w	r0, r3, r0
 8003056:	9b04      	ldr	r3, [sp, #16]
 8003058:	3401      	adds	r4, #1
 800305a:	4303      	orrs	r3, r0
 800305c:	9304      	str	r3, [sp, #16]
 800305e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003062:	2206      	movs	r2, #6
 8003064:	4826      	ldr	r0, [pc, #152]	; (8003100 <_svfiprintf_r+0x1f4>)
 8003066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800306a:	f000 f9e5 	bl	8003438 <memchr>
 800306e:	2800      	cmp	r0, #0
 8003070:	d038      	beq.n	80030e4 <_svfiprintf_r+0x1d8>
 8003072:	4b24      	ldr	r3, [pc, #144]	; (8003104 <_svfiprintf_r+0x1f8>)
 8003074:	bb1b      	cbnz	r3, 80030be <_svfiprintf_r+0x1b2>
 8003076:	9b03      	ldr	r3, [sp, #12]
 8003078:	3307      	adds	r3, #7
 800307a:	f023 0307 	bic.w	r3, r3, #7
 800307e:	3308      	adds	r3, #8
 8003080:	9303      	str	r3, [sp, #12]
 8003082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003084:	4433      	add	r3, r6
 8003086:	9309      	str	r3, [sp, #36]	; 0x24
 8003088:	e767      	b.n	8002f5a <_svfiprintf_r+0x4e>
 800308a:	460c      	mov	r4, r1
 800308c:	2001      	movs	r0, #1
 800308e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003092:	e7a5      	b.n	8002fe0 <_svfiprintf_r+0xd4>
 8003094:	2300      	movs	r3, #0
 8003096:	f04f 0c0a 	mov.w	ip, #10
 800309a:	4619      	mov	r1, r3
 800309c:	3401      	adds	r4, #1
 800309e:	9305      	str	r3, [sp, #20]
 80030a0:	4620      	mov	r0, r4
 80030a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030a6:	3a30      	subs	r2, #48	; 0x30
 80030a8:	2a09      	cmp	r2, #9
 80030aa:	d903      	bls.n	80030b4 <_svfiprintf_r+0x1a8>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0c5      	beq.n	800303c <_svfiprintf_r+0x130>
 80030b0:	9105      	str	r1, [sp, #20]
 80030b2:	e7c3      	b.n	800303c <_svfiprintf_r+0x130>
 80030b4:	4604      	mov	r4, r0
 80030b6:	2301      	movs	r3, #1
 80030b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80030bc:	e7f0      	b.n	80030a0 <_svfiprintf_r+0x194>
 80030be:	ab03      	add	r3, sp, #12
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	462a      	mov	r2, r5
 80030c4:	4638      	mov	r0, r7
 80030c6:	4b10      	ldr	r3, [pc, #64]	; (8003108 <_svfiprintf_r+0x1fc>)
 80030c8:	a904      	add	r1, sp, #16
 80030ca:	f3af 8000 	nop.w
 80030ce:	1c42      	adds	r2, r0, #1
 80030d0:	4606      	mov	r6, r0
 80030d2:	d1d6      	bne.n	8003082 <_svfiprintf_r+0x176>
 80030d4:	89ab      	ldrh	r3, [r5, #12]
 80030d6:	065b      	lsls	r3, r3, #25
 80030d8:	f53f af2c 	bmi.w	8002f34 <_svfiprintf_r+0x28>
 80030dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030de:	b01d      	add	sp, #116	; 0x74
 80030e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030e4:	ab03      	add	r3, sp, #12
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	462a      	mov	r2, r5
 80030ea:	4638      	mov	r0, r7
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <_svfiprintf_r+0x1fc>)
 80030ee:	a904      	add	r1, sp, #16
 80030f0:	f000 f87c 	bl	80031ec <_printf_i>
 80030f4:	e7eb      	b.n	80030ce <_svfiprintf_r+0x1c2>
 80030f6:	bf00      	nop
 80030f8:	080036f4 	.word	0x080036f4
 80030fc:	080036fa 	.word	0x080036fa
 8003100:	080036fe 	.word	0x080036fe
 8003104:	00000000 	.word	0x00000000
 8003108:	08002e55 	.word	0x08002e55

0800310c <_printf_common>:
 800310c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003110:	4616      	mov	r6, r2
 8003112:	4699      	mov	r9, r3
 8003114:	688a      	ldr	r2, [r1, #8]
 8003116:	690b      	ldr	r3, [r1, #16]
 8003118:	4607      	mov	r7, r0
 800311a:	4293      	cmp	r3, r2
 800311c:	bfb8      	it	lt
 800311e:	4613      	movlt	r3, r2
 8003120:	6033      	str	r3, [r6, #0]
 8003122:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003126:	460c      	mov	r4, r1
 8003128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800312c:	b10a      	cbz	r2, 8003132 <_printf_common+0x26>
 800312e:	3301      	adds	r3, #1
 8003130:	6033      	str	r3, [r6, #0]
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	0699      	lsls	r1, r3, #26
 8003136:	bf42      	ittt	mi
 8003138:	6833      	ldrmi	r3, [r6, #0]
 800313a:	3302      	addmi	r3, #2
 800313c:	6033      	strmi	r3, [r6, #0]
 800313e:	6825      	ldr	r5, [r4, #0]
 8003140:	f015 0506 	ands.w	r5, r5, #6
 8003144:	d106      	bne.n	8003154 <_printf_common+0x48>
 8003146:	f104 0a19 	add.w	sl, r4, #25
 800314a:	68e3      	ldr	r3, [r4, #12]
 800314c:	6832      	ldr	r2, [r6, #0]
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	42ab      	cmp	r3, r5
 8003152:	dc28      	bgt.n	80031a6 <_printf_common+0x9a>
 8003154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003158:	1e13      	subs	r3, r2, #0
 800315a:	6822      	ldr	r2, [r4, #0]
 800315c:	bf18      	it	ne
 800315e:	2301      	movne	r3, #1
 8003160:	0692      	lsls	r2, r2, #26
 8003162:	d42d      	bmi.n	80031c0 <_printf_common+0xb4>
 8003164:	4649      	mov	r1, r9
 8003166:	4638      	mov	r0, r7
 8003168:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800316c:	47c0      	blx	r8
 800316e:	3001      	adds	r0, #1
 8003170:	d020      	beq.n	80031b4 <_printf_common+0xa8>
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	68e5      	ldr	r5, [r4, #12]
 8003176:	f003 0306 	and.w	r3, r3, #6
 800317a:	2b04      	cmp	r3, #4
 800317c:	bf18      	it	ne
 800317e:	2500      	movne	r5, #0
 8003180:	6832      	ldr	r2, [r6, #0]
 8003182:	f04f 0600 	mov.w	r6, #0
 8003186:	68a3      	ldr	r3, [r4, #8]
 8003188:	bf08      	it	eq
 800318a:	1aad      	subeq	r5, r5, r2
 800318c:	6922      	ldr	r2, [r4, #16]
 800318e:	bf08      	it	eq
 8003190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003194:	4293      	cmp	r3, r2
 8003196:	bfc4      	itt	gt
 8003198:	1a9b      	subgt	r3, r3, r2
 800319a:	18ed      	addgt	r5, r5, r3
 800319c:	341a      	adds	r4, #26
 800319e:	42b5      	cmp	r5, r6
 80031a0:	d11a      	bne.n	80031d8 <_printf_common+0xcc>
 80031a2:	2000      	movs	r0, #0
 80031a4:	e008      	b.n	80031b8 <_printf_common+0xac>
 80031a6:	2301      	movs	r3, #1
 80031a8:	4652      	mov	r2, sl
 80031aa:	4649      	mov	r1, r9
 80031ac:	4638      	mov	r0, r7
 80031ae:	47c0      	blx	r8
 80031b0:	3001      	adds	r0, #1
 80031b2:	d103      	bne.n	80031bc <_printf_common+0xb0>
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031bc:	3501      	adds	r5, #1
 80031be:	e7c4      	b.n	800314a <_printf_common+0x3e>
 80031c0:	2030      	movs	r0, #48	; 0x30
 80031c2:	18e1      	adds	r1, r4, r3
 80031c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031ce:	4422      	add	r2, r4
 80031d0:	3302      	adds	r3, #2
 80031d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031d6:	e7c5      	b.n	8003164 <_printf_common+0x58>
 80031d8:	2301      	movs	r3, #1
 80031da:	4622      	mov	r2, r4
 80031dc:	4649      	mov	r1, r9
 80031de:	4638      	mov	r0, r7
 80031e0:	47c0      	blx	r8
 80031e2:	3001      	adds	r0, #1
 80031e4:	d0e6      	beq.n	80031b4 <_printf_common+0xa8>
 80031e6:	3601      	adds	r6, #1
 80031e8:	e7d9      	b.n	800319e <_printf_common+0x92>
	...

080031ec <_printf_i>:
 80031ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031f0:	7e0f      	ldrb	r7, [r1, #24]
 80031f2:	4691      	mov	r9, r2
 80031f4:	2f78      	cmp	r7, #120	; 0x78
 80031f6:	4680      	mov	r8, r0
 80031f8:	460c      	mov	r4, r1
 80031fa:	469a      	mov	sl, r3
 80031fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003202:	d807      	bhi.n	8003214 <_printf_i+0x28>
 8003204:	2f62      	cmp	r7, #98	; 0x62
 8003206:	d80a      	bhi.n	800321e <_printf_i+0x32>
 8003208:	2f00      	cmp	r7, #0
 800320a:	f000 80d9 	beq.w	80033c0 <_printf_i+0x1d4>
 800320e:	2f58      	cmp	r7, #88	; 0x58
 8003210:	f000 80a4 	beq.w	800335c <_printf_i+0x170>
 8003214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003218:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800321c:	e03a      	b.n	8003294 <_printf_i+0xa8>
 800321e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003222:	2b15      	cmp	r3, #21
 8003224:	d8f6      	bhi.n	8003214 <_printf_i+0x28>
 8003226:	a101      	add	r1, pc, #4	; (adr r1, 800322c <_printf_i+0x40>)
 8003228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800322c:	08003285 	.word	0x08003285
 8003230:	08003299 	.word	0x08003299
 8003234:	08003215 	.word	0x08003215
 8003238:	08003215 	.word	0x08003215
 800323c:	08003215 	.word	0x08003215
 8003240:	08003215 	.word	0x08003215
 8003244:	08003299 	.word	0x08003299
 8003248:	08003215 	.word	0x08003215
 800324c:	08003215 	.word	0x08003215
 8003250:	08003215 	.word	0x08003215
 8003254:	08003215 	.word	0x08003215
 8003258:	080033a7 	.word	0x080033a7
 800325c:	080032c9 	.word	0x080032c9
 8003260:	08003389 	.word	0x08003389
 8003264:	08003215 	.word	0x08003215
 8003268:	08003215 	.word	0x08003215
 800326c:	080033c9 	.word	0x080033c9
 8003270:	08003215 	.word	0x08003215
 8003274:	080032c9 	.word	0x080032c9
 8003278:	08003215 	.word	0x08003215
 800327c:	08003215 	.word	0x08003215
 8003280:	08003391 	.word	0x08003391
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	1d1a      	adds	r2, r3, #4
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	602a      	str	r2, [r5, #0]
 800328c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003294:	2301      	movs	r3, #1
 8003296:	e0a4      	b.n	80033e2 <_printf_i+0x1f6>
 8003298:	6820      	ldr	r0, [r4, #0]
 800329a:	6829      	ldr	r1, [r5, #0]
 800329c:	0606      	lsls	r6, r0, #24
 800329e:	f101 0304 	add.w	r3, r1, #4
 80032a2:	d50a      	bpl.n	80032ba <_printf_i+0xce>
 80032a4:	680e      	ldr	r6, [r1, #0]
 80032a6:	602b      	str	r3, [r5, #0]
 80032a8:	2e00      	cmp	r6, #0
 80032aa:	da03      	bge.n	80032b4 <_printf_i+0xc8>
 80032ac:	232d      	movs	r3, #45	; 0x2d
 80032ae:	4276      	negs	r6, r6
 80032b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032b4:	230a      	movs	r3, #10
 80032b6:	485e      	ldr	r0, [pc, #376]	; (8003430 <_printf_i+0x244>)
 80032b8:	e019      	b.n	80032ee <_printf_i+0x102>
 80032ba:	680e      	ldr	r6, [r1, #0]
 80032bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032c0:	602b      	str	r3, [r5, #0]
 80032c2:	bf18      	it	ne
 80032c4:	b236      	sxthne	r6, r6
 80032c6:	e7ef      	b.n	80032a8 <_printf_i+0xbc>
 80032c8:	682b      	ldr	r3, [r5, #0]
 80032ca:	6820      	ldr	r0, [r4, #0]
 80032cc:	1d19      	adds	r1, r3, #4
 80032ce:	6029      	str	r1, [r5, #0]
 80032d0:	0601      	lsls	r1, r0, #24
 80032d2:	d501      	bpl.n	80032d8 <_printf_i+0xec>
 80032d4:	681e      	ldr	r6, [r3, #0]
 80032d6:	e002      	b.n	80032de <_printf_i+0xf2>
 80032d8:	0646      	lsls	r6, r0, #25
 80032da:	d5fb      	bpl.n	80032d4 <_printf_i+0xe8>
 80032dc:	881e      	ldrh	r6, [r3, #0]
 80032de:	2f6f      	cmp	r7, #111	; 0x6f
 80032e0:	bf0c      	ite	eq
 80032e2:	2308      	moveq	r3, #8
 80032e4:	230a      	movne	r3, #10
 80032e6:	4852      	ldr	r0, [pc, #328]	; (8003430 <_printf_i+0x244>)
 80032e8:	2100      	movs	r1, #0
 80032ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032ee:	6865      	ldr	r5, [r4, #4]
 80032f0:	2d00      	cmp	r5, #0
 80032f2:	bfa8      	it	ge
 80032f4:	6821      	ldrge	r1, [r4, #0]
 80032f6:	60a5      	str	r5, [r4, #8]
 80032f8:	bfa4      	itt	ge
 80032fa:	f021 0104 	bicge.w	r1, r1, #4
 80032fe:	6021      	strge	r1, [r4, #0]
 8003300:	b90e      	cbnz	r6, 8003306 <_printf_i+0x11a>
 8003302:	2d00      	cmp	r5, #0
 8003304:	d04d      	beq.n	80033a2 <_printf_i+0x1b6>
 8003306:	4615      	mov	r5, r2
 8003308:	fbb6 f1f3 	udiv	r1, r6, r3
 800330c:	fb03 6711 	mls	r7, r3, r1, r6
 8003310:	5dc7      	ldrb	r7, [r0, r7]
 8003312:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003316:	4637      	mov	r7, r6
 8003318:	42bb      	cmp	r3, r7
 800331a:	460e      	mov	r6, r1
 800331c:	d9f4      	bls.n	8003308 <_printf_i+0x11c>
 800331e:	2b08      	cmp	r3, #8
 8003320:	d10b      	bne.n	800333a <_printf_i+0x14e>
 8003322:	6823      	ldr	r3, [r4, #0]
 8003324:	07de      	lsls	r6, r3, #31
 8003326:	d508      	bpl.n	800333a <_printf_i+0x14e>
 8003328:	6923      	ldr	r3, [r4, #16]
 800332a:	6861      	ldr	r1, [r4, #4]
 800332c:	4299      	cmp	r1, r3
 800332e:	bfde      	ittt	le
 8003330:	2330      	movle	r3, #48	; 0x30
 8003332:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003336:	f105 35ff 	addle.w	r5, r5, #4294967295
 800333a:	1b52      	subs	r2, r2, r5
 800333c:	6122      	str	r2, [r4, #16]
 800333e:	464b      	mov	r3, r9
 8003340:	4621      	mov	r1, r4
 8003342:	4640      	mov	r0, r8
 8003344:	f8cd a000 	str.w	sl, [sp]
 8003348:	aa03      	add	r2, sp, #12
 800334a:	f7ff fedf 	bl	800310c <_printf_common>
 800334e:	3001      	adds	r0, #1
 8003350:	d14c      	bne.n	80033ec <_printf_i+0x200>
 8003352:	f04f 30ff 	mov.w	r0, #4294967295
 8003356:	b004      	add	sp, #16
 8003358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800335c:	4834      	ldr	r0, [pc, #208]	; (8003430 <_printf_i+0x244>)
 800335e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003362:	6829      	ldr	r1, [r5, #0]
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	f851 6b04 	ldr.w	r6, [r1], #4
 800336a:	6029      	str	r1, [r5, #0]
 800336c:	061d      	lsls	r5, r3, #24
 800336e:	d514      	bpl.n	800339a <_printf_i+0x1ae>
 8003370:	07df      	lsls	r7, r3, #31
 8003372:	bf44      	itt	mi
 8003374:	f043 0320 	orrmi.w	r3, r3, #32
 8003378:	6023      	strmi	r3, [r4, #0]
 800337a:	b91e      	cbnz	r6, 8003384 <_printf_i+0x198>
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	f023 0320 	bic.w	r3, r3, #32
 8003382:	6023      	str	r3, [r4, #0]
 8003384:	2310      	movs	r3, #16
 8003386:	e7af      	b.n	80032e8 <_printf_i+0xfc>
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	f043 0320 	orr.w	r3, r3, #32
 800338e:	6023      	str	r3, [r4, #0]
 8003390:	2378      	movs	r3, #120	; 0x78
 8003392:	4828      	ldr	r0, [pc, #160]	; (8003434 <_printf_i+0x248>)
 8003394:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003398:	e7e3      	b.n	8003362 <_printf_i+0x176>
 800339a:	0659      	lsls	r1, r3, #25
 800339c:	bf48      	it	mi
 800339e:	b2b6      	uxthmi	r6, r6
 80033a0:	e7e6      	b.n	8003370 <_printf_i+0x184>
 80033a2:	4615      	mov	r5, r2
 80033a4:	e7bb      	b.n	800331e <_printf_i+0x132>
 80033a6:	682b      	ldr	r3, [r5, #0]
 80033a8:	6826      	ldr	r6, [r4, #0]
 80033aa:	1d18      	adds	r0, r3, #4
 80033ac:	6961      	ldr	r1, [r4, #20]
 80033ae:	6028      	str	r0, [r5, #0]
 80033b0:	0635      	lsls	r5, r6, #24
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	d501      	bpl.n	80033ba <_printf_i+0x1ce>
 80033b6:	6019      	str	r1, [r3, #0]
 80033b8:	e002      	b.n	80033c0 <_printf_i+0x1d4>
 80033ba:	0670      	lsls	r0, r6, #25
 80033bc:	d5fb      	bpl.n	80033b6 <_printf_i+0x1ca>
 80033be:	8019      	strh	r1, [r3, #0]
 80033c0:	2300      	movs	r3, #0
 80033c2:	4615      	mov	r5, r2
 80033c4:	6123      	str	r3, [r4, #16]
 80033c6:	e7ba      	b.n	800333e <_printf_i+0x152>
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	2100      	movs	r1, #0
 80033cc:	1d1a      	adds	r2, r3, #4
 80033ce:	602a      	str	r2, [r5, #0]
 80033d0:	681d      	ldr	r5, [r3, #0]
 80033d2:	6862      	ldr	r2, [r4, #4]
 80033d4:	4628      	mov	r0, r5
 80033d6:	f000 f82f 	bl	8003438 <memchr>
 80033da:	b108      	cbz	r0, 80033e0 <_printf_i+0x1f4>
 80033dc:	1b40      	subs	r0, r0, r5
 80033de:	6060      	str	r0, [r4, #4]
 80033e0:	6863      	ldr	r3, [r4, #4]
 80033e2:	6123      	str	r3, [r4, #16]
 80033e4:	2300      	movs	r3, #0
 80033e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ea:	e7a8      	b.n	800333e <_printf_i+0x152>
 80033ec:	462a      	mov	r2, r5
 80033ee:	4649      	mov	r1, r9
 80033f0:	4640      	mov	r0, r8
 80033f2:	6923      	ldr	r3, [r4, #16]
 80033f4:	47d0      	blx	sl
 80033f6:	3001      	adds	r0, #1
 80033f8:	d0ab      	beq.n	8003352 <_printf_i+0x166>
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	079b      	lsls	r3, r3, #30
 80033fe:	d413      	bmi.n	8003428 <_printf_i+0x23c>
 8003400:	68e0      	ldr	r0, [r4, #12]
 8003402:	9b03      	ldr	r3, [sp, #12]
 8003404:	4298      	cmp	r0, r3
 8003406:	bfb8      	it	lt
 8003408:	4618      	movlt	r0, r3
 800340a:	e7a4      	b.n	8003356 <_printf_i+0x16a>
 800340c:	2301      	movs	r3, #1
 800340e:	4632      	mov	r2, r6
 8003410:	4649      	mov	r1, r9
 8003412:	4640      	mov	r0, r8
 8003414:	47d0      	blx	sl
 8003416:	3001      	adds	r0, #1
 8003418:	d09b      	beq.n	8003352 <_printf_i+0x166>
 800341a:	3501      	adds	r5, #1
 800341c:	68e3      	ldr	r3, [r4, #12]
 800341e:	9903      	ldr	r1, [sp, #12]
 8003420:	1a5b      	subs	r3, r3, r1
 8003422:	42ab      	cmp	r3, r5
 8003424:	dcf2      	bgt.n	800340c <_printf_i+0x220>
 8003426:	e7eb      	b.n	8003400 <_printf_i+0x214>
 8003428:	2500      	movs	r5, #0
 800342a:	f104 0619 	add.w	r6, r4, #25
 800342e:	e7f5      	b.n	800341c <_printf_i+0x230>
 8003430:	08003705 	.word	0x08003705
 8003434:	08003716 	.word	0x08003716

08003438 <memchr>:
 8003438:	4603      	mov	r3, r0
 800343a:	b510      	push	{r4, lr}
 800343c:	b2c9      	uxtb	r1, r1
 800343e:	4402      	add	r2, r0
 8003440:	4293      	cmp	r3, r2
 8003442:	4618      	mov	r0, r3
 8003444:	d101      	bne.n	800344a <memchr+0x12>
 8003446:	2000      	movs	r0, #0
 8003448:	e003      	b.n	8003452 <memchr+0x1a>
 800344a:	7804      	ldrb	r4, [r0, #0]
 800344c:	3301      	adds	r3, #1
 800344e:	428c      	cmp	r4, r1
 8003450:	d1f6      	bne.n	8003440 <memchr+0x8>
 8003452:	bd10      	pop	{r4, pc}

08003454 <memmove>:
 8003454:	4288      	cmp	r0, r1
 8003456:	b510      	push	{r4, lr}
 8003458:	eb01 0402 	add.w	r4, r1, r2
 800345c:	d902      	bls.n	8003464 <memmove+0x10>
 800345e:	4284      	cmp	r4, r0
 8003460:	4623      	mov	r3, r4
 8003462:	d807      	bhi.n	8003474 <memmove+0x20>
 8003464:	1e43      	subs	r3, r0, #1
 8003466:	42a1      	cmp	r1, r4
 8003468:	d008      	beq.n	800347c <memmove+0x28>
 800346a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800346e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003472:	e7f8      	b.n	8003466 <memmove+0x12>
 8003474:	4601      	mov	r1, r0
 8003476:	4402      	add	r2, r0
 8003478:	428a      	cmp	r2, r1
 800347a:	d100      	bne.n	800347e <memmove+0x2a>
 800347c:	bd10      	pop	{r4, pc}
 800347e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003482:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003486:	e7f7      	b.n	8003478 <memmove+0x24>

08003488 <_realloc_r>:
 8003488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800348c:	4680      	mov	r8, r0
 800348e:	4614      	mov	r4, r2
 8003490:	460e      	mov	r6, r1
 8003492:	b921      	cbnz	r1, 800349e <_realloc_r+0x16>
 8003494:	4611      	mov	r1, r2
 8003496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800349a:	f7ff bc2b 	b.w	8002cf4 <_malloc_r>
 800349e:	b92a      	cbnz	r2, 80034ac <_realloc_r+0x24>
 80034a0:	f7ff fbc0 	bl	8002c24 <_free_r>
 80034a4:	4625      	mov	r5, r4
 80034a6:	4628      	mov	r0, r5
 80034a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034ac:	f000 f81b 	bl	80034e6 <_malloc_usable_size_r>
 80034b0:	4284      	cmp	r4, r0
 80034b2:	4607      	mov	r7, r0
 80034b4:	d802      	bhi.n	80034bc <_realloc_r+0x34>
 80034b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80034ba:	d812      	bhi.n	80034e2 <_realloc_r+0x5a>
 80034bc:	4621      	mov	r1, r4
 80034be:	4640      	mov	r0, r8
 80034c0:	f7ff fc18 	bl	8002cf4 <_malloc_r>
 80034c4:	4605      	mov	r5, r0
 80034c6:	2800      	cmp	r0, #0
 80034c8:	d0ed      	beq.n	80034a6 <_realloc_r+0x1e>
 80034ca:	42bc      	cmp	r4, r7
 80034cc:	4622      	mov	r2, r4
 80034ce:	4631      	mov	r1, r6
 80034d0:	bf28      	it	cs
 80034d2:	463a      	movcs	r2, r7
 80034d4:	f7ff fb90 	bl	8002bf8 <memcpy>
 80034d8:	4631      	mov	r1, r6
 80034da:	4640      	mov	r0, r8
 80034dc:	f7ff fba2 	bl	8002c24 <_free_r>
 80034e0:	e7e1      	b.n	80034a6 <_realloc_r+0x1e>
 80034e2:	4635      	mov	r5, r6
 80034e4:	e7df      	b.n	80034a6 <_realloc_r+0x1e>

080034e6 <_malloc_usable_size_r>:
 80034e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034ea:	1f18      	subs	r0, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bfbc      	itt	lt
 80034f0:	580b      	ldrlt	r3, [r1, r0]
 80034f2:	18c0      	addlt	r0, r0, r3
 80034f4:	4770      	bx	lr
	...

080034f8 <_init>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	bf00      	nop
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr

08003504 <_fini>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	bf00      	nop
 8003508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350a:	bc08      	pop	{r3}
 800350c:	469e      	mov	lr, r3
 800350e:	4770      	bx	lr
